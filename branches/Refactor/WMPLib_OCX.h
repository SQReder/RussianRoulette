// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 06.12.2010 18:48:31 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\system32\wmp.dll (1)
// LIBID: {6BF52A50-394A-11D3-B153-00C04F79FAA6}
// LCID: 0
// Helpfile: 
// HelpString: Windows Media Player
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   WMPLib_OCXH
#define   WMPLib_OCXH

#pragma option push -b -a4 -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "WMPLib_TLB.h"
namespace Wmplib_tlb
{

// *********************************************************************//
// HelpString: Windows Media Player
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWindowsMediaPlayer
// Help String      : Windows Media Player ActiveX Control
// Default Interface: IWMPPlayer4
// Def. Intf. Object: IWMPPlayer4Disp
// Def. Intf. DISP? : No
// Event   Interface: _WMPOCXEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TWindowsMediaPlayerOpenStateChange)(System::TObject * Sender, 
                                                                         long NewState/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPlayStateChange)(System::TObject * Sender, 
                                                                         long NewState/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerAudioLanguageChange)(System::TObject * Sender, 
                                                                             long LangID/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerScriptCommand)(System::TObject * Sender, 
                                                                       BSTR scType/*[in]*/, 
                                                                       BSTR Param/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDisconnect)(System::TObject * Sender, 
                                                                    long Result/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerBuffering)(System::TObject * Sender, 
                                                                   VARIANT_BOOL Start/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerWarning)(System::TObject * Sender, 
                                                                 long WarningType/*[in]*/, 
                                                                 long Param/*[in]*/, 
                                                                 BSTR Description/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerEndOfStream)(System::TObject * Sender, 
                                                                     long Result/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPositionChange)(System::TObject * Sender, 
                                                                        double oldPosition/*[in]*/, 
                                                                        double newPosition/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMarkerHit)(System::TObject * Sender, 
                                                                   long MarkerNum/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDurationUnitChange)(System::TObject * Sender, 
                                                                            long NewDurationUnit/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromMediaChange)(System::TObject * Sender, 
                                                                          long CdromNum/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPlaylistChange)(System::TObject * Sender, 
                                                                        LPDISPATCH Playlist/*[in]*/, 
                                                                        Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCurrentPlaylistChange)(System::TObject * Sender, 
                                                                               Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCurrentPlaylistItemAvailable)(System::TObject * Sender, 
                                                                                      BSTR bstrItemName/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaChange)(System::TObject * Sender, 
                                                                     LPDISPATCH Item/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCurrentMediaItemAvailable)(System::TObject * Sender, 
                                                                                   BSTR bstrItemName/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCurrentItemChange)(System::TObject * Sender, 
                                                                           LPDISPATCH pdispMedia/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaCollectionAttributeStringAdded)(System::TObject * Sender, 
                                                                                             BSTR bstrAttribName/*[in]*/, 
                                                                                             BSTR bstrAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaCollectionAttributeStringRemoved)(System::TObject * Sender, 
                                                                                               BSTR bstrAttribName/*[in]*/, 
                                                                                               BSTR bstrAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaCollectionAttributeStringChanged)(System::TObject * Sender, 
                                                                                               BSTR bstrAttribName/*[in]*/, 
                                                                                               BSTR bstrOldAttribVal/*[in]*/, 
                                                                                               BSTR bstrNewAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPlaylistCollectionPlaylistAdded)(System::TObject * Sender, 
                                                                                         BSTR bstrPlaylistName/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPlaylistCollectionPlaylistRemoved)(System::TObject * Sender, 
                                                                                           BSTR bstrPlaylistName/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerPlaylistCollectionPlaylistSetAsDeleted)(System::TObject * Sender, 
                                                                                                BSTR bstrPlaylistName/*[in]*/, 
                                                                                                VARIANT_BOOL varfIsDeleted/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerModeChange)(System::TObject * Sender, 
                                                                    BSTR ModeName/*[in]*/, 
                                                                    VARIANT_BOOL NewValue/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaError)(System::TObject * Sender, 
                                                                    LPDISPATCH pMediaObject/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerOpenPlaylistSwitch)(System::TObject * Sender, 
                                                                            LPDISPATCH pItem/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDomainChange)(System::TObject * Sender, 
                                                                      BSTR strDomain/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayer_Click)(System::TObject * Sender, 
                                                                short nButton/*[in]*/, 
                                                                short nShiftState/*[in]*/, 
                                                                long fX/*[in]*/, long fY/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDoubleClick)(System::TObject * Sender, 
                                                                     short nButton/*[in]*/, 
                                                                     short nShiftState/*[in]*/, 
                                                                     long fX/*[in]*/, 
                                                                     long fY/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerKeyDown)(System::TObject * Sender, 
                                                                 short nKeyCode/*[in]*/, 
                                                                 short nShiftState/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerKeyPress)(System::TObject * Sender, 
                                                                  short nKeyAscii/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerKeyUp)(System::TObject * Sender, 
                                                               short nKeyCode/*[in]*/, 
                                                               short nShiftState/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMouseDown)(System::TObject * Sender, 
                                                                   short nButton/*[in]*/, 
                                                                   short nShiftState/*[in]*/, 
                                                                   long fX/*[in]*/, long fY/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMouseMove)(System::TObject * Sender, 
                                                                   short nButton/*[in]*/, 
                                                                   short nShiftState/*[in]*/, 
                                                                   long fX/*[in]*/, long fY/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMouseUp)(System::TObject * Sender, 
                                                                 short nButton/*[in]*/, 
                                                                 short nShiftState/*[in]*/, 
                                                                 long fX/*[in]*/, long fY/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDeviceConnect)(System::TObject * Sender, 
                                                                       Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDeviceDisconnect)(System::TObject * Sender, 
                                                                          Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDeviceStatusChange)(System::TObject * Sender, 
                                                                            Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                                            Wmplib_tlb::WMPDeviceStatus NewStatus/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDeviceSyncStateChange)(System::TObject * Sender, 
                                                                               Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                                               Wmplib_tlb::WMPSyncState NewState/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerDeviceSyncError)(System::TObject * Sender, 
                                                                         Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                                         LPDISPATCH pMedia/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCreatePartnershipComplete)(System::TObject * Sender, 
                                                                                   Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                                                   HRESULT hrResult/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromRipStateChange)(System::TObject * Sender, 
                                                                             Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                                             Wmplib_tlb::WMPRipState wmprs/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromRipMediaError)(System::TObject * Sender, 
                                                                            Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                                            LPDISPATCH pMedia/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromBurnStateChange)(System::TObject * Sender, 
                                                                              Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                                              Wmplib_tlb::WMPBurnState wmpbs/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromBurnMediaError)(System::TObject * Sender, 
                                                                             Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                                             LPDISPATCH pMedia/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerCdromBurnError)(System::TObject * Sender, 
                                                                        Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                                        HRESULT hrError/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerLibraryConnect)(System::TObject * Sender, 
                                                                        Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerLibraryDisconnect)(System::TObject * Sender, 
                                                                           Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerFolderScanStateChange)(System::TObject * Sender, 
                                                                               Wmplib_tlb::WMPFolderScanState wmpfss/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerStringCollectionChange)(System::TObject * Sender, 
                                                                                LPDISPATCH pdispStringCollection/*[in]*/, 
                                                                                Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/, 
                                                                                long lCollectionIndex/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaCollectionMediaAdded)(System::TObject * Sender, 
                                                                                   LPDISPATCH pdispMedia/*[in]*/);
typedef void __fastcall (__closure * TWindowsMediaPlayerMediaCollectionMediaRemoved)(System::TObject * Sender, 
                                                                                     LPDISPATCH pdispMedia/*[in]*/);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host Windows Media Player ActiveX Control in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TWindowsMediaPlayer : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TWindowsMediaPlayerOpenStateChange FOnOpenStateChange;
  TWindowsMediaPlayerPlayStateChange FOnPlayStateChange;
  TWindowsMediaPlayerAudioLanguageChange FOnAudioLanguageChange;
  TNotifyEvent                   FOnStatusChange;
  TWindowsMediaPlayerScriptCommand FOnScriptCommand;
  TNotifyEvent                   FOnNewStream;
  TWindowsMediaPlayerDisconnect  FOnDisconnect;
  TWindowsMediaPlayerBuffering   FOnBuffering;
  TNotifyEvent                   FOnError;
  TWindowsMediaPlayerWarning     FOnWarning;
  TWindowsMediaPlayerEndOfStream FOnEndOfStream;
  TWindowsMediaPlayerPositionChange FOnPositionChange;
  TWindowsMediaPlayerMarkerHit   FOnMarkerHit;
  TWindowsMediaPlayerDurationUnitChange FOnDurationUnitChange;
  TWindowsMediaPlayerCdromMediaChange FOnCdromMediaChange;
  TWindowsMediaPlayerPlaylistChange FOnPlaylistChange;
  TWindowsMediaPlayerCurrentPlaylistChange FOnCurrentPlaylistChange;
  TWindowsMediaPlayerCurrentPlaylistItemAvailable FOnCurrentPlaylistItemAvailable;
  TWindowsMediaPlayerMediaChange FOnMediaChange;
  TWindowsMediaPlayerCurrentMediaItemAvailable FOnCurrentMediaItemAvailable;
  TWindowsMediaPlayerCurrentItemChange FOnCurrentItemChange;
  TNotifyEvent                   FOnMediaCollectionChange;
  TWindowsMediaPlayerMediaCollectionAttributeStringAdded FOnMediaCollectionAttributeStringAdded;
  TWindowsMediaPlayerMediaCollectionAttributeStringRemoved FOnMediaCollectionAttributeStringRemoved;
  TWindowsMediaPlayerMediaCollectionAttributeStringChanged FOnMediaCollectionAttributeStringChanged;
  TNotifyEvent                   FOnPlaylistCollectionChange;
  TWindowsMediaPlayerPlaylistCollectionPlaylistAdded FOnPlaylistCollectionPlaylistAdded;
  TWindowsMediaPlayerPlaylistCollectionPlaylistRemoved FOnPlaylistCollectionPlaylistRemoved;
  TWindowsMediaPlayerPlaylistCollectionPlaylistSetAsDeleted FOnPlaylistCollectionPlaylistSetAsDeleted;
  TWindowsMediaPlayerModeChange  FOnModeChange;
  TWindowsMediaPlayerMediaError  FOnMediaError;
  TWindowsMediaPlayerOpenPlaylistSwitch FOnOpenPlaylistSwitch;
  TWindowsMediaPlayerDomainChange FOnDomainChange;
  TNotifyEvent                   FOnSwitchedToPlayerApplication;
  TNotifyEvent                   FOnSwitchedToControl;
  TNotifyEvent                   FOnPlayerDockedStateChange;
  TNotifyEvent                   FOnPlayerReconnect;
  TWindowsMediaPlayer_Click      FOn_Click;
  TWindowsMediaPlayerDoubleClick FOnDoubleClick;
  TWindowsMediaPlayerKeyDown     FOnKeyDown;
  TWindowsMediaPlayerKeyPress    FOnKeyPress;
  TWindowsMediaPlayerKeyUp       FOnKeyUp;
  TWindowsMediaPlayerMouseDown   FOnMouseDown;
  TWindowsMediaPlayerMouseMove   FOnMouseMove;
  TWindowsMediaPlayerMouseUp     FOnMouseUp;
  TWindowsMediaPlayerDeviceConnect FOnDeviceConnect;
  TWindowsMediaPlayerDeviceDisconnect FOnDeviceDisconnect;
  TWindowsMediaPlayerDeviceStatusChange FOnDeviceStatusChange;
  TWindowsMediaPlayerDeviceSyncStateChange FOnDeviceSyncStateChange;
  TWindowsMediaPlayerDeviceSyncError FOnDeviceSyncError;
  TWindowsMediaPlayerCreatePartnershipComplete FOnCreatePartnershipComplete;
  TWindowsMediaPlayerCdromRipStateChange FOnCdromRipStateChange;
  TWindowsMediaPlayerCdromRipMediaError FOnCdromRipMediaError;
  TWindowsMediaPlayerCdromBurnStateChange FOnCdromBurnStateChange;
  TWindowsMediaPlayerCdromBurnMediaError FOnCdromBurnMediaError;
  TWindowsMediaPlayerCdromBurnError FOnCdromBurnError;
  TWindowsMediaPlayerLibraryConnect FOnLibraryConnect;
  TWindowsMediaPlayerLibraryDisconnect FOnLibraryDisconnect;
  TWindowsMediaPlayerFolderScanStateChange FOnFolderScanStateChange;
  TWindowsMediaPlayerStringCollectionChange FOnStringCollectionChange;
  TWindowsMediaPlayerMediaCollectionMediaAdded FOnMediaCollectionMediaAdded;
  TWindowsMediaPlayerMediaCollectionMediaRemoved FOnMediaCollectionMediaRemoved;

  // Default Interace of OCX
  //
  IWMPPlayer4Disp m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  void            __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  void            __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall get_playerApplication(void);

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[62];
  static TControlData2 CControlData;
  static GUID          CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  IWMPPlayer4Disp __fastcall GetDefaultInterface();
  IWMPPlayer4Disp __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TWindowsMediaPlayer(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TWindowsMediaPlayer(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall close(void);
  void            __fastcall launchURL(BSTR bstrURL/*[in]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/);
  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/);
  void            __fastcall openPlayer(BSTR bstrURL/*[in]*/);

  // OCX properties
  //
  __property Activex::TOleEnum openState={ read=GetTOleEnumProp, index=2 };
  __property Activex::TOleEnum playState={ read=GetTOleEnumProp, index=10 };
  __property Wmplib_tlb::IWMPControlsPtr controls={ read=get_controls };
  __property Wmplib_tlb::IWMPSettingsPtr settings={ read=get_settings };
  __property Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection={ read=get_mediaCollection };
  __property Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection={ read=get_playlistCollection };
  __property System::WideString versionInfo={ read=GetWideStringProp, index=11 };
  __property Wmplib_tlb::IWMPNetworkPtr network={ read=get_network };
  __property Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection={ read=get_cdromCollection };
  __property Wmplib_tlb::IWMPClosedCaptionPtr closedCaption={ read=get_closedCaption };
  __property bool isOnline={ read=GetWordBoolProp, index=16 };
  __property Wmplib_tlb::IWMPErrorPtr Error={ read=get_Error };
  __property System::WideString status={ read=GetWideStringProp, index=18 };
  __property Wmplib_tlb::IWMPDVDPtr dvd={ read=get_dvd };
  __property bool isRemote={ read=GetWordBoolProp, index=26 };
  __property Wmplib_tlb::IWMPPlayerApplicationPtr playerApplication={ read=get_playerApplication };
  __property IWMPPlayer4Disp ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //
  __property TabStop;
  __property Align;
  __property DragCursor;
  __property DragMode;
  __property ParentShowHint;
  __property PopupMenu;
  __property ShowHint;
  __property TabOrder;
  __property Visible;
  __property OnDragDrop;
  __property OnDragOver;
  __property OnEndDrag;
  __property OnEnter;
  __property OnExit;
  __property OnStartDrag;

  // OCX properties
  //
  __property System::WideString URL={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1 };
public:  /* [!__published] */
  __property Wmplib_tlb::IWMPMediaPtr currentMedia={ read=get_currentMedia, write=set_currentMedia, stored=false };
__published:
public:  /* [!__published] */
  __property Wmplib_tlb::IWMPPlaylistPtr currentPlaylist={ read=get_currentPlaylist, write=set_currentPlaylist, stored=false };
__published:
  __property bool enabled={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=19 };
  __property bool fullScreen={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=21 };
  __property bool enableContextMenu={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=22 };
  __property System::WideString uiMode={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=23 };
  __property bool stretchToFit={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=24 };
  __property bool windowlessVideo={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=25 };

  // OCX Events
  //
  __property TWindowsMediaPlayerOpenStateChange OnOpenStateChange={ read=FOnOpenStateChange, write=FOnOpenStateChange };
  __property TWindowsMediaPlayerPlayStateChange OnPlayStateChange={ read=FOnPlayStateChange, write=FOnPlayStateChange };
  __property TWindowsMediaPlayerAudioLanguageChange OnAudioLanguageChange={ read=FOnAudioLanguageChange, write=FOnAudioLanguageChange };
  __property TNotifyEvent OnStatusChange={ read=FOnStatusChange, write=FOnStatusChange };
  __property TWindowsMediaPlayerScriptCommand OnScriptCommand={ read=FOnScriptCommand, write=FOnScriptCommand };
  __property TNotifyEvent OnNewStream={ read=FOnNewStream, write=FOnNewStream };
  __property TWindowsMediaPlayerDisconnect OnDisconnect={ read=FOnDisconnect, write=FOnDisconnect };
  __property TWindowsMediaPlayerBuffering OnBuffering={ read=FOnBuffering, write=FOnBuffering };
  __property TNotifyEvent OnError={ read=FOnError, write=FOnError };
  __property TWindowsMediaPlayerWarning OnWarning={ read=FOnWarning, write=FOnWarning };
  __property TWindowsMediaPlayerEndOfStream OnEndOfStream={ read=FOnEndOfStream, write=FOnEndOfStream };
  __property TWindowsMediaPlayerPositionChange OnPositionChange={ read=FOnPositionChange, write=FOnPositionChange };
  __property TWindowsMediaPlayerMarkerHit OnMarkerHit={ read=FOnMarkerHit, write=FOnMarkerHit };
  __property TWindowsMediaPlayerDurationUnitChange OnDurationUnitChange={ read=FOnDurationUnitChange, write=FOnDurationUnitChange };
  __property TWindowsMediaPlayerCdromMediaChange OnCdromMediaChange={ read=FOnCdromMediaChange, write=FOnCdromMediaChange };
  __property TWindowsMediaPlayerPlaylistChange OnPlaylistChange={ read=FOnPlaylistChange, write=FOnPlaylistChange };
  __property TWindowsMediaPlayerCurrentPlaylistChange OnCurrentPlaylistChange={ read=FOnCurrentPlaylistChange, write=FOnCurrentPlaylistChange };
  __property TWindowsMediaPlayerCurrentPlaylistItemAvailable OnCurrentPlaylistItemAvailable={ read=FOnCurrentPlaylistItemAvailable, write=FOnCurrentPlaylistItemAvailable };
  __property TWindowsMediaPlayerMediaChange OnMediaChange={ read=FOnMediaChange, write=FOnMediaChange };
  __property TWindowsMediaPlayerCurrentMediaItemAvailable OnCurrentMediaItemAvailable={ read=FOnCurrentMediaItemAvailable, write=FOnCurrentMediaItemAvailable };
  __property TWindowsMediaPlayerCurrentItemChange OnCurrentItemChange={ read=FOnCurrentItemChange, write=FOnCurrentItemChange };
  __property TNotifyEvent OnMediaCollectionChange={ read=FOnMediaCollectionChange, write=FOnMediaCollectionChange };
  __property TWindowsMediaPlayerMediaCollectionAttributeStringAdded OnMediaCollectionAttributeStringAdded={ read=FOnMediaCollectionAttributeStringAdded, write=FOnMediaCollectionAttributeStringAdded };
  __property TWindowsMediaPlayerMediaCollectionAttributeStringRemoved OnMediaCollectionAttributeStringRemoved={ read=FOnMediaCollectionAttributeStringRemoved, write=FOnMediaCollectionAttributeStringRemoved };
  __property TWindowsMediaPlayerMediaCollectionAttributeStringChanged OnMediaCollectionAttributeStringChanged={ read=FOnMediaCollectionAttributeStringChanged, write=FOnMediaCollectionAttributeStringChanged };
  __property TNotifyEvent OnPlaylistCollectionChange={ read=FOnPlaylistCollectionChange, write=FOnPlaylistCollectionChange };
  __property TWindowsMediaPlayerPlaylistCollectionPlaylistAdded OnPlaylistCollectionPlaylistAdded={ read=FOnPlaylistCollectionPlaylistAdded, write=FOnPlaylistCollectionPlaylistAdded };
  __property TWindowsMediaPlayerPlaylistCollectionPlaylistRemoved OnPlaylistCollectionPlaylistRemoved={ read=FOnPlaylistCollectionPlaylistRemoved, write=FOnPlaylistCollectionPlaylistRemoved };
  __property TWindowsMediaPlayerPlaylistCollectionPlaylistSetAsDeleted OnPlaylistCollectionPlaylistSetAsDeleted={ read=FOnPlaylistCollectionPlaylistSetAsDeleted, write=FOnPlaylistCollectionPlaylistSetAsDeleted };
  __property TWindowsMediaPlayerModeChange OnModeChange={ read=FOnModeChange, write=FOnModeChange };
  __property TWindowsMediaPlayerMediaError OnMediaError={ read=FOnMediaError, write=FOnMediaError };
  __property TWindowsMediaPlayerOpenPlaylistSwitch OnOpenPlaylistSwitch={ read=FOnOpenPlaylistSwitch, write=FOnOpenPlaylistSwitch };
  __property TWindowsMediaPlayerDomainChange OnDomainChange={ read=FOnDomainChange, write=FOnDomainChange };
  __property TNotifyEvent OnSwitchedToPlayerApplication={ read=FOnSwitchedToPlayerApplication, write=FOnSwitchedToPlayerApplication };
  __property TNotifyEvent OnSwitchedToControl={ read=FOnSwitchedToControl, write=FOnSwitchedToControl };
  __property TNotifyEvent OnPlayerDockedStateChange={ read=FOnPlayerDockedStateChange, write=FOnPlayerDockedStateChange };
  __property TNotifyEvent OnPlayerReconnect={ read=FOnPlayerReconnect, write=FOnPlayerReconnect };
  __property TWindowsMediaPlayer_Click On_Click={ read=FOn_Click, write=FOn_Click };
  __property TWindowsMediaPlayerDoubleClick OnDoubleClick={ read=FOnDoubleClick, write=FOnDoubleClick };
  __property TWindowsMediaPlayerKeyDown OnKeyDown={ read=FOnKeyDown, write=FOnKeyDown };
  __property TWindowsMediaPlayerKeyPress OnKeyPress={ read=FOnKeyPress, write=FOnKeyPress };
  __property TWindowsMediaPlayerKeyUp OnKeyUp={ read=FOnKeyUp, write=FOnKeyUp };
  __property TWindowsMediaPlayerMouseDown OnMouseDown={ read=FOnMouseDown, write=FOnMouseDown };
  __property TWindowsMediaPlayerMouseMove OnMouseMove={ read=FOnMouseMove, write=FOnMouseMove };
  __property TWindowsMediaPlayerMouseUp OnMouseUp={ read=FOnMouseUp, write=FOnMouseUp };
  __property TWindowsMediaPlayerDeviceConnect OnDeviceConnect={ read=FOnDeviceConnect, write=FOnDeviceConnect };
  __property TWindowsMediaPlayerDeviceDisconnect OnDeviceDisconnect={ read=FOnDeviceDisconnect, write=FOnDeviceDisconnect };
  __property TWindowsMediaPlayerDeviceStatusChange OnDeviceStatusChange={ read=FOnDeviceStatusChange, write=FOnDeviceStatusChange };
  __property TWindowsMediaPlayerDeviceSyncStateChange OnDeviceSyncStateChange={ read=FOnDeviceSyncStateChange, write=FOnDeviceSyncStateChange };
  __property TWindowsMediaPlayerDeviceSyncError OnDeviceSyncError={ read=FOnDeviceSyncError, write=FOnDeviceSyncError };
  __property TWindowsMediaPlayerCreatePartnershipComplete OnCreatePartnershipComplete={ read=FOnCreatePartnershipComplete, write=FOnCreatePartnershipComplete };
  __property TWindowsMediaPlayerCdromRipStateChange OnCdromRipStateChange={ read=FOnCdromRipStateChange, write=FOnCdromRipStateChange };
  __property TWindowsMediaPlayerCdromRipMediaError OnCdromRipMediaError={ read=FOnCdromRipMediaError, write=FOnCdromRipMediaError };
  __property TWindowsMediaPlayerCdromBurnStateChange OnCdromBurnStateChange={ read=FOnCdromBurnStateChange, write=FOnCdromBurnStateChange };
  __property TWindowsMediaPlayerCdromBurnMediaError OnCdromBurnMediaError={ read=FOnCdromBurnMediaError, write=FOnCdromBurnMediaError };
  __property TWindowsMediaPlayerCdromBurnError OnCdromBurnError={ read=FOnCdromBurnError, write=FOnCdromBurnError };
  __property TWindowsMediaPlayerLibraryConnect OnLibraryConnect={ read=FOnLibraryConnect, write=FOnLibraryConnect };
  __property TWindowsMediaPlayerLibraryDisconnect OnLibraryDisconnect={ read=FOnLibraryDisconnect, write=FOnLibraryDisconnect };
  __property TWindowsMediaPlayerFolderScanStateChange OnFolderScanStateChange={ read=FOnFolderScanStateChange, write=FOnFolderScanStateChange };
  __property TWindowsMediaPlayerStringCollectionChange OnStringCollectionChange={ read=FOnStringCollectionChange, write=FOnStringCollectionChange };
  __property TWindowsMediaPlayerMediaCollectionMediaAdded OnMediaCollectionMediaAdded={ read=FOnMediaCollectionMediaAdded, write=FOnMediaCollectionMediaAdded };
  __property TWindowsMediaPlayerMediaCollectionMediaRemoved OnMediaCollectionMediaRemoved={ read=FOnMediaCollectionMediaRemoved, write=FOnMediaCollectionMediaRemoved };
};
typedef TWindowsMediaPlayer  TWindowsMediaPlayerProxy;


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPButtonCtrl
// Help String      : WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPButtonCtrl
// Def. Intf. Object: IWMPButtonCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: IWMPButtonCtrlEvents
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPButtonCtrl : public Oleserver::TOleServer
{
  IWMPButtonCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPButtonCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPButtonCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPButtonCtrlPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_image(void);
  void            __fastcall set_image(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverImage(void);
  void            __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_downImage(void);
  void            __fastcall set_downImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledImage(void);
  void            __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  void            __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  void            __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_transparencyColor(void);
  void            __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  void            __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  void            __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_upToolTip(void);
  void            __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_downToolTip(void);
  void            __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  __property BSTR image={ read=get_image, write=set_image, stored=false };
  __property BSTR hoverImage={ read=get_hoverImage, write=set_hoverImage, stored=false };
  __property BSTR downImage={ read=get_downImage, write=set_downImage, stored=false };
  __property BSTR disabledImage={ read=get_disabledImage, write=set_disabledImage, stored=false };
  __property BSTR hoverDownImage={ read=get_hoverDownImage, write=set_hoverDownImage, stored=false };
  __property VARIANT_BOOL tiled={ read=get_tiled, write=set_tiled, stored=false };
  __property BSTR transparencyColor={ read=get_transparencyColor, write=set_transparencyColor, stored=false };
  __property VARIANT_BOOL down={ read=get_down, write=set_down, stored=false };
  __property VARIANT_BOOL sticky={ read=get_sticky, write=set_sticky, stored=false };
  __property BSTR upToolTip={ read=get_upToolTip, write=set_upToolTip, stored=false };
  __property BSTR downToolTip={ read=get_downToolTip, write=set_downToolTip, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
private:
  TNotifyEvent                   FOnonclick;
__published:
  __property TNotifyEvent Ononclick={ read=FOnonclick, write=FOnonclick };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPListBoxCtrl
// Help String      : WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPListBoxCtrl
// Def. Intf. Object: IWMPListBoxCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPListBoxCtrl : public Oleserver::TOleServer
{
  IWMPListBoxCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPListBoxCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPListBoxCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPListBoxCtrlPtr intf);


  long            __fastcall get_selectedItem(void);
  void            __fastcall set_selectedItem(long pnPos/*[in]*/);
  VARIANT_BOOL    __fastcall get_sorted(void);
  void            __fastcall set_sorted(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_multiselect(void);
  void            __fastcall set_multiselect(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  void            __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  long            __fastcall get_fontSize(void);
  void            __fastcall set_fontSize(long pVal/*[in]*/);
  BSTR            __fastcall get_fontStyle(void);
  void            __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_fontFace(void);
  void            __fastcall set_fontFace(BSTR pVal/*[in]*/);
  long            __fastcall get_itemCount(void);
  long            __fastcall get_firstVisibleItem(void);
  void            __fastcall set_firstVisibleItem(long pVal/*[in]*/);
  void            __fastcall set_popUp(VARIANT_BOOL Param1/*[in]*/);
  long            __fastcall get_focusItem(void);
  void            __fastcall set_focusItem(long pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  void            __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall getItem(long nPos/*[in]*/);
  void            __fastcall insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  void            __fastcall appendItem(BSTR newVal/*[in]*/);
  void            __fastcall replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  void            __fastcall deleteItem(long nPos/*[in]*/);
  void            __fastcall deleteAll(void);
  long            __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  void            __fastcall setSelectedState(long nPos/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  void            __fastcall show(void);
  void            __fastcall dismiss(void);
  __property long itemCount={ read=get_itemCount };
  __property VARIANT_BOOL popUp={ write=set_popUp };
  __property long selectedItem={ read=get_selectedItem, write=set_selectedItem, stored=false };
  __property VARIANT_BOOL sorted={ read=get_sorted, write=set_sorted, stored=false };
  __property VARIANT_BOOL multiselect={ read=get_multiselect, write=set_multiselect, stored=false };
  __property VARIANT_BOOL readOnly={ read=get_readOnly, write=set_readOnly, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property long fontSize={ read=get_fontSize, write=set_fontSize, stored=false };
  __property BSTR fontStyle={ read=get_fontStyle, write=set_fontStyle, stored=false };
  __property BSTR fontFace={ read=get_fontFace, write=set_fontFace, stored=false };
  __property long firstVisibleItem={ read=get_firstVisibleItem, write=set_firstVisibleItem, stored=false };
  __property long focusItem={ read=get_focusItem, write=set_focusItem, stored=false };
  __property VARIANT_BOOL border={ read=get_border, write=set_border, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPSliderCtrl
// Help String      : WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPSliderCtrl
// Def. Intf. Object: IWMPSliderCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: IWMPSliderCtrlEvents
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPSliderCtrl : public Oleserver::TOleServer
{
  IWMPSliderCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPSliderCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPSliderCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPSliderCtrlPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_direction(void);
  void            __fastcall set_direction(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_slide(void);
  void            __fastcall set_slide(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  void            __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_foregroundEndColor(void);
  void            __fastcall set_foregroundEndColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundEndColor(void);
  void            __fastcall set_backgroundEndColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledColor(void);
  void            __fastcall set_disabledColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_transparencyColor(void);
  void            __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_foregroundImage(void);
  void            __fastcall set_foregroundImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundImage(void);
  void            __fastcall set_backgroundImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundHoverImage(void);
  void            __fastcall set_backgroundHoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledImage(void);
  void            __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_thumbImage(void);
  void            __fastcall set_thumbImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_thumbHoverImage(void);
  void            __fastcall set_thumbHoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_thumbDownImage(void);
  void            __fastcall set_thumbDownImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_thumbDisabledImage(void);
  void            __fastcall set_thumbDisabledImage(BSTR pVal/*[in]*/);
  float           __fastcall get_min(void);
  void            __fastcall set_min(float pVal/*[in]*/);
  float           __fastcall get_max(void);
  void            __fastcall set_max(float pVal/*[in]*/);
  float           __fastcall get_value(void);
  void            __fastcall set_value(float pVal/*[in]*/);
  BSTR            __fastcall get_toolTip(void);
  void            __fastcall set_toolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  int             __fastcall get_borderSize(void);
  void            __fastcall set_borderSize(int pVal/*[in]*/);
  BSTR            __fastcall get_foregroundHoverImage(void);
  void            __fastcall set_foregroundHoverImage(BSTR pVal/*[in]*/);
  float           __fastcall get_foregroundProgress(void);
  void            __fastcall set_foregroundProgress(float pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_useForegroundProgress(void);
  void            __fastcall set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/);
  __property BSTR direction={ read=get_direction, write=set_direction, stored=false };
  __property VARIANT_BOOL slide={ read=get_slide, write=set_slide, stored=false };
  __property VARIANT_BOOL tiled={ read=get_tiled, write=set_tiled, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR foregroundEndColor={ read=get_foregroundEndColor, write=set_foregroundEndColor, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property BSTR backgroundEndColor={ read=get_backgroundEndColor, write=set_backgroundEndColor, stored=false };
  __property BSTR disabledColor={ read=get_disabledColor, write=set_disabledColor, stored=false };
  __property BSTR transparencyColor={ read=get_transparencyColor, write=set_transparencyColor, stored=false };
  __property BSTR foregroundImage={ read=get_foregroundImage, write=set_foregroundImage, stored=false };
  __property BSTR backgroundImage={ read=get_backgroundImage, write=set_backgroundImage, stored=false };
  __property BSTR backgroundHoverImage={ read=get_backgroundHoverImage, write=set_backgroundHoverImage, stored=false };
  __property BSTR disabledImage={ read=get_disabledImage, write=set_disabledImage, stored=false };
  __property BSTR thumbImage={ read=get_thumbImage, write=set_thumbImage, stored=false };
  __property BSTR thumbHoverImage={ read=get_thumbHoverImage, write=set_thumbHoverImage, stored=false };
  __property BSTR thumbDownImage={ read=get_thumbDownImage, write=set_thumbDownImage, stored=false };
  __property BSTR thumbDisabledImage={ read=get_thumbDisabledImage, write=set_thumbDisabledImage, stored=false };
  __property float min={ read=get_min, write=set_min, stored=false };
  __property float max={ read=get_max, write=set_max, stored=false };
  __property float value={ read=get_value, write=set_value, stored=false };
  __property BSTR toolTip={ read=get_toolTip, write=set_toolTip, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property int borderSize={ read=get_borderSize, write=set_borderSize, stored=false };
  __property BSTR foregroundHoverImage={ read=get_foregroundHoverImage, write=set_foregroundHoverImage, stored=false };
  __property float foregroundProgress={ read=get_foregroundProgress, write=set_foregroundProgress, stored=false };
  __property VARIANT_BOOL useForegroundProgress={ read=get_useForegroundProgress, write=set_useForegroundProgress, stored=false };
private:
  TNotifyEvent                   FOnondragbegin;
  TNotifyEvent                   FOnondragend;
  TNotifyEvent                   FOnonpositionchange;
__published:
  __property TNotifyEvent Onondragbegin={ read=FOnondragbegin, write=FOnondragbegin };
  __property TNotifyEvent Onondragend={ read=FOnondragend, write=FOnondragend };
  __property TNotifyEvent Ononpositionchange={ read=FOnonpositionchange, write=FOnonpositionchange };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPVideoCtrl
// Help String      : WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPVideoCtrl
// Def. Intf. Object: IWMPVideoCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: IWMPVideoCtrlEvents
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPVideoCtrl : public Oleserver::TOleServer
{
  IWMPVideoCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPVideoCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPVideoCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPVideoCtrlPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  void            __fastcall set_windowless(VARIANT_BOOL pbClipped/*[in]*/);
  VARIANT_BOOL    __fastcall get_windowless(void);
  void            __fastcall set_cursor(BSTR pbstrCursor/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/);
  VARIANT_BOOL    __fastcall get_maintainAspectRatio(void);
  void            __fastcall set_toolTip(BSTR bstrToolTip/*[in]*/);
  BSTR            __fastcall get_toolTip(void);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  void            __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  void            __fastcall set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/);
  VARIANT_BOOL    __fastcall get_shrinkToFit(void);
  void            __fastcall set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  void            __fastcall set_zoom(long pzoom/*[in]*/);
  long            __fastcall get_zoom(void);
  __property VARIANT_BOOL windowless={ read=get_windowless, write=set_windowless, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property VARIANT_BOOL maintainAspectRatio={ read=get_maintainAspectRatio, write=set_maintainAspectRatio, stored=false };
  __property BSTR toolTip={ read=get_toolTip, write=set_toolTip, stored=false };
  __property VARIANT_BOOL fullScreen={ read=get_fullScreen, write=set_fullScreen, stored=false };
  __property VARIANT_BOOL shrinkToFit={ read=get_shrinkToFit, write=set_shrinkToFit, stored=false };
  __property VARIANT_BOOL stretchToFit={ read=get_stretchToFit, write=set_stretchToFit, stored=false };
  __property long zoom={ read=get_zoom, write=set_zoom, stored=false };
private:
  TNotifyEvent                   FOnonvideostart;
  TNotifyEvent                   FOnonvideoend;
__published:
  __property TNotifyEvent Ononvideostart={ read=FOnonvideostart, write=FOnonvideostart };
  __property TNotifyEvent Ononvideoend={ read=FOnonvideoend, write=FOnonvideoend };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPEffects
// Help String      : WMPEffects: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPEffectsCtrl
// Def. Intf. Object: IWMPEffectsCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPEffects : public Oleserver::TOleServer
{
  IWMPEffectsCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPEffects(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPEffectsCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPEffectsCtrlPtr intf);


  VARIANT_BOOL    __fastcall get_windowed(void);
  void            __fastcall set_windowed(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_allowAll(void);
  void            __fastcall set_allowAll(VARIANT_BOOL pVal/*[in]*/);
  void            __fastcall set_currentEffectType(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_currentEffectType(void);
  BSTR            __fastcall get_currentEffectTitle(void);
  LPDISPATCH      __fastcall get_currentEffect(void);
  void            __fastcall set_currentEffect(LPDISPATCH p/*[in]*/);
  long            __fastcall get_currentPreset(void);
  void            __fastcall set_currentPreset(long pVal/*[in]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  long            __fastcall get_currentEffectPresetCount(void);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  void            __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  VARIANT_BOOL    __fastcall get_effectCanGoFullScreen(void);
  VARIANT_BOOL    __fastcall get_effectHasPropertyPage(void);
  long            __fastcall get_effectCount(void);
  BSTR            __fastcall get_effectTitle(long index/*[in]*/);
  BSTR            __fastcall get_effectType(long index/*[in]*/);
  void            __fastcall next(void);
  void            __fastcall previous(void);
  void            __fastcall settings(void);
  void            __fastcall nextEffect(void);
  void            __fastcall previousEffect(void);
  void            __fastcall nextPreset(void);
  void            __fastcall previousPreset(void);
  __property BSTR currentEffectTitle={ read=get_currentEffectTitle };
  __property LPDISPATCH currentEffect={ read=get_currentEffect, write=set_currentEffect };
  __property BSTR currentPresetTitle={ read=get_currentPresetTitle };
  __property long currentEffectPresetCount={ read=get_currentEffectPresetCount };
  __property VARIANT_BOOL effectCanGoFullScreen={ read=get_effectCanGoFullScreen };
  __property VARIANT_BOOL effectHasPropertyPage={ read=get_effectHasPropertyPage };
  __property long effectCount={ read=get_effectCount };
  __property BSTR effectTitle[long index]={ read=get_effectTitle };
  __property BSTR effectType[long index]={ read=get_effectType };
  __property VARIANT_BOOL windowed={ read=get_windowed, write=set_windowed, stored=false };
  __property VARIANT_BOOL allowAll={ read=get_allowAll, write=set_allowAll, stored=false };
  __property BSTR currentEffectType={ read=get_currentEffectType, write=set_currentEffectType, stored=false };
  __property long currentPreset={ read=get_currentPreset, write=set_currentPreset, stored=false };
  __property VARIANT_BOOL fullScreen={ read=get_fullScreen, write=set_fullScreen, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPEqualizerSettingsCtrl
// Help String      : WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPEqualizerSettingsCtrl
// Def. Intf. Object: IWMPEqualizerSettingsCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPEqualizerSettingsCtrl : public Oleserver::TOleServer
{
  IWMPEqualizerSettingsCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPEqualizerSettingsCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPEqualizerSettingsCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPEqualizerSettingsCtrlPtr intf);


  VARIANT_BOOL    __fastcall get_bypass(void);
  void            __fastcall set_bypass(VARIANT_BOOL pVal/*[in]*/);
  float           __fastcall get_gainLevel1(void);
  void            __fastcall set_gainLevel1(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel2(void);
  void            __fastcall set_gainLevel2(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel3(void);
  void            __fastcall set_gainLevel3(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel4(void);
  void            __fastcall set_gainLevel4(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel5(void);
  void            __fastcall set_gainLevel5(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel6(void);
  void            __fastcall set_gainLevel6(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel7(void);
  void            __fastcall set_gainLevel7(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel8(void);
  void            __fastcall set_gainLevel8(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel9(void);
  void            __fastcall set_gainLevel9(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevel10(void);
  void            __fastcall set_gainLevel10(float pflLevel/*[in]*/);
  float           __fastcall get_gainLevels(long iIndex/*[in]*/);
  void            __fastcall set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/);
  long            __fastcall get_bands(void);
  long            __fastcall get_currentPreset(void);
  void            __fastcall set_currentPreset(long pVal/*[in]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  long            __fastcall get_presetCount(void);
  VARIANT_BOOL    __fastcall get_enhancedAudio(void);
  void            __fastcall set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/);
  long            __fastcall get_speakerSize(void);
  void            __fastcall set_speakerSize(long plVal/*[in]*/);
  BSTR            __fastcall get_currentSpeakerName(void);
  long            __fastcall get_truBassLevel(void);
  void            __fastcall set_truBassLevel(long plTruBassLevel/*[in]*/);
  long            __fastcall get_wowLevel(void);
  void            __fastcall set_wowLevel(long plWowLevel/*[in]*/);
  float           __fastcall get_splineTension(void);
  void            __fastcall set_splineTension(float pflSplineTension/*[in]*/);
  VARIANT_BOOL    __fastcall get_enableSplineTension(void);
  void            __fastcall set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/);
  BSTR            __fastcall get_presetTitle(long iIndex/*[in]*/);
  VARIANT_BOOL    __fastcall get_normalization(void);
  void            __fastcall set_normalization(VARIANT_BOOL pfVal/*[in]*/);
  float           __fastcall get_normalizationAverage(void);
  float           __fastcall get_normalizationPeak(void);
  VARIANT_BOOL    __fastcall get_crossFade(void);
  void            __fastcall set_crossFade(VARIANT_BOOL pfVal/*[in]*/);
  long            __fastcall get_crossFadeWindow(void);
  void            __fastcall set_crossFadeWindow(long plWindow/*[in]*/);
  void            __fastcall reset(void);
  void            __fastcall nextPreset(void);
  void            __fastcall previousPreset(void);
  __property float gainLevels[long iIndex]={ read=get_gainLevels, write=set_gainLevels };
  __property long bands={ read=get_bands };
  __property BSTR currentPresetTitle={ read=get_currentPresetTitle };
  __property long presetCount={ read=get_presetCount };
  __property BSTR currentSpeakerName={ read=get_currentSpeakerName };
  __property BSTR presetTitle[long iIndex]={ read=get_presetTitle };
  __property float normalizationAverage={ read=get_normalizationAverage };
  __property float normalizationPeak={ read=get_normalizationPeak };
  __property VARIANT_BOOL bypass={ read=get_bypass, write=set_bypass, stored=false };
  __property float gainLevel1={ read=get_gainLevel1, write=set_gainLevel1, stored=false };
  __property float gainLevel2={ read=get_gainLevel2, write=set_gainLevel2, stored=false };
  __property float gainLevel3={ read=get_gainLevel3, write=set_gainLevel3, stored=false };
  __property float gainLevel4={ read=get_gainLevel4, write=set_gainLevel4, stored=false };
  __property float gainLevel5={ read=get_gainLevel5, write=set_gainLevel5, stored=false };
  __property float gainLevel6={ read=get_gainLevel6, write=set_gainLevel6, stored=false };
  __property float gainLevel7={ read=get_gainLevel7, write=set_gainLevel7, stored=false };
  __property float gainLevel8={ read=get_gainLevel8, write=set_gainLevel8, stored=false };
  __property float gainLevel9={ read=get_gainLevel9, write=set_gainLevel9, stored=false };
  __property float gainLevel10={ read=get_gainLevel10, write=set_gainLevel10, stored=false };
  __property long currentPreset={ read=get_currentPreset, write=set_currentPreset, stored=false };
  __property VARIANT_BOOL enhancedAudio={ read=get_enhancedAudio, write=set_enhancedAudio, stored=false };
  __property long speakerSize={ read=get_speakerSize, write=set_speakerSize, stored=false };
  __property long truBassLevel={ read=get_truBassLevel, write=set_truBassLevel, stored=false };
  __property long wowLevel={ read=get_wowLevel, write=set_wowLevel, stored=false };
  __property float splineTension={ read=get_splineTension, write=set_splineTension, stored=false };
  __property VARIANT_BOOL enableSplineTension={ read=get_enableSplineTension, write=set_enableSplineTension, stored=false };
  __property VARIANT_BOOL normalization={ read=get_normalization, write=set_normalization, stored=false };
  __property VARIANT_BOOL crossFade={ read=get_crossFade, write=set_crossFade, stored=false };
  __property long crossFadeWindow={ read=get_crossFadeWindow, write=set_crossFadeWindow, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPVideoSettingsCtrl
// Help String      : WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPVideoSettingsCtrl
// Def. Intf. Object: IWMPVideoSettingsCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPVideoSettingsCtrl : public Oleserver::TOleServer
{
  IWMPVideoSettingsCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPVideoSettingsCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPVideoSettingsCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPVideoSettingsCtrlPtr intf);


  long            __fastcall get_brightness(void);
  void            __fastcall set_brightness(long pVal/*[in]*/);
  long            __fastcall get_contrast(void);
  void            __fastcall set_contrast(long pVal/*[in]*/);
  long            __fastcall get_hue(void);
  void            __fastcall set_hue(long pVal/*[in]*/);
  long            __fastcall get_saturation(void);
  void            __fastcall set_saturation(long pVal/*[in]*/);
  void            __fastcall reset(void);
  __property long brightness={ read=get_brightness, write=set_brightness, stored=false };
  __property long contrast={ read=get_contrast, write=set_contrast, stored=false };
  __property long hue={ read=get_hue, write=set_hue, stored=false };
  __property long saturation={ read=get_saturation, write=set_saturation, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPLibraryTreeCtrl
// Help String      : WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPLibraryTreeCtrl
// Def. Intf. Object: IWMPLibraryTreeCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPLibraryTreeCtrl : public Oleserver::TOleServer
{
  IWMPLibraryTreeCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPLibraryTreeCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPLibraryTreeCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPLibraryTreeCtrlPtr intf);


  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  void            __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  long            __fastcall get_fontSize(void);
  void            __fastcall set_fontSize(long pVal/*[in]*/);
  BSTR            __fastcall get_fontStyle(void);
  void            __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_fontFace(void);
  void            __fastcall set_fontFace(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_filter(void);
  void            __fastcall set_filter(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_expandState(void);
  void            __fastcall set_expandState(BSTR pVal/*[in]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  void            __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_selectedPlaylist(void);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_selectedMedia(void);
  __property Wmplib_tlb::IWMPPlaylistPtr selectedPlaylist={ read=get_selectedPlaylist };
  __property Wmplib_tlb::IWMPMediaPtr selectedMedia={ read=get_selectedMedia };
  __property VARIANT_BOOL dropDownVisible={ read=get_dropDownVisible, write=set_dropDownVisible, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property long fontSize={ read=get_fontSize, write=set_fontSize, stored=false };
  __property BSTR fontStyle={ read=get_fontStyle, write=set_fontStyle, stored=false };
  __property BSTR fontFace={ read=get_fontFace, write=set_fontFace, stored=false };
  __property BSTR filter={ read=get_filter, write=set_filter, stored=false };
  __property BSTR expandState={ read=get_expandState, write=set_expandState, stored=false };
  __property Wmplib_tlb::IWMPPlaylistPtr Playlist={ read=get_Playlist, write=set_Playlist, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPEditCtrl
// Help String      : WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPEditCtrl
// Def. Intf. Object: IWMPEditCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPEditCtrl : public Oleserver::TOleServer
{
  IWMPEditCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPEditCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPEditCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPEditCtrlPtr intf);


  BSTR            __fastcall get_value(void);
  void            __fastcall set_value(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  void            __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_justification(void);
  void            __fastcall set_justification(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_editStyle(void);
  void            __fastcall set_editStyle(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  void            __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  void            __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  long            __fastcall get_fontSize(void);
  void            __fastcall set_fontSize(long pVal/*[in]*/);
  BSTR            __fastcall get_fontStyle(void);
  void            __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_fontFace(void);
  void            __fastcall set_fontFace(BSTR pVal/*[in]*/);
  long            __fastcall get_textLimit(void);
  void            __fastcall set_textLimit(long pVal/*[in]*/);
  long            __fastcall get_lineCount(void);
  BSTR            __fastcall getLine(long nIndex/*[in]*/);
  long            __fastcall getSelectionStart(void);
  long            __fastcall getSelectionEnd(void);
  void            __fastcall setSelection(long nStart/*[in]*/, long nEnd/*[in]*/);
  void            __fastcall replaceSelection(BSTR newVal/*[in]*/);
  long            __fastcall getLineIndex(long nIndex/*[in]*/);
  long            __fastcall getLineFromChar(long nPosition/*[in]*/);
  __property long lineCount={ read=get_lineCount };
  __property BSTR value={ read=get_value, write=set_value, stored=false };
  __property VARIANT_BOOL border={ read=get_border, write=set_border, stored=false };
  __property BSTR justification={ read=get_justification, write=set_justification, stored=false };
  __property BSTR editStyle={ read=get_editStyle, write=set_editStyle, stored=false };
  __property VARIANT_BOOL wordWrap={ read=get_wordWrap, write=set_wordWrap, stored=false };
  __property VARIANT_BOOL readOnly={ read=get_readOnly, write=set_readOnly, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property long fontSize={ read=get_fontSize, write=set_fontSize, stored=false };
  __property BSTR fontStyle={ read=get_fontStyle, write=set_fontStyle, stored=false };
  __property BSTR fontFace={ read=get_fontFace, write=set_fontFace, stored=false };
  __property long textLimit={ read=get_textLimit, write=set_textLimit, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPMenuCtrl
// Help String      : WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPMenuCtrl
// Def. Intf. Object: IWMPMenuCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPMenuCtrl : public Oleserver::TOleServer
{
  IWMPMenuCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPMenuCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPMenuCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPMenuCtrlPtr intf);


  long            __fastcall get_showFlags(void);
  void            __fastcall set_showFlags(long pVal/*[in]*/);
  void            __fastcall deleteAllItems(void);
  void            __fastcall appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/);
  void            __fastcall appendSeparator(void);
  void            __fastcall enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  void            __fastcall checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  void            __fastcall checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  long            __fastcall show(void);
  void            __fastcall showEx(long nID/*[in]*/);
  __property long showFlags={ read=get_showFlags, write=set_showFlags, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPAutoMenuCtrl
// Help String      : WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPAutoMenuCtrl
// Def. Intf. Object: IWMPAutoMenuCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPAutoMenuCtrl : public Oleserver::TOleServer
{
  IWMPAutoMenuCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPAutoMenuCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPAutoMenuCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPAutoMenuCtrlPtr intf);


  void            __fastcall show(BSTR newVal/*[in]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPRegionalButtonCtrl
// Help String      : WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPRegionalButtonCtrl
// Def. Intf. Object: IWMPRegionalButtonCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPRegionalButtonCtrl : public Oleserver::TOleServer
{
  IWMPRegionalButtonCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPRegionalButtonCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPRegionalButtonCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPRegionalButtonCtrlPtr intf);


  BSTR            __fastcall get_image(void);
  void            __fastcall set_image(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverImage(void);
  void            __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_downImage(void);
  void            __fastcall set_downImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  void            __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverHoverImage(void);
  void            __fastcall set_hoverHoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledImage(void);
  void            __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_mappingImage(void);
  void            __fastcall set_mappingImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_transparencyColor(void);
  void            __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_showBackground(void);
  void            __fastcall set_showBackground(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_radio(void);
  void            __fastcall set_radio(VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_buttonCount(void);
  float           __fastcall get_hueShift(void);
  void            __fastcall set_hueShift(float pVal/*[in]*/);
  float           __fastcall get_saturation(void);
  void            __fastcall set_saturation(float pVal/*[in]*/);
  LPDISPATCH      __fastcall createButton(void);
  LPDISPATCH      __fastcall getButton(long nButton/*[in]*/);
  void            __fastcall _Click(long nButton/*[in]*/);
  __property long buttonCount={ read=get_buttonCount };
  __property BSTR image={ read=get_image, write=set_image, stored=false };
  __property BSTR hoverImage={ read=get_hoverImage, write=set_hoverImage, stored=false };
  __property BSTR downImage={ read=get_downImage, write=set_downImage, stored=false };
  __property BSTR hoverDownImage={ read=get_hoverDownImage, write=set_hoverDownImage, stored=false };
  __property BSTR hoverHoverImage={ read=get_hoverHoverImage, write=set_hoverHoverImage, stored=false };
  __property BSTR disabledImage={ read=get_disabledImage, write=set_disabledImage, stored=false };
  __property BSTR mappingImage={ read=get_mappingImage, write=set_mappingImage, stored=false };
  __property BSTR transparencyColor={ read=get_transparencyColor, write=set_transparencyColor, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property VARIANT_BOOL showBackground={ read=get_showBackground, write=set_showBackground, stored=false };
  __property VARIANT_BOOL radio={ read=get_radio, write=set_radio, stored=false };
  __property float hueShift={ read=get_hueShift, write=set_hueShift, stored=false };
  __property float saturation={ read=get_saturation, write=set_saturation, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPRegionalButton
// Help String      : WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPRegionalButton
// Def. Intf. Object: IWMPRegionalButtonPtr
// Def. Intf. DISP? : No
// Event   Interface: IWMPRegionalButtonEvents
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPRegionalButton : public Oleserver::TOleServer
{
  IWMPRegionalButtonPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPRegionalButton(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPRegionalButtonPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPRegionalButtonPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_upToolTip(void);
  void            __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_downToolTip(void);
  void            __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_mappingColor(void);
  void            __fastcall set_mappingColor(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  void            __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  void            __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  void            __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_index(void);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  void            __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_accName(void);
  void            __fastcall set_accName(BSTR pszName/*[in]*/);
  BSTR            __fastcall get_accDescription(void);
  void            __fastcall set_accDescription(BSTR pszDescription/*[in]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  void            __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);
  void            __fastcall _Click(void);
  __property long index={ read=get_index };
  __property BSTR upToolTip={ read=get_upToolTip, write=set_upToolTip, stored=false };
  __property BSTR downToolTip={ read=get_downToolTip, write=set_downToolTip, stored=false };
  __property BSTR mappingColor={ read=get_mappingColor, write=set_mappingColor, stored=false };
  __property VARIANT_BOOL enabled={ read=get_enabled, write=set_enabled, stored=false };
  __property VARIANT_BOOL sticky={ read=get_sticky, write=set_sticky, stored=false };
  __property VARIANT_BOOL down={ read=get_down, write=set_down, stored=false };
  __property VARIANT_BOOL tabStop={ read=get_tabStop, write=set_tabStop, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property BSTR accName={ read=get_accName, write=set_accName, stored=false };
  __property BSTR accDescription={ read=get_accDescription, write=set_accDescription, stored=false };
  __property BSTR accKeyboardShortcut={ read=get_accKeyboardShortcut, write=set_accKeyboardShortcut, stored=false };
private:
  TNotifyEvent                   FOnonblur;
  TNotifyEvent                   FOnonfocus;
  TNotifyEvent                   FOnonclick;
  TNotifyEvent                   FOnondblclick;
  TNotifyEvent                   FOnonmousedown;
  TNotifyEvent                   FOnonmouseup;
  TNotifyEvent                   FOnonmousemove;
  TNotifyEvent                   FOnonmouseover;
  TNotifyEvent                   FOnonmouseout;
  TNotifyEvent                   FOnonkeypress;
  TNotifyEvent                   FOnonkeydown;
  TNotifyEvent                   FOnonkeyup;
__published:
  __property TNotifyEvent Ononblur={ read=FOnonblur, write=FOnonblur };
  __property TNotifyEvent Ononfocus={ read=FOnonfocus, write=FOnonfocus };
  __property TNotifyEvent Ononclick={ read=FOnonclick, write=FOnonclick };
  __property TNotifyEvent Onondblclick={ read=FOnondblclick, write=FOnondblclick };
  __property TNotifyEvent Ononmousedown={ read=FOnonmousedown, write=FOnonmousedown };
  __property TNotifyEvent Ononmouseup={ read=FOnonmouseup, write=FOnonmouseup };
  __property TNotifyEvent Ononmousemove={ read=FOnonmousemove, write=FOnonmousemove };
  __property TNotifyEvent Ononmouseover={ read=FOnonmouseover, write=FOnonmouseover };
  __property TNotifyEvent Ononmouseout={ read=FOnonmouseout, write=FOnonmouseout };
  __property TNotifyEvent Ononkeypress={ read=FOnonkeypress, write=FOnonkeypress };
  __property TNotifyEvent Ononkeydown={ read=FOnonkeydown, write=FOnonkeydown };
  __property TNotifyEvent Ononkeyup={ read=FOnonkeyup, write=FOnonkeyup };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPCustomSliderCtrl
// Help String      : WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPCustomSlider
// Def. Intf. Object: IWMPCustomSliderPtr
// Def. Intf. DISP? : No
// Event   Interface: IWMPCustomSliderCtrlEvents
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPCustomSliderCtrl : public Oleserver::TOleServer
{
  IWMPCustomSliderPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPCustomSliderCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPCustomSliderPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPCustomSliderPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  float           __fastcall get_min(void);
  void            __fastcall set_min(float pVal/*[in]*/);
  float           __fastcall get_max(void);
  void            __fastcall set_max(float pVal/*[in]*/);
  float           __fastcall get_value(void);
  void            __fastcall set_value(float pVal/*[in]*/);
  BSTR            __fastcall get_toolTip(void);
  void            __fastcall set_toolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_positionImage(void);
  void            __fastcall set_positionImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_image(void);
  void            __fastcall set_image(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverImage(void);
  void            __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledImage(void);
  void            __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_downImage(void);
  void            __fastcall set_downImage(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_transparencyColor(void);
  void            __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property float min={ read=get_min, write=set_min, stored=false };
  __property float max={ read=get_max, write=set_max, stored=false };
  __property float value={ read=get_value, write=set_value, stored=false };
  __property BSTR toolTip={ read=get_toolTip, write=set_toolTip, stored=false };
  __property BSTR positionImage={ read=get_positionImage, write=set_positionImage, stored=false };
  __property BSTR image={ read=get_image, write=set_image, stored=false };
  __property BSTR hoverImage={ read=get_hoverImage, write=set_hoverImage, stored=false };
  __property BSTR disabledImage={ read=get_disabledImage, write=set_disabledImage, stored=false };
  __property BSTR downImage={ read=get_downImage, write=set_downImage, stored=false };
  __property BSTR transparencyColor={ read=get_transparencyColor, write=set_transparencyColor, stored=false };
private:
  TNotifyEvent                   FOnondragbegin;
  TNotifyEvent                   FOnondragend;
  TNotifyEvent                   FOnonpositionchange;
__published:
  __property TNotifyEvent Onondragbegin={ read=FOnondragbegin, write=FOnondragbegin };
  __property TNotifyEvent Onondragend={ read=FOnondragend, write=FOnondragend };
  __property TNotifyEvent Ononpositionchange={ read=FOnonpositionchange, write=FOnonpositionchange };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPTextCtrl
// Help String      : WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPTextCtrl
// Def. Intf. Object: IWMPTextCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPTextCtrl : public Oleserver::TOleServer
{
  IWMPTextCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPTextCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPTextCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPTextCtrlPtr intf);


  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_fontFace(void);
  void            __fastcall set_fontFace(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_fontStyle(void);
  void            __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  long            __fastcall get_fontSize(void);
  void            __fastcall set_fontSize(long pVal/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverBackgroundColor(void);
  void            __fastcall set_hoverBackgroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverForegroundColor(void);
  void            __fastcall set_hoverForegroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_hoverFontStyle(void);
  void            __fastcall set_hoverFontStyle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_value(void);
  void            __fastcall set_value(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_toolTip(void);
  void            __fastcall set_toolTip(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledFontStyle(void);
  void            __fastcall set_disabledFontStyle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledForegroundColor(void);
  void            __fastcall set_disabledForegroundColor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_disabledBackgroundColor(void);
  void            __fastcall set_disabledBackgroundColor(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_fontSmoothing(void);
  void            __fastcall set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_justification(void);
  void            __fastcall set_justification(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  void            __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_cursor(void);
  void            __fastcall set_cursor(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_scrolling(void);
  void            __fastcall set_scrolling(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_scrollingDirection(void);
  void            __fastcall set_scrollingDirection(BSTR pVal/*[in]*/);
  int             __fastcall get_scrollingDelay(void);
  void            __fastcall set_scrollingDelay(int pVal/*[in]*/);
  int             __fastcall get_scrollingAmount(void);
  void            __fastcall set_scrollingAmount(int pVal/*[in]*/);
  int             __fastcall get_textWidth(void);
  VARIANT_BOOL    __fastcall get_onGlass(void);
  void            __fastcall set_onGlass(VARIANT_BOOL pVal/*[in]*/);
  __property int textWidth={ read=get_textWidth };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property BSTR fontFace={ read=get_fontFace, write=set_fontFace, stored=false };
  __property BSTR fontStyle={ read=get_fontStyle, write=set_fontStyle, stored=false };
  __property long fontSize={ read=get_fontSize, write=set_fontSize, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR hoverBackgroundColor={ read=get_hoverBackgroundColor, write=set_hoverBackgroundColor, stored=false };
  __property BSTR hoverForegroundColor={ read=get_hoverForegroundColor, write=set_hoverForegroundColor, stored=false };
  __property BSTR hoverFontStyle={ read=get_hoverFontStyle, write=set_hoverFontStyle, stored=false };
  __property BSTR value={ read=get_value, write=set_value, stored=false };
  __property BSTR toolTip={ read=get_toolTip, write=set_toolTip, stored=false };
  __property BSTR disabledFontStyle={ read=get_disabledFontStyle, write=set_disabledFontStyle, stored=false };
  __property BSTR disabledForegroundColor={ read=get_disabledForegroundColor, write=set_disabledForegroundColor, stored=false };
  __property BSTR disabledBackgroundColor={ read=get_disabledBackgroundColor, write=set_disabledBackgroundColor, stored=false };
  __property VARIANT_BOOL fontSmoothing={ read=get_fontSmoothing, write=set_fontSmoothing, stored=false };
  __property BSTR justification={ read=get_justification, write=set_justification, stored=false };
  __property VARIANT_BOOL wordWrap={ read=get_wordWrap, write=set_wordWrap, stored=false };
  __property BSTR cursor={ read=get_cursor, write=set_cursor, stored=false };
  __property VARIANT_BOOL scrolling={ read=get_scrolling, write=set_scrolling, stored=false };
  __property BSTR scrollingDirection={ read=get_scrollingDirection, write=set_scrollingDirection, stored=false };
  __property int scrollingDelay={ read=get_scrollingDelay, write=set_scrollingDelay, stored=false };
  __property int scrollingAmount={ read=get_scrollingAmount, write=set_scrollingAmount, stored=false };
  __property VARIANT_BOOL onGlass={ read=get_onGlass, write=set_onGlass, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPPlaylistCtrl
// Help String      : WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPPlaylistCtrl
// Def. Intf. Object: IWMPPlaylistCtrlPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
class PACKAGE TWMPPlaylistCtrl : public Oleserver::TOleServer
{
  IWMPPlaylistCtrlPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPPlaylistCtrl(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPPlaylistCtrlPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPPlaylistCtrlPtr intf);


  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  void            __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/);
  BSTR            __fastcall get_columns(void);
  void            __fastcall set_columns(BSTR pbstrColumns/*[in]*/);
  long            __fastcall get_columnCount(void);
  BSTR            __fastcall get_columnOrder(void);
  void            __fastcall set_columnOrder(BSTR pbstrColumnOrder/*[in]*/);
  VARIANT_BOOL    __fastcall get_columnsVisible(void);
  void            __fastcall set_columnsVisible(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  void            __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_playlistItemsVisible(void);
  void            __fastcall set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_checkboxesVisible(void);
  void            __fastcall set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_backgroundColor(void);
  void            __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_foregroundColor(void);
  void            __fastcall set_foregroundColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_disabledItemColor(void);
  void            __fastcall set_disabledItemColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_itemPlayingColor(void);
  void            __fastcall set_itemPlayingColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_itemPlayingBackgroundColor(void);
  void            __fastcall set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/);
  BSTR            __fastcall get_backgroundImage(void);
  void            __fastcall set_backgroundImage(BSTR pbstrImage/*[in]*/);
  VARIANT_BOOL    __fastcall get_allowItemEditing(void);
  void            __fastcall set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_allowColumnSorting(void);
  void            __fastcall set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_dropDownList(void);
  void            __fastcall set_dropDownList(BSTR pbstrList/*[in]*/);
  BSTR            __fastcall get_dropDownToolTip(void);
  void            __fastcall set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/);
  VARIANT_BOOL    __fastcall get_copying(void);
  void            __fastcall set_copying(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_itemErrorColor(void);
  void            __fastcall set_itemErrorColor(BSTR pbstrColor/*[in]*/);
  long            __fastcall get_itemCount(void);
  Wmplib_tlb::IWMPMedia* __fastcall get_itemMedia(long nIndex/*[in]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall get_itemPlaylist(long nIndex/*[in]*/);
  BSTR            __fastcall get_leftStatus(void);
  void            __fastcall set_leftStatus(BSTR pbstrStatus/*[in]*/);
  BSTR            __fastcall get_rightStatus(void);
  void            __fastcall set_rightStatus(BSTR pbstrStatus/*[in]*/);
  VARIANT_BOOL    __fastcall get_editButtonVisible(void);
  void            __fastcall set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_dropDownImage(void);
  void            __fastcall set_dropDownImage(BSTR pbstrImage/*[in]*/);
  BSTR            __fastcall get_dropDownBackgroundImage(void);
  void            __fastcall set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/);
  float           __fastcall get_hueShift(void);
  void            __fastcall set_hueShift(float pVal/*[in]*/);
  float           __fastcall get_saturation(void);
  void            __fastcall set_saturation(float pVal/*[in]*/);
  BSTR            __fastcall get_statusColor(void);
  void            __fastcall set_statusColor(BSTR pbstrColor/*[in]*/);
  VARIANT_BOOL    __fastcall get_toolbarVisible(void);
  void            __fastcall set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_itemSelectedColor(void);
  void            __fastcall set_itemSelectedColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_itemSelectedFocusLostColor(void);
  void            __fastcall set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  BSTR            __fastcall get_itemSelectedBackgroundColor(void);
  void            __fastcall set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_itemSelectedBackgroundFocusLostColor(void);
  void            __fastcall set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  BSTR            __fastcall get_backgroundSplitColor(void);
  void            __fastcall set_backgroundSplitColor(BSTR pbstrColor/*[in]*/);
  BSTR            __fastcall get_statusTextColor(void);
  void            __fastcall set_statusTextColor(BSTR pbstrColor/*[in]*/);
  void            __fastcall copy(void);
  void            __fastcall abortCopy(void);
  void            __fastcall deleteSelected(void);
  void            __fastcall deleteSelectedFromLibrary(void);
  void            __fastcall moveSelectedUp(void);
  void            __fastcall moveSelectedDown(void);
  void            __fastcall addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  long            __fastcall getNextCheckedItem(long nStartIndex/*[in]*/);
  void            __fastcall setSelectedState(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  void            __fastcall setCheckedState(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  void            __fastcall sortColumn(long nIndex/*[in]*/);
  void            __fastcall setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/);
  void            __fastcall setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/);
  long            __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/);
  long            __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/);
  void            __fastcall setSelectedState2(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  void            __fastcall setCheckedState2(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  __property long columnCount={ read=get_columnCount };
  __property long itemCount={ read=get_itemCount };
  __property Wmplib_tlb::IWMPMedia* itemMedia[long nIndex]={ read=get_itemMedia };
  __property Wmplib_tlb::IWMPPlaylist* itemPlaylist[long nIndex]={ read=get_itemPlaylist };
  __property Wmplib_tlb::IWMPPlaylistPtr Playlist={ read=get_Playlist, write=set_Playlist, stored=false };
  __property BSTR columns={ read=get_columns, write=set_columns, stored=false };
  __property BSTR columnOrder={ read=get_columnOrder, write=set_columnOrder, stored=false };
  __property VARIANT_BOOL columnsVisible={ read=get_columnsVisible, write=set_columnsVisible, stored=false };
  __property VARIANT_BOOL dropDownVisible={ read=get_dropDownVisible, write=set_dropDownVisible, stored=false };
  __property VARIANT_BOOL playlistItemsVisible={ read=get_playlistItemsVisible, write=set_playlistItemsVisible, stored=false };
  __property VARIANT_BOOL checkboxesVisible={ read=get_checkboxesVisible, write=set_checkboxesVisible, stored=false };
  __property BSTR backgroundColor={ read=get_backgroundColor, write=set_backgroundColor, stored=false };
  __property BSTR foregroundColor={ read=get_foregroundColor, write=set_foregroundColor, stored=false };
  __property BSTR disabledItemColor={ read=get_disabledItemColor, write=set_disabledItemColor, stored=false };
  __property BSTR itemPlayingColor={ read=get_itemPlayingColor, write=set_itemPlayingColor, stored=false };
  __property BSTR itemPlayingBackgroundColor={ read=get_itemPlayingBackgroundColor, write=set_itemPlayingBackgroundColor, stored=false };
  __property BSTR backgroundImage={ read=get_backgroundImage, write=set_backgroundImage, stored=false };
  __property VARIANT_BOOL allowItemEditing={ read=get_allowItemEditing, write=set_allowItemEditing, stored=false };
  __property VARIANT_BOOL allowColumnSorting={ read=get_allowColumnSorting, write=set_allowColumnSorting, stored=false };
  __property BSTR dropDownList={ read=get_dropDownList, write=set_dropDownList, stored=false };
  __property BSTR dropDownToolTip={ read=get_dropDownToolTip, write=set_dropDownToolTip, stored=false };
  __property VARIANT_BOOL copying={ read=get_copying, write=set_copying, stored=false };
  __property BSTR itemErrorColor={ read=get_itemErrorColor, write=set_itemErrorColor, stored=false };
  __property BSTR leftStatus={ read=get_leftStatus, write=set_leftStatus, stored=false };
  __property BSTR rightStatus={ read=get_rightStatus, write=set_rightStatus, stored=false };
  __property VARIANT_BOOL editButtonVisible={ read=get_editButtonVisible, write=set_editButtonVisible, stored=false };
  __property BSTR dropDownImage={ read=get_dropDownImage, write=set_dropDownImage, stored=false };
  __property BSTR dropDownBackgroundImage={ read=get_dropDownBackgroundImage, write=set_dropDownBackgroundImage, stored=false };
  __property float hueShift={ read=get_hueShift, write=set_hueShift, stored=false };
  __property float saturation={ read=get_saturation, write=set_saturation, stored=false };
  __property BSTR statusColor={ read=get_statusColor, write=set_statusColor, stored=false };
  __property VARIANT_BOOL toolbarVisible={ read=get_toolbarVisible, write=set_toolbarVisible, stored=false };
  __property BSTR itemSelectedColor={ read=get_itemSelectedColor, write=set_itemSelectedColor, stored=false };
  __property BSTR itemSelectedFocusLostColor={ read=get_itemSelectedFocusLostColor, write=set_itemSelectedFocusLostColor, stored=false };
  __property BSTR itemSelectedBackgroundColor={ read=get_itemSelectedBackgroundColor, write=set_itemSelectedBackgroundColor, stored=false };
  __property BSTR itemSelectedBackgroundFocusLostColor={ read=get_itemSelectedBackgroundFocusLostColor, write=set_itemSelectedBackgroundFocusLostColor, stored=false };
  __property BSTR backgroundSplitColor={ read=get_backgroundSplitColor, write=set_backgroundSplitColor, stored=false };
  __property BSTR statusTextColor={ read=get_statusTextColor, write=set_statusTextColor, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWMPCore
// Help String      : WMPCore: Not Public.  Internal object used by Windows Media Player.
// Default Interface: IWMPCore3
// Def. Intf. Object: IWMPCore3Ptr
// Def. Intf. DISP? : No
// Event   Interface: _WMPCoreEvents
// TypeFlags        : (0)
// *********************************************************************//
typedef void __fastcall (__closure * TWMPCoreOpenStateChange)(System::TObject * Sender, 
                                                              long NewState/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePlayStateChange)(System::TObject * Sender, 
                                                              long NewState/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreAudioLanguageChange)(System::TObject * Sender, 
                                                                  long LangID/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreScriptCommand)(System::TObject * Sender, 
                                                            BSTR scType/*[in]*/, BSTR Param/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreDisconnect)(System::TObject * Sender, 
                                                         long Result/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreBuffering)(System::TObject * Sender, 
                                                        VARIANT_BOOL Start/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreWarning)(System::TObject * Sender, 
                                                      long WarningType/*[in]*/, long Param/*[in]*/, 
                                                      BSTR Description/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreEndOfStream)(System::TObject * Sender, 
                                                          long Result/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePositionChange)(System::TObject * Sender, 
                                                             double oldPosition/*[in]*/, 
                                                             double newPosition/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMarkerHit)(System::TObject * Sender, 
                                                        long MarkerNum/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreDurationUnitChange)(System::TObject * Sender, 
                                                                 long NewDurationUnit/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreCdromMediaChange)(System::TObject * Sender, 
                                                               long CdromNum/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePlaylistChange)(System::TObject * Sender, 
                                                             LPDISPATCH Playlist/*[in]*/, 
                                                             Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreCurrentPlaylistChange)(System::TObject * Sender, 
                                                                    Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreCurrentPlaylistItemAvailable)(System::TObject * Sender, 
                                                                           BSTR bstrItemName/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaChange)(System::TObject * Sender, 
                                                          LPDISPATCH Item/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreCurrentMediaItemAvailable)(System::TObject * Sender, 
                                                                        BSTR bstrItemName/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreCurrentItemChange)(System::TObject * Sender, 
                                                                LPDISPATCH pdispMedia/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaCollectionAttributeStringAdded)(System::TObject * Sender, 
                                                                                  BSTR bstrAttribName/*[in]*/, 
                                                                                  BSTR bstrAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaCollectionAttributeStringRemoved)(System::TObject * Sender, 
                                                                                    BSTR bstrAttribName/*[in]*/, 
                                                                                    BSTR bstrAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaCollectionAttributeStringChanged)(System::TObject * Sender, 
                                                                                    BSTR bstrAttribName/*[in]*/, 
                                                                                    BSTR bstrOldAttribVal/*[in]*/, 
                                                                                    BSTR bstrNewAttribVal/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePlaylistCollectionPlaylistAdded)(System::TObject * Sender, 
                                                                              BSTR bstrPlaylistName/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePlaylistCollectionPlaylistRemoved)(System::TObject * Sender, 
                                                                                BSTR bstrPlaylistName/*[in]*/);
typedef void __fastcall (__closure * TWMPCorePlaylistCollectionPlaylistSetAsDeleted)(System::TObject * Sender, 
                                                                                     BSTR bstrPlaylistName/*[in]*/, 
                                                                                     VARIANT_BOOL varfIsDeleted/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreModeChange)(System::TObject * Sender, 
                                                         BSTR ModeName/*[in]*/, 
                                                         VARIANT_BOOL NewValue/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaError)(System::TObject * Sender, 
                                                         LPDISPATCH pMediaObject/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreOpenPlaylistSwitch)(System::TObject * Sender, 
                                                                 LPDISPATCH pItem/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreDomainChange)(System::TObject * Sender, 
                                                           BSTR strDomain/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreStringCollectionChange)(System::TObject * Sender, 
                                                                     LPDISPATCH pdispStringCollection/*[in]*/, 
                                                                     Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/, 
                                                                     long lCollectionIndex/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaCollectionMediaAdded)(System::TObject * Sender, 
                                                                        LPDISPATCH pdispMedia/*[in]*/);
typedef void __fastcall (__closure * TWMPCoreMediaCollectionMediaRemoved)(System::TObject * Sender, 
                                                                          LPDISPATCH pdispMedia/*[in]*/);

class PACKAGE TWMPCore : public Oleserver::TOleServer
{
  IWMPCore3Ptr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWMPCore(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWMPCore3Ptr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWMPCore3Ptr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_URL(void);
  void            __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  void            __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  BSTR            __fastcall get_versionInfo(void);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  void            __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  BSTR            __fastcall get_status(void);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  void            __fastcall close(void);
  void            __fastcall launchURL(BSTR bstrURL/*[in]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/);
  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/);
  __property Wmplib_tlb::WMPOpenState openState={ read=get_openState };
  __property Wmplib_tlb::WMPPlayState playState={ read=get_playState };
  __property Wmplib_tlb::IWMPControlsPtr controls={ read=get_controls };
  __property Wmplib_tlb::IWMPSettingsPtr settings={ read=get_settings };
  __property Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection={ read=get_mediaCollection };
  __property Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection={ read=get_playlistCollection };
  __property BSTR versionInfo={ read=get_versionInfo };
  __property Wmplib_tlb::IWMPNetworkPtr network={ read=get_network };
  __property Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection={ read=get_cdromCollection };
  __property Wmplib_tlb::IWMPClosedCaptionPtr closedCaption={ read=get_closedCaption };
  __property VARIANT_BOOL isOnline={ read=get_isOnline };
  __property Wmplib_tlb::IWMPErrorPtr Error={ read=get_Error };
  __property BSTR status={ read=get_status };
  __property Wmplib_tlb::IWMPDVDPtr dvd={ read=get_dvd };
  __property BSTR URL={ read=get_URL, write=set_URL, stored=false };
  __property Wmplib_tlb::IWMPMediaPtr currentMedia={ read=get_currentMedia, write=set_currentMedia, stored=false };
  __property Wmplib_tlb::IWMPPlaylistPtr currentPlaylist={ read=get_currentPlaylist, write=set_currentPlaylist, stored=false };
private:
  TWMPCoreOpenStateChange        FOnOpenStateChange;
  TWMPCorePlayStateChange        FOnPlayStateChange;
  TWMPCoreAudioLanguageChange    FOnAudioLanguageChange;
  TNotifyEvent                   FOnStatusChange;
  TWMPCoreScriptCommand          FOnScriptCommand;
  TNotifyEvent                   FOnNewStream;
  TWMPCoreDisconnect             FOnDisconnect;
  TWMPCoreBuffering              FOnBuffering;
  TNotifyEvent                   FOnError;
  TWMPCoreWarning                FOnWarning;
  TWMPCoreEndOfStream            FOnEndOfStream;
  TWMPCorePositionChange         FOnPositionChange;
  TWMPCoreMarkerHit              FOnMarkerHit;
  TWMPCoreDurationUnitChange     FOnDurationUnitChange;
  TWMPCoreCdromMediaChange       FOnCdromMediaChange;
  TWMPCorePlaylistChange         FOnPlaylistChange;
  TWMPCoreCurrentPlaylistChange  FOnCurrentPlaylistChange;
  TWMPCoreCurrentPlaylistItemAvailable FOnCurrentPlaylistItemAvailable;
  TWMPCoreMediaChange            FOnMediaChange;
  TWMPCoreCurrentMediaItemAvailable FOnCurrentMediaItemAvailable;
  TWMPCoreCurrentItemChange      FOnCurrentItemChange;
  TNotifyEvent                   FOnMediaCollectionChange;
  TWMPCoreMediaCollectionAttributeStringAdded FOnMediaCollectionAttributeStringAdded;
  TWMPCoreMediaCollectionAttributeStringRemoved FOnMediaCollectionAttributeStringRemoved;
  TWMPCoreMediaCollectionAttributeStringChanged FOnMediaCollectionAttributeStringChanged;
  TNotifyEvent                   FOnPlaylistCollectionChange;
  TWMPCorePlaylistCollectionPlaylistAdded FOnPlaylistCollectionPlaylistAdded;
  TWMPCorePlaylistCollectionPlaylistRemoved FOnPlaylistCollectionPlaylistRemoved;
  TWMPCorePlaylistCollectionPlaylistSetAsDeleted FOnPlaylistCollectionPlaylistSetAsDeleted;
  TWMPCoreModeChange             FOnModeChange;
  TWMPCoreMediaError             FOnMediaError;
  TWMPCoreOpenPlaylistSwitch     FOnOpenPlaylistSwitch;
  TWMPCoreDomainChange           FOnDomainChange;
  TWMPCoreStringCollectionChange FOnStringCollectionChange;
  TWMPCoreMediaCollectionMediaAdded FOnMediaCollectionMediaAdded;
  TWMPCoreMediaCollectionMediaRemoved FOnMediaCollectionMediaRemoved;
__published:
  __property TWMPCoreOpenStateChange OnOpenStateChange={ read=FOnOpenStateChange, write=FOnOpenStateChange };
  __property TWMPCorePlayStateChange OnPlayStateChange={ read=FOnPlayStateChange, write=FOnPlayStateChange };
  __property TWMPCoreAudioLanguageChange OnAudioLanguageChange={ read=FOnAudioLanguageChange, write=FOnAudioLanguageChange };
  __property TNotifyEvent OnStatusChange={ read=FOnStatusChange, write=FOnStatusChange };
  __property TWMPCoreScriptCommand OnScriptCommand={ read=FOnScriptCommand, write=FOnScriptCommand };
  __property TNotifyEvent OnNewStream={ read=FOnNewStream, write=FOnNewStream };
  __property TWMPCoreDisconnect OnDisconnect={ read=FOnDisconnect, write=FOnDisconnect };
  __property TWMPCoreBuffering OnBuffering={ read=FOnBuffering, write=FOnBuffering };
  __property TNotifyEvent OnError={ read=FOnError, write=FOnError };
  __property TWMPCoreWarning OnWarning={ read=FOnWarning, write=FOnWarning };
  __property TWMPCoreEndOfStream OnEndOfStream={ read=FOnEndOfStream, write=FOnEndOfStream };
  __property TWMPCorePositionChange OnPositionChange={ read=FOnPositionChange, write=FOnPositionChange };
  __property TWMPCoreMarkerHit OnMarkerHit={ read=FOnMarkerHit, write=FOnMarkerHit };
  __property TWMPCoreDurationUnitChange OnDurationUnitChange={ read=FOnDurationUnitChange, write=FOnDurationUnitChange };
  __property TWMPCoreCdromMediaChange OnCdromMediaChange={ read=FOnCdromMediaChange, write=FOnCdromMediaChange };
  __property TWMPCorePlaylistChange OnPlaylistChange={ read=FOnPlaylistChange, write=FOnPlaylistChange };
  __property TWMPCoreCurrentPlaylistChange OnCurrentPlaylistChange={ read=FOnCurrentPlaylistChange, write=FOnCurrentPlaylistChange };
  __property TWMPCoreCurrentPlaylistItemAvailable OnCurrentPlaylistItemAvailable={ read=FOnCurrentPlaylistItemAvailable, write=FOnCurrentPlaylistItemAvailable };
  __property TWMPCoreMediaChange OnMediaChange={ read=FOnMediaChange, write=FOnMediaChange };
  __property TWMPCoreCurrentMediaItemAvailable OnCurrentMediaItemAvailable={ read=FOnCurrentMediaItemAvailable, write=FOnCurrentMediaItemAvailable };
  __property TWMPCoreCurrentItemChange OnCurrentItemChange={ read=FOnCurrentItemChange, write=FOnCurrentItemChange };
  __property TNotifyEvent OnMediaCollectionChange={ read=FOnMediaCollectionChange, write=FOnMediaCollectionChange };
  __property TWMPCoreMediaCollectionAttributeStringAdded OnMediaCollectionAttributeStringAdded={ read=FOnMediaCollectionAttributeStringAdded, write=FOnMediaCollectionAttributeStringAdded };
  __property TWMPCoreMediaCollectionAttributeStringRemoved OnMediaCollectionAttributeStringRemoved={ read=FOnMediaCollectionAttributeStringRemoved, write=FOnMediaCollectionAttributeStringRemoved };
  __property TWMPCoreMediaCollectionAttributeStringChanged OnMediaCollectionAttributeStringChanged={ read=FOnMediaCollectionAttributeStringChanged, write=FOnMediaCollectionAttributeStringChanged };
  __property TNotifyEvent OnPlaylistCollectionChange={ read=FOnPlaylistCollectionChange, write=FOnPlaylistCollectionChange };
  __property TWMPCorePlaylistCollectionPlaylistAdded OnPlaylistCollectionPlaylistAdded={ read=FOnPlaylistCollectionPlaylistAdded, write=FOnPlaylistCollectionPlaylistAdded };
  __property TWMPCorePlaylistCollectionPlaylistRemoved OnPlaylistCollectionPlaylistRemoved={ read=FOnPlaylistCollectionPlaylistRemoved, write=FOnPlaylistCollectionPlaylistRemoved };
  __property TWMPCorePlaylistCollectionPlaylistSetAsDeleted OnPlaylistCollectionPlaylistSetAsDeleted={ read=FOnPlaylistCollectionPlaylistSetAsDeleted, write=FOnPlaylistCollectionPlaylistSetAsDeleted };
  __property TWMPCoreModeChange OnModeChange={ read=FOnModeChange, write=FOnModeChange };
  __property TWMPCoreMediaError OnMediaError={ read=FOnMediaError, write=FOnMediaError };
  __property TWMPCoreOpenPlaylistSwitch OnOpenPlaylistSwitch={ read=FOnOpenPlaylistSwitch, write=FOnOpenPlaylistSwitch };
  __property TWMPCoreDomainChange OnDomainChange={ read=FOnDomainChange, write=FOnDomainChange };
  __property TWMPCoreStringCollectionChange OnStringCollectionChange={ read=FOnStringCollectionChange, write=FOnStringCollectionChange };
  __property TWMPCoreMediaCollectionMediaAdded OnMediaCollectionMediaAdded={ read=FOnMediaCollectionMediaAdded, write=FOnMediaCollectionMediaAdded };
  __property TWMPCoreMediaCollectionMediaRemoved OnMediaCollectionMediaRemoved={ read=FOnMediaCollectionMediaRemoved, write=FOnMediaCollectionMediaRemoved };
};

};     // namespace Wmplib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Wmplib_tlb;
#endif

#pragma option pop

#endif // WMPLib_OCXH
