// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 06.12.2010 18:48:31 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\system32\wmp.dll (1)
// LIBID: {6BF52A50-394A-11D3-B153-00C04F79FAA6}
// LCID: 0
// Helpfile: 
// HelpString: Windows Media Player
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   WMPLib_TLBH
#define   WMPLib_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Wmplib_tlb
{

// *********************************************************************//
// HelpString: Windows Media Player
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_WMPLib;
extern __declspec (package) const GUID IID_IWMPEvents;
extern __declspec (package) const GUID GUID_WMPPlaylistChangeEventType;
extern __declspec (package) const GUID IID_IWMPEvents2;
extern __declspec (package) const GUID IID_IWMPSyncDevice;
extern __declspec (package) const GUID GUID_WMPDeviceStatus;
extern __declspec (package) const GUID GUID_WMPSyncState;
extern __declspec (package) const GUID IID_IWMPEvents3;
extern __declspec (package) const GUID IID_IWMPCdromRip;
extern __declspec (package) const GUID GUID_WMPRipState;
extern __declspec (package) const GUID IID_IWMPCdromBurn;
extern __declspec (package) const GUID GUID_WMPBurnFormat;
extern __declspec (package) const GUID IID_IWMPPlaylist;
extern __declspec (package) const GUID IID_IWMPMedia;
extern __declspec (package) const GUID GUID_WMPBurnState;
extern __declspec (package) const GUID IID_IWMPLibrary;
extern __declspec (package) const GUID GUID_WMPLibraryType;
extern __declspec (package) const GUID IID_IWMPMediaCollection;
extern __declspec (package) const GUID IID_IWMPStringCollection;
extern __declspec (package) const GUID GUID_WMPFolderScanState;
extern __declspec (package) const GUID GUID_WMPStringCollectionChangeEventType;
extern __declspec (package) const GUID DIID__WMPOCXEvents;
extern __declspec (package) const GUID IID_IWMPCore;
extern __declspec (package) const GUID IID_IWMPCore2;
extern __declspec (package) const GUID IID_IWMPCore3;
extern __declspec (package) const GUID IID_IWMPPlayer4;
extern __declspec (package) const GUID IID_IWMPPlayer3;
extern __declspec (package) const GUID GUID_WMPOpenState;
extern __declspec (package) const GUID GUID_WMPPlayState;
extern __declspec (package) const GUID IID_IWMPControls;
extern __declspec (package) const GUID IID_IWMPSettings;
extern __declspec (package) const GUID IID_IWMPPlaylistCollection;
extern __declspec (package) const GUID IID_IWMPPlaylistArray;
extern __declspec (package) const GUID IID_IWMPNetwork;
extern __declspec (package) const GUID IID_IWMPCdromCollection;
extern __declspec (package) const GUID IID_IWMPCdrom;
extern __declspec (package) const GUID IID_IWMPClosedCaption;
extern __declspec (package) const GUID IID_IWMPError;
extern __declspec (package) const GUID IID_IWMPErrorItem;
extern __declspec (package) const GUID IID_IWMPDVD;
extern __declspec (package) const GUID IID_IWMPPlayerApplication;
extern __declspec (package) const GUID IID_IWMPPlayer2;
extern __declspec (package) const GUID IID_IWMPPlayer;
extern __declspec (package) const GUID IID_IWMPErrorItem2;
extern __declspec (package) const GUID IID_IWMPControls2;
extern __declspec (package) const GUID IID_IWMPMedia2;
extern __declspec (package) const GUID IID_IWMPMedia3;
extern __declspec (package) const GUID IID_IWMPMetadataPicture;
extern __declspec (package) const GUID IID_IWMPMetadataText;
extern __declspec (package) const GUID IID_IWMPSettings2;
extern __declspec (package) const GUID IID_IWMPControls3;
extern __declspec (package) const GUID IID_IWMPClosedCaption2;
extern __declspec (package) const GUID IID_IWMPMediaCollection2;
extern __declspec (package) const GUID IID_IWMPStringCollection2;
extern __declspec (package) const GUID IID_IWMPQuery;
extern __declspec (package) const GUID CLSID_WindowsMediaPlayer;
extern __declspec (package) const GUID IID_IWMPPlayerServices;
extern __declspec (package) const GUID IID_IWMPPlayerServices2;
extern __declspec (package) const GUID IID_IWMPRemoteMediaServices;
extern __declspec (package) const GUID IID_IWMPSyncServices;
extern __declspec (package) const GUID IID_IWMPLibraryServices;
extern __declspec (package) const GUID IID_IWMPLibrarySharingServices;
extern __declspec (package) const GUID IID_IWMPFolderMonitorServices;
extern __declspec (package) const GUID IID_IWMPSyncDevice2;
extern __declspec (package) const GUID IID_IWMPPlaylistCtrl;
extern __declspec (package) const GUID IID_IAppDispatch;
extern __declspec (package) const GUID IID_IWMPSafeBrowser;
extern __declspec (package) const GUID IID_IWMPObjectExtendedProps;
extern __declspec (package) const GUID IID_IWMPLayoutSubView;
extern __declspec (package) const GUID IID_IWMPLayoutView;
extern __declspec (package) const GUID IID_IWMPEventObject;
extern __declspec (package) const GUID IID_IWMPTheme;
extern __declspec (package) const GUID IID_IWMPLayoutSettingsDispatch;
extern __declspec (package) const GUID IID_IWMPBrandDispatch;
extern __declspec (package) const GUID IID_IWMPNowPlayingHelperDispatch;
extern __declspec (package) const GUID IID_IWMPNowDoingDispatch;
extern __declspec (package) const GUID DIID_IWMPButtonCtrlEvents;
extern __declspec (package) const GUID IID_IWMPButtonCtrl;
extern __declspec (package) const GUID CLSID_WMPButtonCtrl;
extern __declspec (package) const GUID IID_IWMPListBoxCtrl;
extern __declspec (package) const GUID CLSID_WMPListBoxCtrl;
extern __declspec (package) const GUID IID_IWMPListBoxItem;
extern __declspec (package) const GUID IID_IWMPPlaylistCtrlColumn;
extern __declspec (package) const GUID DIID_IWMPSliderCtrlEvents;
extern __declspec (package) const GUID IID_IWMPSliderCtrl;
extern __declspec (package) const GUID CLSID_WMPSliderCtrl;
extern __declspec (package) const GUID DIID_IWMPVideoCtrlEvents;
extern __declspec (package) const GUID IID_IWMPVideoCtrl;
extern __declspec (package) const GUID CLSID_WMPVideoCtrl;
extern __declspec (package) const GUID IID_IWMPEffectsCtrl;
extern __declspec (package) const GUID CLSID_WMPEffects;
extern __declspec (package) const GUID IID_IWMPEqualizerSettingsCtrl;
extern __declspec (package) const GUID CLSID_WMPEqualizerSettingsCtrl;
extern __declspec (package) const GUID IID_IWMPVideoSettingsCtrl;
extern __declspec (package) const GUID CLSID_WMPVideoSettingsCtrl;
extern __declspec (package) const GUID IID_IWMPLibraryTreeCtrl;
extern __declspec (package) const GUID CLSID_WMPLibraryTreeCtrl;
extern __declspec (package) const GUID IID_IWMPEditCtrl;
extern __declspec (package) const GUID CLSID_WMPEditCtrl;
extern __declspec (package) const GUID IID_IWMPPluginUIHost;
extern __declspec (package) const GUID IID_IWMPMenuCtrl;
extern __declspec (package) const GUID CLSID_WMPMenuCtrl;
extern __declspec (package) const GUID IID_IWMPAutoMenuCtrl;
extern __declspec (package) const GUID CLSID_WMPAutoMenuCtrl;
extern __declspec (package) const GUID IID_IWMPRegionalButtonCtrl;
extern __declspec (package) const GUID CLSID_WMPRegionalButtonCtrl;
extern __declspec (package) const GUID DIID_IWMPRegionalButtonEvents;
extern __declspec (package) const GUID IID_IWMPRegionalButton;
extern __declspec (package) const GUID CLSID_WMPRegionalButton;
extern __declspec (package) const GUID DIID_IWMPCustomSliderCtrlEvents;
extern __declspec (package) const GUID IID_IWMPCustomSlider;
extern __declspec (package) const GUID CLSID_WMPCustomSliderCtrl;
extern __declspec (package) const GUID IID_IWMPTextCtrl;
extern __declspec (package) const GUID CLSID_WMPTextCtrl;
extern __declspec (package) const GUID CLSID_WMPPlaylistCtrl;
extern __declspec (package) const GUID IID_ITaskCntrCtrl;
extern __declspec (package) const GUID DIID__WMPCoreEvents;
extern __declspec (package) const GUID CLSID_WMPCore;
extern __declspec (package) const GUID IID_IWMPGraphEventHandler;
extern __declspec (package) const GUID GUID_ULONG_PTR;
extern __declspec (package) const GUID IID_IBattery;
extern __declspec (package) const GUID IID_IBatteryPreset;
extern __declspec (package) const GUID IID_IBatteryRandomPreset;
extern __declspec (package) const GUID IID_IBatterySavedPreset;
extern __declspec (package) const GUID IID_IBarsEffect;
extern __declspec (package) const GUID IID_IWMPExternal;
extern __declspec (package) const GUID IID_IWMPExternalColors;
extern __declspec (package) const GUID IID_IWMPSubscriptionServiceLimited;
extern __declspec (package) const GUID IID_IWMPSubscriptionServiceExternal;
extern __declspec (package) const GUID IID_IWMPDownloadManager;
extern __declspec (package) const GUID IID_IWMPDownloadCollection;
extern __declspec (package) const GUID IID_IWMPDownloadItem;
extern __declspec (package) const GUID IID_IWMPDownloadItem2;
extern __declspec (package) const GUID GUID_WMPSubscriptionDownloadState;
extern __declspec (package) const GUID IID_IWMPSubscriptionServicePlayMedia;
extern __declspec (package) const GUID IID_IWMPDiscoExternal;
extern __declspec (package) const GUID IID_IWMPCDDVDWizardExternal;
extern __declspec (package) const GUID GUID_WMP_WRITENAMESEX_TYPE;
extern __declspec (package) const GUID IID_IWMPBaseExternal;
extern __declspec (package) const GUID IID_IWMPOfflineExternal;
extern __declspec (package) const GUID IID_IWMPRemoteUPnPService;
extern __declspec (package) const GUID IID_IWMPRemoteUPnPDevice;
extern __declspec (package) const GUID IID_IWMPRemoteDeviceController;
extern __declspec (package) const GUID IID_IUPnPService_IWMPUPnPAVTransportDual;
extern __declspec (package) const GUID IID_IUPnPService_IWMPUPnPBinaryControlDual;
extern __declspec (package) const GUID IID_IUPnPService_IWMPUPnPVariableControlDual;
extern __declspec (package) const GUID IID_IUPnPService_IWMPUPnPConnectionManagerDual;
extern __declspec (package) const GUID IID_IUPnPService_IWMPUPnPSkinRetrieverDual;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    WMPPlaylistChangeEventType;
enum class    WMPDeviceStatus;
enum class    WMPSyncState;
enum class    WMPRipState;
enum class    WMPBurnFormat;
enum class    WMPBurnState;
enum class    WMPLibraryType;
enum class    WMPFolderScanState;
enum class    WMPStringCollectionChangeEventType;
enum class    WMPOpenState;
enum class    WMPPlayState;
enum class    WMPSubscriptionDownloadState;
enum class    WMP_WRITENAMESEX_TYPE;
interface DECLSPEC_UUID("{19A6627B-DA9E-47C1-BB23-00B5E668236A}") IWMPEvents;
typedef TComInterface<IWMPEvents, &IID_IWMPEvents> IWMPEventsPtr;

interface DECLSPEC_UUID("{1E7601FA-47EA-4107-9EA9-9004ED9684FF}") IWMPEvents2;
typedef TComInterface<IWMPEvents2, &IID_IWMPEvents2> IWMPEvents2Ptr;

interface DECLSPEC_UUID("{82A2986C-0293-4FD0-B279-B21B86C058BE}") IWMPSyncDevice;
typedef TComInterface<IWMPSyncDevice, &IID_IWMPSyncDevice> IWMPSyncDevicePtr;

interface DECLSPEC_UUID("{1F504270-A66B-4223-8E96-26A06C63D69F}") IWMPEvents3;
typedef TComInterface<IWMPEvents3, &IID_IWMPEvents3> IWMPEvents3Ptr;

interface DECLSPEC_UUID("{56E2294F-69ED-4629-A869-AEA72C0DCC2C}") IWMPCdromRip;
typedef TComInterface<IWMPCdromRip, &IID_IWMPCdromRip> IWMPCdromRipPtr;

interface DECLSPEC_UUID("{BD94DBEB-417F-4928-AA06-087D56ED9B59}") IWMPCdromBurn;
typedef TComInterface<IWMPCdromBurn, &IID_IWMPCdromBurn> IWMPCdromBurnPtr;

interface DECLSPEC_UUID("{D5F0F4F1-130C-11D3-B14E-00C04F79FAA6}") IWMPPlaylist;
typedef TComInterface<IWMPPlaylist, &IID_IWMPPlaylist> IWMPPlaylistPtr;

interface DECLSPEC_UUID("{94D55E95-3FAC-11D3-B155-00C04F79FAA6}") IWMPMedia;
typedef TComInterface<IWMPMedia, &IID_IWMPMedia> IWMPMediaPtr;

interface DECLSPEC_UUID("{3DF47861-7DF1-4C1F-A81B-4C26F0F7A7C6}") IWMPLibrary;
typedef TComInterface<IWMPLibrary, &IID_IWMPLibrary> IWMPLibraryPtr;

interface DECLSPEC_UUID("{8363BC22-B4B4-4B19-989D-1CD765749DD1}") IWMPMediaCollection;
typedef TComInterface<IWMPMediaCollection, &IID_IWMPMediaCollection> IWMPMediaCollectionPtr;

interface DECLSPEC_UUID("{4A976298-8C0D-11D3-B389-00C04F68574B}") IWMPStringCollection;
typedef TComInterface<IWMPStringCollection, &IID_IWMPStringCollection> IWMPStringCollectionPtr;

interface DECLSPEC_UUID("{6BF52A51-394A-11D3-B153-00C04F79FAA6}") _WMPOCXEvents;
typedef TComInterface<_WMPOCXEvents, &DIID__WMPOCXEvents> _WMPOCXEventsPtr;

interface DECLSPEC_UUID("{D84CCA99-CCE2-11D2-9ECC-0000F8085981}") IWMPCore;
typedef TComInterface<IWMPCore, &IID_IWMPCore> IWMPCorePtr;

interface DECLSPEC_UUID("{BC17E5B7-7561-4C18-BB90-17D485775659}") IWMPCore2;
typedef TComInterface<IWMPCore2, &IID_IWMPCore2> IWMPCore2Ptr;

interface DECLSPEC_UUID("{7587C667-628F-499F-88E7-6A6F4E888464}") IWMPCore3;
typedef TComInterface<IWMPCore3, &IID_IWMPCore3> IWMPCore3Ptr;

interface DECLSPEC_UUID("{6C497D62-8919-413C-82DB-E935FB3EC584}") IWMPPlayer4;
typedef TComInterface<IWMPPlayer4, &IID_IWMPPlayer4> IWMPPlayer4Ptr;

interface DECLSPEC_UUID("{54062B68-052A-4C25-A39F-8B63346511D4}") IWMPPlayer3;
typedef TComInterface<IWMPPlayer3, &IID_IWMPPlayer3> IWMPPlayer3Ptr;

interface DECLSPEC_UUID("{74C09E02-F828-11D2-A74B-00A0C905F36E}") IWMPControls;
typedef TComInterface<IWMPControls, &IID_IWMPControls> IWMPControlsPtr;

interface DECLSPEC_UUID("{9104D1AB-80C9-4FED-ABF0-2E6417A6DF14}") IWMPSettings;
typedef TComInterface<IWMPSettings, &IID_IWMPSettings> IWMPSettingsPtr;

interface DECLSPEC_UUID("{10A13217-23A7-439B-B1C0-D847C79B7774}") IWMPPlaylistCollection;
typedef TComInterface<IWMPPlaylistCollection, &IID_IWMPPlaylistCollection> IWMPPlaylistCollectionPtr;

interface DECLSPEC_UUID("{679409C0-99F7-11D3-9FB7-00105AA620BB}") IWMPPlaylistArray;
typedef TComInterface<IWMPPlaylistArray, &IID_IWMPPlaylistArray> IWMPPlaylistArrayPtr;

interface DECLSPEC_UUID("{EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7}") IWMPNetwork;
typedef TComInterface<IWMPNetwork, &IID_IWMPNetwork> IWMPNetworkPtr;

interface DECLSPEC_UUID("{EE4C8FE2-34B2-11D3-A3BF-006097C9B344}") IWMPCdromCollection;
typedef TComInterface<IWMPCdromCollection, &IID_IWMPCdromCollection> IWMPCdromCollectionPtr;

interface DECLSPEC_UUID("{CFAB6E98-8730-11D3-B388-00C04F68574B}") IWMPCdrom;
typedef TComInterface<IWMPCdrom, &IID_IWMPCdrom> IWMPCdromPtr;

interface DECLSPEC_UUID("{4F2DF574-C588-11D3-9ED0-00C04FB6E937}") IWMPClosedCaption;
typedef TComInterface<IWMPClosedCaption, &IID_IWMPClosedCaption> IWMPClosedCaptionPtr;

interface DECLSPEC_UUID("{A12DCF7D-14AB-4C1B-A8CD-63909F06025B}") IWMPError;
typedef TComInterface<IWMPError, &IID_IWMPError> IWMPErrorPtr;

interface DECLSPEC_UUID("{3614C646-3B3B-4DE7-A81E-930E3F2127B3}") IWMPErrorItem;
typedef TComInterface<IWMPErrorItem, &IID_IWMPErrorItem> IWMPErrorItemPtr;

interface DECLSPEC_UUID("{8DA61686-4668-4A5C-AE5D-803193293DBE}") IWMPDVD;
typedef TComInterface<IWMPDVD, &IID_IWMPDVD> IWMPDVDPtr;

interface DECLSPEC_UUID("{40897764-CEAB-47BE-AD4A-8E28537F9BBF}") IWMPPlayerApplication;
typedef TComInterface<IWMPPlayerApplication, &IID_IWMPPlayerApplication> IWMPPlayerApplicationPtr;

interface DECLSPEC_UUID("{0E6B01D1-D407-4C85-BF5F-1C01F6150280}") IWMPPlayer2;
typedef TComInterface<IWMPPlayer2, &IID_IWMPPlayer2> IWMPPlayer2Ptr;

interface DECLSPEC_UUID("{6BF52A4F-394A-11D3-B153-00C04F79FAA6}") IWMPPlayer;
typedef TComInterface<IWMPPlayer, &IID_IWMPPlayer> IWMPPlayerPtr;

interface DECLSPEC_UUID("{F75CCEC0-C67C-475C-931E-8719870BEE7D}") IWMPErrorItem2;
typedef TComInterface<IWMPErrorItem2, &IID_IWMPErrorItem2> IWMPErrorItem2Ptr;

interface DECLSPEC_UUID("{6F030D25-0890-480F-9775-1F7E40AB5B8E}") IWMPControls2;
typedef TComInterface<IWMPControls2, &IID_IWMPControls2> IWMPControls2Ptr;

interface DECLSPEC_UUID("{AB7C88BB-143E-4EA4-ACC3-E4350B2106C3}") IWMPMedia2;
typedef TComInterface<IWMPMedia2, &IID_IWMPMedia2> IWMPMedia2Ptr;

interface DECLSPEC_UUID("{F118EFC7-F03A-4FB4-99C9-1C02A5C1065B}") IWMPMedia3;
typedef TComInterface<IWMPMedia3, &IID_IWMPMedia3> IWMPMedia3Ptr;

interface DECLSPEC_UUID("{5C29BBE0-F87D-4C45-AA28-A70F0230FFA9}") IWMPMetadataPicture;
typedef TComInterface<IWMPMetadataPicture, &IID_IWMPMetadataPicture> IWMPMetadataPicturePtr;

interface DECLSPEC_UUID("{769A72DB-13D2-45E2-9C48-53CA9D5B7450}") IWMPMetadataText;
typedef TComInterface<IWMPMetadataText, &IID_IWMPMetadataText> IWMPMetadataTextPtr;

interface DECLSPEC_UUID("{FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2}") IWMPSettings2;
typedef TComInterface<IWMPSettings2, &IID_IWMPSettings2> IWMPSettings2Ptr;

interface DECLSPEC_UUID("{A1D1110E-D545-476A-9A78-AC3E4CB1E6BD}") IWMPControls3;
typedef TComInterface<IWMPControls3, &IID_IWMPControls3> IWMPControls3Ptr;

interface DECLSPEC_UUID("{350BA78B-6BC8-4113-A5F5-312056934EB6}") IWMPClosedCaption2;
typedef TComInterface<IWMPClosedCaption2, &IID_IWMPClosedCaption2> IWMPClosedCaption2Ptr;

interface DECLSPEC_UUID("{8BA957F5-FD8C-4791-B82D-F840401EE474}") IWMPMediaCollection2;
typedef TComInterface<IWMPMediaCollection2, &IID_IWMPMediaCollection2> IWMPMediaCollection2Ptr;

interface DECLSPEC_UUID("{46AD648D-53F1-4A74-92E2-2A1B68D63FD4}") IWMPStringCollection2;
typedef TComInterface<IWMPStringCollection2, &IID_IWMPStringCollection2> IWMPStringCollection2Ptr;

interface DECLSPEC_UUID("{A00918F3-A6B0-4BFB-9189-FD834C7BC5A5}") IWMPQuery;
typedef TComInterface<IWMPQuery, &IID_IWMPQuery> IWMPQueryPtr;

interface DECLSPEC_UUID("{1D01FBDB-ADE2-4C8D-9842-C190B95C3306}") IWMPPlayerServices;
typedef TComInterface<IWMPPlayerServices, &IID_IWMPPlayerServices> IWMPPlayerServicesPtr;

interface DECLSPEC_UUID("{1BB1592F-F040-418A-9F71-17C7512B4D70}") IWMPPlayerServices2;
typedef TComInterface<IWMPPlayerServices2, &IID_IWMPPlayerServices2> IWMPPlayerServices2Ptr;

interface DECLSPEC_UUID("{CBB92747-741F-44FE-AB5B-F1A48F3B2A59}") IWMPRemoteMediaServices;
typedef TComInterface<IWMPRemoteMediaServices, &IID_IWMPRemoteMediaServices> IWMPRemoteMediaServicesPtr;

interface DECLSPEC_UUID("{8B5050FF-E0A4-4808-B3A8-893A9E1ED894}") IWMPSyncServices;
typedef TComInterface<IWMPSyncServices, &IID_IWMPSyncServices> IWMPSyncServicesPtr;

interface DECLSPEC_UUID("{39C2F8D5-1CF2-4D5E-AE09-D73492CF9EAA}") IWMPLibraryServices;
typedef TComInterface<IWMPLibraryServices, &IID_IWMPLibraryServices> IWMPLibraryServicesPtr;

interface DECLSPEC_UUID("{82CBA86B-9F04-474B-A365-D6DD1466E541}") IWMPLibrarySharingServices;
typedef TComInterface<IWMPLibrarySharingServices, &IID_IWMPLibrarySharingServices> IWMPLibrarySharingServicesPtr;

interface DECLSPEC_UUID("{788C8743-E57F-439D-A468-5BC77F2E59C6}") IWMPFolderMonitorServices;
typedef TComInterface<IWMPFolderMonitorServices, &IID_IWMPFolderMonitorServices> IWMPFolderMonitorServicesPtr;

interface DECLSPEC_UUID("{88AFB4B2-140A-44D2-91E6-4543DA467CD1}") IWMPSyncDevice2;
typedef TComInterface<IWMPSyncDevice2, &IID_IWMPSyncDevice2> IWMPSyncDevice2Ptr;

interface DECLSPEC_UUID("{5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70}") IWMPPlaylistCtrl;
typedef TComInterface<IWMPPlaylistCtrl, &IID_IWMPPlaylistCtrl> IWMPPlaylistCtrlPtr;

interface DECLSPEC_UUID("{E41C88DD-2364-4FF7-A0F5-CA9859AF783F}") IAppDispatch;
typedef TComInterface<IAppDispatch, &IID_IAppDispatch> IAppDispatchPtr;

interface DECLSPEC_UUID("{EF870383-83AB-4EA9-BE48-56FA4251AF10}") IWMPSafeBrowser;
typedef TComInterface<IWMPSafeBrowser, &IID_IWMPSafeBrowser> IWMPSafeBrowserPtr;

interface DECLSPEC_UUID("{21D077C1-4BAA-11D3-BD45-00C04F6EA5AE}") IWMPObjectExtendedProps;
typedef TComInterface<IWMPObjectExtendedProps, &IID_IWMPObjectExtendedProps> IWMPObjectExtendedPropsPtr;

interface DECLSPEC_UUID("{72F486B1-0D43-11D3-BD3F-00C04F6EA5AE}") IWMPLayoutSubView;
typedef TComInterface<IWMPLayoutSubView, &IID_IWMPLayoutSubView> IWMPLayoutSubViewPtr;

interface DECLSPEC_UUID("{172E905D-80D9-4C2F-B7CE-2CCB771787A2}") IWMPLayoutView;
typedef TComInterface<IWMPLayoutView, &IID_IWMPLayoutView> IWMPLayoutViewPtr;

interface DECLSPEC_UUID("{5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE}") IWMPEventObject;
typedef TComInterface<IWMPEventObject, &IID_IWMPEventObject> IWMPEventObjectPtr;

interface DECLSPEC_UUID("{6FCAE13D-E492-4584-9C21-D2C052A2A33A}") IWMPTheme;
typedef TComInterface<IWMPTheme, &IID_IWMPTheme> IWMPThemePtr;

interface DECLSPEC_UUID("{B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81}") IWMPLayoutSettingsDispatch;
typedef TComInterface<IWMPLayoutSettingsDispatch, &IID_IWMPLayoutSettingsDispatch> IWMPLayoutSettingsDispatchPtr;

interface DECLSPEC_UUID("{98BB02D4-ED74-43CC-AD6A-45888F2E0DCC}") IWMPBrandDispatch;
typedef TComInterface<IWMPBrandDispatch, &IID_IWMPBrandDispatch> IWMPBrandDispatchPtr;

interface DECLSPEC_UUID("{504F112E-77CC-4E3C-A073-5371B31D9B36}") IWMPNowPlayingHelperDispatch;
typedef TComInterface<IWMPNowPlayingHelperDispatch, &IID_IWMPNowPlayingHelperDispatch> IWMPNowPlayingHelperDispatchPtr;

interface DECLSPEC_UUID("{2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F}") IWMPNowDoingDispatch;
typedef TComInterface<IWMPNowDoingDispatch, &IID_IWMPNowDoingDispatch> IWMPNowDoingDispatchPtr;

interface DECLSPEC_UUID("{BB17FFF7-1692-4555-918A-6AF7BFACEDD2}") IWMPButtonCtrlEvents;
typedef TComInterface<IWMPButtonCtrlEvents, &DIID_IWMPButtonCtrlEvents> IWMPButtonCtrlEventsPtr;

interface DECLSPEC_UUID("{87291B50-0C8E-11D3-BB2A-00A0C93CA73A}") IWMPButtonCtrl;
typedef TComInterface<IWMPButtonCtrl, &IID_IWMPButtonCtrl> IWMPButtonCtrlPtr;

interface DECLSPEC_UUID("{FC1880CE-83B9-43A7-A066-C44CE8C82583}") IWMPListBoxCtrl;
typedef TComInterface<IWMPListBoxCtrl, &IID_IWMPListBoxCtrl> IWMPListBoxCtrlPtr;

interface DECLSPEC_UUID("{D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6}") IWMPListBoxItem;
typedef TComInterface<IWMPListBoxItem, &IID_IWMPListBoxItem> IWMPListBoxItemPtr;

interface DECLSPEC_UUID("{63D9D30F-AE4C-4678-8CA8-5720F4FE4419}") IWMPPlaylistCtrlColumn;
typedef TComInterface<IWMPPlaylistCtrlColumn, &IID_IWMPPlaylistCtrlColumn> IWMPPlaylistCtrlColumnPtr;

interface DECLSPEC_UUID("{CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A}") IWMPSliderCtrlEvents;
typedef TComInterface<IWMPSliderCtrlEvents, &DIID_IWMPSliderCtrlEvents> IWMPSliderCtrlEventsPtr;

interface DECLSPEC_UUID("{F2BF2C8F-405F-11D3-BB39-00A0C93CA73A}") IWMPSliderCtrl;
typedef TComInterface<IWMPSliderCtrl, &IID_IWMPSliderCtrl> IWMPSliderCtrlPtr;

interface DECLSPEC_UUID("{A85C0477-714C-4A06-B9F6-7C8CA38B45DC}") IWMPVideoCtrlEvents;
typedef TComInterface<IWMPVideoCtrlEvents, &DIID_IWMPVideoCtrlEvents> IWMPVideoCtrlEventsPtr;

interface DECLSPEC_UUID("{61CECF10-FC3A-11D2-A1CD-005004602752}") IWMPVideoCtrl;
typedef TComInterface<IWMPVideoCtrl, &IID_IWMPVideoCtrl> IWMPVideoCtrlPtr;

interface DECLSPEC_UUID("{A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769}") IWMPEffectsCtrl;
typedef TComInterface<IWMPEffectsCtrl, &IID_IWMPEffectsCtrl> IWMPEffectsCtrlPtr;

interface DECLSPEC_UUID("{2BD3716F-A914-49FB-8655-996D5F495498}") IWMPEqualizerSettingsCtrl;
typedef TComInterface<IWMPEqualizerSettingsCtrl, &IID_IWMPEqualizerSettingsCtrl> IWMPEqualizerSettingsCtrlPtr;

interface DECLSPEC_UUID("{07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6}") IWMPVideoSettingsCtrl;
typedef TComInterface<IWMPVideoSettingsCtrl, &IID_IWMPVideoSettingsCtrl> IWMPVideoSettingsCtrlPtr;

interface DECLSPEC_UUID("{B738FCAE-F089-45DF-AED6-034B9E7DB632}") IWMPLibraryTreeCtrl;
typedef TComInterface<IWMPLibraryTreeCtrl, &IID_IWMPLibraryTreeCtrl> IWMPLibraryTreeCtrlPtr;

interface DECLSPEC_UUID("{70E1217C-C617-4CFD-BD8A-69CA2043E70B}") IWMPEditCtrl;
typedef TComInterface<IWMPEditCtrl, &IID_IWMPEditCtrl> IWMPEditCtrlPtr;

interface DECLSPEC_UUID("{5D0AD945-289E-45C5-A9C6-F301F0152108}") IWMPPluginUIHost;
typedef TComInterface<IWMPPluginUIHost, &IID_IWMPPluginUIHost> IWMPPluginUIHostPtr;

interface DECLSPEC_UUID("{158A7ADC-33DA-4039-A553-BDDBBE389F5C}") IWMPMenuCtrl;
typedef TComInterface<IWMPMenuCtrl, &IID_IWMPMenuCtrl> IWMPMenuCtrlPtr;

interface DECLSPEC_UUID("{1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875}") IWMPAutoMenuCtrl;
typedef TComInterface<IWMPAutoMenuCtrl, &IID_IWMPAutoMenuCtrl> IWMPAutoMenuCtrlPtr;

interface DECLSPEC_UUID("{58D507B1-2354-11D3-BD41-00C04F6EA5AE}") IWMPRegionalButtonCtrl;
typedef TComInterface<IWMPRegionalButtonCtrl, &IID_IWMPRegionalButtonCtrl> IWMPRegionalButtonCtrlPtr;

interface DECLSPEC_UUID("{50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE}") IWMPRegionalButtonEvents;
typedef TComInterface<IWMPRegionalButtonEvents, &DIID_IWMPRegionalButtonEvents> IWMPRegionalButtonEventsPtr;

interface DECLSPEC_UUID("{58D507B2-2354-11D3-BD41-00C04F6EA5AE}") IWMPRegionalButton;
typedef TComInterface<IWMPRegionalButton, &IID_IWMPRegionalButton> IWMPRegionalButtonPtr;

interface DECLSPEC_UUID("{95F45AA4-ED0A-11D2-BA67-0000F80855E6}") IWMPCustomSliderCtrlEvents;
typedef TComInterface<IWMPCustomSliderCtrlEvents, &DIID_IWMPCustomSliderCtrlEvents> IWMPCustomSliderCtrlEventsPtr;

interface DECLSPEC_UUID("{95F45AA2-ED0A-11D2-BA67-0000F80855E6}") IWMPCustomSlider;
typedef TComInterface<IWMPCustomSlider, &IID_IWMPCustomSlider> IWMPCustomSliderPtr;

interface DECLSPEC_UUID("{237DAC8E-0E32-11D3-A2E2-00C04F79F88E}") IWMPTextCtrl;
typedef TComInterface<IWMPTextCtrl, &IID_IWMPTextCtrl> IWMPTextCtrlPtr;

interface DECLSPEC_UUID("{891EADB1-1C45-48B0-B704-49A888DA98C4}") ITaskCntrCtrl;
typedef TComInterface<ITaskCntrCtrl, &IID_ITaskCntrCtrl> ITaskCntrCtrlPtr;

interface DECLSPEC_UUID("{D84CCA96-CCE2-11D2-9ECC-0000F8085981}") _WMPCoreEvents;
typedef TComInterface<_WMPCoreEvents, &DIID__WMPCoreEvents> _WMPCoreEventsPtr;

interface DECLSPEC_UUID("{6B550945-018F-11D3-B14A-00C04F79FAA6}") IWMPGraphEventHandler;
typedef TComInterface<IWMPGraphEventHandler, &IID_IWMPGraphEventHandler> IWMPGraphEventHandlerPtr;

interface DECLSPEC_UUID("{F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC}") IBattery;
typedef TComInterface<IBattery, &IID_IBattery> IBatteryPtr;

interface DECLSPEC_UUID("{40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22}") IBatteryPreset;
typedef TComInterface<IBatteryPreset, &IID_IBatteryPreset> IBatteryPresetPtr;

interface DECLSPEC_UUID("{F85E2D65-207D-48DB-84B1-915E1735DB17}") IBatteryRandomPreset;
typedef TComInterface<IBatteryRandomPreset, &IID_IBatteryRandomPreset> IBatteryRandomPresetPtr;

interface DECLSPEC_UUID("{876E7208-0172-4EBB-B08B-2E1D30DFE44C}") IBatterySavedPreset;
typedef TComInterface<IBatterySavedPreset, &IID_IBatterySavedPreset> IBatterySavedPresetPtr;

interface DECLSPEC_UUID("{33E9291A-F6A9-11D2-9435-00A0C92A2F2D}") IBarsEffect;
typedef TComInterface<IBarsEffect, &IID_IBarsEffect> IBarsEffectPtr;

interface DECLSPEC_UUID("{E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84}") IWMPExternal;
typedef TComInterface<IWMPExternal, &IID_IWMPExternal> IWMPExternalPtr;

interface DECLSPEC_UUID("{D10CCDFF-472D-498C-B5FE-3630E5405E0A}") IWMPExternalColors;
typedef TComInterface<IWMPExternalColors, &IID_IWMPExternalColors> IWMPExternalColorsPtr;

interface DECLSPEC_UUID("{54DF358E-CF38-4010-99F1-F44B0E9000E5}") IWMPSubscriptionServiceLimited;
typedef TComInterface<IWMPSubscriptionServiceLimited, &IID_IWMPSubscriptionServiceLimited> IWMPSubscriptionServiceLimitedPtr;

interface DECLSPEC_UUID("{2E922378-EE70-4CEB-BBAB-CE7CE4A04816}") IWMPSubscriptionServiceExternal;
typedef TComInterface<IWMPSubscriptionServiceExternal, &IID_IWMPSubscriptionServiceExternal> IWMPSubscriptionServiceExternalPtr;

interface DECLSPEC_UUID("{E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D}") IWMPDownloadManager;
typedef TComInterface<IWMPDownloadManager, &IID_IWMPDownloadManager> IWMPDownloadManagerPtr;

interface DECLSPEC_UUID("{0A319C7F-85F9-436C-B88E-82FD88000E1C}") IWMPDownloadCollection;
typedef TComInterface<IWMPDownloadCollection, &IID_IWMPDownloadCollection> IWMPDownloadCollectionPtr;

interface DECLSPEC_UUID("{C9470E8E-3F6B-46A9-A0A9-452815C34297}") IWMPDownloadItem;
typedef TComInterface<IWMPDownloadItem, &IID_IWMPDownloadItem> IWMPDownloadItemPtr;

interface DECLSPEC_UUID("{9FBB3336-6DA3-479D-B8FF-67D46E20A987}") IWMPDownloadItem2;
typedef TComInterface<IWMPDownloadItem2, &IID_IWMPDownloadItem2> IWMPDownloadItem2Ptr;

interface DECLSPEC_UUID("{5F0248C1-62B3-42D7-B927-029119E6AD14}") IWMPSubscriptionServicePlayMedia;
typedef TComInterface<IWMPSubscriptionServicePlayMedia, &IID_IWMPSubscriptionServicePlayMedia> IWMPSubscriptionServicePlayMediaPtr;

interface DECLSPEC_UUID("{A915CEA2-72DF-41E1-A576-EF0BAE5E5169}") IWMPDiscoExternal;
typedef TComInterface<IWMPDiscoExternal, &IID_IWMPDiscoExternal> IWMPDiscoExternalPtr;

interface DECLSPEC_UUID("{2D7EF888-1D3C-484A-A906-9F49D99BB344}") IWMPCDDVDWizardExternal;
typedef TComInterface<IWMPCDDVDWizardExternal, &IID_IWMPCDDVDWizardExternal> IWMPCDDVDWizardExternalPtr;

interface DECLSPEC_UUID("{F81B2A59-02BC-4003-8B2F-C124AF66FC66}") IWMPBaseExternal;
typedef TComInterface<IWMPBaseExternal, &IID_IWMPBaseExternal> IWMPBaseExternalPtr;

interface DECLSPEC_UUID("{3148E685-B243-423D-8341-8480D6EFF674}") IWMPOfflineExternal;
typedef TComInterface<IWMPOfflineExternal, &IID_IWMPOfflineExternal> IWMPOfflineExternalPtr;

interface DECLSPEC_UUID("{17E5DC63-E296-4EDE-B9CC-CF57D18ED10E}") IWMPRemoteUPnPService;
typedef TComInterface<IWMPRemoteUPnPService, &IID_IWMPRemoteUPnPService> IWMPRemoteUPnPServicePtr;

interface DECLSPEC_UUID("{76F13F00-6E17-4D98-BE2D-D2A84CFF5BFD}") IWMPRemoteUPnPDevice;
typedef TComInterface<IWMPRemoteUPnPDevice, &IID_IWMPRemoteUPnPDevice> IWMPRemoteUPnPDevicePtr;

interface DECLSPEC_UUID("{968F36CA-CB43-4F6A-A03B-66A9C05A93EE}") IWMPRemoteDeviceController;
typedef TComInterface<IWMPRemoteDeviceController, &IID_IWMPRemoteDeviceController> IWMPRemoteDeviceControllerPtr;

interface DECLSPEC_UUID("{0EA1DE14-E288-4958-A23C-942634A27EB5}") IUPnPService_IWMPUPnPAVTransportDual;
typedef TComInterface<IUPnPService_IWMPUPnPAVTransportDual, &IID_IUPnPService_IWMPUPnPAVTransportDual> IUPnPService_IWMPUPnPAVTransportDualPtr;

interface DECLSPEC_UUID("{7CAD1D24-EDED-47FA-A1D8-4628FBE5638C}") IUPnPService_IWMPUPnPBinaryControlDual;
typedef TComInterface<IUPnPService_IWMPUPnPBinaryControlDual, &IID_IUPnPService_IWMPUPnPBinaryControlDual> IUPnPService_IWMPUPnPBinaryControlDualPtr;

interface DECLSPEC_UUID("{5A09862E-47B1-4D17-94EA-2BDE3014DD42}") IUPnPService_IWMPUPnPVariableControlDual;
typedef TComInterface<IUPnPService_IWMPUPnPVariableControlDual, &IID_IUPnPService_IWMPUPnPVariableControlDual> IUPnPService_IWMPUPnPVariableControlDualPtr;

interface DECLSPEC_UUID("{1AF41667-542C-42EA-BF53-DC101168C503}") IUPnPService_IWMPUPnPConnectionManagerDual;
typedef TComInterface<IUPnPService_IWMPUPnPConnectionManagerDual, &IID_IUPnPService_IWMPUPnPConnectionManagerDual> IUPnPService_IWMPUPnPConnectionManagerDualPtr;

interface DECLSPEC_UUID("{AC743628-971D-4C1E-B019-50543EFE2BAD}") IUPnPService_IWMPUPnPSkinRetrieverDual;
typedef TComInterface<IUPnPService_IWMPUPnPSkinRetrieverDual, &IID_IUPnPService_IWMPUPnPSkinRetrieverDual> IUPnPService_IWMPUPnPSkinRetrieverDualPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IWMPPlayer4 WindowsMediaPlayer;
typedef IWMPPlayer4Ptr WindowsMediaPlayerPtr;
typedef IWMPButtonCtrl WMPButtonCtrl;
typedef IWMPButtonCtrlPtr WMPButtonCtrlPtr;
typedef IWMPListBoxCtrl WMPListBoxCtrl;
typedef IWMPListBoxCtrlPtr WMPListBoxCtrlPtr;
typedef IWMPSliderCtrl WMPSliderCtrl;
typedef IWMPSliderCtrlPtr WMPSliderCtrlPtr;
typedef IWMPVideoCtrl WMPVideoCtrl;
typedef IWMPVideoCtrlPtr WMPVideoCtrlPtr;
typedef IWMPEffectsCtrl WMPEffects;
typedef IWMPEffectsCtrlPtr WMPEffectsPtr;
typedef IWMPEqualizerSettingsCtrl WMPEqualizerSettingsCtrl;
typedef IWMPEqualizerSettingsCtrlPtr WMPEqualizerSettingsCtrlPtr;
typedef IWMPVideoSettingsCtrl WMPVideoSettingsCtrl;
typedef IWMPVideoSettingsCtrlPtr WMPVideoSettingsCtrlPtr;
typedef IWMPLibraryTreeCtrl WMPLibraryTreeCtrl;
typedef IWMPLibraryTreeCtrlPtr WMPLibraryTreeCtrlPtr;
typedef IWMPEditCtrl WMPEditCtrl;
typedef IWMPEditCtrlPtr WMPEditCtrlPtr;
typedef IWMPMenuCtrl WMPMenuCtrl;
typedef IWMPMenuCtrlPtr WMPMenuCtrlPtr;
typedef IWMPAutoMenuCtrl WMPAutoMenuCtrl;
typedef IWMPAutoMenuCtrlPtr WMPAutoMenuCtrlPtr;
typedef IWMPRegionalButtonCtrl WMPRegionalButtonCtrl;
typedef IWMPRegionalButtonCtrlPtr WMPRegionalButtonCtrlPtr;
typedef IWMPRegionalButton WMPRegionalButton;
typedef IWMPRegionalButtonPtr WMPRegionalButtonPtr;
typedef IWMPCustomSlider WMPCustomSliderCtrl;
typedef IWMPCustomSliderPtr WMPCustomSliderCtrlPtr;
typedef IWMPTextCtrl WMPTextCtrl;
typedef IWMPTextCtrlPtr WMPTextCtrlPtr;
typedef IWMPPlaylistCtrl WMPPlaylistCtrl;
typedef IWMPPlaylistCtrlPtr WMPPlaylistCtrlPtr;
typedef IWMPCore3 WMPCore;
typedef IWMPCore3Ptr WMPCorePtr;

#define LIBID_OF_WindowsMediaPlayer (&LIBID_WMPLib)
#define LIBID_OF_WMPButtonCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPListBoxCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPSliderCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPVideoCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPEffects (&LIBID_WMPLib)
#define LIBID_OF_WMPEqualizerSettingsCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPVideoSettingsCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPLibraryTreeCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPEditCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPMenuCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPAutoMenuCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPRegionalButtonCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPRegionalButton (&LIBID_WMPLib)
#define LIBID_OF_WMPCustomSliderCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPTextCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPPlaylistCtrl (&LIBID_WMPLib)
#define LIBID_OF_WMPCore (&LIBID_WMPLib)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef unsigned_long ULONG_PTR;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class WMPPlaylistChangeEventType
{
  wmplcUnknown = 0, 
  wmplcClear = 1, 
  wmplcInfoChange = 2, 
  wmplcMove = 3, 
  wmplcDelete = 4, 
  wmplcInsert = 5, 
  wmplcAppend = 6, 
  wmplcPrivate = 7, 
  wmplcNameChange = 8, 
  wmplcMorph = 9, 
  wmplcSort = 10, 
  wmplcLast = 11
};

enum class WMPDeviceStatus
{
  wmpdsUnknown = 0, 
  wmpdsPartnershipExists = 1, 
  wmpdsPartnershipDeclined = 2, 
  wmpdsPartnershipAnother = 3, 
  wmpdsManualDevice = 4, 
  wmpdsNewDevice = 5, 
  wmpdsLast = 6
};

enum class WMPSyncState
{
  wmpssUnknown = 0, 
  wmpssSynchronizing = 1, 
  wmpssStopped = 2, 
  wmpssLast = 3
};

enum class WMPRipState
{
  wmprsUnknown = 0, 
  wmprsRipping = 1, 
  wmprsStopped = 2
};

enum class WMPBurnFormat
{
  wmpbfAudioCD = 0, 
  wmpbfDataCD = 1
};

enum class WMPBurnState
{
  wmpbsUnknown = 0, 
  wmpbsBusy = 1, 
  wmpbsReady = 2, 
  wmpbsWaitingForDisc = 3, 
  wmpbsRefreshStatusPending = 4, 
  wmpbsPreparingToBurn = 5, 
  wmpbsBurning = 6, 
  wmpbsStopped = 7, 
  wmpbsErasing = 8, 
  wmpbsDownloading = 9
};

enum class WMPLibraryType
{
  wmpltUnknown = 0, 
  wmpltAll = 1, 
  wmpltLocal = 2, 
  wmpltRemote = 3, 
  wmpltDisc = 4, 
  wmpltPortableDevice = 5
};

enum class WMPFolderScanState
{
  wmpfssUnknown = 0, 
  wmpfssScanning = 1, 
  wmpfssUpdating = 2, 
  wmpfssStopped = 3
};

enum class WMPStringCollectionChangeEventType
{
  wmpsccetUnknown = 0, 
  wmpsccetInsert = 1, 
  wmpsccetChange = 2, 
  wmpsccetDelete = 3, 
  wmpsccetClear = 4, 
  wmpsccetBeginUpdates = 5, 
  wmpsccetEndUpdates = 6
};

enum class WMPOpenState
{
  wmposUndefined = 0, 
  wmposPlaylistChanging = 1, 
  wmposPlaylistLocating = 2, 
  wmposPlaylistConnecting = 3, 
  wmposPlaylistLoading = 4, 
  wmposPlaylistOpening = 5, 
  wmposPlaylistOpenNoMedia = 6, 
  wmposPlaylistChanged = 7, 
  wmposMediaChanging = 8, 
  wmposMediaLocating = 9, 
  wmposMediaConnecting = 10, 
  wmposMediaLoading = 11, 
  wmposMediaOpening = 12, 
  wmposMediaOpen = 13, 
  wmposBeginCodecAcquisition = 14, 
  wmposEndCodecAcquisition = 15, 
  wmposBeginLicenseAcquisition = 16, 
  wmposEndLicenseAcquisition = 17, 
  wmposBeginIndividualization = 18, 
  wmposEndIndividualization = 19, 
  wmposMediaWaiting = 20, 
  wmposOpeningUnknownURL = 21
};

enum class WMPPlayState
{
  wmppsUndefined = 0, 
  wmppsStopped = 1, 
  wmppsPaused = 2, 
  wmppsPlaying = 3, 
  wmppsScanForward = 4, 
  wmppsScanReverse = 5, 
  wmppsBuffering = 6, 
  wmppsWaiting = 7, 
  wmppsMediaEnded = 8, 
  wmppsTransitioning = 9, 
  wmppsReady = 10, 
  wmppsReconnecting = 11, 
  wmppsLast = 12
};

enum class WMPSubscriptionDownloadState
{
  wmpsdlsDownloading = 0, 
  wmpsdlsPaused = 1, 
  wmpsdlsProcessing = 2, 
  wmpsdlsCompleted = 3, 
  wmpsdlsCancelled = 4
};

enum class WMP_WRITENAMESEX_TYPE
{
  WMP_WRITENAMES_TYPE_CD_BY_TOC = 0, 
  WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID = 1, 
  WMP_WRITENAMES_TYPE_CD_BY_MDQCD = 2, 
  WMP_WRITENAMES_TYPE_DVD_BY_DVDID = 3
};

// *********************************************************************//
// Interface: IWMPEvents
// Flags:     (0)
// GUID:      {19A6627B-DA9E-47C1-BB23-00B5E668236A}
// *********************************************************************//
interface IWMPEvents  : public IUnknown
{
public:
  // [5001] Sent when the control changes OpenState
  virtual void STDMETHODCALLTYPE OpenStateChange(long NewState/*[in]*/) = 0;
  // [5101] Sent when the control changes PlayState
  virtual void STDMETHODCALLTYPE PlayStateChange(long NewState/*[in]*/) = 0;
  // [5102] Sent when the current audio language has changed
  virtual void STDMETHODCALLTYPE AudioLanguageChange(long LangID/*[in]*/) = 0;
  // [5002] Sent when the status string changes
  virtual void STDMETHODCALLTYPE StatusChange(void) = 0;
  // [5301] Sent when a synchronized command or URL is received
  virtual void STDMETHODCALLTYPE ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/) = 0;
  // [5403] Sent when a new stream is started in a channel
  virtual void STDMETHODCALLTYPE NewStream(void) = 0;
  // [5401] Sent when the control is disconnected from the server
  virtual void STDMETHODCALLTYPE Disconnect(long Result/*[in]*/) = 0;
  // [5402] Sent when the control begins or ends buffering
  virtual void STDMETHODCALLTYPE Buffering(VARIANT_BOOL Start/*[in]*/) = 0;
  // [5501] Sent when the control has an error condition
  virtual void STDMETHODCALLTYPE Error(void) = 0;
  // [5601] Sent when the control encounters a problem
  virtual void STDMETHODCALLTYPE Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                         BSTR Description/*[in]*/) = 0;
  // [5201] Sent when the end of file is reached
  virtual void STDMETHODCALLTYPE EndOfStream(long Result/*[in]*/) = 0;
  // [5202] Indicates that the current position of the movie has changed
  virtual void STDMETHODCALLTYPE PositionChange(double oldPosition/*[in]*/, 
                                                double newPosition/*[in]*/) = 0;
  // [5203] Sent when a marker is reached
  virtual void STDMETHODCALLTYPE MarkerHit(long MarkerNum/*[in]*/) = 0;
  // [5204] Indicates that the unit used to express duration and position has changed
  virtual void STDMETHODCALLTYPE DurationUnitChange(long NewDurationUnit/*[in]*/) = 0;
  // [5701] Indicates that the CD ROM media has changed
  virtual void STDMETHODCALLTYPE CdromMediaChange(long CdromNum/*[in]*/) = 0;
  // [5801] Sent when a playlist changes
  virtual void STDMETHODCALLTYPE PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                                Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/) = 0;
  // [5804] Sent when the current playlist changes
  virtual void STDMETHODCALLTYPE CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/) = 0;
  // [5805] Sent when a current playlist item becomes available
  virtual void STDMETHODCALLTYPE CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/) = 0;
  // [5802] Sent when a media object changes
  virtual void STDMETHODCALLTYPE MediaChange(LPDISPATCH Item/*[in]*/) = 0;
  // [5803] Sent when a current media item becomes available
  virtual void STDMETHODCALLTYPE CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/) = 0;
  // [5806] Sent when the item selection on the current playlist changes
  virtual void STDMETHODCALLTYPE CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/) = 0;
  // [5807] Sent when the media collection needs to be requeried
  virtual void STDMETHODCALLTYPE MediaCollectionChange(void) = 0;
  // [5808] Sent when an attribute string is added in the media collection
  virtual void STDMETHODCALLTYPE MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                                     BSTR bstrAttribVal/*[in]*/) = 0;
  // [5809] Sent when an attribute string is removed from the media collection
  virtual void STDMETHODCALLTYPE MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                                       BSTR bstrAttribVal/*[in]*/) = 0;
  // [5820] Sent when an attribute string is changed in the media collection
  virtual void STDMETHODCALLTYPE MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                                       BSTR bstrOldAttribVal/*[in]*/, 
                                                                       BSTR bstrNewAttribVal/*[in]*/) = 0;
  // [5810] Sent when playlist collection needs to be requeried
  virtual void STDMETHODCALLTYPE PlaylistCollectionChange(void) = 0;
  // [5811] Sent when a playlist is added to the playlist collection
  virtual void STDMETHODCALLTYPE PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/) = 0;
  // [5812] Sent when a playlist is removed from the playlist collection
  virtual void STDMETHODCALLTYPE PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/) = 0;
  // [5818] Sent when a playlist has been set or reset as deleted
  virtual void STDMETHODCALLTYPE PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                                        VARIANT_BOOL varfIsDeleted/*[in]*/) = 0;
  // [5819] Playlist playback mode has changed
  virtual void STDMETHODCALLTYPE ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/) = 0;
  // [5821] Sent when the media object has an error condition
  virtual void STDMETHODCALLTYPE MediaError(LPDISPATCH pMediaObject/*[in]*/) = 0;
  // [5823] Current playlist switch with no open state change
  virtual void STDMETHODCALLTYPE OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/) = 0;
  // [5822] Send a current domain
  virtual void STDMETHODCALLTYPE DomainChange(BSTR strDomain/*[in]*/) = 0;
  // [6501] Sent when display switches to player application
  virtual void STDMETHODCALLTYPE SwitchedToPlayerApplication(void) = 0;
  // [6502] Sent when display switches to control
  virtual void STDMETHODCALLTYPE SwitchedToControl(void) = 0;
  // [6503] Sent when the player docks or undocks
  virtual void STDMETHODCALLTYPE PlayerDockedStateChange(void) = 0;
  // [6504] Sent when the OCX reconnects to the player
  virtual void STDMETHODCALLTYPE PlayerReconnect(void) = 0;
  // [6505] Occurs when a user clicks the mouse
  virtual void STDMETHODCALLTYPE _Click(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                        long fX/*[in]*/, long fY/*[in]*/) = 0;
  // [6506] Occurs when a user double-clicks the mouse
  virtual void STDMETHODCALLTYPE DoubleClick(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                             long fX/*[in]*/, long fY/*[in]*/) = 0;
  // [6507] Occurs when a key is pressed
  virtual void STDMETHODCALLTYPE KeyDown(short nKeyCode/*[in]*/, short nShiftState/*[in]*/) = 0;
  // [6508] Occurs when a key is pressed and released
  virtual void STDMETHODCALLTYPE KeyPress(short nKeyAscii/*[in]*/) = 0;
  // [6509] Occurs when a key is released
  virtual void STDMETHODCALLTYPE KeyUp(short nKeyCode/*[in]*/, short nShiftState/*[in]*/) = 0;
  // [6510] Occurs when a mouse button is pressed
  virtual void STDMETHODCALLTYPE MouseDown(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                           long fX/*[in]*/, long fY/*[in]*/) = 0;
  // [6511] Occurs when a mouse pointer is moved
  virtual void STDMETHODCALLTYPE MouseMove(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                           long fX/*[in]*/, long fY/*[in]*/) = 0;
  // [6512] Occurs when a mouse button is released
  virtual void STDMETHODCALLTYPE MouseUp(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                         long fX/*[in]*/, long fY/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IWMPEvents2
// Flags:     (0)
// GUID:      {1E7601FA-47EA-4107-9EA9-9004ED9684FF}
// *********************************************************************//
interface IWMPEvents2  : public Wmplib_tlb::IWMPEvents
{
public:
  // [6513] Occurs when a device is connected
  virtual void STDMETHODCALLTYPE DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/) = 0;
  // [6514] Occurs when a device is disconnected
  virtual void STDMETHODCALLTYPE DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/) = 0;
  // [6515] Occurs when a device status changes
  virtual void STDMETHODCALLTYPE DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                    Wmplib_tlb::WMPDeviceStatus NewStatus/*[in]*/) = 0;
  // [6516] Occurs when a device sync state changes
  virtual void STDMETHODCALLTYPE DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                       Wmplib_tlb::WMPSyncState NewState/*[in]*/) = 0;
  // [6517] Occurs when a device's media has an error
  virtual void STDMETHODCALLTYPE DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                 LPDISPATCH pMedia/*[in]*/) = 0;
  // [6518] Occurs when createPartnership call completes
  virtual void STDMETHODCALLTYPE CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                           HRESULT hrResult/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IWMPSyncDevice
// Flags:     (256) OleAutomation
// GUID:      {82A2986C-0293-4FD0-B279-B21B86C058BE}
// *********************************************************************//
interface IWMPSyncDevice  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_friendlyName(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_friendlyName(BSTR pbstrName/*[in]*/) = 0; // [1610678272]
  virtual HRESULT STDMETHODCALLTYPE get_deviceName(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_deviceId(BSTR* pbstrDeviceId/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_partnershipIndex(long* plIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_connected(VARIANT_BOOL* pvbConnected/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_status(Wmplib_tlb::WMPDeviceStatus* pwmpds/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_syncState(Wmplib_tlb::WMPSyncState* pwmpss/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_progress(long* plProgress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(BSTR bstrItemName/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE createPartnership(VARIANT_BOOL vbShowUI/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE deletePartnership(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Start(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE stop(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE showSettings(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE isIdentical(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                VARIANT_BOOL* pvbool/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPEvents3
// Flags:     (0)
// GUID:      {1F504270-A66B-4223-8E96-26A06C63D69F}
// *********************************************************************//
interface IWMPEvents3  : public Wmplib_tlb::IWMPEvents2
{
public:
  // [6519] Occurs when ripping state changes
  virtual void STDMETHODCALLTYPE CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                     Wmplib_tlb::WMPRipState wmprs/*[in]*/) = 0;
  // [6520] Occurs when an error happens while ripping a media
  virtual void STDMETHODCALLTYPE CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                    LPDISPATCH pMedia/*[in]*/) = 0;
  // [6521] Occurs when burning state changes
  virtual void STDMETHODCALLTYPE CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                      Wmplib_tlb::WMPBurnState wmpbs/*[in]*/) = 0;
  // [6522] Occurs when an error happens while burning a media
  virtual void STDMETHODCALLTYPE CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                     LPDISPATCH pMedia/*[in]*/) = 0;
  // [6523] Occurs when a generic error happens while burning
  virtual void STDMETHODCALLTYPE CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                HRESULT hrError/*[in]*/) = 0;
  // [6524] Occurs when a library is connected
  virtual void STDMETHODCALLTYPE LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/) = 0;
  // [6525] Occurs when a library is disconnected
  virtual void STDMETHODCALLTYPE LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/) = 0;
  // [6526] Occurs when a folder scan state changes
  virtual void STDMETHODCALLTYPE FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss/*[in]*/) = 0;
  // [5824] Sent when a string collection changes
  virtual void STDMETHODCALLTYPE StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                                        Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/, 
                                                        long lCollectionIndex/*[in]*/) = 0;
  // [5825] Sent when a media is added to the local library
  virtual void STDMETHODCALLTYPE MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/) = 0;
  // [5826] Sent when a media is removed from the local library
  virtual void STDMETHODCALLTYPE MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IWMPCdromRip
// Flags:     (256) OleAutomation
// GUID:      {56E2294F-69ED-4629-A869-AEA72C0DCC2C}
// *********************************************************************//
interface IWMPCdromRip  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ripState(Wmplib_tlb::WMPRipState* pwmprs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ripProgress(long* plProgress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startRip(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE stopRip(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPCdromBurn
// Flags:     (256) OleAutomation
// GUID:      {BD94DBEB-417F-4928-AA06-087D56ED9B59}
// *********************************************************************//
interface IWMPCdromBurn  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE isAvailable(BSTR bstrItem/*[in]*/, 
                                                VARIANT_BOOL* pIsAvailable/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(BSTR bstrItem/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_label(BSTR* pbstrLabel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_label(BSTR pbstrLabel/*[in]*/) = 0; // [1610678274]
  virtual HRESULT STDMETHODCALLTYPE get_burnFormat(Wmplib_tlb::WMPBurnFormat* pwmpbf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_burnFormat(Wmplib_tlb::WMPBurnFormat pwmpbf/*[in]*/) = 0; // [1610678276]
  virtual HRESULT STDMETHODCALLTYPE get_burnPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_burnPlaylist(Wmplib_tlb::IWMPPlaylist* ppPlaylist/*[in]*/) = 0; // [1610678278]
  virtual HRESULT STDMETHODCALLTYPE refreshStatus(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_burnState(Wmplib_tlb::WMPBurnState* pwmpbs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_burnProgress(long* plProgress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startBurn(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE stopBurn(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE erase(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5F0F4F1-130C-11D3-B14E-00C04F79FAA6}
// *********************************************************************//
interface IWMPPlaylist  : public IDispatch
{
public:
  // [201] Returns the number of items in the playlist
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0;
  // [202] Returns the name of the playlist
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* pbstrName/*[out,retval]*/) = 0;
  // [202] Returns the name of the playlist
  virtual HRESULT STDMETHODCALLTYPE set_name(BSTR pbstrName/*[in]*/) = 0;
  // [210] Returns the number of attributes associated with the playlist
  virtual HRESULT STDMETHODCALLTYPE get_attributeCount(long* plCount/*[out,retval]*/) = 0;
  // [211] Returns the name of an attribute specified by an index
  virtual HRESULT STDMETHODCALLTYPE get_attributeName(long lIndex/*[in]*/, 
                                                      BSTR* pbstrAttributeName/*[out,retval]*/) = 0;
  // [212] Returns the item at the specified index
  virtual HRESULT STDMETHODCALLTYPE get_Item(long lIndex, 
                                             Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/) = 0;
  // [203] Returns the value of a playlist attribute
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(BSTR bstrName/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [204] Sets the value of a playlist attribute
  virtual HRESULT STDMETHODCALLTYPE setItemInfo(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/) = 0;
  // [213] Determines if the supplied object is the same as the this one
  virtual HRESULT STDMETHODCALLTYPE get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/, 
                                                    VARIANT_BOOL* pvbool/*[out,retval]*/) = 0;
  // [205] Removes all items from the playlist
  virtual HRESULT STDMETHODCALLTYPE clear(void) = 0;
  // [206] Inserts an item into the playlist at the specified location
  virtual HRESULT STDMETHODCALLTYPE insertItem(long lIndex/*[in]*/, 
                                               Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/) = 0;
  // [207] Adds an item to the end of the playlist
  virtual HRESULT STDMETHODCALLTYPE appendItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/) = 0;
  // [208] Removes the specified item from the playlist
  virtual HRESULT STDMETHODCALLTYPE removeItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/) = 0;
  // [209] Changes the location of an item in the playlist
  virtual HRESULT STDMETHODCALLTYPE moveItem(long lIndexOld, long lIndexNew) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long plCount;
    OLECHECK(this->get_count((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall get_name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_name((BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_attributeCount(void)
  {
    long plCount;
    OLECHECK(this->get_attributeCount((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall get_attributeName(long lIndex/*[in]*/)
  {
    BSTR pbstrAttributeName = 0;
    OLECHECK(this->get_attributeName(lIndex, (BSTR*)&pbstrAttributeName));
    return pbstrAttributeName;
  }

  Wmplib_tlb::IWMPMedia* __fastcall get_Item(long lIndex)
  {
    Wmplib_tlb::IWMPMedia* ppIWMPMedia = 0;
    OLECHECK(this->get_Item(lIndex, (Wmplib_tlb::IWMPMedia**)&ppIWMPMedia));
    return ppIWMPMedia;
  }

  BSTR __fastcall getItemInfo(BSTR bstrName/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getItemInfo(bstrName, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  VARIANT_BOOL __fastcall get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/)
  {
    VARIANT_BOOL pvbool;
    OLECHECK(this->get_isIdentical(pIWMPPlaylist, (VARIANT_BOOL*)&pvbool));
    return pvbool;
  }


  __property   long            count = {read = get_count};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            attributeCount = {read = get_attributeCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94D55E95-3FAC-11D3-B155-00C04F79FAA6}
// *********************************************************************//
interface IWMPMedia  : public IDispatch
{
public:
  // [763] Determines if the supplied object is the same as the this one
  virtual HRESULT STDMETHODCALLTYPE get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                                    VARIANT_BOOL* pvbool/*[out,retval]*/) = 0;
  // [751] Returns the media URL
  virtual HRESULT STDMETHODCALLTYPE get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/) = 0;
  // [764] Returns the name of the media
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* pbstrName/*[out,retval]*/) = 0;
  // [764] Returns the name of the media
  virtual HRESULT STDMETHODCALLTYPE set_name(BSTR pbstrName/*[in]*/) = 0;
  // [752] Returns the original width of the source images
  virtual HRESULT STDMETHODCALLTYPE get_imageSourceWidth(long* pWidth/*[out,retval]*/) = 0;
  // [753] Returns the original height of the source images
  virtual HRESULT STDMETHODCALLTYPE get_imageSourceHeight(long* pHeight/*[out,retval]*/) = 0;
  // [754] Returns the number of markers in the file
  virtual HRESULT STDMETHODCALLTYPE get_markerCount(long* pMarkerCount/*[out,retval]*/) = 0;
  // [755] Returns the time of a marker
  virtual HRESULT STDMETHODCALLTYPE getMarkerTime(long MarkerNum/*[in]*/, 
                                                  double* pMarkerTime/*[out,retval]*/) = 0;
  // [756] Returns the name of a marker
  virtual HRESULT STDMETHODCALLTYPE getMarkerName(long MarkerNum/*[in]*/, 
                                                  BSTR* pbstrMarkerName/*[out,retval]*/) = 0;
  // [757] Returns duration of current media
  virtual HRESULT STDMETHODCALLTYPE get_duration(double* pDuration/*[out,retval]*/) = 0;
  // [758] Returns duration of current media as a string
  virtual HRESULT STDMETHODCALLTYPE get_durationString(BSTR* pbstrDuration/*[out,retval]*/) = 0;
  // [759] Returns the count of the attributes associated with this media
  virtual HRESULT STDMETHODCALLTYPE get_attributeCount(long* plCount/*[out,retval]*/) = 0;
  // [760] Returns the name of the attribute whose index has been specified
  virtual HRESULT STDMETHODCALLTYPE getAttributeName(long lIndex/*[in]*/, 
                                                     BSTR* pbstrItemName/*[out,retval]*/) = 0;
  // [761] Returns the value of specified attribute for this media
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(BSTR bstrItemName/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [762] Sets the value of specified attribute for this media
  virtual HRESULT STDMETHODCALLTYPE setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/) = 0;
  // [765] Gets an item info by atom
  virtual HRESULT STDMETHODCALLTYPE getItemInfoByAtom(long lAtom/*[in]*/, 
                                                      BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [766] Is the media a member of the given playlist
  virtual HRESULT STDMETHODCALLTYPE isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                                               VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/) = 0;
  // [767] Is the attribute read only
  virtual HRESULT STDMETHODCALLTYPE isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                                   VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
  {
    VARIANT_BOOL pvbool;
    OLECHECK(this->get_isIdentical(pIWMPMedia, (VARIANT_BOOL*)&pvbool));
    return pvbool;
  }

  BSTR __fastcall get_sourceURL(void)
  {
    BSTR pbstrSourceURL = 0;
    OLECHECK(this->get_sourceURL((BSTR*)&pbstrSourceURL));
    return pbstrSourceURL;
  }

  BSTR __fastcall get_name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_name((BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_imageSourceWidth(void)
  {
    long pWidth;
    OLECHECK(this->get_imageSourceWidth((long*)&pWidth));
    return pWidth;
  }

  long __fastcall get_imageSourceHeight(void)
  {
    long pHeight;
    OLECHECK(this->get_imageSourceHeight((long*)&pHeight));
    return pHeight;
  }

  long __fastcall get_markerCount(void)
  {
    long pMarkerCount;
    OLECHECK(this->get_markerCount((long*)&pMarkerCount));
    return pMarkerCount;
  }

  double __fastcall getMarkerTime(long MarkerNum/*[in]*/)
  {
    double pMarkerTime;
    OLECHECK(this->getMarkerTime(MarkerNum, (double*)&pMarkerTime));
    return pMarkerTime;
  }

  BSTR __fastcall getMarkerName(long MarkerNum/*[in]*/)
  {
    BSTR pbstrMarkerName = 0;
    OLECHECK(this->getMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName));
    return pbstrMarkerName;
  }

  double __fastcall get_duration(void)
  {
    double pDuration;
    OLECHECK(this->get_duration((double*)&pDuration));
    return pDuration;
  }

  BSTR __fastcall get_durationString(void)
  {
    BSTR pbstrDuration = 0;
    OLECHECK(this->get_durationString((BSTR*)&pbstrDuration));
    return pbstrDuration;
  }

  long __fastcall get_attributeCount(void)
  {
    long plCount;
    OLECHECK(this->get_attributeCount((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall getAttributeName(long lIndex/*[in]*/)
  {
    BSTR pbstrItemName = 0;
    OLECHECK(this->getAttributeName(lIndex, (BSTR*)&pbstrItemName));
    return pbstrItemName;
  }

  BSTR __fastcall getItemInfo(BSTR bstrItemName/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  BSTR __fastcall getItemInfoByAtom(long lAtom/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getItemInfoByAtom(lAtom, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  VARIANT_BOOL __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/)
  {
    VARIANT_BOOL pvarfIsMemberOf;
    OLECHECK(this->isMemberOf(pPlaylist, (VARIANT_BOOL*)&pvarfIsMemberOf));
    return pvarfIsMemberOf;
  }

  VARIANT_BOOL __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/)
  {
    VARIANT_BOOL pvarfIsReadOnly;
    OLECHECK(this->isReadOnlyItem(bstrItemName, (VARIANT_BOOL*)&pvarfIsReadOnly));
    return pvarfIsReadOnly;
  }


  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            imageSourceWidth = {read = get_imageSourceWidth};
  __property   long            imageSourceHeight = {read = get_imageSourceHeight};
  __property   long            markerCount = {read = get_markerCount};
  __property   double          duration = {read = get_duration};
  __property   BSTR            durationString = {read = get_durationString};
  __property   long            attributeCount = {read = get_attributeCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPLibrary
// Flags:     (256) OleAutomation
// GUID:      {3DF47861-7DF1-4C1F-A81B-4C26F0F7A7C6}
// *********************************************************************//
interface IWMPLibrary  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_type(Wmplib_tlb::WMPLibraryType* pwmplt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppIWMPMediaCollection/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE isIdentical(Wmplib_tlb::IWMPLibrary* pIWMPLibrary/*[in]*/, 
                                                VARIANT_BOOL* pvbool/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPMediaCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8363BC22-B4B4-4B19-989D-1CD765749DD1}
// *********************************************************************//
interface IWMPMediaCollection  : public IDispatch
{
public:
  // [452] Creates a new media object
  virtual HRESULT STDMETHODCALLTYPE add(BSTR bstrURL/*[in]*/, 
                                        Wmplib_tlb::IWMPMedia** ppItem/*[out,retval]*/) = 0;
  // [453] Returns a collection of all the items
  virtual HRESULT STDMETHODCALLTYPE getAll(Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [454] Returns a collection of items with the given name
  virtual HRESULT STDMETHODCALLTYPE getByName(BSTR bstrName/*[in]*/, 
                                              Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [455] Returns a collection of items with the given genre
  virtual HRESULT STDMETHODCALLTYPE getByGenre(BSTR bstrGenre/*[in]*/, 
                                               Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [456] Returns a collection of items by a given author
  virtual HRESULT STDMETHODCALLTYPE getByAuthor(BSTR bstrAuthor/*[in]*/, 
                                                Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [457] Returns a collection of items from the given album
  virtual HRESULT STDMETHODCALLTYPE getByAlbum(BSTR bstrAlbum/*[in]*/, 
                                               Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [458] Returns a collection of items with the given attribute
  virtual HRESULT STDMETHODCALLTYPE getByAttribute(BSTR bstrAttribute/*[in]*/, 
                                                   BSTR bstrValue/*[in]*/, 
                                                   Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;
  // [459] Removes an item from the media collection
  virtual HRESULT STDMETHODCALLTYPE remove(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                           VARIANT_BOOL varfDeleteFile/*[in]*/) = 0;
  // [461] Returns the string collection associated with an attribute
  virtual HRESULT STDMETHODCALLTYPE getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                                 BSTR bstrMediaType/*[in]*/, 
                                                                 Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/) = 0;
  // [470] Gets an atom associated with an item name which can be requested from an IWMPMedia out of this collection via getItemInfoByAtom
  virtual HRESULT STDMETHODCALLTYPE getMediaAtom(BSTR bstrItemName/*[in]*/, 
                                                 long* plAtom/*[out,retval]*/) = 0;
  // [471] Sets the deleted flag on a media object
  virtual HRESULT STDMETHODCALLTYPE setDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                               VARIANT_BOOL varfIsDeleted/*[in]*/) = 0;
  // [472] Gets the deleted flag on a media object
  virtual HRESULT STDMETHODCALLTYPE isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                              VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPMedia* __fastcall add(BSTR bstrURL/*[in]*/)
  {
    Wmplib_tlb::IWMPMedia* ppItem = 0;
    OLECHECK(this->add(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppItem));
    return ppItem;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getAll(void)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getAll((Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByName(BSTR bstrName/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByName(bstrName, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByGenre(BSTR bstrGenre/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByGenre(bstrGenre, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByAuthor(BSTR bstrAuthor/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByAuthor(bstrAuthor, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByAlbum(BSTR bstrAlbum/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByAlbum(bstrAlbum, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByAttribute(BSTR bstrAttribute/*[in]*/, 
                                                      BSTR bstrValue/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByAttribute(bstrAttribute, bstrValue, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }

  Wmplib_tlb::IWMPStringCollection* __fastcall getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                                            BSTR bstrMediaType/*[in]*/)
  {
    Wmplib_tlb::IWMPStringCollection* ppStringCollection = 0;
    OLECHECK(this->getAttributeStringCollection(bstrAttribute, bstrMediaType, (Wmplib_tlb::IWMPStringCollection**)&ppStringCollection));
    return ppStringCollection;
  }

  long __fastcall getMediaAtom(BSTR bstrItemName/*[in]*/)
  {
    long plAtom;
    OLECHECK(this->getMediaAtom(bstrItemName, (long*)&plAtom));
    return plAtom;
  }

  VARIANT_BOOL __fastcall isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/)
  {
    VARIANT_BOOL pvarfIsDeleted;
    OLECHECK(this->isDeleted(pItem, (VARIANT_BOOL*)&pvarfIsDeleted));
    return pvarfIsDeleted;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPStringCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A976298-8C0D-11D3-B389-00C04F68574B}
// *********************************************************************//
interface IWMPStringCollection  : public IDispatch
{
public:
  // [401] Returns the number of items in the string collection
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0;
  // [402] Returns the string at the given index
  virtual HRESULT STDMETHODCALLTYPE Item(long lIndex/*[in]*/, BSTR* pbstrString/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long plCount;
    OLECHECK(this->get_count((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall Item(long lIndex/*[in]*/)
  {
    BSTR pbstrString = 0;
    OLECHECK(this->Item(lIndex, (BSTR*)&pbstrString));
    return pbstrString;
  }


  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WMPOCXEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6BF52A51-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
interface _WMPOCXEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OpenStateChange(long NewState/*[in]*/)
  {
    _TDispID _dispid(/* OpenStateChange */ DISPID(5001));
    TAutoArgs<1> _args;
    _args[1] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlayStateChange(long NewState/*[in]*/)
  {
    _TDispID _dispid(/* PlayStateChange */ DISPID(5101));
    TAutoArgs<1> _args;
    _args[1] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AudioLanguageChange(long LangID/*[in]*/)
  {
    _TDispID _dispid(/* AudioLanguageChange */ DISPID(5102));
    TAutoArgs<1> _args;
    _args[1] = LangID /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StatusChange()
  {
    _TDispID _dispid(/* StatusChange */ DISPID(5002));
    OleProcedure(_dispid);
  }

  void __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
  {
    _TDispID _dispid(/* ScriptCommand */ DISPID(5301));
    TAutoArgs<2> _args;
    _args[1] = scType /*[VT_BSTR:0]*/;
    _args[2] = Param /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall NewStream()
  {
    _TDispID _dispid(/* NewStream */ DISPID(5403));
    OleProcedure(_dispid);
  }

  void __fastcall Disconnect(long Result/*[in]*/)
  {
    _TDispID _dispid(/* Disconnect */ DISPID(5401));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Buffering(VARIANT_BOOL Start/*[in]*/)
  {
    _TDispID _dispid(/* Buffering */ DISPID(5402));
    TAutoArgs<1> _args;
    _args[1] = Start /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Error()
  {
    _TDispID _dispid(/* Error */ DISPID(5501));
    OleProcedure(_dispid);
  }

  void __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, BSTR Description/*[in]*/)
  {
    _TDispID _dispid(/* Warning */ DISPID(5601));
    TAutoArgs<3> _args;
    _args[1] = WarningType /*[VT_I4:0]*/;
    _args[2] = Param /*[VT_I4:0]*/;
    _args[3] = Description /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall EndOfStream(long Result/*[in]*/)
  {
    _TDispID _dispid(/* EndOfStream */ DISPID(5201));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
  {
    _TDispID _dispid(/* PositionChange */ DISPID(5202));
    TAutoArgs<2> _args;
    _args[1] = oldPosition /*[VT_R8:0]*/;
    _args[2] = newPosition /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MarkerHit(long MarkerNum/*[in]*/)
  {
    _TDispID _dispid(/* MarkerHit */ DISPID(5203));
    TAutoArgs<1> _args;
    _args[1] = MarkerNum /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DurationUnitChange(long NewDurationUnit/*[in]*/)
  {
    _TDispID _dispid(/* DurationUnitChange */ DISPID(5204));
    TAutoArgs<1> _args;
    _args[1] = NewDurationUnit /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromMediaChange(long CdromNum/*[in]*/)
  {
    _TDispID _dispid(/* CdromMediaChange */ DISPID(5701));
    TAutoArgs<1> _args;
    _args[1] = CdromNum /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                 Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistChange */ DISPID(5801));
    TAutoArgs<2> _args;
    _args[1] = Playlist /*[VT_DISPATCH:0]*/;
    _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
  {
    _TDispID _dispid(/* CurrentPlaylistChange */ DISPID(5804));
    TAutoArgs<1> _args;
    _args[1] = (int)change /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/)
  {
    _TDispID _dispid(/* CurrentPlaylistItemAvailable */ DISPID(5805));
    TAutoArgs<1> _args;
    _args[1] = bstrItemName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaChange(LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* MediaChange */ DISPID(5802));
    TAutoArgs<1> _args;
    _args[1] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/)
  {
    _TDispID _dispid(/* CurrentMediaItemAvailable */ DISPID(5803));
    TAutoArgs<1> _args;
    _args[1] = bstrItemName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* CurrentItemChange */ DISPID(5806));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionChange()
  {
    _TDispID _dispid(/* MediaCollectionChange */ DISPID(5807));
    OleProcedure(_dispid);
  }

  void __fastcall MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                      BSTR bstrAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringAdded */ DISPID(5808));
    TAutoArgs<2> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                        BSTR bstrAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringRemoved */ DISPID(5809));
    TAutoArgs<2> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                        BSTR bstrOldAttribVal/*[in]*/, 
                                                        BSTR bstrNewAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringChanged */ DISPID(5820));
    TAutoArgs<3> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrOldAttribVal /*[VT_BSTR:0]*/;
    _args[3] = bstrNewAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionChange()
  {
    _TDispID _dispid(/* PlaylistCollectionChange */ DISPID(5810));
    OleProcedure(_dispid);
  }

  void __fastcall PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistAdded */ DISPID(5811));
    TAutoArgs<1> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistRemoved */ DISPID(5812));
    TAutoArgs<1> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                         VARIANT_BOOL varfIsDeleted/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistSetAsDeleted */ DISPID(5818));
    TAutoArgs<2> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/)
  {
    _TDispID _dispid(/* ModeChange */ DISPID(5819));
    TAutoArgs<2> _args;
    _args[1] = ModeName /*[VT_BSTR:0]*/;
    _args[2] = NewValue /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaError(LPDISPATCH pMediaObject/*[in]*/)
  {
    _TDispID _dispid(/* MediaError */ DISPID(5821));
    TAutoArgs<1> _args;
    _args[1] = pMediaObject /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/)
  {
    _TDispID _dispid(/* OpenPlaylistSwitch */ DISPID(5823));
    TAutoArgs<1> _args;
    _args[1] = pItem /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DomainChange(BSTR strDomain/*[in]*/)
  {
    _TDispID _dispid(/* DomainChange */ DISPID(5822));
    TAutoArgs<1> _args;
    _args[1] = strDomain /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SwitchedToPlayerApplication()
  {
    _TDispID _dispid(/* SwitchedToPlayerApplication */ DISPID(6501));
    OleProcedure(_dispid);
  }

  void __fastcall SwitchedToControl()
  {
    _TDispID _dispid(/* SwitchedToControl */ DISPID(6502));
    OleProcedure(_dispid);
  }

  void __fastcall PlayerDockedStateChange()
  {
    _TDispID _dispid(/* PlayerDockedStateChange */ DISPID(6503));
    OleProcedure(_dispid);
  }

  void __fastcall PlayerReconnect()
  {
    _TDispID _dispid(/* PlayerReconnect */ DISPID(6504));
    OleProcedure(_dispid);
  }

  void __fastcall _Click(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                         long fY/*[in]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(6505));
    TAutoArgs<4> _args;
    _args[1] = nButton /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    _args[3] = fX /*[VT_I4:0]*/;
    _args[4] = fY /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DoubleClick(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                              long fY/*[in]*/)
  {
    _TDispID _dispid(/* DoubleClick */ DISPID(6506));
    TAutoArgs<4> _args;
    _args[1] = nButton /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    _args[3] = fX /*[VT_I4:0]*/;
    _args[4] = fY /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyDown(short nKeyCode/*[in]*/, short nShiftState/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(6507));
    TAutoArgs<2> _args;
    _args[1] = nKeyCode /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyPress(short nKeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(6508));
    TAutoArgs<1> _args;
    _args[1] = nKeyAscii /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyUp(short nKeyCode/*[in]*/, short nShiftState/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(6509));
    TAutoArgs<2> _args;
    _args[1] = nKeyCode /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseDown(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                            long fY/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(6510));
    TAutoArgs<4> _args;
    _args[1] = nButton /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    _args[3] = fX /*[VT_I4:0]*/;
    _args[4] = fY /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseMove(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                            long fY/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(6511));
    TAutoArgs<4> _args;
    _args[1] = nButton /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    _args[3] = fX /*[VT_I4:0]*/;
    _args[4] = fY /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseUp(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                          long fY/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(6512));
    TAutoArgs<4> _args;
    _args[1] = nButton /*[VT_I2:0]*/;
    _args[2] = nShiftState /*[VT_I2:0]*/;
    _args[3] = fX /*[VT_I4:0]*/;
    _args[4] = fY /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/)
  {
    _TDispID _dispid(/* DeviceConnect */ DISPID(6513));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/)
  {
    _TDispID _dispid(/* DeviceDisconnect */ DISPID(6514));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                     Wmplib_tlb::WMPDeviceStatus NewStatus/*[in]*/)
  {
    _TDispID _dispid(/* DeviceStatusChange */ DISPID(6515));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)NewStatus /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                        Wmplib_tlb::WMPSyncState NewState/*[in]*/)
  {
    _TDispID _dispid(/* DeviceSyncStateChange */ DISPID(6516));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)NewState /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                  LPDISPATCH pMedia/*[in]*/)
  {
    _TDispID _dispid(/* DeviceSyncError */ DISPID(6517));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    _args[2] = pMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                            HRESULT hrResult/*[in]*/)
  {
    _TDispID _dispid(/* CreatePartnershipComplete */ DISPID(6518));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
    _args[2] = hrResult /*[VT_HRESULT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                      Wmplib_tlb::WMPRipState wmprs/*[in]*/)
  {
    _TDispID _dispid(/* CdromRipStateChange */ DISPID(6519));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromRip*)pCdromRip /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)wmprs /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                     LPDISPATCH pMedia/*[in]*/)
  {
    _TDispID _dispid(/* CdromRipMediaError */ DISPID(6520));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromRip*)pCdromRip /*[VT_USERDEFINED:1]*/;
    _args[2] = pMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                       Wmplib_tlb::WMPBurnState wmpbs/*[in]*/)
  {
    _TDispID _dispid(/* CdromBurnStateChange */ DISPID(6521));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)wmpbs /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                      LPDISPATCH pMedia/*[in]*/)
  {
    _TDispID _dispid(/* CdromBurnMediaError */ DISPID(6522));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
    _args[2] = pMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                 HRESULT hrError/*[in]*/)
  {
    _TDispID _dispid(/* CdromBurnError */ DISPID(6523));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
    _args[2] = hrError /*[VT_HRESULT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/)
  {
    _TDispID _dispid(/* LibraryConnect */ DISPID(6524));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPLibrary*)pLibrary /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/)
  {
    _TDispID _dispid(/* LibraryDisconnect */ DISPID(6525));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPLibrary*)pLibrary /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss/*[in]*/)
  {
    _TDispID _dispid(/* FolderScanStateChange */ DISPID(6526));
    TAutoArgs<1> _args;
    _args[1] = (int)wmpfss /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                         Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                         , long lCollectionIndex/*[in]*/)
  {
    _TDispID _dispid(/* StringCollectionChange */ DISPID(5824));
    TAutoArgs<3> _args;
    _args[1] = pdispStringCollection /*[VT_DISPATCH:0]*/;
    _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
    _args[3] = lCollectionIndex /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionMediaAdded */ DISPID(5825));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionMediaRemoved */ DISPID(5826));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IWMPCore
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D84CCA99-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
interface IWMPCore  : public IDispatch
{
public:
  // [3] Closes the media
  virtual HRESULT STDMETHODCALLTYPE close(void) = 0;
  // [1] Returns or sets the URL
  virtual HRESULT STDMETHODCALLTYPE get_URL(BSTR* pbstrURL/*[out,retval]*/) = 0;
  // [1] Returns or sets the URL
  virtual HRESULT STDMETHODCALLTYPE set_URL(BSTR pbstrURL/*[in]*/) = 0;
  // [2] Returns the open state of the player
  virtual HRESULT STDMETHODCALLTYPE get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/) = 0;
  // [10] Returns the play state of the player
  virtual HRESULT STDMETHODCALLTYPE get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/) = 0;
  // [4] Returns the control handler
  virtual HRESULT STDMETHODCALLTYPE get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/) = 0;
  // [5] Returns the settings handler
  virtual HRESULT STDMETHODCALLTYPE get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/) = 0;
  // [6] Returns or sets the current media object
  virtual HRESULT STDMETHODCALLTYPE get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/) = 0;
  // [6] Returns or sets the current media object
  virtual HRESULT STDMETHODCALLTYPE set_currentMedia(Wmplib_tlb::IWMPMedia* ppMedia/*[in]*/) = 0;
  // [8] Returns the media collection handler
  virtual HRESULT STDMETHODCALLTYPE get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/) = 0;
  // [9] Returns the playlist collection handler
  virtual HRESULT STDMETHODCALLTYPE get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/) = 0;
  // [11] Returns the version information for the player
  virtual HRESULT STDMETHODCALLTYPE get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE launchURL(BSTR bstrURL/*[in]*/) = 0; // [12]
  // [7] Returns the network information handler
  virtual HRESULT STDMETHODCALLTYPE get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/) = 0;
  // [13] Returns/sets the current playlist
  virtual HRESULT STDMETHODCALLTYPE get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/) = 0;
  // [13] Returns/sets the current playlist
  virtual HRESULT STDMETHODCALLTYPE set_currentPlaylist(Wmplib_tlb::IWMPPlaylist* ppPL/*[in]*/) = 0;
  // [14] Get the CDROM drive collection
  virtual HRESULT STDMETHODCALLTYPE get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/) = 0;
  // [15] Returns the closed caption handler
  virtual HRESULT STDMETHODCALLTYPE get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/) = 0;
  // [16] Returns whether the machine is online.
  virtual HRESULT STDMETHODCALLTYPE get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/) = 0;
  // [17] Returns the error object
  virtual HRESULT STDMETHODCALLTYPE get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/) = 0;
  // [18] Returns status string
  virtual HRESULT STDMETHODCALLTYPE get_status(BSTR* pbstrStatus/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_URL(void)
  {
    BSTR pbstrURL = 0;
    OLECHECK(this->get_URL((BSTR*)&pbstrURL));
    return pbstrURL;
  }

  Wmplib_tlb::WMPOpenState __fastcall get_openState(void)
  {
    Wmplib_tlb::WMPOpenState pwmpos;
    OLECHECK(this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos));
    return pwmpos;
  }

  Wmplib_tlb::WMPPlayState __fastcall get_playState(void)
  {
    Wmplib_tlb::WMPPlayState pwmpps;
    OLECHECK(this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps));
    return pwmpps;
  }

  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void)
  {
    Wmplib_tlb::IWMPControlsPtr ppControl;
    OLECHECK(this->get_controls(&ppControl));
    return ppControl;
  }

  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void)
  {
    Wmplib_tlb::IWMPSettingsPtr ppSettings;
    OLECHECK(this->get_settings(&ppSettings));
    return ppSettings;
  }

  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void)
  {
    Wmplib_tlb::IWMPMediaPtr ppMedia;
    OLECHECK(this->get_currentMedia(&ppMedia));
    return ppMedia;
  }

  HRESULT __fastcall  set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
  {
    return set_currentMedia((Wmplib_tlb::IWMPMedia*)ppMedia/*[in]*/);
  }

  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void)
  {
    Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
    OLECHECK(this->get_mediaCollection(&ppMediaCollection));
    return ppMediaCollection;
  }

  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void)
  {
    Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
    OLECHECK(this->get_playlistCollection(&ppPlaylistCollection));
    return ppPlaylistCollection;
  }

  BSTR __fastcall get_versionInfo(void)
  {
    BSTR pbstrVersionInfo = 0;
    OLECHECK(this->get_versionInfo((BSTR*)&pbstrVersionInfo));
    return pbstrVersionInfo;
  }

  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void)
  {
    Wmplib_tlb::IWMPNetworkPtr ppQNI;
    OLECHECK(this->get_network(&ppQNI));
    return ppQNI;
  }

  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void)
  {
    Wmplib_tlb::IWMPPlaylistPtr ppPL;
    OLECHECK(this->get_currentPlaylist(&ppPL));
    return ppPL;
  }

  HRESULT __fastcall  set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
  {
    return set_currentPlaylist((Wmplib_tlb::IWMPPlaylist*)ppPL/*[in]*/);
  }

  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void)
  {
    Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
    OLECHECK(this->get_cdromCollection(&ppCdromCollection));
    return ppCdromCollection;
  }

  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void)
  {
    Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
    OLECHECK(this->get_closedCaption(&ppClosedCaption));
    return ppClosedCaption;
  }

  VARIANT_BOOL __fastcall get_isOnline(void)
  {
    VARIANT_BOOL pfOnline;
    OLECHECK(this->get_isOnline((VARIANT_BOOL*)&pfOnline));
    return pfOnline;
  }

  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void)
  {
    Wmplib_tlb::IWMPErrorPtr ppError;
    OLECHECK(this->get_Error(&ppError));
    return ppError;
  }

  BSTR __fastcall get_status(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->get_status((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }


  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCore2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC17E5B7-7561-4C18-BB90-17D485775659}
// *********************************************************************//
interface IWMPCore2  : public Wmplib_tlb::IWMPCore
{
public:
  // [40] Returns the DVD handler
  virtual HRESULT STDMETHODCALLTYPE get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void)
  {
    Wmplib_tlb::IWMPDVDPtr ppDVD;
    OLECHECK(this->get_dvd(&ppDVD));
    return ppDVD;
  }


  __property   Wmplib_tlb::IWMPDVDPtr dvd = {read = get_dvd};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCore3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7587C667-628F-499F-88E7-6A6F4E888464}
// *********************************************************************//
interface IWMPCore3  : public Wmplib_tlb::IWMPCore2
{
public:
  // [41] Creates a new playlist object
  virtual HRESULT STDMETHODCALLTYPE newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                                                Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [42] Creates a new media object
  virtual HRESULT STDMETHODCALLTYPE newMedia(BSTR bstrURL/*[in]*/, 
                                             Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppPlaylist = 0;
    OLECHECK(this->newPlaylist(bstrName, bstrURL, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist));
    return ppPlaylist;
  }

  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/)
  {
    Wmplib_tlb::IWMPMedia* ppMedia = 0;
    OLECHECK(this->newMedia(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppMedia));
    return ppMedia;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayer4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C497D62-8919-413C-82DB-E935FB3EC584}
// *********************************************************************//
interface IWMPPlayer4  : public Wmplib_tlb::IWMPCore3
{
public:
  // [19] Returns a boolean value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [19] Returns a boolean value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE set_uiMode(BSTR pbstrMode/*[in]*/) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE get_uiMode(BSTR* pbstrMode/*[out,retval]*/) = 0;
  // [24] Returns a boolean value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [24] Returns a boolean value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [25] Returns a boolean value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [25] Returns a boolean value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [26] Indicates whether the player is running remotely
  virtual HRESULT STDMETHODCALLTYPE get_isRemote(VARIANT_BOOL* pvarfIsRemote/*[out,retval]*/) = 0;
  // [27] Returns the player application handler
  virtual HRESULT STDMETHODCALLTYPE get_playerApplication(Wmplib_tlb::IWMPPlayerApplication** ppIWMPPlayerApplication/*[out,retval]*/) = 0;
  // [28] Opens the player with the specified URL
  virtual HRESULT STDMETHODCALLTYPE openPlayer(BSTR bstrURL/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_enableContextMenu(void)
  {
    VARIANT_BOOL pbEnableContextMenu;
    OLECHECK(this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu));
    return pbEnableContextMenu;
  }

  BSTR __fastcall get_uiMode(void)
  {
    BSTR pbstrMode = 0;
    OLECHECK(this->get_uiMode((BSTR*)&pbstrMode));
    return pbstrMode;
  }

  VARIANT_BOOL __fastcall get_stretchToFit(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_windowlessVideo(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_isRemote(void)
  {
    VARIANT_BOOL pvarfIsRemote;
    OLECHECK(this->get_isRemote((VARIANT_BOOL*)&pvarfIsRemote));
    return pvarfIsRemote;
  }

  Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall get_playerApplication(void)
  {
    Wmplib_tlb::IWMPPlayerApplicationPtr ppIWMPPlayerApplication;
    OLECHECK(this->get_playerApplication(&ppIWMPPlayerApplication));
    return ppIWMPPlayerApplication;
  }


  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};
  __property   VARIANT_BOOL    isRemote = {read = get_isRemote};
  __property   Wmplib_tlb::IWMPPlayerApplicationPtr playerApplication = {read = get_playerApplication};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayer3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54062B68-052A-4C25-A39F-8B63346511D4}
// *********************************************************************//
interface IWMPPlayer3  : public Wmplib_tlb::IWMPCore2
{
public:
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE set_uiMode(BSTR pbstrMode/*[in]*/) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE get_uiMode(BSTR* pbstrMode/*[out,retval]*/) = 0;
  // [24] Returns a boolen value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [24] Returns a boolen value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [25] Returns a boolen value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [25] Returns a boolen value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_enableContextMenu(void)
  {
    VARIANT_BOOL pbEnableContextMenu;
    OLECHECK(this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu));
    return pbEnableContextMenu;
  }

  BSTR __fastcall get_uiMode(void)
  {
    BSTR pbstrMode = 0;
    OLECHECK(this->get_uiMode((BSTR*)&pbstrMode));
    return pbstrMode;
  }

  VARIANT_BOOL __fastcall get_stretchToFit(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_windowlessVideo(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }


  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPControls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74C09E02-F828-11D2-A74B-00A0C905F36E}
// *********************************************************************//
interface IWMPControls  : public IDispatch
{
public:
  // [62] Returns whether or not the specified media functionality is available
  virtual HRESULT STDMETHODCALLTYPE get_isAvailable(BSTR bstrItem/*[in]*/, 
                                                    VARIANT_BOOL* pIsAvailable/*[out,retval]*/) = 0;
  // [51] Begins playing media
  virtual HRESULT STDMETHODCALLTYPE play(void) = 0;
  // [52] Stops play of media
  virtual HRESULT STDMETHODCALLTYPE stop(void) = 0;
  // [53] Pauses play of media
  virtual HRESULT STDMETHODCALLTYPE pause(void) = 0;
  // [54] Fast play of media in forward direction
  virtual HRESULT STDMETHODCALLTYPE fastForward(void) = 0;
  // [55] Fast play of media in reverse direction
  virtual HRESULT STDMETHODCALLTYPE fastReverse(void) = 0;
  // [56] Returns the current position in media
  virtual HRESULT STDMETHODCALLTYPE get_currentPosition(double* pdCurrentPosition/*[out,retval]*/) = 0;
  // [56] Returns the current position in media
  virtual HRESULT STDMETHODCALLTYPE set_currentPosition(double pdCurrentPosition/*[in]*/) = 0;
  // [57] Returns the current position in media as a string
  virtual HRESULT STDMETHODCALLTYPE get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/) = 0;
  // [58] Sets the current item to the next item in the playlist
  virtual HRESULT STDMETHODCALLTYPE next(void) = 0;
  // [59] Sets the current item to the previous item in the playlist
  virtual HRESULT STDMETHODCALLTYPE previous(void) = 0;
  // [60] Returns/Sets the play item
  virtual HRESULT STDMETHODCALLTYPE get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/) = 0;
  // [60] Returns/Sets the play item
  virtual HRESULT STDMETHODCALLTYPE set_currentItem(Wmplib_tlb::IWMPMedia* ppIWMPMedia/*[in]*/) = 0;
  // [61] Returns the current marker
  virtual HRESULT STDMETHODCALLTYPE get_currentMarker(long* plMarker/*[out,retval]*/) = 0;
  // [61] Returns the current marker
  virtual HRESULT STDMETHODCALLTYPE set_currentMarker(long plMarker/*[in]*/) = 0;
  // [63] Sets the current item and plays it
  virtual HRESULT STDMETHODCALLTYPE playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_isAvailable(BSTR bstrItem/*[in]*/)
  {
    VARIANT_BOOL pIsAvailable;
    OLECHECK(this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable));
    return pIsAvailable;
  }

  double __fastcall get_currentPosition(void)
  {
    double pdCurrentPosition;
    OLECHECK(this->get_currentPosition((double*)&pdCurrentPosition));
    return pdCurrentPosition;
  }

  BSTR __fastcall get_currentPositionString(void)
  {
    BSTR pbstrCurrentPosition = 0;
    OLECHECK(this->get_currentPositionString((BSTR*)&pbstrCurrentPosition));
    return pbstrCurrentPosition;
  }

  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentItem(void)
  {
    Wmplib_tlb::IWMPMediaPtr ppIWMPMedia;
    OLECHECK(this->get_currentItem(&ppIWMPMedia));
    return ppIWMPMedia;
  }

  HRESULT __fastcall  set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/)
  {
    return set_currentItem((Wmplib_tlb::IWMPMedia*)ppIWMPMedia/*[in]*/);
  }

  long __fastcall get_currentMarker(void)
  {
    long plMarker;
    OLECHECK(this->get_currentMarker((long*)&plMarker));
    return plMarker;
  }


  __property   double          currentPosition = {read = get_currentPosition, write = set_currentPosition};
  __property   BSTR            currentPositionString = {read = get_currentPositionString};
  __property   Wmplib_tlb::IWMPMediaPtr currentItem = {read = get_currentItem, write = set_currentItem};
  __property   long            currentMarker = {read = get_currentMarker, write = set_currentMarker};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9104D1AB-80C9-4FED-ABF0-2E6417A6DF14}
// *********************************************************************//
interface IWMPSettings  : public IDispatch
{
public:
  // [113] Returns whether or not the specified media functionality is available
  virtual HRESULT STDMETHODCALLTYPE get_isAvailable(BSTR bstrItem/*[in]*/, 
                                                    VARIANT_BOOL* pIsAvailable/*[out,retval]*/) = 0;
  // [101] Returns whether media should automatically begin playing
  virtual HRESULT STDMETHODCALLTYPE get_autoStart(VARIANT_BOOL* pfAutoStart/*[out,retval]*/) = 0;
  // [101] Returns whether media should automatically begin playing
  virtual HRESULT STDMETHODCALLTYPE set_autoStart(VARIANT_BOOL pfAutoStart/*[in]*/) = 0;
  // [108] Returns the base URL used for relative path resolution
  virtual HRESULT STDMETHODCALLTYPE get_baseURL(BSTR* pbstrBaseURL/*[out,retval]*/) = 0;
  // [108] Returns the base URL used for relative path resolution
  virtual HRESULT STDMETHODCALLTYPE set_baseURL(BSTR pbstrBaseURL/*[in]*/) = 0;
  // [109] Returns the frame location that changes when a URL flip occurs
  virtual HRESULT STDMETHODCALLTYPE get_defaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/) = 0;
  // [109] Returns the frame location that changes when a URL flip occurs
  virtual HRESULT STDMETHODCALLTYPE set_defaultFrame(BSTR pbstrDefaultFrame/*[in]*/) = 0;
  // [103] Returns whether URL events should spawn a browser.
  virtual HRESULT STDMETHODCALLTYPE get_invokeURLs(VARIANT_BOOL* pfInvokeURLs/*[out,retval]*/) = 0;
  // [103] Returns whether URL events should spawn a browser.
  virtual HRESULT STDMETHODCALLTYPE set_invokeURLs(VARIANT_BOOL pfInvokeURLs/*[in]*/) = 0;
  // [104] Returns whether audio should be muted.
  virtual HRESULT STDMETHODCALLTYPE get_mute(VARIANT_BOOL* pfMute/*[out,retval]*/) = 0;
  // [104] Returns whether audio should be muted.
  virtual HRESULT STDMETHODCALLTYPE set_mute(VARIANT_BOOL pfMute/*[in]*/) = 0;
  // [105] Returns how many times media should play
  virtual HRESULT STDMETHODCALLTYPE get_playCount(long* plCount/*[out,retval]*/) = 0;
  // [105] Returns how many times media should play
  virtual HRESULT STDMETHODCALLTYPE set_playCount(long plCount/*[in]*/) = 0;
  // [106] Returns current playback rate
  virtual HRESULT STDMETHODCALLTYPE get_rate(double* pdRate/*[out,retval]*/) = 0;
  // [106] Returns current playback rate
  virtual HRESULT STDMETHODCALLTYPE set_rate(double pdRate/*[in]*/) = 0;
  // [102] Returns current audio Balance
  virtual HRESULT STDMETHODCALLTYPE get_balance(long* plBalance/*[out,retval]*/) = 0;
  // [102] Returns current audio Balance
  virtual HRESULT STDMETHODCALLTYPE set_balance(long plBalance/*[in]*/) = 0;
  // [107] Returns current audio volume
  virtual HRESULT STDMETHODCALLTYPE get_volume(long* plVolume/*[out,retval]*/) = 0;
  // [107] Returns current audio volume
  virtual HRESULT STDMETHODCALLTYPE set_volume(long plVolume/*[in]*/) = 0;
  // [110] Returns the mode of the playlist
  virtual HRESULT STDMETHODCALLTYPE getMode(BSTR bstrMode/*[in]*/, 
                                            VARIANT_BOOL* pvarfMode/*[out,retval]*/) = 0;
  // [111] Sets the mode of the playlist
  virtual HRESULT STDMETHODCALLTYPE setMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL varfMode/*[in]*/) = 0;
  // [112] Returns whether error dialogs are shown by default when embedded
  virtual HRESULT STDMETHODCALLTYPE get_enableErrorDialogs(VARIANT_BOOL* pfEnableErrorDialogs/*[out,retval]*/) = 0;
  // [112] Returns whether error dialogs are shown by default when embedded
  virtual HRESULT STDMETHODCALLTYPE set_enableErrorDialogs(VARIANT_BOOL pfEnableErrorDialogs/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_isAvailable(BSTR bstrItem/*[in]*/)
  {
    VARIANT_BOOL pIsAvailable;
    OLECHECK(this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable));
    return pIsAvailable;
  }

  VARIANT_BOOL __fastcall get_autoStart(void)
  {
    VARIANT_BOOL pfAutoStart;
    OLECHECK(this->get_autoStart((VARIANT_BOOL*)&pfAutoStart));
    return pfAutoStart;
  }

  BSTR __fastcall get_baseURL(void)
  {
    BSTR pbstrBaseURL = 0;
    OLECHECK(this->get_baseURL((BSTR*)&pbstrBaseURL));
    return pbstrBaseURL;
  }

  BSTR __fastcall get_defaultFrame(void)
  {
    BSTR pbstrDefaultFrame = 0;
    OLECHECK(this->get_defaultFrame((BSTR*)&pbstrDefaultFrame));
    return pbstrDefaultFrame;
  }

  VARIANT_BOOL __fastcall get_invokeURLs(void)
  {
    VARIANT_BOOL pfInvokeURLs;
    OLECHECK(this->get_invokeURLs((VARIANT_BOOL*)&pfInvokeURLs));
    return pfInvokeURLs;
  }

  VARIANT_BOOL __fastcall get_mute(void)
  {
    VARIANT_BOOL pfMute;
    OLECHECK(this->get_mute((VARIANT_BOOL*)&pfMute));
    return pfMute;
  }

  long __fastcall get_playCount(void)
  {
    long plCount;
    OLECHECK(this->get_playCount((long*)&plCount));
    return plCount;
  }

  double __fastcall get_rate(void)
  {
    double pdRate;
    OLECHECK(this->get_rate((double*)&pdRate));
    return pdRate;
  }

  long __fastcall get_balance(void)
  {
    long plBalance;
    OLECHECK(this->get_balance((long*)&plBalance));
    return plBalance;
  }

  long __fastcall get_volume(void)
  {
    long plVolume;
    OLECHECK(this->get_volume((long*)&plVolume));
    return plVolume;
  }

  VARIANT_BOOL __fastcall getMode(BSTR bstrMode/*[in]*/)
  {
    VARIANT_BOOL pvarfMode;
    OLECHECK(this->getMode(bstrMode, (VARIANT_BOOL*)&pvarfMode));
    return pvarfMode;
  }

  VARIANT_BOOL __fastcall get_enableErrorDialogs(void)
  {
    VARIANT_BOOL pfEnableErrorDialogs;
    OLECHECK(this->get_enableErrorDialogs((VARIANT_BOOL*)&pfEnableErrorDialogs));
    return pfEnableErrorDialogs;
  }


  __property   VARIANT_BOOL    autoStart = {read = get_autoStart, write = set_autoStart};
  __property   BSTR            baseURL = {read = get_baseURL, write = set_baseURL};
  __property   BSTR            defaultFrame = {read = get_defaultFrame, write = set_defaultFrame};
  __property   VARIANT_BOOL    invokeURLs = {read = get_invokeURLs, write = set_invokeURLs};
  __property   VARIANT_BOOL    mute = {read = get_mute, write = set_mute};
  __property   long            playCount = {read = get_playCount, write = set_playCount};
  __property   double          rate = {read = get_rate, write = set_rate};
  __property   long            balance = {read = get_balance, write = set_balance};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   VARIANT_BOOL    enableErrorDialogs = {read = get_enableErrorDialogs, write = set_enableErrorDialogs};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlaylistCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10A13217-23A7-439B-B1C0-D847C79B7774}
// *********************************************************************//
interface IWMPPlaylistCollection  : public IDispatch
{
public:
  // [552] Creates a new playlist object
  virtual HRESULT STDMETHODCALLTYPE newPlaylist(BSTR bstrName/*[in]*/, 
                                                Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/) = 0;
  // [553] Returns a playlist array with all the playlists
  virtual HRESULT STDMETHODCALLTYPE getAll(Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/) = 0;
  // [554] Returns a playlist array with playlists matching the given name
  virtual HRESULT STDMETHODCALLTYPE getByName(BSTR bstrName/*[in]*/, 
                                              Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/) = 0;
  // [556] Removes an item from the playlist collection
  virtual HRESULT STDMETHODCALLTYPE remove(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/) = 0;
  // [560] Sets the deleted flag on a playlist object
  virtual HRESULT STDMETHODCALLTYPE setDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                               VARIANT_BOOL varfIsDeleted/*[in]*/) = 0;
  // [561] Gets the deleted flag on a playlist object
  virtual HRESULT STDMETHODCALLTYPE isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                              VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/) = 0;
  // [562] Imports a playlist object into the library
  virtual HRESULT STDMETHODCALLTYPE importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                                   Wmplib_tlb::IWMPPlaylist** ppImportedItem/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppItem = 0;
    OLECHECK(this->newPlaylist(bstrName, (Wmplib_tlb::IWMPPlaylist**)&ppItem));
    return ppItem;
  }

  Wmplib_tlb::IWMPPlaylistArray* __fastcall getAll(void)
  {
    Wmplib_tlb::IWMPPlaylistArray* ppPlaylistArray = 0;
    OLECHECK(this->getAll((Wmplib_tlb::IWMPPlaylistArray**)&ppPlaylistArray));
    return ppPlaylistArray;
  }

  Wmplib_tlb::IWMPPlaylistArray* __fastcall getByName(BSTR bstrName/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylistArray* ppPlaylistArray = 0;
    OLECHECK(this->getByName(bstrName, (Wmplib_tlb::IWMPPlaylistArray**)&ppPlaylistArray));
    return ppPlaylistArray;
  }

  VARIANT_BOOL __fastcall isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/)
  {
    VARIANT_BOOL pvarfIsDeleted;
    OLECHECK(this->isDeleted(pItem, (VARIANT_BOOL*)&pvarfIsDeleted));
    return pvarfIsDeleted;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppImportedItem = 0;
    OLECHECK(this->importPlaylist(pItem, (Wmplib_tlb::IWMPPlaylist**)&ppImportedItem));
    return ppImportedItem;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlaylistArray
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {679409C0-99F7-11D3-9FB7-00105AA620BB}
// *********************************************************************//
interface IWMPPlaylistArray  : public IDispatch
{
public:
  // [501] Returns the number of items in the playlist array
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0;
  // [502] Returns the playlist object at the given index
  virtual HRESULT STDMETHODCALLTYPE Item(long lIndex/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long plCount;
    OLECHECK(this->get_count((long*)&plCount));
    return plCount;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall Item(long lIndex/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppItem = 0;
    OLECHECK(this->Item(lIndex, (Wmplib_tlb::IWMPPlaylist**)&ppItem));
    return ppItem;
  }


  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7}
// *********************************************************************//
interface IWMPNetwork  : public IDispatch
{
public:
  // [801] Returns the current bandwidth of the clip.
  virtual HRESULT STDMETHODCALLTYPE get_bandWidth(long* plBandwidth/*[out,retval]*/) = 0;
  // [802] Returns the number of recovered packets
  virtual HRESULT STDMETHODCALLTYPE get_recoveredPackets(long* plRecoveredPackets/*[out,retval]*/) = 0;
  // [803] Returns the source protocol used to receive data.
  virtual HRESULT STDMETHODCALLTYPE get_sourceProtocol(BSTR* pbstrSourceProtocol/*[out,retval]*/) = 0;
  // [804] Returns the number of packets received.
  virtual HRESULT STDMETHODCALLTYPE get_receivedPackets(long* plReceivedPackets/*[out,retval]*/) = 0;
  // [805] Returns the number of packets lost.
  virtual HRESULT STDMETHODCALLTYPE get_lostPackets(long* plLostPackets/*[out,retval]*/) = 0;
  // [806] Returns the percentage of packets received in the last 15 seconds.
  virtual HRESULT STDMETHODCALLTYPE get_receptionQuality(long* plReceptionQuality/*[out,retval]*/) = 0;
  // [807] Returns the number of times buffering occurred during clip playback.
  virtual HRESULT STDMETHODCALLTYPE get_bufferingCount(long* plBufferingCount/*[out,retval]*/) = 0;
  // [808] Returns the percentage of buffering completed.
  virtual HRESULT STDMETHODCALLTYPE get_bufferingProgress(long* plBufferingProgress/*[out,retval]*/) = 0;
  // [809] Returns the number of seconds allocated for buffering for this media type.
  virtual HRESULT STDMETHODCALLTYPE get_bufferingTime(long* plBufferingTime/*[out,retval]*/) = 0;
  // [809] Returns the number of seconds allocated for buffering for this media type.
  virtual HRESULT STDMETHODCALLTYPE set_bufferingTime(long plBufferingTime/*[in]*/) = 0;
  // [810] Current video frame rate in frames/second
  virtual HRESULT STDMETHODCALLTYPE get_frameRate(long* plFrameRate/*[out,retval]*/) = 0;
  // [811] Maximum possible video bit rate
  virtual HRESULT STDMETHODCALLTYPE get_maxBitRate(long* plBitRate/*[out,retval]*/) = 0;
  // [812] Current video bit rate
  virtual HRESULT STDMETHODCALLTYPE get_bitRate(long* plBitRate/*[out,retval]*/) = 0;
  // [813] Returns the proxy settings for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE getProxySettings(BSTR bstrProtocol/*[in]*/, 
                                                     long* plProxySetting/*[out,retval]*/) = 0;
  // [814] Sets the proxy settings for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE setProxySettings(BSTR bstrProtocol/*[in]*/, 
                                                     long lProxySetting/*[in]*/) = 0;
  // [815] Returns the proxy name for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE getProxyName(BSTR bstrProtocol/*[in]*/, 
                                                 BSTR* pbstrProxyName/*[out,retval]*/) = 0;
  // [816] Sets the proxy name for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE setProxyName(BSTR bstrProtocol/*[in]*/, 
                                                 BSTR bstrProxyName/*[in]*/) = 0;
  // [817] Returns the proxy port for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE getProxyPort(BSTR bstrProtocol/*[in]*/, 
                                                 long* lProxyPort/*[out,retval]*/) = 0;
  // [818] Sets the proxy port for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE setProxyPort(BSTR bstrProtocol/*[in]*/, long lProxyPort/*[in]*/) = 0;
  // [819] Returns the proxy exception list for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE getProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                                          BSTR* pbstrExceptionList/*[out,retval]*/) = 0;
  // [820] Sets the proxy exception list for the specified protocol
  virtual HRESULT STDMETHODCALLTYPE setProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                                          BSTR pbstrExceptionList/*[in]*/) = 0;
  // [821] Returns whether or not to bypass the proxy for local addresses
  virtual HRESULT STDMETHODCALLTYPE getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                                           VARIANT_BOOL* pfBypassForLocal/*[out,retval]*/) = 0;
  // [822] Sets whether or not to by pass the proxy for local addresses
  virtual HRESULT STDMETHODCALLTYPE setProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                                           VARIANT_BOOL fBypassForLocal/*[in]*/) = 0;
  // [823] Returns or sets maximum allowed bandwidth
  virtual HRESULT STDMETHODCALLTYPE get_maxBandwidth(long* lMaxBandwidth/*[out,retval]*/) = 0;
  // [823] Returns or sets maximum allowed bandwidth
  virtual HRESULT STDMETHODCALLTYPE set_maxBandwidth(long lMaxBandwidth/*[in]*/) = 0;
  // [824] Returns the percentage of download completed.
  virtual HRESULT STDMETHODCALLTYPE get_downloadProgress(long* plDownloadProgress/*[out,retval]*/) = 0;
  // [825] Returns the video frame rate, in frames/second, that the file was encoded in
  virtual HRESULT STDMETHODCALLTYPE get_encodedFrameRate(long* plFrameRate/*[out,retval]*/) = 0;
  // [826] Returns the number of skipped frames
  virtual HRESULT STDMETHODCALLTYPE get_framesSkipped(long* plFrames/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_bandWidth(void)
  {
    long plBandwidth;
    OLECHECK(this->get_bandWidth((long*)&plBandwidth));
    return plBandwidth;
  }

  long __fastcall get_recoveredPackets(void)
  {
    long plRecoveredPackets;
    OLECHECK(this->get_recoveredPackets((long*)&plRecoveredPackets));
    return plRecoveredPackets;
  }

  BSTR __fastcall get_sourceProtocol(void)
  {
    BSTR pbstrSourceProtocol = 0;
    OLECHECK(this->get_sourceProtocol((BSTR*)&pbstrSourceProtocol));
    return pbstrSourceProtocol;
  }

  long __fastcall get_receivedPackets(void)
  {
    long plReceivedPackets;
    OLECHECK(this->get_receivedPackets((long*)&plReceivedPackets));
    return plReceivedPackets;
  }

  long __fastcall get_lostPackets(void)
  {
    long plLostPackets;
    OLECHECK(this->get_lostPackets((long*)&plLostPackets));
    return plLostPackets;
  }

  long __fastcall get_receptionQuality(void)
  {
    long plReceptionQuality;
    OLECHECK(this->get_receptionQuality((long*)&plReceptionQuality));
    return plReceptionQuality;
  }

  long __fastcall get_bufferingCount(void)
  {
    long plBufferingCount;
    OLECHECK(this->get_bufferingCount((long*)&plBufferingCount));
    return plBufferingCount;
  }

  long __fastcall get_bufferingProgress(void)
  {
    long plBufferingProgress;
    OLECHECK(this->get_bufferingProgress((long*)&plBufferingProgress));
    return plBufferingProgress;
  }

  long __fastcall get_bufferingTime(void)
  {
    long plBufferingTime;
    OLECHECK(this->get_bufferingTime((long*)&plBufferingTime));
    return plBufferingTime;
  }

  long __fastcall get_frameRate(void)
  {
    long plFrameRate;
    OLECHECK(this->get_frameRate((long*)&plFrameRate));
    return plFrameRate;
  }

  long __fastcall get_maxBitRate(void)
  {
    long plBitRate;
    OLECHECK(this->get_maxBitRate((long*)&plBitRate));
    return plBitRate;
  }

  long __fastcall get_bitRate(void)
  {
    long plBitRate;
    OLECHECK(this->get_bitRate((long*)&plBitRate));
    return plBitRate;
  }

  long __fastcall getProxySettings(BSTR bstrProtocol/*[in]*/)
  {
    long plProxySetting;
    OLECHECK(this->getProxySettings(bstrProtocol, (long*)&plProxySetting));
    return plProxySetting;
  }

  BSTR __fastcall getProxyName(BSTR bstrProtocol/*[in]*/)
  {
    BSTR pbstrProxyName = 0;
    OLECHECK(this->getProxyName(bstrProtocol, (BSTR*)&pbstrProxyName));
    return pbstrProxyName;
  }

  long __fastcall getProxyPort(BSTR bstrProtocol/*[in]*/)
  {
    long lProxyPort;
    OLECHECK(this->getProxyPort(bstrProtocol, (long*)&lProxyPort));
    return lProxyPort;
  }

  BSTR __fastcall getProxyExceptionList(BSTR bstrProtocol/*[in]*/)
  {
    BSTR pbstrExceptionList = 0;
    OLECHECK(this->getProxyExceptionList(bstrProtocol, (BSTR*)&pbstrExceptionList));
    return pbstrExceptionList;
  }

  VARIANT_BOOL __fastcall getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/)
  {
    VARIANT_BOOL pfBypassForLocal;
    OLECHECK(this->getProxyBypassForLocal(bstrProtocol, (VARIANT_BOOL*)&pfBypassForLocal));
    return pfBypassForLocal;
  }

  long __fastcall get_maxBandwidth(void)
  {
    long lMaxBandwidth;
    OLECHECK(this->get_maxBandwidth((long*)&lMaxBandwidth));
    return lMaxBandwidth;
  }

  long __fastcall get_downloadProgress(void)
  {
    long plDownloadProgress;
    OLECHECK(this->get_downloadProgress((long*)&plDownloadProgress));
    return plDownloadProgress;
  }

  long __fastcall get_encodedFrameRate(void)
  {
    long plFrameRate;
    OLECHECK(this->get_encodedFrameRate((long*)&plFrameRate));
    return plFrameRate;
  }

  long __fastcall get_framesSkipped(void)
  {
    long plFrames;
    OLECHECK(this->get_framesSkipped((long*)&plFrames));
    return plFrames;
  }


  __property   long            bandWidth = {read = get_bandWidth};
  __property   long            recoveredPackets = {read = get_recoveredPackets};
  __property   BSTR            sourceProtocol = {read = get_sourceProtocol};
  __property   long            receivedPackets = {read = get_receivedPackets};
  __property   long            lostPackets = {read = get_lostPackets};
  __property   long            receptionQuality = {read = get_receptionQuality};
  __property   long            bufferingCount = {read = get_bufferingCount};
  __property   long            bufferingProgress = {read = get_bufferingProgress};
  __property   long            bufferingTime = {read = get_bufferingTime, write = set_bufferingTime};
  __property   long            frameRate = {read = get_frameRate};
  __property   long            maxBitRate = {read = get_maxBitRate};
  __property   long            bitRate = {read = get_bitRate};
  __property   long            maxBandwidth = {read = get_maxBandwidth, write = set_maxBandwidth};
  __property   long            downloadProgress = {read = get_downloadProgress};
  __property   long            encodedFrameRate = {read = get_encodedFrameRate};
  __property   long            framesSkipped = {read = get_framesSkipped};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCdromCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE4C8FE2-34B2-11D3-A3BF-006097C9B344}
// *********************************************************************//
interface IWMPCdromCollection  : public IDispatch
{
public:
  // [301] Returns the number of items in the cdrom collection
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0;
  // [302] Returns the CDROM object at the given index
  virtual HRESULT STDMETHODCALLTYPE Item(long lIndex/*[in]*/, 
                                         Wmplib_tlb::IWMPCdrom** ppItem/*[out,retval]*/) = 0;
  // [303] Returns the CDROM object associated with a particular drive specifier, e.g. F:
  virtual HRESULT STDMETHODCALLTYPE getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/, 
                                                        Wmplib_tlb::IWMPCdrom** ppCdrom/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long plCount;
    OLECHECK(this->get_count((long*)&plCount));
    return plCount;
  }

  Wmplib_tlb::IWMPCdrom* __fastcall Item(long lIndex/*[in]*/)
  {
    Wmplib_tlb::IWMPCdrom* ppItem = 0;
    OLECHECK(this->Item(lIndex, (Wmplib_tlb::IWMPCdrom**)&ppItem));
    return ppItem;
  }

  Wmplib_tlb::IWMPCdrom* __fastcall getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/)
  {
    Wmplib_tlb::IWMPCdrom* ppCdrom = 0;
    OLECHECK(this->getByDriveSpecifier(bstrDriveSpecifier, (Wmplib_tlb::IWMPCdrom**)&ppCdrom));
    return ppCdrom;
  }


  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCdrom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFAB6E98-8730-11D3-B388-00C04F68574B}
// *********************************************************************//
interface IWMPCdrom  : public IDispatch
{
public:
  // [251] Returns the CDROM drive specifier
  virtual HRESULT STDMETHODCALLTYPE get_driveSpecifier(BSTR* pbstrDrive/*[out,retval]*/) = 0;
  // [252] Returns the playlist of tracks currently in the CDROM drive
  virtual HRESULT STDMETHODCALLTYPE get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [253] Eject the CD in the CDROM drive
  virtual HRESULT STDMETHODCALLTYPE eject(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_driveSpecifier(void)
  {
    BSTR pbstrDrive = 0;
    OLECHECK(this->get_driveSpecifier((BSTR*)&pbstrDrive));
    return pbstrDrive;
  }

  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void)
  {
    Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
    OLECHECK(this->get_Playlist(&ppPlaylist));
    return ppPlaylist;
  }


  __property   BSTR            driveSpecifier = {read = get_driveSpecifier};
  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPClosedCaption
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4F2DF574-C588-11D3-9ED0-00C04FB6E937}
// *********************************************************************//
interface IWMPClosedCaption  : public IDispatch
{
public:
  // [951] Returns the previously set SAMI style
  virtual HRESULT STDMETHODCALLTYPE get_SAMIStyle(BSTR* pbstrSAMIStyle/*[out,retval]*/) = 0;
  // [951] Returns the previously set SAMI style
  virtual HRESULT STDMETHODCALLTYPE set_SAMIStyle(BSTR pbstrSAMIStyle/*[in]*/) = 0;
  // [952] Returns the previously set SAMI language
  virtual HRESULT STDMETHODCALLTYPE get_SAMILang(BSTR* pbstrSAMILang/*[out,retval]*/) = 0;
  // [952] Returns the previously set SAMI language
  virtual HRESULT STDMETHODCALLTYPE set_SAMILang(BSTR pbstrSAMILang/*[in]*/) = 0;
  // [953] Returns the previously set SAMI file name
  virtual HRESULT STDMETHODCALLTYPE get_SAMIFileName(BSTR* pbstrSAMIFileName/*[out,retval]*/) = 0;
  // [953] Returns the previously set SAMI file name
  virtual HRESULT STDMETHODCALLTYPE set_SAMIFileName(BSTR pbstrSAMIFileName/*[in]*/) = 0;
  // [954] Returns the previously set Captioning ID
  virtual HRESULT STDMETHODCALLTYPE get_captioningId(BSTR* pbstrCaptioningID/*[out,retval]*/) = 0;
  // [954] Returns the previously set Captioning ID
  virtual HRESULT STDMETHODCALLTYPE set_captioningId(BSTR pbstrCaptioningID/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SAMIStyle(void)
  {
    BSTR pbstrSAMIStyle = 0;
    OLECHECK(this->get_SAMIStyle((BSTR*)&pbstrSAMIStyle));
    return pbstrSAMIStyle;
  }

  BSTR __fastcall get_SAMILang(void)
  {
    BSTR pbstrSAMILang = 0;
    OLECHECK(this->get_SAMILang((BSTR*)&pbstrSAMILang));
    return pbstrSAMILang;
  }

  BSTR __fastcall get_SAMIFileName(void)
  {
    BSTR pbstrSAMIFileName = 0;
    OLECHECK(this->get_SAMIFileName((BSTR*)&pbstrSAMIFileName));
    return pbstrSAMIFileName;
  }

  BSTR __fastcall get_captioningId(void)
  {
    BSTR pbstrCaptioningID = 0;
    OLECHECK(this->get_captioningId((BSTR*)&pbstrCaptioningID));
    return pbstrCaptioningID;
  }


  __property   BSTR            SAMIStyle = {read = get_SAMIStyle, write = set_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang, write = set_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName, write = set_SAMIFileName};
  __property   BSTR            captioningId = {read = get_captioningId, write = set_captioningId};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPError
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A12DCF7D-14AB-4C1B-A8CD-63909F06025B}
// *********************************************************************//
interface IWMPError  : public IDispatch
{
public:
  // [851] Clears the error queue
  virtual HRESULT STDMETHODCALLTYPE clearErrorQueue(void) = 0;
  // [852] Returns the number of error items
  virtual HRESULT STDMETHODCALLTYPE get_errorCount(long* plNumErrors/*[out,retval]*/) = 0;
  // [853] Returns an error item object
  virtual HRESULT STDMETHODCALLTYPE get_Item(long dwIndex/*[in]*/, 
                                             Wmplib_tlb::IWMPErrorItem** ppErrorItem/*[out,retval]*/) = 0;
  // [854] Launches WebHelp
  virtual HRESULT STDMETHODCALLTYPE webHelp(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_errorCount(void)
  {
    long plNumErrors;
    OLECHECK(this->get_errorCount((long*)&plNumErrors));
    return plNumErrors;
  }

  Wmplib_tlb::IWMPErrorItem* __fastcall get_Item(long dwIndex/*[in]*/)
  {
    Wmplib_tlb::IWMPErrorItem* ppErrorItem = 0;
    OLECHECK(this->get_Item(dwIndex, (Wmplib_tlb::IWMPErrorItem**)&ppErrorItem));
    return ppErrorItem;
  }


  __property   long            errorCount = {read = get_errorCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPErrorItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3614C646-3B3B-4DE7-A81E-930E3F2127B3}
// *********************************************************************//
interface IWMPErrorItem  : public IDispatch
{
public:
  // [901] Returns the error code
  virtual HRESULT STDMETHODCALLTYPE get_errorCode(long* phr/*[out,retval]*/) = 0;
  // [902] Returns a description of the error
  virtual HRESULT STDMETHODCALLTYPE get_errorDescription(BSTR* pbstrDescription/*[out,retval]*/) = 0;
  // [903] Returns context information for the error
  virtual HRESULT STDMETHODCALLTYPE get_errorContext(VARIANT* pvarContext/*[out,retval]*/) = 0;
  // [904] Returns remedy code for the error
  virtual HRESULT STDMETHODCALLTYPE get_remedy(long* plRemedy/*[out,retval]*/) = 0;
  // [905] Returns a custom url for this error (if avail)
  virtual HRESULT STDMETHODCALLTYPE get_customUrl(BSTR* pbstrCustomUrl/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_errorCode(void)
  {
    long phr;
    OLECHECK(this->get_errorCode((long*)&phr));
    return phr;
  }

  BSTR __fastcall get_errorDescription(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_errorDescription((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  VARIANT __fastcall get_errorContext(void)
  {
    VARIANT pvarContext;
    OLECHECK(this->get_errorContext((VARIANT*)&pvarContext));
    return pvarContext;
  }

  long __fastcall get_remedy(void)
  {
    long plRemedy;
    OLECHECK(this->get_remedy((long*)&plRemedy));
    return plRemedy;
  }

  BSTR __fastcall get_customUrl(void)
  {
    BSTR pbstrCustomUrl = 0;
    OLECHECK(this->get_customUrl((BSTR*)&pbstrCustomUrl));
    return pbstrCustomUrl;
  }


  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            errorDescription = {read = get_errorDescription};
  __property   long            remedy = {read = get_remedy};
  __property   BSTR            customUrl = {read = get_customUrl};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDVD
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8DA61686-4668-4A5C-AE5D-803193293DBE}
// *********************************************************************//
interface IWMPDVD  : public IDispatch
{
public:
  // [1001] Returns whether or not the specified DVD functionality is available
  virtual HRESULT STDMETHODCALLTYPE get_isAvailable(BSTR bstrItem/*[in]*/, 
                                                    VARIANT_BOOL* pIsAvailable/*[out,retval]*/) = 0;
  // [1002] Returns the current DVD domain
  virtual HRESULT STDMETHODCALLTYPE get_domain(BSTR* strDomain/*[out,retval]*/) = 0;
  // [1003] Displays the top menu of the DVD
  virtual HRESULT STDMETHODCALLTYPE topMenu(void) = 0;
  // [1004] Displays the title menu of the current DVD title
  virtual HRESULT STDMETHODCALLTYPE titleMenu(void) = 0;
  // [1005] Navigates back one menu
  virtual HRESULT STDMETHODCALLTYPE back(void) = 0;
  // [1006] Removes the menu from the screen and returns to playing the DVD
  virtual HRESULT STDMETHODCALLTYPE resume(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_isAvailable(BSTR bstrItem/*[in]*/)
  {
    VARIANT_BOOL pIsAvailable;
    OLECHECK(this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable));
    return pIsAvailable;
  }

  BSTR __fastcall get_domain(void)
  {
    BSTR strDomain = 0;
    OLECHECK(this->get_domain((BSTR*)&strDomain));
    return strDomain;
  }


  __property   BSTR            domain = {read = get_domain};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayerApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40897764-CEAB-47BE-AD4A-8E28537F9BBF}
// *********************************************************************//
interface IWMPPlayerApplication  : public IDispatch
{
public:
  // [1101] Switches the display to player application
  virtual HRESULT STDMETHODCALLTYPE switchToPlayerApplication(void) = 0;
  // [1102] Switches the display to control
  virtual HRESULT STDMETHODCALLTYPE switchToControl(void) = 0;
  // [1103] Returns a boolean value specifying whether or not the player is docked
  virtual HRESULT STDMETHODCALLTYPE get_playerDocked(VARIANT_BOOL* pbPlayerDocked/*[out,retval]*/) = 0;
  // [1104] Returns a boolean value specifying whether or not the control has display
  virtual HRESULT STDMETHODCALLTYPE get_hasDisplay(VARIANT_BOOL* pbHasDisplay/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_playerDocked(void)
  {
    VARIANT_BOOL pbPlayerDocked;
    OLECHECK(this->get_playerDocked((VARIANT_BOOL*)&pbPlayerDocked));
    return pbPlayerDocked;
  }

  VARIANT_BOOL __fastcall get_hasDisplay(void)
  {
    VARIANT_BOOL pbHasDisplay;
    OLECHECK(this->get_hasDisplay((VARIANT_BOOL*)&pbHasDisplay));
    return pbHasDisplay;
  }


  __property   VARIANT_BOOL    playerDocked = {read = get_playerDocked};
  __property   VARIANT_BOOL    hasDisplay = {read = get_hasDisplay};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0E6B01D1-D407-4C85-BF5F-1C01F6150280}
// *********************************************************************//
interface IWMPPlayer2  : public Wmplib_tlb::IWMPCore
{
public:
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE set_uiMode(BSTR pbstrMode/*[in]*/) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE get_uiMode(BSTR* pbstrMode/*[out,retval]*/) = 0;
  // [24] Returns a boolen value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [24] Returns a boolen value specifying whether or not video is stretched
  virtual HRESULT STDMETHODCALLTYPE set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [25] Returns a boolen value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [25] Returns a boolen value specifying whether or not video is windowless
  virtual HRESULT STDMETHODCALLTYPE set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_enableContextMenu(void)
  {
    VARIANT_BOOL pbEnableContextMenu;
    OLECHECK(this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu));
    return pbEnableContextMenu;
  }

  BSTR __fastcall get_uiMode(void)
  {
    BSTR pbstrMode = 0;
    OLECHECK(this->get_uiMode((BSTR*)&pbstrMode));
    return pbstrMode;
  }

  VARIANT_BOOL __fastcall get_stretchToFit(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_windowlessVideo(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }


  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BF52A4F-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
interface IWMPPlayer  : public Wmplib_tlb::IWMPCore
{
public:
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [19] Returns a boolen value specifying whether or not the control is enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [21] Returns a boolean value specifying whether or not the control is in full screen mode
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/) = 0;
  // [22] Returns a boolean value specifying whether or not the context menu is enabled on the control
  virtual HRESULT STDMETHODCALLTYPE set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE set_uiMode(BSTR pbstrMode/*[in]*/) = 0;
  // [23] Specifies the ui mode to select
  virtual HRESULT STDMETHODCALLTYPE get_uiMode(BSTR* pbstrMode/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_enableContextMenu(void)
  {
    VARIANT_BOOL pbEnableContextMenu;
    OLECHECK(this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu));
    return pbEnableContextMenu;
  }

  BSTR __fastcall get_uiMode(void)
  {
    BSTR pbstrMode = 0;
    OLECHECK(this->get_uiMode((BSTR*)&pbstrMode));
    return pbstrMode;
  }


  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPErrorItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F75CCEC0-C67C-475C-931E-8719870BEE7D}
// *********************************************************************//
interface IWMPErrorItem2  : public Wmplib_tlb::IWMPErrorItem
{
public:
  // [906] Returns condition for the error
  virtual HRESULT STDMETHODCALLTYPE get_condition(long* plCondition/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_condition(void)
  {
    long plCondition;
    OLECHECK(this->get_condition((long*)&plCondition));
    return plCondition;
  }


  __property   long            condition = {read = get_condition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPControls2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F030D25-0890-480F-9775-1F7E40AB5B8E}
// *********************************************************************//
interface IWMPControls2  : public Wmplib_tlb::IWMPControls
{
public:
  // [64] Advances the video one frame
  virtual HRESULT STDMETHODCALLTYPE step(long lStep/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMedia2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB7C88BB-143E-4EA4-ACC3-E4350B2106C3}
// *********************************************************************//
interface IWMPMedia2  : public Wmplib_tlb::IWMPMedia
{
public:
  // [768] Returns an error item pointer for a media specific error
  virtual HRESULT STDMETHODCALLTYPE get_Error(Wmplib_tlb::IWMPErrorItem** ppIWMPErrorItem/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPErrorItemPtr __fastcall get_Error(void)
  {
    Wmplib_tlb::IWMPErrorItemPtr ppIWMPErrorItem;
    OLECHECK(this->get_Error(&ppIWMPErrorItem));
    return ppIWMPErrorItem;
  }


  __property   Wmplib_tlb::IWMPErrorItemPtr Error = {read = get_Error};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMedia3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F118EFC7-F03A-4FB4-99C9-1C02A5C1065B}
// *********************************************************************//
interface IWMPMedia3  : public Wmplib_tlb::IWMPMedia2
{
public:
  virtual HRESULT STDMETHODCALLTYPE getAttributeCountByType(BSTR bstrType/*[in]*/, 
                                                            BSTR bstrLanguage/*[in]*/, 
                                                            long* plCount/*[out,retval]*/) = 0; // [769]
  virtual HRESULT STDMETHODCALLTYPE getItemInfoByType(BSTR bstrType/*[in]*/, 
                                                      BSTR bstrLanguage/*[in]*/, long lIndex/*[in]*/, 
                                                      VARIANT* pvarValue/*[out,retval]*/) = 0; // [770]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall getAttributeCountByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/)
  {
    long plCount;
    OLECHECK(this->getAttributeCountByType(bstrType, bstrLanguage, (long*)&plCount));
    return plCount;
  }

  VARIANT __fastcall getItemInfoByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                       long lIndex/*[in]*/)
  {
    VARIANT pvarValue;
    OLECHECK(this->getItemInfoByType(bstrType, bstrLanguage, lIndex, (VARIANT*)&pvarValue));
    return pvarValue;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMetadataPicture
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C29BBE0-F87D-4C45-AA28-A70F0230FFA9}
// *********************************************************************//
interface IWMPMetadataPicture  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_mimeType(BSTR* pbstrMimeType/*[out,retval]*/) = 0; // [1051]
  virtual HRESULT STDMETHODCALLTYPE get_pictureType(BSTR* pbstrPictureType/*[out,retval]*/) = 0; // [1052]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrDescription/*[out,retval]*/) = 0; // [1053]
  virtual HRESULT STDMETHODCALLTYPE get_URL(BSTR* pbstrURL/*[out,retval]*/) = 0; // [1054]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_mimeType(void)
  {
    BSTR pbstrMimeType = 0;
    OLECHECK(this->get_mimeType((BSTR*)&pbstrMimeType));
    return pbstrMimeType;
  }

  BSTR __fastcall get_pictureType(void)
  {
    BSTR pbstrPictureType = 0;
    OLECHECK(this->get_pictureType((BSTR*)&pbstrPictureType));
    return pbstrPictureType;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  BSTR __fastcall get_URL(void)
  {
    BSTR pbstrURL = 0;
    OLECHECK(this->get_URL((BSTR*)&pbstrURL));
    return pbstrURL;
  }


  __property   BSTR            mimeType = {read = get_mimeType};
  __property   BSTR            pictureType = {read = get_pictureType};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            URL = {read = get_URL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMetadataText
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {769A72DB-13D2-45E2-9C48-53CA9D5B7450}
// *********************************************************************//
interface IWMPMetadataText  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrDescription/*[out,retval]*/) = 0; // [1056]
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* pbstrText/*[out,retval]*/) = 0; // [1055]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_text((BSTR*)&pbstrText));
    return pbstrText;
  }


  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            text = {read = get_text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2}
// *********************************************************************//
interface IWMPSettings2  : public Wmplib_tlb::IWMPSettings
{
public:
  // [114] Returns the LCID of default audio language
  virtual HRESULT STDMETHODCALLTYPE get_defaultAudioLanguage(long* plLangID/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_mediaAccessRights(BSTR* pbstrRights/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/, 
                                                             VARIANT_BOOL* pvbAccepted/*[out,retval]*/) = 0; // [116]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_defaultAudioLanguage(void)
  {
    long plLangID;
    OLECHECK(this->get_defaultAudioLanguage((long*)&plLangID));
    return plLangID;
  }

  BSTR __fastcall get_mediaAccessRights(void)
  {
    BSTR pbstrRights = 0;
    OLECHECK(this->get_mediaAccessRights((BSTR*)&pbstrRights));
    return pbstrRights;
  }

  VARIANT_BOOL __fastcall requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/)
  {
    VARIANT_BOOL pvbAccepted;
    OLECHECK(this->requestMediaAccessRights(bstrDesiredAccess, (VARIANT_BOOL*)&pvbAccepted));
    return pvbAccepted;
  }


  __property   long            defaultAudioLanguage = {read = get_defaultAudioLanguage};
  __property   BSTR            mediaAccessRights = {read = get_mediaAccessRights};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPControls3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1D1110E-D545-476A-9A78-AC3E4CB1E6BD}
// *********************************************************************//
interface IWMPControls3  : public Wmplib_tlb::IWMPControls2
{
public:
  // [65] Returns the count of supported audio languages
  virtual HRESULT STDMETHODCALLTYPE get_audioLanguageCount(long* plCount/*[out,retval]*/) = 0;
  // [66] Returns the LCID corresponding to the index
  virtual HRESULT STDMETHODCALLTYPE getAudioLanguageID(long lIndex/*[in]*/, 
                                                       long* plLangID/*[out,retval]*/) = 0;
  // [67] Returns the desription corresponding to the index
  virtual HRESULT STDMETHODCALLTYPE getAudioLanguageDescription(long lIndex/*[in]*/, 
                                                                BSTR* pbstrLangDesc/*[out,retval]*/) = 0;
  // [68] Gets the current audio language setting for playback
  virtual HRESULT STDMETHODCALLTYPE get_currentAudioLanguage(long* plLangID/*[out,retval]*/) = 0;
  // [68] Gets the current audio language setting for playback
  virtual HRESULT STDMETHODCALLTYPE set_currentAudioLanguage(long plLangID/*[in]*/) = 0;
  // [69] Gets the current audio language index setting for playback
  virtual HRESULT STDMETHODCALLTYPE get_currentAudioLanguageIndex(long* plIndex/*[out,retval]*/) = 0;
  // [69] Gets the current audio language index setting for playback
  virtual HRESULT STDMETHODCALLTYPE set_currentAudioLanguageIndex(long plIndex/*[in]*/) = 0;
  // [70] Returns the human-readable name of language specified by LCID
  virtual HRESULT STDMETHODCALLTYPE getLanguageName(long lLangID/*[in]*/, 
                                                    BSTR* pbstrLangName/*[out,retval]*/) = 0;
  // [71] Returns the current timecode position in media
  virtual HRESULT STDMETHODCALLTYPE get_currentPositionTimecode(BSTR* bstrTimecode/*[out,retval]*/) = 0;
  // [71] Returns the current timecode position in media
  virtual HRESULT STDMETHODCALLTYPE set_currentPositionTimecode(BSTR bstrTimecode/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_audioLanguageCount(void)
  {
    long plCount;
    OLECHECK(this->get_audioLanguageCount((long*)&plCount));
    return plCount;
  }

  long __fastcall getAudioLanguageID(long lIndex/*[in]*/)
  {
    long plLangID;
    OLECHECK(this->getAudioLanguageID(lIndex, (long*)&plLangID));
    return plLangID;
  }

  BSTR __fastcall getAudioLanguageDescription(long lIndex/*[in]*/)
  {
    BSTR pbstrLangDesc = 0;
    OLECHECK(this->getAudioLanguageDescription(lIndex, (BSTR*)&pbstrLangDesc));
    return pbstrLangDesc;
  }

  long __fastcall get_currentAudioLanguage(void)
  {
    long plLangID;
    OLECHECK(this->get_currentAudioLanguage((long*)&plLangID));
    return plLangID;
  }

  long __fastcall get_currentAudioLanguageIndex(void)
  {
    long plIndex;
    OLECHECK(this->get_currentAudioLanguageIndex((long*)&plIndex));
    return plIndex;
  }

  BSTR __fastcall getLanguageName(long lLangID/*[in]*/)
  {
    BSTR pbstrLangName = 0;
    OLECHECK(this->getLanguageName(lLangID, (BSTR*)&pbstrLangName));
    return pbstrLangName;
  }

  BSTR __fastcall get_currentPositionTimecode(void)
  {
    BSTR bstrTimecode = 0;
    OLECHECK(this->get_currentPositionTimecode((BSTR*)&bstrTimecode));
    return bstrTimecode;
  }


  __property   long            audioLanguageCount = {read = get_audioLanguageCount};
  __property   long            currentAudioLanguage = {read = get_currentAudioLanguage, write = set_currentAudioLanguage};
  __property   long            currentAudioLanguageIndex = {read = get_currentAudioLanguageIndex, write = set_currentAudioLanguageIndex};
  __property   BSTR            currentPositionTimecode = {read = get_currentPositionTimecode, write = set_currentPositionTimecode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPClosedCaption2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {350BA78B-6BC8-4113-A5F5-312056934EB6}
// *********************************************************************//
interface IWMPClosedCaption2  : public Wmplib_tlb::IWMPClosedCaption
{
public:
  // [955] Returns the count of SAMI languages
  virtual HRESULT STDMETHODCALLTYPE get_SAMILangCount(long* plCount/*[out,retval]*/) = 0;
  // [956] Returns the name of a SAMI language by index
  virtual HRESULT STDMETHODCALLTYPE getSAMILangName(long nIndex/*[in]*/, 
                                                    BSTR* pbstrName/*[out,retval]*/) = 0;
  // [957] Returns the ID of a SAMI language by index
  virtual HRESULT STDMETHODCALLTYPE getSAMILangID(long nIndex/*[in]*/, 
                                                  long* plLangID/*[out,retval]*/) = 0;
  // [958] Returns the count of SAMI styles
  virtual HRESULT STDMETHODCALLTYPE get_SAMIStyleCount(long* plCount/*[out,retval]*/) = 0;
  // [959] Returns the name of a SAMI style by index
  virtual HRESULT STDMETHODCALLTYPE getSAMIStyleName(long nIndex/*[in]*/, 
                                                     BSTR* pbstrName/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_SAMILangCount(void)
  {
    long plCount;
    OLECHECK(this->get_SAMILangCount((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall getSAMILangName(long nIndex/*[in]*/)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->getSAMILangName(nIndex, (BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall getSAMILangID(long nIndex/*[in]*/)
  {
    long plLangID;
    OLECHECK(this->getSAMILangID(nIndex, (long*)&plLangID));
    return plLangID;
  }

  long __fastcall get_SAMIStyleCount(void)
  {
    long plCount;
    OLECHECK(this->get_SAMIStyleCount((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall getSAMIStyleName(long nIndex/*[in]*/)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->getSAMIStyleName(nIndex, (BSTR*)&pbstrName));
    return pbstrName;
  }


  __property   long            SAMILangCount = {read = get_SAMILangCount};
  __property   long            SAMIStyleCount = {read = get_SAMIStyleCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMediaCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BA957F5-FD8C-4791-B82D-F840401EE474}
// *********************************************************************//
interface IWMPMediaCollection2  : public Wmplib_tlb::IWMPMediaCollection
{
public:
  // [1401] Creates an empty query object
  virtual HRESULT STDMETHODCALLTYPE createQuery(Wmplib_tlb::IWMPQuery** ppQuery/*[out,retval]*/) = 0;
  // [1402] Creates a playlist from a query
  virtual HRESULT STDMETHODCALLTYPE getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                       BSTR bstrMediaType/*[in]*/, 
                                                       BSTR bstrSortAttribute/*[in]*/, 
                                                       VARIANT_BOOL fSortAscending/*[in]*/, 
                                                       Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [1403] Creates a string collection from a query
  virtual HRESULT STDMETHODCALLTYPE getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                               Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                               BSTR bstrMediaType/*[in]*/, 
                                                               BSTR bstrSortAttribute/*[in]*/, 
                                                               VARIANT_BOOL fSortAscending/*[in]*/, 
                                                               Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/) = 0;
  // [1404] Returns a collection of items with the given attribute and media type
  virtual HRESULT STDMETHODCALLTYPE getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                               BSTR bstrValue/*[in]*/, 
                                                               BSTR bstrMediaType/*[in]*/, 
                                                               Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPQuery* __fastcall createQuery(void)
  {
    Wmplib_tlb::IWMPQuery* ppQuery = 0;
    OLECHECK(this->createQuery((Wmplib_tlb::IWMPQuery**)&ppQuery));
    return ppQuery;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/, 
                                                          BSTR bstrSortAttribute/*[in]*/, 
                                                          VARIANT_BOOL fSortAscending/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppPlaylist = 0;
    OLECHECK(this->getPlaylistByQuery(pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist));
    return ppPlaylist;
  }

  Wmplib_tlb::IWMPStringCollection* __fastcall getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                                          Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                                          BSTR bstrMediaType/*[in]*/, 
                                                                          BSTR bstrSortAttribute/*[in]*/, 
                                                                          VARIANT_BOOL fSortAscending/*[in]*/)
  {
    Wmplib_tlb::IWMPStringCollection* ppStringCollection = 0;
    OLECHECK(this->getStringCollectionByQuery(bstrAttribute, pQuery, bstrMediaType, 
                                              bstrSortAttribute, fSortAscending, (Wmplib_tlb::IWMPStringCollection**)&ppStringCollection));
    return ppStringCollection;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                                  BSTR bstrValue/*[in]*/, 
                                                                  BSTR bstrMediaType/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppMediaItems = 0;
    OLECHECK(this->getByAttributeAndMediaType(bstrAttribute, bstrValue, bstrMediaType, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems));
    return ppMediaItems;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPStringCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46AD648D-53F1-4A74-92E2-2A1B68D63FD4}
// *********************************************************************//
interface IWMPStringCollection2  : public Wmplib_tlb::IWMPStringCollection
{
public:
  // [1451] Determines if the supplied object is the same as this one
  virtual HRESULT STDMETHODCALLTYPE isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/, 
                                                VARIANT_BOOL* pvbool/*[out,retval]*/) = 0;
  // [1452] Gets an attribute from a string collection backing object
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(long lCollectionIndex/*[in]*/, 
                                                BSTR bstrItemName/*[in]*/, 
                                                BSTR* pbstrValue/*[out,retval]*/) = 0;
  // [1453] Gets count of values for a particular attribute
  virtual HRESULT STDMETHODCALLTYPE getAttributeCountByType(long lCollectionIndex/*[in]*/, 
                                                            BSTR bstrType/*[in]*/, 
                                                            BSTR bstrLanguage/*[in]*/, 
                                                            long* plCount/*[out,retval]*/) = 0;
  // [1454] Gets one value of an attribute from a string collection backing object
  virtual HRESULT STDMETHODCALLTYPE getItemInfoByType(long lCollectionIndex/*[in]*/, 
                                                      BSTR bstrType/*[in]*/, 
                                                      BSTR bstrLanguage/*[in]*/, 
                                                      long lAttributeIndex/*[in]*/, 
                                                      VARIANT* pvarValue/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/)
  {
    VARIANT_BOOL pvbool;
    OLECHECK(this->isIdentical(pIWMPStringCollection2, (VARIANT_BOOL*)&pvbool));
    return pvbool;
  }

  BSTR __fastcall getItemInfo(long lCollectionIndex/*[in]*/, BSTR bstrItemName/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->getItemInfo(lCollectionIndex, bstrItemName, (BSTR*)&pbstrValue));
    return pbstrValue;
  }

  long __fastcall getAttributeCountByType(long lCollectionIndex/*[in]*/, BSTR bstrType/*[in]*/, 
                                          BSTR bstrLanguage/*[in]*/)
  {
    long plCount;
    OLECHECK(this->getAttributeCountByType(lCollectionIndex, bstrType, bstrLanguage, (long*)&plCount));
    return plCount;
  }

  VARIANT __fastcall getItemInfoByType(long lCollectionIndex/*[in]*/, BSTR bstrType/*[in]*/, 
                                       BSTR bstrLanguage/*[in]*/, long lAttributeIndex/*[in]*/)
  {
    VARIANT pvarValue;
    OLECHECK(this->getItemInfoByType(lCollectionIndex, bstrType, bstrLanguage, lAttributeIndex, (VARIANT*)&pvarValue));
    return pvarValue;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A00918F3-A6B0-4BFB-9189-FD834C7BC5A5}
// *********************************************************************//
interface IWMPQuery  : public IDispatch
{
public:
  // [1351] Adds a single AND query parameter to existing group
  virtual HRESULT STDMETHODCALLTYPE addCondition(BSTR bstrAttribute/*[in]*/, 
                                                 BSTR bstrOperator/*[in]*/, BSTR bstrValue/*[in]*/) = 0;
  // [1352] Starts a new OR query group
  virtual HRESULT STDMETHODCALLTYPE beginNextGroup(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlayerServices
// Flags:     (0)
// GUID:      {1D01FBDB-ADE2-4C8D-9842-C190B95C3306}
// *********************************************************************//
interface IWMPPlayerServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE activateUIPlugin(BSTR bstrPlugin/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE setTaskPane(BSTR bstrTaskPane/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE setTaskPaneURL(BSTR bstrTaskPane/*[in]*/, BSTR bstrURL/*[in]*/, 
                                                   BSTR bstrFriendlyName/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPPlayerServices2
// Flags:     (0)
// GUID:      {1BB1592F-F040-418A-9F71-17C7512B4D70}
// *********************************************************************//
interface IWMPPlayerServices2  : public Wmplib_tlb::IWMPPlayerServices
{
public:
  virtual HRESULT STDMETHODCALLTYPE setBackgroundProcessingPriority(BSTR bstrPriority/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPRemoteMediaServices
// Flags:     (0)
// GUID:      {CBB92747-741F-44FE-AB5B-F1A48F3B2A59}
// *********************************************************************//
interface IWMPRemoteMediaServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetServiceType(BSTR* pbstrType/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetApplicationName(BSTR* pbstrName/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetScriptableObject(BSTR* pbstrName/*[out]*/, 
                                                        LPDISPATCH* ppDispatch/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetCustomUIMode(BSTR* pbstrFile/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPSyncServices
// Flags:     (256) OleAutomation
// GUID:      {8B5050FF-E0A4-4808-B3A8-893A9E1ED894}
// *********************************************************************//
interface IWMPSyncServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_deviceCount(long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getDevice(long lIndex/*[in]*/, 
                                              Wmplib_tlb::IWMPSyncDevice** ppDevice/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPLibraryServices
// Flags:     (256) OleAutomation
// GUID:      {39C2F8D5-1CF2-4D5E-AE09-D73492CF9EAA}
// *********************************************************************//
interface IWMPLibraryServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE getCountByType(Wmplib_tlb::WMPLibraryType wmplt/*[in]*/, 
                                                   long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getLibraryByType(Wmplib_tlb::WMPLibraryType wmplt/*[in]*/, 
                                                     long lIndex/*[in]*/, 
                                                     Wmplib_tlb::IWMPLibrary** ppIWMPLibrary/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPLibrarySharingServices
// Flags:     (256) OleAutomation
// GUID:      {82CBA86B-9F04-474B-A365-D6DD1466E541}
// *********************************************************************//
interface IWMPLibrarySharingServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE isLibraryShared(VARIANT_BOOL* pvbShared/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE isLibrarySharingEnabled(VARIANT_BOOL* pvbEnabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE showLibrarySharing(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPFolderMonitorServices
// Flags:     (256) OleAutomation
// GUID:      {788C8743-E57F-439D-A468-5BC77F2E59C6}
// *********************************************************************//
interface IWMPFolderMonitorServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(long lIndex/*[in]*/, BSTR* pbstrFolder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add(BSTR bstrFolder/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove(long lIndex/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_scanState(Wmplib_tlb::WMPFolderScanState* pwmpfss/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_currentFolder(BSTR* pbstrFolder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_scannedFilesCount(long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_addedFilesCount(long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_updateProgress(long* plProgress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startScan(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE stopScan(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPSyncDevice2
// Flags:     (256) OleAutomation
// GUID:      {88AFB4B2-140A-44D2-91E6-4543DA467CD1}
// *********************************************************************//
interface IWMPSyncDevice2  : public Wmplib_tlb::IWMPSyncDevice
{
public:
  virtual HRESULT STDMETHODCALLTYPE setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IWMPPlaylistCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70}
// *********************************************************************//
interface IWMPPlaylistCtrl  : public IDispatch
{
public:
  // [5601] property playlist
  virtual HRESULT STDMETHODCALLTYPE get_Playlist(Wmplib_tlb::IWMPPlaylist** ppdispPlaylist/*[out,retval]*/) = 0;
  // [5601] property playlist
  virtual HRESULT STDMETHODCALLTYPE set_Playlist(Wmplib_tlb::IWMPPlaylist* ppdispPlaylist/*[in]*/) = 0;
  // [5602] property columns
  virtual HRESULT STDMETHODCALLTYPE get_columns(BSTR* pbstrColumns/*[out,retval]*/) = 0;
  // [5602] property columns
  virtual HRESULT STDMETHODCALLTYPE set_columns(BSTR pbstrColumns/*[in]*/) = 0;
  // [5603] property columnCount
  virtual HRESULT STDMETHODCALLTYPE get_columnCount(long* pVal/*[out,retval]*/) = 0;
  // [5604] property columnOrder
  virtual HRESULT STDMETHODCALLTYPE get_columnOrder(BSTR* pbstrColumnOrder/*[out,retval]*/) = 0;
  // [5604] property columnOrder
  virtual HRESULT STDMETHODCALLTYPE set_columnOrder(BSTR pbstrColumnOrder/*[in]*/) = 0;
  // [5605] property columnsVisible
  virtual HRESULT STDMETHODCALLTYPE get_columnsVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5605] property columnsVisible
  virtual HRESULT STDMETHODCALLTYPE set_columnsVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5607] property dropDownVisible
  virtual HRESULT STDMETHODCALLTYPE get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5607] property dropDownVisible
  virtual HRESULT STDMETHODCALLTYPE set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5608] property playlistItemsVisible
  virtual HRESULT STDMETHODCALLTYPE get_playlistItemsVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5608] property playlistItemsVisible
  virtual HRESULT STDMETHODCALLTYPE set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5609] property checkboxesVisible
  virtual HRESULT STDMETHODCALLTYPE get_checkboxesVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5609] property checkboxesVisible
  virtual HRESULT STDMETHODCALLTYPE set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5612] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5612] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5613] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5613] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5614] property disabledItemColor
  virtual HRESULT STDMETHODCALLTYPE get_disabledItemColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5614] property disabledItemColor
  virtual HRESULT STDMETHODCALLTYPE set_disabledItemColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5615] property itemPlayingColor
  virtual HRESULT STDMETHODCALLTYPE get_itemPlayingColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5615] property itemPlayingColor
  virtual HRESULT STDMETHODCALLTYPE set_itemPlayingColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5616] property itemPlayingBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_itemPlayingBackgroundColor(BSTR* pbstrBackgroundColor/*[out,retval]*/) = 0;
  // [5616] property itemPlayingBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/) = 0;
  // [5617] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE get_backgroundImage(BSTR* pbstrImage/*[out,retval]*/) = 0;
  // [5617] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE set_backgroundImage(BSTR pbstrImage/*[in]*/) = 0;
  // [5618] property allowItemEditing
  virtual HRESULT STDMETHODCALLTYPE get_allowItemEditing(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5618] property allowItemEditing
  virtual HRESULT STDMETHODCALLTYPE set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5619] property allowColumnSorting
  virtual HRESULT STDMETHODCALLTYPE get_allowColumnSorting(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5619] property allowColumnSorting
  virtual HRESULT STDMETHODCALLTYPE set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5620] property dropDownList
  virtual HRESULT STDMETHODCALLTYPE get_dropDownList(BSTR* pbstrList/*[out,retval]*/) = 0;
  // [5620] property dropDownList
  virtual HRESULT STDMETHODCALLTYPE set_dropDownList(BSTR pbstrList/*[in]*/) = 0;
  // [5621] property dropDownToolTip
  virtual HRESULT STDMETHODCALLTYPE get_dropDownToolTip(BSTR* pbstrToolTip/*[out,retval]*/) = 0;
  // [5621] property dropDownToolTip
  virtual HRESULT STDMETHODCALLTYPE set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/) = 0;
  // [5622] property copying
  virtual HRESULT STDMETHODCALLTYPE get_copying(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5622] property copying
  virtual HRESULT STDMETHODCALLTYPE set_copying(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5623] method copy
  virtual HRESULT STDMETHODCALLTYPE copy(void) = 0;
  // [5624] method abortCopy
  virtual HRESULT STDMETHODCALLTYPE abortCopy(void) = 0;
  // [5625] method deleteSelected
  virtual HRESULT STDMETHODCALLTYPE deleteSelected(void) = 0;
  // [5626] method deleteSelectedFromLibrary
  virtual HRESULT STDMETHODCALLTYPE deleteSelectedFromLibrary(void) = 0;
  // [5628] method moveSelectedUp
  virtual HRESULT STDMETHODCALLTYPE moveSelectedUp(void) = 0;
  // [5629] method moveSelectedDown
  virtual HRESULT STDMETHODCALLTYPE moveSelectedDown(void) = 0;
  // [5630] method addSelectedToPlaylist
  virtual HRESULT STDMETHODCALLTYPE addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/) = 0;
  // [5631] method getNextSelectedItem
  virtual HRESULT STDMETHODCALLTYPE getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                        long* pnSelected/*[out,retval]*/) = 0;
  // [5632] method getNextCheckedItem
  virtual HRESULT STDMETHODCALLTYPE getNextCheckedItem(long nStartIndex/*[in]*/, 
                                                       long* pnChecked/*[out,retval]*/) = 0;
  // [5633] method setSelectedState
  virtual HRESULT STDMETHODCALLTYPE setSelectedState(long nIndex/*[in]*/, 
                                                     VARIANT_BOOL vbSelected/*[in]*/) = 0;
  // [5634] method setCheckedState
  virtual HRESULT STDMETHODCALLTYPE setCheckedState(long nIndex/*[in]*/, 
                                                    VARIANT_BOOL vbChecked/*[in]*/) = 0;
  // [5635] method sortColumn
  virtual HRESULT STDMETHODCALLTYPE sortColumn(long nIndex/*[in]*/) = 0;
  // [5636] method setColumnResizeMode
  virtual HRESULT STDMETHODCALLTYPE setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/) = 0;
  // [5637] method setColumnWidth
  virtual HRESULT STDMETHODCALLTYPE setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/) = 0;
  // [5642] property itemErrorColor
  virtual HRESULT STDMETHODCALLTYPE get_itemErrorColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5642] property itemErrorColor
  virtual HRESULT STDMETHODCALLTYPE set_itemErrorColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5643] property itemCount
  virtual HRESULT STDMETHODCALLTYPE get_itemCount(long* pnItemCount/*[out,retval]*/) = 0;
  // [5644] property itemMedia
  virtual HRESULT STDMETHODCALLTYPE get_itemMedia(long nIndex/*[in]*/, 
                                                  Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/) = 0;
  // [5645] property itemPlaylist
  virtual HRESULT STDMETHODCALLTYPE get_itemPlaylist(long nIndex/*[in]*/, 
                                                     Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [5646] method getNextSelectedItem2
  virtual HRESULT STDMETHODCALLTYPE getNextSelectedItem2(long nStartIndex/*[in]*/, 
                                                         long* pnSelected/*[out,retval]*/) = 0;
  // [5647] method getNextCheckedItem2
  virtual HRESULT STDMETHODCALLTYPE getNextCheckedItem2(long nStartIndex/*[in]*/, 
                                                        long* pnChecked/*[out,retval]*/) = 0;
  // [5648] method setSelectedState2
  virtual HRESULT STDMETHODCALLTYPE setSelectedState2(long nIndex/*[in]*/, 
                                                      VARIANT_BOOL vbSelected/*[in]*/) = 0;
  // [5649] method setCheckedState2
  virtual HRESULT STDMETHODCALLTYPE setCheckedState2(long nIndex/*[in]*/, 
                                                     VARIANT_BOOL vbChecked/*[in]*/) = 0;
  // [5650] property leftStatus
  virtual HRESULT STDMETHODCALLTYPE get_leftStatus(BSTR* pbstrStatus/*[out,retval]*/) = 0;
  // [5650] property leftStatus
  virtual HRESULT STDMETHODCALLTYPE set_leftStatus(BSTR pbstrStatus/*[in]*/) = 0;
  // [5651] property rightStatus
  virtual HRESULT STDMETHODCALLTYPE get_rightStatus(BSTR* pbstrStatus/*[out,retval]*/) = 0;
  // [5651] property rightStatus
  virtual HRESULT STDMETHODCALLTYPE set_rightStatus(BSTR pbstrStatus/*[in]*/) = 0;
  // [5652] property editButtonVisible
  virtual HRESULT STDMETHODCALLTYPE get_editButtonVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5652] property editButtonVisible
  virtual HRESULT STDMETHODCALLTYPE set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5653] property dropDownImage
  virtual HRESULT STDMETHODCALLTYPE get_dropDownImage(BSTR* pbstrImage/*[out,retval]*/) = 0;
  // [5653] property dropDownImage
  virtual HRESULT STDMETHODCALLTYPE set_dropDownImage(BSTR pbstrImage/*[in]*/) = 0;
  // [5654] property dropDownBackgroundImage
  virtual HRESULT STDMETHODCALLTYPE get_dropDownBackgroundImage(BSTR* pbstrImage/*[out,retval]*/) = 0;
  // [5654] property dropDownBackgroundImage
  virtual HRESULT STDMETHODCALLTYPE set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/) = 0;
  // [5655] property hueShift
  virtual HRESULT STDMETHODCALLTYPE get_hueShift(float* pVal/*[out,retval]*/) = 0;
  // [5655] property hueShift
  virtual HRESULT STDMETHODCALLTYPE set_hueShift(float pVal/*[in]*/) = 0;
  // [5656] property saturation
  virtual HRESULT STDMETHODCALLTYPE get_saturation(float* pVal/*[out,retval]*/) = 0;
  // [5656] property saturation
  virtual HRESULT STDMETHODCALLTYPE set_saturation(float pVal/*[in]*/) = 0;
  // [5658] property statusColor
  virtual HRESULT STDMETHODCALLTYPE get_statusColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5658] property statusColor
  virtual HRESULT STDMETHODCALLTYPE set_statusColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5660] property toolbarVisible
  virtual HRESULT STDMETHODCALLTYPE get_toolbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5660] property toolbarVisible
  virtual HRESULT STDMETHODCALLTYPE set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5662] property itemSelectedColor
  virtual HRESULT STDMETHODCALLTYPE get_itemSelectedColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5662] property itemSelectedColor
  virtual HRESULT STDMETHODCALLTYPE set_itemSelectedColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5663] property itemSelectedFocusLostColor
  virtual HRESULT STDMETHODCALLTYPE get_itemSelectedFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/) = 0;
  // [5663] property itemSelectedFocusLostColor
  virtual HRESULT STDMETHODCALLTYPE set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/) = 0;
  // [5664] property itemSelectedBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_itemSelectedBackgroundColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5664] property itemSelectedBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5665] property itemSelectedBackgroundFocusLostColor
  virtual HRESULT STDMETHODCALLTYPE get_itemSelectedBackgroundFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/) = 0;
  // [5665] property itemSelectedBackgroundFocusLostColor
  virtual HRESULT STDMETHODCALLTYPE set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/) = 0;
  // [5666] property backgroundSplitColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundSplitColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5666] property backgroundSplitColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundSplitColor(BSTR pbstrColor/*[in]*/) = 0;
  // [5667] property statusTextColor
  virtual HRESULT STDMETHODCALLTYPE get_statusTextColor(BSTR* pbstrColor/*[out,retval]*/) = 0;
  // [5667] property statusTextColor
  virtual HRESULT STDMETHODCALLTYPE set_statusTextColor(BSTR pbstrColor/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void)
  {
    Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist;
    OLECHECK(this->get_Playlist(&ppdispPlaylist));
    return ppdispPlaylist;
  }

  HRESULT __fastcall  set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/)
  {
    return set_Playlist((Wmplib_tlb::IWMPPlaylist*)ppdispPlaylist/*[in]*/);
  }

  BSTR __fastcall get_columns(void)
  {
    BSTR pbstrColumns = 0;
    OLECHECK(this->get_columns((BSTR*)&pbstrColumns));
    return pbstrColumns;
  }

  long __fastcall get_columnCount(void)
  {
    long pVal;
    OLECHECK(this->get_columnCount((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_columnOrder(void)
  {
    BSTR pbstrColumnOrder = 0;
    OLECHECK(this->get_columnOrder((BSTR*)&pbstrColumnOrder));
    return pbstrColumnOrder;
  }

  VARIANT_BOOL __fastcall get_columnsVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_columnsVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_dropDownVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_dropDownVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_playlistItemsVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_playlistItemsVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_checkboxesVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_checkboxesVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_disabledItemColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_disabledItemColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_itemPlayingColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_itemPlayingColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_itemPlayingBackgroundColor(void)
  {
    BSTR pbstrBackgroundColor = 0;
    OLECHECK(this->get_itemPlayingBackgroundColor((BSTR*)&pbstrBackgroundColor));
    return pbstrBackgroundColor;
  }

  BSTR __fastcall get_backgroundImage(void)
  {
    BSTR pbstrImage = 0;
    OLECHECK(this->get_backgroundImage((BSTR*)&pbstrImage));
    return pbstrImage;
  }

  VARIANT_BOOL __fastcall get_allowItemEditing(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_allowItemEditing((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_allowColumnSorting(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_allowColumnSorting((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_dropDownList(void)
  {
    BSTR pbstrList = 0;
    OLECHECK(this->get_dropDownList((BSTR*)&pbstrList));
    return pbstrList;
  }

  BSTR __fastcall get_dropDownToolTip(void)
  {
    BSTR pbstrToolTip = 0;
    OLECHECK(this->get_dropDownToolTip((BSTR*)&pbstrToolTip));
    return pbstrToolTip;
  }

  VARIANT_BOOL __fastcall get_copying(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_copying((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall getNextSelectedItem(long nStartIndex/*[in]*/)
  {
    long pnSelected;
    OLECHECK(this->getNextSelectedItem(nStartIndex, (long*)&pnSelected));
    return pnSelected;
  }

  long __fastcall getNextCheckedItem(long nStartIndex/*[in]*/)
  {
    long pnChecked;
    OLECHECK(this->getNextCheckedItem(nStartIndex, (long*)&pnChecked));
    return pnChecked;
  }

  BSTR __fastcall get_itemErrorColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_itemErrorColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  long __fastcall get_itemCount(void)
  {
    long pnItemCount;
    OLECHECK(this->get_itemCount((long*)&pnItemCount));
    return pnItemCount;
  }

  Wmplib_tlb::IWMPMedia* __fastcall get_itemMedia(long nIndex/*[in]*/)
  {
    Wmplib_tlb::IWMPMedia* ppMedia = 0;
    OLECHECK(this->get_itemMedia(nIndex, (Wmplib_tlb::IWMPMedia**)&ppMedia));
    return ppMedia;
  }

  Wmplib_tlb::IWMPPlaylist* __fastcall get_itemPlaylist(long nIndex/*[in]*/)
  {
    Wmplib_tlb::IWMPPlaylist* ppPlaylist = 0;
    OLECHECK(this->get_itemPlaylist(nIndex, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist));
    return ppPlaylist;
  }

  long __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/)
  {
    long pnSelected;
    OLECHECK(this->getNextSelectedItem2(nStartIndex, (long*)&pnSelected));
    return pnSelected;
  }

  long __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/)
  {
    long pnChecked;
    OLECHECK(this->getNextCheckedItem2(nStartIndex, (long*)&pnChecked));
    return pnChecked;
  }

  BSTR __fastcall get_leftStatus(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->get_leftStatus((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  BSTR __fastcall get_rightStatus(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->get_rightStatus((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  VARIANT_BOOL __fastcall get_editButtonVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_editButtonVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_dropDownImage(void)
  {
    BSTR pbstrImage = 0;
    OLECHECK(this->get_dropDownImage((BSTR*)&pbstrImage));
    return pbstrImage;
  }

  BSTR __fastcall get_dropDownBackgroundImage(void)
  {
    BSTR pbstrImage = 0;
    OLECHECK(this->get_dropDownBackgroundImage((BSTR*)&pbstrImage));
    return pbstrImage;
  }

  float __fastcall get_hueShift(void)
  {
    float pVal;
    OLECHECK(this->get_hueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_saturation(void)
  {
    float pVal;
    OLECHECK(this->get_saturation((float*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_statusColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_statusColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  VARIANT_BOOL __fastcall get_toolbarVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_toolbarVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_itemSelectedColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_itemSelectedColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_itemSelectedFocusLostColor(void)
  {
    BSTR pbstrFocusLostColor = 0;
    OLECHECK(this->get_itemSelectedFocusLostColor((BSTR*)&pbstrFocusLostColor));
    return pbstrFocusLostColor;
  }

  BSTR __fastcall get_itemSelectedBackgroundColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_itemSelectedBackgroundColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_itemSelectedBackgroundFocusLostColor(void)
  {
    BSTR pbstrFocusLostColor = 0;
    OLECHECK(this->get_itemSelectedBackgroundFocusLostColor((BSTR*)&pbstrFocusLostColor));
    return pbstrFocusLostColor;
  }

  BSTR __fastcall get_backgroundSplitColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_backgroundSplitColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_statusTextColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_statusTextColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }


  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   BSTR            columns = {read = get_columns, write = set_columns};
  __property   long            columnCount = {read = get_columnCount};
  __property   BSTR            columnOrder = {read = get_columnOrder, write = set_columnOrder};
  __property   VARIANT_BOOL    columnsVisible = {read = get_columnsVisible, write = set_columnsVisible};
  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   VARIANT_BOOL    playlistItemsVisible = {read = get_playlistItemsVisible, write = set_playlistItemsVisible};
  __property   VARIANT_BOOL    checkboxesVisible = {read = get_checkboxesVisible, write = set_checkboxesVisible};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            disabledItemColor = {read = get_disabledItemColor, write = set_disabledItemColor};
  __property   BSTR            itemPlayingColor = {read = get_itemPlayingColor, write = set_itemPlayingColor};
  __property   BSTR            itemPlayingBackgroundColor = {read = get_itemPlayingBackgroundColor, write = set_itemPlayingBackgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    allowItemEditing = {read = get_allowItemEditing, write = set_allowItemEditing};
  __property   VARIANT_BOOL    allowColumnSorting = {read = get_allowColumnSorting, write = set_allowColumnSorting};
  __property   BSTR            dropDownList = {read = get_dropDownList, write = set_dropDownList};
  __property   BSTR            dropDownToolTip = {read = get_dropDownToolTip, write = set_dropDownToolTip};
  __property   VARIANT_BOOL    copying = {read = get_copying, write = set_copying};
  __property   BSTR            itemErrorColor = {read = get_itemErrorColor, write = set_itemErrorColor};
  __property   long            itemCount = {read = get_itemCount};
  __property   BSTR            leftStatus = {read = get_leftStatus, write = set_leftStatus};
  __property   BSTR            rightStatus = {read = get_rightStatus, write = set_rightStatus};
  __property   VARIANT_BOOL    editButtonVisible = {read = get_editButtonVisible, write = set_editButtonVisible};
  __property   BSTR            dropDownImage = {read = get_dropDownImage, write = set_dropDownImage};
  __property   BSTR            dropDownBackgroundImage = {read = get_dropDownBackgroundImage, write = set_dropDownBackgroundImage};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};
  __property   BSTR            statusColor = {read = get_statusColor, write = set_statusColor};
  __property   VARIANT_BOOL    toolbarVisible = {read = get_toolbarVisible, write = set_toolbarVisible};
  __property   BSTR            itemSelectedColor = {read = get_itemSelectedColor, write = set_itemSelectedColor};
  __property   BSTR            itemSelectedFocusLostColor = {read = get_itemSelectedFocusLostColor, write = set_itemSelectedFocusLostColor};
  __property   BSTR            itemSelectedBackgroundColor = {read = get_itemSelectedBackgroundColor, write = set_itemSelectedBackgroundColor};
  __property   BSTR            itemSelectedBackgroundFocusLostColor = {read = get_itemSelectedBackgroundFocusLostColor, write = set_itemSelectedBackgroundFocusLostColor};
  __property   BSTR            backgroundSplitColor = {read = get_backgroundSplitColor, write = set_backgroundSplitColor};
  __property   BSTR            statusTextColor = {read = get_statusTextColor, write = set_statusTextColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAppDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E41C88DD-2364-4FF7-A0F5-CA9859AF783F}
// *********************************************************************//
interface IAppDispatch  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_titlebarVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_titlebarVisible(VARIANT_BOOL pVal/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_titlebarAutoHide(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_titlebarAutoHide(VARIANT_BOOL pVal/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_currentTask(BSTR* pVal/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_currentTask(BSTR pVal/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_settingsVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_settingsVisible(VARIANT_BOOL pVal/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_playlistVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_playlistVisible(VARIANT_BOOL pVal/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE gotoSkinMode(void) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE navigatePrevious(void) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE navigateNext(void) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE goFullScreen(void) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_fullScreenEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE get_serviceLoginVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_serviceLoginSignedIn(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE serviceLogin(void) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE serviceLogout(void) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE get_serviceGetInfo(BSTR bstrItem/*[in]*/, 
                                                       VARIANT* pValue/*[out,retval]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE get_navigatePreviousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_navigateNextEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE navigateToAddress(BSTR address/*[in]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_glassEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE adjustLeft(long nDistance/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_taskbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_taskbarVisible(VARIANT_BOOL pVal/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_DPI(long* pVal/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE get_playLibraryItemEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [139]
  virtual HRESULT STDMETHODCALLTYPE previous(void) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_titlebarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_menubarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_bgPluginRunning(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE configurePlugins(long nType/*[in]*/) = 0; // [110]
  // [111] method getTimeString
  virtual HRESULT STDMETHODCALLTYPE getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_maximized(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_top(long* pVal/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_top(long pVal/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_left(long* pVal/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE set_left(long pVal/*[in]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_width(long* pVal/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE set_width(long pVal/*[in]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_height(long* pVal/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE set_height(long pVal/*[in]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE setWindowPos(long lTop/*[in]*/, long lLeft/*[in]*/, 
                                                 long lWidth/*[in]*/, long lHeight/*[in]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE logData(BSTR ID/*[in]*/, BSTR data/*[in]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_powerPersonality(BSTR* pVal/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE navigateNamespace(BSTR address/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_exclusiveService(BSTR* pVal/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE set_windowText(BSTR Param1/*[in]*/) = 0; // [138]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_titlebarVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_titlebarVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_titlebarAutoHide(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_titlebarAutoHide((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentTask(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentTask((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_settingsVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_settingsVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_playlistVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_playlistVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fullScreenEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_fullScreenEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_serviceLoginVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_serviceLoginVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_serviceLoginSignedIn(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_serviceLoginSignedIn((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_serviceGetInfo(BSTR bstrItem/*[in]*/)
  {
    VARIANT pValue;
    OLECHECK(this->get_serviceGetInfo(bstrItem, (VARIANT*)&pValue));
    return pValue;
  }

  VARIANT_BOOL __fastcall get_navigatePreviousEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_navigatePreviousEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_navigateNextEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_navigateNextEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_glassEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_glassEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_inVistaPlus(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_inVistaPlus((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_taskbarVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_taskbarVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DPI(void)
  {
    long pVal;
    OLECHECK(this->get_DPI((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_previousEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_previousEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_playLibraryItemEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_playLibraryItemEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_titlebarCurrentlyVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_titlebarCurrentlyVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_menubarCurrentlyVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_menubarCurrentlyVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_bgPluginRunning(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_bgPluginRunning((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall getTimeString(double dTime/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->getTimeString(dTime, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_maximized(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_maximized((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_top(void)
  {
    long pVal;
    OLECHECK(this->get_top((long*)&pVal));
    return pVal;
  }

  long __fastcall get_left(void)
  {
    long pVal;
    OLECHECK(this->get_left((long*)&pVal));
    return pVal;
  }

  long __fastcall get_width(void)
  {
    long pVal;
    OLECHECK(this->get_width((long*)&pVal));
    return pVal;
  }

  long __fastcall get_height(void)
  {
    long pVal;
    OLECHECK(this->get_height((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_powerPersonality(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_powerPersonality((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_exclusiveService(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_exclusiveService((BSTR*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    titlebarVisible = {read = get_titlebarVisible, write = set_titlebarVisible};
  __property   VARIANT_BOOL    titlebarAutoHide = {read = get_titlebarAutoHide, write = set_titlebarAutoHide};
  __property   BSTR            currentTask = {read = get_currentTask, write = set_currentTask};
  __property   VARIANT_BOOL    settingsVisible = {read = get_settingsVisible, write = set_settingsVisible};
  __property   VARIANT_BOOL    playlistVisible = {read = get_playlistVisible, write = set_playlistVisible};
  __property   VARIANT_BOOL    fullScreenEnabled = {read = get_fullScreenEnabled};
  __property   VARIANT_BOOL    serviceLoginVisible = {read = get_serviceLoginVisible};
  __property   VARIANT_BOOL    serviceLoginSignedIn = {read = get_serviceLoginSignedIn};
  __property   VARIANT_BOOL    navigatePreviousEnabled = {read = get_navigatePreviousEnabled};
  __property   VARIANT_BOOL    navigateNextEnabled = {read = get_navigateNextEnabled};
  __property   VARIANT_BOOL    glassEnabled = {read = get_glassEnabled};
  __property   VARIANT_BOOL    inVistaPlus = {read = get_inVistaPlus};
  __property   VARIANT_BOOL    taskbarVisible = {read = get_taskbarVisible, write = set_taskbarVisible};
  __property   long            DPI = {read = get_DPI};
  __property   VARIANT_BOOL    previousEnabled = {read = get_previousEnabled};
  __property   VARIANT_BOOL    playLibraryItemEnabled = {read = get_playLibraryItemEnabled};
  __property   VARIANT_BOOL    titlebarCurrentlyVisible = {read = get_titlebarCurrentlyVisible};
  __property   VARIANT_BOOL    menubarCurrentlyVisible = {read = get_menubarCurrentlyVisible};
  __property   VARIANT_BOOL    bgPluginRunning = {read = get_bgPluginRunning};
  __property   VARIANT_BOOL    maximized = {read = get_maximized};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   BSTR            powerPersonality = {read = get_powerPersonality};
  __property   BSTR            exclusiveService = {read = get_exclusiveService};
  __property   BSTR            windowText = {write = set_windowText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSafeBrowser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF870383-83AB-4EA9-BE48-56FA4251AF10}
// *********************************************************************//
interface IWMPSafeBrowser  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_URL(BSTR* pVal/*[out,retval]*/) = 0; // [8400]
  virtual HRESULT STDMETHODCALLTYPE set_URL(BSTR pVal/*[in]*/) = 0; // [8400]
  virtual HRESULT STDMETHODCALLTYPE get_status(long* pVal/*[out,retval]*/) = 0; // [8401]
  virtual HRESULT STDMETHODCALLTYPE get_pendingDownloads(long* pVal/*[out,retval]*/) = 0; // [8402]
  // [8403] method showSAMIText
  virtual HRESULT STDMETHODCALLTYPE showSAMIText(BSTR samiText/*[in]*/) = 0;
  // [8404] method showLyrics
  virtual HRESULT STDMETHODCALLTYPE showLyrics(BSTR lyrics/*[in]*/) = 0;
  // [8405] loads one of our special pages by name
  virtual HRESULT STDMETHODCALLTYPE loadSpecialPage(BSTR pageName/*[in]*/) = 0;
  // [8406] go back to the previous page
  virtual HRESULT STDMETHODCALLTYPE goBack(void) = 0;
  // [8407] go forward through the current MRU
  virtual HRESULT STDMETHODCALLTYPE goForward(void) = 0;
  // [8408] stop loading page
  virtual HRESULT STDMETHODCALLTYPE stop(void) = 0;
  // [8409] refresh the page
  virtual HRESULT STDMETHODCALLTYPE refresh(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_baseURL(BSTR* pVal/*[out,retval]*/) = 0; // [8410]
  virtual HRESULT STDMETHODCALLTYPE get_fullURL(BSTR* pVal/*[out,retval]*/) = 0; // [8414]
  virtual HRESULT STDMETHODCALLTYPE get_secureLock(long* pVal/*[out,retval]*/) = 0; // [8411]
  virtual HRESULT STDMETHODCALLTYPE get_busy(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [8412]
  // [8413] show security certificate dialog
  virtual HRESULT STDMETHODCALLTYPE showCert(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_URL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_URL((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_status(void)
  {
    long pVal;
    OLECHECK(this->get_status((long*)&pVal));
    return pVal;
  }

  long __fastcall get_pendingDownloads(void)
  {
    long pVal;
    OLECHECK(this->get_pendingDownloads((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_baseURL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_baseURL((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fullURL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fullURL((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_secureLock(void)
  {
    long pVal;
    OLECHECK(this->get_secureLock((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_busy(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_busy((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   long            status = {read = get_status};
  __property   long            pendingDownloads = {read = get_pendingDownloads};
  __property   BSTR            baseURL = {read = get_baseURL};
  __property   BSTR            fullURL = {read = get_fullURL};
  __property   long            secureLock = {read = get_secureLock};
  __property   VARIANT_BOOL    busy = {read = get_busy};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPObjectExtendedProps
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21D077C1-4BAA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
interface IWMPObjectExtendedProps  : public IDispatch
{
public:
  // [2000] property id
  virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2001] property elementType
  virtual HRESULT STDMETHODCALLTYPE get_elementType(BSTR* pVal/*[out,retval]*/) = 0;
  // [2002] property left
  virtual HRESULT STDMETHODCALLTYPE get_left(long* pVal/*[out,retval]*/) = 0;
  // [2002] property left
  virtual HRESULT STDMETHODCALLTYPE set_left(long pVal/*[in]*/) = 0;
  // [2003] property top
  virtual HRESULT STDMETHODCALLTYPE get_top(long* pVal/*[out,retval]*/) = 0;
  // [2003] property top
  virtual HRESULT STDMETHODCALLTYPE set_top(long pVal/*[in]*/) = 0;
  // [2022] property right
  virtual HRESULT STDMETHODCALLTYPE get_right(long* pVal/*[out,retval]*/) = 0;
  // [2022] property right
  virtual HRESULT STDMETHODCALLTYPE set_right(long pVal/*[in]*/) = 0;
  // [2023] property bottom
  virtual HRESULT STDMETHODCALLTYPE get_bottom(long* pVal/*[out,retval]*/) = 0;
  // [2023] property bottom
  virtual HRESULT STDMETHODCALLTYPE set_bottom(long pVal/*[in]*/) = 0;
  // [2004] property width
  virtual HRESULT STDMETHODCALLTYPE get_width(long* pVal/*[out,retval]*/) = 0;
  // [2004] property width
  virtual HRESULT STDMETHODCALLTYPE set_width(long pVal/*[in]*/) = 0;
  // [2005] property height
  virtual HRESULT STDMETHODCALLTYPE get_height(long* pVal/*[out,retval]*/) = 0;
  // [2005] property height
  virtual HRESULT STDMETHODCALLTYPE set_height(long pVal/*[in]*/) = 0;
  // [2006] property zIndex
  virtual HRESULT STDMETHODCALLTYPE get_zIndex(long* pVal/*[out,retval]*/) = 0;
  // [2006] property zIndex
  virtual HRESULT STDMETHODCALLTYPE set_zIndex(long pVal/*[in]*/) = 0;
  // [2007] property clippingImage
  virtual HRESULT STDMETHODCALLTYPE get_clippingImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [2007] property clippingImage
  virtual HRESULT STDMETHODCALLTYPE set_clippingImage(BSTR pVal/*[in]*/) = 0;
  // [2008] property clippingColor
  virtual HRESULT STDMETHODCALLTYPE get_clippingColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2008] property clippingColor
  virtual HRESULT STDMETHODCALLTYPE set_clippingColor(BSTR pVal/*[in]*/) = 0;
  // [2009] property visible
  virtual HRESULT STDMETHODCALLTYPE get_visible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2009] property visible
  virtual HRESULT STDMETHODCALLTYPE set_visible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2010] property enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2010] property enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2011] property tabStop
  virtual HRESULT STDMETHODCALLTYPE get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2011] property tabStop
  virtual HRESULT STDMETHODCALLTYPE set_tabStop(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2012] property passThrough
  virtual HRESULT STDMETHODCALLTYPE get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2012] property passThrough
  virtual HRESULT STDMETHODCALLTYPE set_passThrough(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2013] property horizontalAlignment
  virtual HRESULT STDMETHODCALLTYPE get_horizontalAlignment(BSTR* pVal/*[out,retval]*/) = 0;
  // [2013] property horizontalAlignment
  virtual HRESULT STDMETHODCALLTYPE set_horizontalAlignment(BSTR pVal/*[in]*/) = 0;
  // [2014] property verticalAlignment
  virtual HRESULT STDMETHODCALLTYPE get_verticalAlignment(BSTR* pVal/*[out,retval]*/) = 0;
  // [2014] property verticalAlignment
  virtual HRESULT STDMETHODCALLTYPE set_verticalAlignment(BSTR pVal/*[in]*/) = 0;
  // [2015] method moveTo
  virtual HRESULT STDMETHODCALLTYPE moveTo(long newX/*[in]*/, long newY/*[in]*/, 
                                           long moveTime/*[in]*/) = 0;
  // [2021] method slideTo
  virtual HRESULT STDMETHODCALLTYPE slideTo(long newX/*[in]*/, long newY/*[in]*/, 
                                            long moveTime/*[in]*/) = 0;
  // [2026] method moveSizeTo
  virtual HRESULT STDMETHODCALLTYPE moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, 
                                               long newWidth/*[in]*/, long newHeight/*[in]*/, 
                                               long moveTime/*[in]*/, VARIANT_BOOL fSlide/*[in]*/) = 0;
  // [2016] property alphaBlend
  virtual HRESULT STDMETHODCALLTYPE get_alphaBlend(long* pVal/*[out,retval]*/) = 0;
  // [2016] property alphaBlend
  virtual HRESULT STDMETHODCALLTYPE set_alphaBlend(long pVal/*[in]*/) = 0;
  // [2017] method alphaBlendTo
  virtual HRESULT STDMETHODCALLTYPE alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/) = 0;
  // [2018] property accName
  virtual HRESULT STDMETHODCALLTYPE get_accName(BSTR* pszName/*[out,retval]*/) = 0;
  // [2018] property accName
  virtual HRESULT STDMETHODCALLTYPE set_accName(BSTR pszName/*[in]*/) = 0;
  // [2019] property accDescription
  virtual HRESULT STDMETHODCALLTYPE get_accDescription(BSTR* pszDesc/*[out,retval]*/) = 0;
  // [2019] property accDescription
  virtual HRESULT STDMETHODCALLTYPE set_accDescription(BSTR pszDesc/*[in]*/) = 0;
  // [2020] property accKeyboardShortcut	
  virtual HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/) = 0;
  // [2020] property accKeyboardShortcut	
  virtual HRESULT STDMETHODCALLTYPE set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/) = 0;
  // [2024] property resizeImages
  virtual HRESULT STDMETHODCALLTYPE get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2024] property resizeImages
  virtual HRESULT STDMETHODCALLTYPE set_resizeImages(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2025] property nineGridMargins
  virtual HRESULT STDMETHODCALLTYPE get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/) = 0;
  // [2025] property nineGridMargins
  virtual HRESULT STDMETHODCALLTYPE set_nineGridMargins(BSTR pszMargins/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_elementType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_elementType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_left(void)
  {
    long pVal;
    OLECHECK(this->get_left((long*)&pVal));
    return pVal;
  }

  long __fastcall get_top(void)
  {
    long pVal;
    OLECHECK(this->get_top((long*)&pVal));
    return pVal;
  }

  long __fastcall get_right(void)
  {
    long pVal;
    OLECHECK(this->get_right((long*)&pVal));
    return pVal;
  }

  long __fastcall get_bottom(void)
  {
    long pVal;
    OLECHECK(this->get_bottom((long*)&pVal));
    return pVal;
  }

  long __fastcall get_width(void)
  {
    long pVal;
    OLECHECK(this->get_width((long*)&pVal));
    return pVal;
  }

  long __fastcall get_height(void)
  {
    long pVal;
    OLECHECK(this->get_height((long*)&pVal));
    return pVal;
  }

  long __fastcall get_zIndex(void)
  {
    long pVal;
    OLECHECK(this->get_zIndex((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_clippingImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_clippingImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_clippingColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_clippingColor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_visible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_visible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_tabStop(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_tabStop((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_passThrough(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_passThrough((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_horizontalAlignment(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_horizontalAlignment((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_verticalAlignment(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_verticalAlignment((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_alphaBlend(void)
  {
    long pVal;
    OLECHECK(this->get_alphaBlend((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_accName(void)
  {
    BSTR pszName = 0;
    OLECHECK(this->get_accName((BSTR*)&pszName));
    return pszName;
  }

  BSTR __fastcall get_accDescription(void)
  {
    BSTR pszDesc = 0;
    OLECHECK(this->get_accDescription((BSTR*)&pszDesc));
    return pszDesc;
  }

  BSTR __fastcall get_accKeyboardShortcut(void)
  {
    BSTR pszShortcut = 0;
    OLECHECK(this->get_accKeyboardShortcut((BSTR*)&pszShortcut));
    return pszShortcut;
  }

  VARIANT_BOOL __fastcall get_resizeImages(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_resizeImages((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_nineGridMargins(void)
  {
    BSTR pszMargins = 0;
    OLECHECK(this->get_nineGridMargins((BSTR*)&pszMargins));
    return pszMargins;
  }


  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            elementType = {read = get_elementType};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            right = {read = get_right, write = set_right};
  __property   long            bottom = {read = get_bottom, write = set_bottom};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   long            zIndex = {read = get_zIndex, write = set_zIndex};
  __property   BSTR            clippingImage = {read = get_clippingImage, write = set_clippingImage};
  __property   BSTR            clippingColor = {read = get_clippingColor, write = set_clippingColor};
  __property   VARIANT_BOOL    visible = {read = get_visible, write = set_visible};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   VARIANT_BOOL    passThrough = {read = get_passThrough, write = set_passThrough};
  __property   BSTR            horizontalAlignment = {read = get_horizontalAlignment, write = set_horizontalAlignment};
  __property   BSTR            verticalAlignment = {read = get_verticalAlignment, write = set_verticalAlignment};
  __property   long            alphaBlend = {read = get_alphaBlend, write = set_alphaBlend};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
  __property   VARIANT_BOOL    resizeImages = {read = get_resizeImages, write = set_resizeImages};
  __property   BSTR            nineGridMargins = {read = get_nineGridMargins, write = set_nineGridMargins};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPLayoutSubView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {72F486B1-0D43-11D3-BD3F-00C04F6EA5AE}
// *********************************************************************//
interface IWMPLayoutSubView  : public Wmplib_tlb::IWMPObjectExtendedProps
{
public:
  // [2300] property transparencyColor
  virtual HRESULT STDMETHODCALLTYPE get_transparencyColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2300] property transparencyColor
  virtual HRESULT STDMETHODCALLTYPE set_transparencyColor(BSTR pVal/*[in]*/) = 0;
  // [2301] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2301] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [2302] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE get_backgroundImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [2302] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE set_backgroundImage(BSTR pVal/*[in]*/) = 0;
  // [2303] property backgroundTiled
  virtual HRESULT STDMETHODCALLTYPE get_backgroundTiled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2303] property backgroundTiled
  virtual HRESULT STDMETHODCALLTYPE set_backgroundTiled(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2304] property hueShift
  virtual HRESULT STDMETHODCALLTYPE get_backgroundImageHueShift(float* pVal/*[out,retval]*/) = 0;
  // [2304] property hueShift
  virtual HRESULT STDMETHODCALLTYPE set_backgroundImageHueShift(float pVal/*[in]*/) = 0;
  // [2305] property saturation
  virtual HRESULT STDMETHODCALLTYPE get_backgroundImageSaturation(float* pVal/*[out,retval]*/) = 0;
  // [2305] property saturation
  virtual HRESULT STDMETHODCALLTYPE set_backgroundImageSaturation(float pVal/*[in]*/) = 0;
  // [2306] property resizeBackgroundImage
  virtual HRESULT STDMETHODCALLTYPE get_resizeBackgroundImage(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2306] property resizeBackgroundImage
  virtual HRESULT STDMETHODCALLTYPE set_resizeBackgroundImage(VARIANT_BOOL pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_transparencyColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundImage((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_backgroundTiled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_backgroundTiled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  float __fastcall get_backgroundImageHueShift(void)
  {
    float pVal;
    OLECHECK(this->get_backgroundImageHueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_backgroundImageSaturation(void)
  {
    float pVal;
    OLECHECK(this->get_backgroundImageSaturation((float*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_resizeBackgroundImage(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_resizeBackgroundImage((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    backgroundTiled = {read = get_backgroundTiled, write = set_backgroundTiled};
  __property   float           backgroundImageHueShift = {read = get_backgroundImageHueShift, write = set_backgroundImageHueShift};
  __property   float           backgroundImageSaturation = {read = get_backgroundImageSaturation, write = set_backgroundImageSaturation};
  __property   VARIANT_BOOL    resizeBackgroundImage = {read = get_resizeBackgroundImage, write = set_resizeBackgroundImage};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPLayoutView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {172E905D-80D9-4C2F-B7CE-2CCB771787A2}
// *********************************************************************//
interface IWMPLayoutView  : public Wmplib_tlb::IWMPLayoutSubView
{
public:
  // [2307] property title
  virtual HRESULT STDMETHODCALLTYPE get_title(BSTR* pVal/*[out,retval]*/) = 0;
  // [2307] property title
  virtual HRESULT STDMETHODCALLTYPE set_title(BSTR pVal/*[in]*/) = 0;
  // [2308] property category
  virtual HRESULT STDMETHODCALLTYPE get_category(BSTR* pVal/*[out,retval]*/) = 0;
  // [2308] property category
  virtual HRESULT STDMETHODCALLTYPE set_category(BSTR pVal/*[in]*/) = 0;
  // [2309] property focusObjectID
  virtual HRESULT STDMETHODCALLTYPE get_focusObjectID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2309] property focusObjectID
  virtual HRESULT STDMETHODCALLTYPE set_focusObjectID(BSTR pVal/*[in]*/) = 0;
  // [2311] property titleBar
  virtual HRESULT STDMETHODCALLTYPE get_titleBar(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2312] property resizable
  virtual HRESULT STDMETHODCALLTYPE get_resizable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2313] property timerInterval
  virtual HRESULT STDMETHODCALLTYPE get_timerInterval(long* pVal/*[out,retval]*/) = 0;
  // [2313] property timerInterval
  virtual HRESULT STDMETHODCALLTYPE set_timerInterval(long pVal/*[in]*/) = 0;
  // [2314] property minWidth
  virtual HRESULT STDMETHODCALLTYPE get_minWidth(long* pVal/*[out,retval]*/) = 0;
  // [2314] property minWidth
  virtual HRESULT STDMETHODCALLTYPE set_minWidth(long pVal/*[in]*/) = 0;
  // [2315] property maxWidth
  virtual HRESULT STDMETHODCALLTYPE get_maxWidth(long* pVal/*[out,retval]*/) = 0;
  // [2315] property maxWidth
  virtual HRESULT STDMETHODCALLTYPE set_maxWidth(long pVal/*[in]*/) = 0;
  // [2316] property minHeight
  virtual HRESULT STDMETHODCALLTYPE get_minHeight(long* pVal/*[out,retval]*/) = 0;
  // [2316] property minHeight
  virtual HRESULT STDMETHODCALLTYPE set_minHeight(long pVal/*[in]*/) = 0;
  // [2317] property maxHeight
  virtual HRESULT STDMETHODCALLTYPE get_maxHeight(long* pVal/*[out,retval]*/) = 0;
  // [2317] property maxHeight
  virtual HRESULT STDMETHODCALLTYPE set_maxHeight(long pVal/*[in]*/) = 0;
  // [2318] method close
  virtual HRESULT STDMETHODCALLTYPE close(void) = 0;
  // [2319] method minimize
  virtual HRESULT STDMETHODCALLTYPE minimize(void) = 0;
  // [2320] method maximize
  virtual HRESULT STDMETHODCALLTYPE maximize(void) = 0;
  // [2321] method restore
  virtual HRESULT STDMETHODCALLTYPE restore(void) = 0;
  // [2322] method size
  virtual HRESULT STDMETHODCALLTYPE size(BSTR bstrDirection/*[in]*/) = 0;
  // [2323] method returnToMediaCenter
  virtual HRESULT STDMETHODCALLTYPE returnToMediaCenter(void) = 0;
  // [2324] method updateWindow
  virtual HRESULT STDMETHODCALLTYPE updateWindow(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_title(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_title((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_category(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_category((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_focusObjectID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_focusObjectID((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_titleBar(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_titleBar((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_resizable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_resizable((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_timerInterval(void)
  {
    long pVal;
    OLECHECK(this->get_timerInterval((long*)&pVal));
    return pVal;
  }

  long __fastcall get_minWidth(void)
  {
    long pVal;
    OLECHECK(this->get_minWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_maxWidth(void)
  {
    long pVal;
    OLECHECK(this->get_maxWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_minHeight(void)
  {
    long pVal;
    OLECHECK(this->get_minHeight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_maxHeight(void)
  {
    long pVal;
    OLECHECK(this->get_maxHeight((long*)&pVal));
    return pVal;
  }


  __property   BSTR            title = {read = get_title, write = set_title};
  __property   BSTR            category = {read = get_category, write = set_category};
  __property   BSTR            focusObjectID = {read = get_focusObjectID, write = set_focusObjectID};
  __property   VARIANT_BOOL    titleBar = {read = get_titleBar};
  __property   VARIANT_BOOL    resizable = {read = get_resizable};
  __property   long            timerInterval = {read = get_timerInterval, write = set_timerInterval};
  __property   long            minWidth = {read = get_minWidth, write = set_minWidth};
  __property   long            maxWidth = {read = get_maxWidth, write = set_maxWidth};
  __property   long            minHeight = {read = get_minHeight, write = set_minHeight};
  __property   long            maxHeight = {read = get_maxHeight, write = set_maxHeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPEventObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
interface IWMPEventObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_srcElement(LPDISPATCH* p/*[out,retval]*/) = 0; // [2200]
  virtual HRESULT STDMETHODCALLTYPE get_altKey(VARIANT_BOOL* p/*[out,retval]*/) = 0; // [2201]
  virtual HRESULT STDMETHODCALLTYPE get_ctrlKey(VARIANT_BOOL* p/*[out,retval]*/) = 0; // [2202]
  virtual HRESULT STDMETHODCALLTYPE get_shiftKey(VARIANT_BOOL* p/*[out,retval]*/) = 0; // [2203]
  virtual HRESULT STDMETHODCALLTYPE get_fromElement(LPDISPATCH* p/*[out,retval]*/) = 0; // [2204]
  virtual HRESULT STDMETHODCALLTYPE get_toElement(LPDISPATCH* p/*[out,retval]*/) = 0; // [2205]
  virtual HRESULT STDMETHODCALLTYPE set_keyCode(long p/*[in]*/) = 0; // [2206]
  virtual HRESULT STDMETHODCALLTYPE get_keyCode(long* p/*[out,retval]*/) = 0; // [2206]
  virtual HRESULT STDMETHODCALLTYPE get_button(long* p/*[out,retval]*/) = 0; // [2207]
  virtual HRESULT STDMETHODCALLTYPE get_x(long* p/*[out,retval]*/) = 0; // [2208]
  virtual HRESULT STDMETHODCALLTYPE get_y(long* p/*[out,retval]*/) = 0; // [2209]
  virtual HRESULT STDMETHODCALLTYPE get_clientX(long* p/*[out,retval]*/) = 0; // [2210]
  virtual HRESULT STDMETHODCALLTYPE get_clientY(long* p/*[out,retval]*/) = 0; // [2211]
  virtual HRESULT STDMETHODCALLTYPE get_offsetX(long* p/*[out,retval]*/) = 0; // [2212]
  virtual HRESULT STDMETHODCALLTYPE get_offsetY(long* p/*[out,retval]*/) = 0; // [2213]
  virtual HRESULT STDMETHODCALLTYPE get_screenX(long* p/*[out,retval]*/) = 0; // [2214]
  virtual HRESULT STDMETHODCALLTYPE get_screenY(long* p/*[out,retval]*/) = 0; // [2215]
  virtual HRESULT STDMETHODCALLTYPE get_screenWidth(long* p/*[out,retval]*/) = 0; // [2216]
  virtual HRESULT STDMETHODCALLTYPE get_screenHeight(long* p/*[out,retval]*/) = 0; // [2217]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_srcElement(void)
  {
    LPDISPATCH p;
    OLECHECK(this->get_srcElement((LPDISPATCH*)&p));
    return p;
  }

  VARIANT_BOOL __fastcall get_altKey(void)
  {
    VARIANT_BOOL p;
    OLECHECK(this->get_altKey((VARIANT_BOOL*)&p));
    return p;
  }

  VARIANT_BOOL __fastcall get_ctrlKey(void)
  {
    VARIANT_BOOL p;
    OLECHECK(this->get_ctrlKey((VARIANT_BOOL*)&p));
    return p;
  }

  VARIANT_BOOL __fastcall get_shiftKey(void)
  {
    VARIANT_BOOL p;
    OLECHECK(this->get_shiftKey((VARIANT_BOOL*)&p));
    return p;
  }

  LPDISPATCH __fastcall get_fromElement(void)
  {
    LPDISPATCH p;
    OLECHECK(this->get_fromElement((LPDISPATCH*)&p));
    return p;
  }

  LPDISPATCH __fastcall get_toElement(void)
  {
    LPDISPATCH p;
    OLECHECK(this->get_toElement((LPDISPATCH*)&p));
    return p;
  }

  long __fastcall get_keyCode(void)
  {
    long p;
    OLECHECK(this->get_keyCode((long*)&p));
    return p;
  }

  long __fastcall get_button(void)
  {
    long p;
    OLECHECK(this->get_button((long*)&p));
    return p;
  }

  long __fastcall get_x(void)
  {
    long p;
    OLECHECK(this->get_x((long*)&p));
    return p;
  }

  long __fastcall get_y(void)
  {
    long p;
    OLECHECK(this->get_y((long*)&p));
    return p;
  }

  long __fastcall get_clientX(void)
  {
    long p;
    OLECHECK(this->get_clientX((long*)&p));
    return p;
  }

  long __fastcall get_clientY(void)
  {
    long p;
    OLECHECK(this->get_clientY((long*)&p));
    return p;
  }

  long __fastcall get_offsetX(void)
  {
    long p;
    OLECHECK(this->get_offsetX((long*)&p));
    return p;
  }

  long __fastcall get_offsetY(void)
  {
    long p;
    OLECHECK(this->get_offsetY((long*)&p));
    return p;
  }

  long __fastcall get_screenX(void)
  {
    long p;
    OLECHECK(this->get_screenX((long*)&p));
    return p;
  }

  long __fastcall get_screenY(void)
  {
    long p;
    OLECHECK(this->get_screenY((long*)&p));
    return p;
  }

  long __fastcall get_screenWidth(void)
  {
    long p;
    OLECHECK(this->get_screenWidth((long*)&p));
    return p;
  }

  long __fastcall get_screenHeight(void)
  {
    long p;
    OLECHECK(this->get_screenHeight((long*)&p));
    return p;
  }


  __property   LPDISPATCH      srcElement = {read = get_srcElement};
  __property   VARIANT_BOOL    altKey = {read = get_altKey};
  __property   VARIANT_BOOL    ctrlKey = {read = get_ctrlKey};
  __property   VARIANT_BOOL    shiftKey = {read = get_shiftKey};
  __property   LPDISPATCH      fromElement = {read = get_fromElement};
  __property   LPDISPATCH      toElement = {read = get_toElement};
  __property   long            keyCode = {read = get_keyCode, write = set_keyCode};
  __property   long            button = {read = get_button};
  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};
  __property   long            clientX = {read = get_clientX};
  __property   long            clientY = {read = get_clientY};
  __property   long            offsetX = {read = get_offsetX};
  __property   long            offsetY = {read = get_offsetY};
  __property   long            screenX = {read = get_screenX};
  __property   long            screenY = {read = get_screenY};
  __property   long            screenWidth = {read = get_screenWidth};
  __property   long            screenHeight = {read = get_screenHeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPTheme
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6FCAE13D-E492-4584-9C21-D2C052A2A33A}
// *********************************************************************//
interface IWMPTheme  : public IDispatch
{
public:
  // [2500] property title
  virtual HRESULT STDMETHODCALLTYPE get_title(BSTR* pVal/*[out,retval]*/) = 0;
  // [2501] property version
  virtual HRESULT STDMETHODCALLTYPE get_version(float* pfVersion/*[out,retval]*/) = 0;
  // [2502] property authorVersion
  virtual HRESULT STDMETHODCALLTYPE get_authorVersion(BSTR* pVal/*[out,retval]*/) = 0;
  // [2503] property author
  virtual HRESULT STDMETHODCALLTYPE get_author(BSTR* pVal/*[out,retval]*/) = 0;
  // [2504] property copyright
  virtual HRESULT STDMETHODCALLTYPE get_copyright(BSTR* pVal/*[out,retval]*/) = 0;
  // [2505] property title
  virtual HRESULT STDMETHODCALLTYPE get_currentViewID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2505] property title
  virtual HRESULT STDMETHODCALLTYPE set_currentViewID(BSTR pVal/*[in]*/) = 0;
  // [2506] method showErrorDialog
  virtual HRESULT STDMETHODCALLTYPE showErrorDialog(void) = 0;
  // [2507] method logString
  virtual HRESULT STDMETHODCALLTYPE logString(BSTR stringVal/*[in]*/) = 0;
  // [2508] method openView
  virtual HRESULT STDMETHODCALLTYPE openView(BSTR viewID/*[in]*/) = 0;
  // [2515] method openView
  virtual HRESULT STDMETHODCALLTYPE openViewRelative(BSTR viewID/*[in]*/, long x, long y) = 0;
  // [2509] method closeView
  virtual HRESULT STDMETHODCALLTYPE closeView(BSTR viewID/*[in]*/) = 0;
  // [2510] method openDialog
  virtual HRESULT STDMETHODCALLTYPE openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/, 
                                               BSTR* pVal/*[out,retval]*/) = 0;
  // [2511] method loadString
  virtual HRESULT STDMETHODCALLTYPE loadString(BSTR bstrString/*[in]*/, 
                                               BSTR* pbstrReturn/*[out,retval]*/) = 0;
  // [2512] method loadPreference
  virtual HRESULT STDMETHODCALLTYPE loadPreference(BSTR bstrName/*[in]*/, 
                                                   BSTR* pbstrValue/*[out,retval]*/) = 0;
  // [2513] method savePreference
  virtual HRESULT STDMETHODCALLTYPE savePreference(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/) = 0;
  // [2514] method playSound
  virtual HRESULT STDMETHODCALLTYPE playSound(BSTR bstrFilename) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_title(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_title((BSTR*)&pVal));
    return pVal;
  }

  float __fastcall get_version(void)
  {
    float pfVersion;
    OLECHECK(this->get_version((float*)&pfVersion));
    return pfVersion;
  }

  BSTR __fastcall get_authorVersion(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_authorVersion((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_author(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_author((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_copyright(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_copyright((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentViewID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentViewID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->openDialog(dialogType, parameters, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall loadString(BSTR bstrString/*[in]*/)
  {
    BSTR pbstrReturn = 0;
    OLECHECK(this->loadString(bstrString, (BSTR*)&pbstrReturn));
    return pbstrReturn;
  }

  BSTR __fastcall loadPreference(BSTR bstrName/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->loadPreference(bstrName, (BSTR*)&pbstrValue));
    return pbstrValue;
  }


  __property   BSTR            title = {read = get_title};
  __property   float           version = {read = get_version};
  __property   BSTR            authorVersion = {read = get_authorVersion};
  __property   BSTR            author = {read = get_author};
  __property   BSTR            copyright = {read = get_copyright};
  __property   BSTR            currentViewID = {read = get_currentViewID, write = set_currentViewID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPLayoutSettingsDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81}
// *********************************************************************//
interface IWMPLayoutSettingsDispatch  : public IDispatch
{
public:
  // [2800] property effectType
  virtual HRESULT STDMETHODCALLTYPE get_effectType(BSTR* pVal/*[out,retval]*/) = 0;
  // [2800] property effectType
  virtual HRESULT STDMETHODCALLTYPE set_effectType(BSTR pVal/*[in]*/) = 0;
  // [2801] property effectPreset
  virtual HRESULT STDMETHODCALLTYPE get_effectPreset(long* pVal/*[out,retval]*/) = 0;
  // [2801] property effectPreset
  virtual HRESULT STDMETHODCALLTYPE set_effectPreset(long pVal/*[in]*/) = 0;
  // [2802] property settingsView
  virtual HRESULT STDMETHODCALLTYPE get_settingsView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2802] property settingsView
  virtual HRESULT STDMETHODCALLTYPE set_settingsView(BSTR pVal/*[in]*/) = 0;
  // [2803] property videoZoom
  virtual HRESULT STDMETHODCALLTYPE get_videoZoom(long* pVal/*[out,retval]*/) = 0;
  // [2803] property videoZoom
  virtual HRESULT STDMETHODCALLTYPE set_videoZoom(long pVal/*[in]*/) = 0;
  // [2804] property videoShrinkToFit
  virtual HRESULT STDMETHODCALLTYPE get_videoShrinkToFit(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2804] property videoShrinkToFit
  virtual HRESULT STDMETHODCALLTYPE set_videoShrinkToFit(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2805] property videoStretchToFit
  virtual HRESULT STDMETHODCALLTYPE get_videoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2805] property videoStretchToFit
  virtual HRESULT STDMETHODCALLTYPE set_videoStretchToFit(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2868] property userVideoStretchToFit
  virtual HRESULT STDMETHODCALLTYPE get_userVideoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2868] property userVideoStretchToFit
  virtual HRESULT STDMETHODCALLTYPE set_userVideoStretchToFit(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2807] property showCaptions
  virtual HRESULT STDMETHODCALLTYPE get_showCaptions(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2807] property showCaptions
  virtual HRESULT STDMETHODCALLTYPE set_showCaptions(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2808] property showTitles
  virtual HRESULT STDMETHODCALLTYPE get_showTitles(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2808] property showTitles
  virtual HRESULT STDMETHODCALLTYPE set_showTitles(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2809] property showEffects
  virtual HRESULT STDMETHODCALLTYPE get_showEffects(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2809] property showEffects
  virtual HRESULT STDMETHODCALLTYPE set_showEffects(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2811] property showFullScreenPlaylist
  virtual HRESULT STDMETHODCALLTYPE get_showFullScreenPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2811] property showFullScreenPlaylist
  virtual HRESULT STDMETHODCALLTYPE set_showFullScreenPlaylist(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2813] property contrastMode
  virtual HRESULT STDMETHODCALLTYPE get_contrastMode(BSTR* pVal/*[out,retval]*/) = 0;
  // [2810] method getNamedString
  virtual HRESULT STDMETHODCALLTYPE getNamedString(BSTR bstrName/*[in]*/, 
                                                   BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [2815] method getDurationStringFromSeconds
  virtual HRESULT STDMETHODCALLTYPE getDurationStringFromSeconds(long lDurationVal/*[in]*/, 
                                                                 BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [2816] property displayView
  virtual HRESULT STDMETHODCALLTYPE get_displayView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2816] property displayView
  virtual HRESULT STDMETHODCALLTYPE set_displayView(BSTR pVal/*[in]*/) = 0;
  // [2817] property metadataView
  virtual HRESULT STDMETHODCALLTYPE get_metadataView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2817] property metadataView
  virtual HRESULT STDMETHODCALLTYPE set_metadataView(BSTR pVal/*[in]*/) = 0;
  // [2818] property showSettings
  virtual HRESULT STDMETHODCALLTYPE get_showSettings(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2818] property showSettings
  virtual HRESULT STDMETHODCALLTYPE set_showSettings(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2819] property showResizeBars
  virtual HRESULT STDMETHODCALLTYPE get_showResizeBars(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2819] property showResizeBars
  virtual HRESULT STDMETHODCALLTYPE set_showResizeBars(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2820] property showPlaylist
  virtual HRESULT STDMETHODCALLTYPE get_showPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2820] property showPlaylist
  virtual HRESULT STDMETHODCALLTYPE set_showPlaylist(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2821] property showMetadata
  virtual HRESULT STDMETHODCALLTYPE get_showMetadata(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2821] property showMetadata
  virtual HRESULT STDMETHODCALLTYPE set_showMetadata(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2822] property settingsWidth
  virtual HRESULT STDMETHODCALLTYPE get_settingsWidth(long* pVal/*[out,retval]*/) = 0;
  // [2822] property settingsWidth
  virtual HRESULT STDMETHODCALLTYPE set_settingsWidth(long pVal/*[in]*/) = 0;
  // [2823] property settingsHeight
  virtual HRESULT STDMETHODCALLTYPE get_settingsHeight(long* pVal/*[out,retval]*/) = 0;
  // [2823] property settingsHeight
  virtual HRESULT STDMETHODCALLTYPE set_settingsHeight(long pVal/*[in]*/) = 0;
  // [2824] property playlistWidth
  virtual HRESULT STDMETHODCALLTYPE get_playlistWidth(long* pVal/*[out,retval]*/) = 0;
  // [2824] property playlistWidth
  virtual HRESULT STDMETHODCALLTYPE set_playlistWidth(long pVal/*[in]*/) = 0;
  // [2825] property playlistHeight
  virtual HRESULT STDMETHODCALLTYPE get_playlistHeight(long* pVal/*[out,retval]*/) = 0;
  // [2825] property playlistHeight
  virtual HRESULT STDMETHODCALLTYPE set_playlistHeight(long pVal/*[in]*/) = 0;
  // [2826] property metadataWidth
  virtual HRESULT STDMETHODCALLTYPE get_metadataWidth(long* pVal/*[out,retval]*/) = 0;
  // [2826] property metadataWidth
  virtual HRESULT STDMETHODCALLTYPE set_metadataWidth(long pVal/*[in]*/) = 0;
  // [2827] property metadataHeight
  virtual HRESULT STDMETHODCALLTYPE get_metadataHeight(long* pVal/*[out,retval]*/) = 0;
  // [2827] property metadataHeight
  virtual HRESULT STDMETHODCALLTYPE set_metadataHeight(long pVal/*[in]*/) = 0;
  // [2828] property fullScreenAvailable
  virtual HRESULT STDMETHODCALLTYPE get_fullScreenAvailable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2828] property fullScreenAvailable
  virtual HRESULT STDMETHODCALLTYPE set_fullScreenAvailable(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2829] property fullScreenRequest
  virtual HRESULT STDMETHODCALLTYPE get_fullScreenRequest(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2829] property fullScreenRequest
  virtual HRESULT STDMETHODCALLTYPE set_fullScreenRequest(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2830] property quickHide
  virtual HRESULT STDMETHODCALLTYPE get_quickHide(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2830] property quickHide
  virtual HRESULT STDMETHODCALLTYPE set_quickHide(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2831] property displayPreset
  virtual HRESULT STDMETHODCALLTYPE get_displayPreset(long* pVal/*[out,retval]*/) = 0;
  // [2831] property displayPreset
  virtual HRESULT STDMETHODCALLTYPE set_displayPreset(long pVal/*[in]*/) = 0;
  // [2832] property settingsPreset
  virtual HRESULT STDMETHODCALLTYPE get_settingsPreset(long* pVal/*[out,retval]*/) = 0;
  // [2832] property settingsPreset
  virtual HRESULT STDMETHODCALLTYPE set_settingsPreset(long pVal/*[in]*/) = 0;
  // [2833] property metadataPreset
  virtual HRESULT STDMETHODCALLTYPE get_metadataPreset(long* pVal/*[out,retval]*/) = 0;
  // [2833] property metadataPreset
  virtual HRESULT STDMETHODCALLTYPE set_metadataPreset(long pVal/*[in]*/) = 0;
  // [2834] property userDisplayView
  virtual HRESULT STDMETHODCALLTYPE get_userDisplayView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2835] property userWMPDisplayView
  virtual HRESULT STDMETHODCALLTYPE get_userWMPDisplayView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2836] property userDisplayPreset
  virtual HRESULT STDMETHODCALLTYPE get_userDisplayPreset(long* pVal/*[out,retval]*/) = 0;
  // [2837] property userWMPDisplayPreset
  virtual HRESULT STDMETHODCALLTYPE get_userWMPDisplayPreset(long* pVal/*[out,retval]*/) = 0;
  // [2838] property dynamicRangeControl
  virtual HRESULT STDMETHODCALLTYPE get_dynamicRangeControl(long* pVal/*[out,retval]*/) = 0;
  // [2838] property dynamicRangeControl
  virtual HRESULT STDMETHODCALLTYPE set_dynamicRangeControl(long pVal/*[in]*/) = 0;
  // [2839] property slowRate
  virtual HRESULT STDMETHODCALLTYPE get_slowRate(float* pVal/*[out,retval]*/) = 0;
  // [2839] property slowRate
  virtual HRESULT STDMETHODCALLTYPE set_slowRate(float pVal/*[in]*/) = 0;
  // [2840] property fastRate
  virtual HRESULT STDMETHODCALLTYPE get_fastRate(float* pVal/*[out,retval]*/) = 0;
  // [2840] property fastRate
  virtual HRESULT STDMETHODCALLTYPE set_fastRate(float pVal/*[in]*/) = 0;
  // [2841] property buttonHueShift
  virtual HRESULT STDMETHODCALLTYPE get_buttonHueShift(float* pVal/*[out,retval]*/) = 0;
  // [2841] property buttonHueShift
  virtual HRESULT STDMETHODCALLTYPE set_buttonHueShift(float pVal/*[in]*/) = 0;
  // [2842] property buttonSaturation
  virtual HRESULT STDMETHODCALLTYPE get_buttonSaturation(float* pVal/*[out,retval]*/) = 0;
  // [2842] property buttonSaturation
  virtual HRESULT STDMETHODCALLTYPE set_buttonSaturation(float pVal/*[in]*/) = 0;
  // [2843] property backHueShift
  virtual HRESULT STDMETHODCALLTYPE get_backHueShift(float* pVal/*[out,retval]*/) = 0;
  // [2843] property backHueShift
  virtual HRESULT STDMETHODCALLTYPE set_backHueShift(float pVal/*[in]*/) = 0;
  // [2844] property backSaturation
  virtual HRESULT STDMETHODCALLTYPE get_backSaturation(float* pVal/*[out,retval]*/) = 0;
  // [2844] property backSaturation
  virtual HRESULT STDMETHODCALLTYPE set_backSaturation(float pVal/*[in]*/) = 0;
  // [2845] property vizRequest
  virtual HRESULT STDMETHODCALLTYPE get_vizRequest(long* pVal/*[out,retval]*/) = 0;
  // [2845] property vizRequest
  virtual HRESULT STDMETHODCALLTYPE set_vizRequest(long pVal/*[in]*/) = 0;
  // [2847] property appColorLight
  virtual HRESULT STDMETHODCALLTYPE get_appColorLight(BSTR* pVal/*[out,retval]*/) = 0;
  // [2848] property appColorMedium
  virtual HRESULT STDMETHODCALLTYPE get_appColorMedium(BSTR* pVal/*[out,retval]*/) = 0;
  // [2849] property appColorDark
  virtual HRESULT STDMETHODCALLTYPE get_appColorDark(BSTR* pVal/*[out,retval]*/) = 0;
  // [2856] property toolbarButtonHighlight
  virtual HRESULT STDMETHODCALLTYPE get_toolbarButtonHighlight(BSTR* pVal/*[out,retval]*/) = 0;
  // [2857] property toolbarButtonShadow
  virtual HRESULT STDMETHODCALLTYPE get_toolbarButtonShadow(BSTR* pVal/*[out,retval]*/) = 0;
  // [2858] property toolbarButtonFace
  virtual HRESULT STDMETHODCALLTYPE get_toolbarButtonFace(BSTR* pVal/*[out,retval]*/) = 0;
  // [2850] property itemPlayingColor
  virtual HRESULT STDMETHODCALLTYPE get_itemPlayingColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2851] property itemPlayingBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_itemPlayingBackgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2852] property itemErrorColor
  virtual HRESULT STDMETHODCALLTYPE get_itemErrorColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [2853] property AppColorLimited
  virtual HRESULT STDMETHODCALLTYPE get_appColorLimited(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2854] property AppColorBlackBackground
  virtual HRESULT STDMETHODCALLTYPE get_appColorBlackBackground(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2854] property AppColorBlackBackground
  virtual HRESULT STDMETHODCALLTYPE set_appColorBlackBackground(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2855] property appColorVideoBorder
  virtual HRESULT STDMETHODCALLTYPE get_appColorVideoBorder(BSTR* pVal/*[out,retval]*/) = 0;
  // [2855] property appColorVideoBorder
  virtual HRESULT STDMETHODCALLTYPE set_appColorVideoBorder(BSTR pVal/*[in]*/) = 0;
  // [2869] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux1(BSTR* pVal/*[out,retval]*/) = 0;
  // [2870] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux2(BSTR* pVal/*[out,retval]*/) = 0;
  // [2871] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux3(BSTR* pVal/*[out,retval]*/) = 0;
  // [2872] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux4(BSTR* pVal/*[out,retval]*/) = 0;
  // [2873] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux5(BSTR* pVal/*[out,retval]*/) = 0;
  // [2874] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux6(BSTR* pVal/*[out,retval]*/) = 0;
  // [2875] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux7(BSTR* pVal/*[out,retval]*/) = 0;
  // [2876] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux8(BSTR* pVal/*[out,retval]*/) = 0;
  // [2877] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux9(BSTR* pVal/*[out,retval]*/) = 0;
  // [2878] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux10(BSTR* pVal/*[out,retval]*/) = 0;
  // [2879] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux11(BSTR* pVal/*[out,retval]*/) = 0;
  // [2880] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux12(BSTR* pVal/*[out,retval]*/) = 0;
  // [2881] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux13(BSTR* pVal/*[out,retval]*/) = 0;
  // [2882] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux14(BSTR* pVal/*[out,retval]*/) = 0;
  // [2883] auxiliary color
  virtual HRESULT STDMETHODCALLTYPE get_appColorAux15(BSTR* pVal/*[out,retval]*/) = 0;
  // [2884] status string for remote player (taskbar player)
  virtual HRESULT STDMETHODCALLTYPE get_status(BSTR* pVal/*[out,retval]*/) = 0;
  // [2884] status string for remote player (taskbar player)
  virtual HRESULT STDMETHODCALLTYPE set_status(BSTR pVal/*[in]*/) = 0;
  // [2859] property userWMPSettingsView
  virtual HRESULT STDMETHODCALLTYPE get_userWMPSettingsView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2860] property userWMPSettingsPreset
  virtual HRESULT STDMETHODCALLTYPE get_userWMPSettingsPreset(long* pVal/*[out,retval]*/) = 0;
  // [2861] property userWMPShowSettings
  virtual HRESULT STDMETHODCALLTYPE get_userWMPShowSettings(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2862] property userWMPMetadataView
  virtual HRESULT STDMETHODCALLTYPE get_userWMPMetadataView(BSTR* pVal/*[out,retval]*/) = 0;
  // [2863] property userWMPMetadataPreset
  virtual HRESULT STDMETHODCALLTYPE get_userWMPMetadataPreset(long* pVal/*[out,retval]*/) = 0;
  // [2864] property userWMPShowMetadata
  virtual HRESULT STDMETHODCALLTYPE get_userWMPShowMetadata(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2865] property captionsHeight
  virtual HRESULT STDMETHODCALLTYPE get_captionsHeight(long* pVal/*[out,retval]*/) = 0;
  // [2865] property captionsHeight
  virtual HRESULT STDMETHODCALLTYPE set_captionsHeight(long pVal/*[in]*/) = 0;
  // [2866] property snapToVideo
  virtual HRESULT STDMETHODCALLTYPE get_snapToVideo(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2866] property snapToVideo
  virtual HRESULT STDMETHODCALLTYPE set_snapToVideo(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2867] property pinFullScreenControls
  virtual HRESULT STDMETHODCALLTYPE get_pinFullScreenControls(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2867] property pinFullScreenControls
  virtual HRESULT STDMETHODCALLTYPE set_pinFullScreenControls(VARIANT_BOOL pVal/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE SetLockFullScreen(VARIANT_BOOL locked, BSTR Val) = 0; // [2885]
  // [2886] property fullScreenLocked
  virtual HRESULT STDMETHODCALLTYPE get_fullScreenLocked(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2887] property isMultiMon
  virtual HRESULT STDMETHODCALLTYPE get_isMultiMon(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2888] property exclusiveHueShift
  virtual HRESULT STDMETHODCALLTYPE get_exclusiveHueShift(float* pVal/*[out,retval]*/) = 0;
  // [2888] property exclusiveHueShift
  virtual HRESULT STDMETHODCALLTYPE set_exclusiveHueShift(float pVal/*[in]*/) = 0;
  // [2889] property exclusiveSaturation
  virtual HRESULT STDMETHODCALLTYPE get_exclusiveSaturation(float* pVal/*[out,retval]*/) = 0;
  // [2889] property exclusiveSaturation
  virtual HRESULT STDMETHODCALLTYPE set_exclusiveSaturation(float pVal/*[in]*/) = 0;
  // [2892] themeBkgColorIsActive
  virtual HRESULT STDMETHODCALLTYPE get_themeBkgColorIsActive(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2892] themeBkgColorIsActive
  virtual HRESULT STDMETHODCALLTYPE set_themeBkgColorIsActive(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2890] themeBkgColorActive
  virtual HRESULT STDMETHODCALLTYPE get_themeBkgColorActive(BSTR* pVal/*[out,retval]*/) = 0;
  // [2891] themeBkgColorInactive
  virtual HRESULT STDMETHODCALLTYPE get_themeBkgColorInactive(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_effectType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_effectType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_effectPreset(void)
  {
    long pVal;
    OLECHECK(this->get_effectPreset((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_settingsView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_settingsView((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_videoZoom(void)
  {
    long pVal;
    OLECHECK(this->get_videoZoom((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_videoShrinkToFit(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_videoShrinkToFit((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_videoStretchToFit(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_videoStretchToFit((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_userVideoStretchToFit(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_userVideoStretchToFit((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showCaptions(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showCaptions((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showTitles(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showTitles((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showEffects(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showEffects((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showFullScreenPlaylist(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showFullScreenPlaylist((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_contrastMode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_contrastMode((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall getNamedString(BSTR bstrName/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getNamedString(bstrName, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  BSTR __fastcall getDurationStringFromSeconds(long lDurationVal/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getDurationStringFromSeconds(lDurationVal, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  BSTR __fastcall get_displayView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_displayView((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_metadataView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_metadataView((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showSettings(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showSettings((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showResizeBars(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showResizeBars((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showPlaylist(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showPlaylist((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showMetadata(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showMetadata((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_settingsWidth(void)
  {
    long pVal;
    OLECHECK(this->get_settingsWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_settingsHeight(void)
  {
    long pVal;
    OLECHECK(this->get_settingsHeight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_playlistWidth(void)
  {
    long pVal;
    OLECHECK(this->get_playlistWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_playlistHeight(void)
  {
    long pVal;
    OLECHECK(this->get_playlistHeight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_metadataWidth(void)
  {
    long pVal;
    OLECHECK(this->get_metadataWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_metadataHeight(void)
  {
    long pVal;
    OLECHECK(this->get_metadataHeight((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fullScreenAvailable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_fullScreenAvailable((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fullScreenRequest(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_fullScreenRequest((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_quickHide(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_quickHide((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_displayPreset(void)
  {
    long pVal;
    OLECHECK(this->get_displayPreset((long*)&pVal));
    return pVal;
  }

  long __fastcall get_settingsPreset(void)
  {
    long pVal;
    OLECHECK(this->get_settingsPreset((long*)&pVal));
    return pVal;
  }

  long __fastcall get_metadataPreset(void)
  {
    long pVal;
    OLECHECK(this->get_metadataPreset((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_userDisplayView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_userDisplayView((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_userWMPDisplayView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_userWMPDisplayView((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_userDisplayPreset(void)
  {
    long pVal;
    OLECHECK(this->get_userDisplayPreset((long*)&pVal));
    return pVal;
  }

  long __fastcall get_userWMPDisplayPreset(void)
  {
    long pVal;
    OLECHECK(this->get_userWMPDisplayPreset((long*)&pVal));
    return pVal;
  }

  long __fastcall get_dynamicRangeControl(void)
  {
    long pVal;
    OLECHECK(this->get_dynamicRangeControl((long*)&pVal));
    return pVal;
  }

  float __fastcall get_slowRate(void)
  {
    float pVal;
    OLECHECK(this->get_slowRate((float*)&pVal));
    return pVal;
  }

  float __fastcall get_fastRate(void)
  {
    float pVal;
    OLECHECK(this->get_fastRate((float*)&pVal));
    return pVal;
  }

  float __fastcall get_buttonHueShift(void)
  {
    float pVal;
    OLECHECK(this->get_buttonHueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_buttonSaturation(void)
  {
    float pVal;
    OLECHECK(this->get_buttonSaturation((float*)&pVal));
    return pVal;
  }

  float __fastcall get_backHueShift(void)
  {
    float pVal;
    OLECHECK(this->get_backHueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_backSaturation(void)
  {
    float pVal;
    OLECHECK(this->get_backSaturation((float*)&pVal));
    return pVal;
  }

  long __fastcall get_vizRequest(void)
  {
    long pVal;
    OLECHECK(this->get_vizRequest((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorLight(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorLight((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorMedium(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorMedium((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorDark(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorDark((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolbarButtonHighlight(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolbarButtonHighlight((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolbarButtonShadow(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolbarButtonShadow((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolbarButtonFace(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolbarButtonFace((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_itemPlayingColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_itemPlayingColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_itemPlayingBackgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_itemPlayingBackgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_itemErrorColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_itemErrorColor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_appColorLimited(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_appColorLimited((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_appColorBlackBackground(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_appColorBlackBackground((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorVideoBorder(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorVideoBorder((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux1(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux1((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux2(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux2((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux3(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux3((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux4(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux4((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux5(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux5((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux6(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux6((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux7(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux7((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux8(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux8((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux9(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux9((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux10(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux10((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux11(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux11((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux12(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux12((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux13(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux13((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux14(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux14((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_appColorAux15(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_appColorAux15((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_status(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_status((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_userWMPSettingsView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_userWMPSettingsView((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_userWMPSettingsPreset(void)
  {
    long pVal;
    OLECHECK(this->get_userWMPSettingsPreset((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_userWMPShowSettings(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_userWMPShowSettings((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_userWMPMetadataView(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_userWMPMetadataView((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_userWMPMetadataPreset(void)
  {
    long pVal;
    OLECHECK(this->get_userWMPMetadataPreset((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_userWMPShowMetadata(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_userWMPShowMetadata((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_captionsHeight(void)
  {
    long pVal;
    OLECHECK(this->get_captionsHeight((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_snapToVideo(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_snapToVideo((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_pinFullScreenControls(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_pinFullScreenControls((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fullScreenLocked(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_fullScreenLocked((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_isMultiMon(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_isMultiMon((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  float __fastcall get_exclusiveHueShift(void)
  {
    float pVal;
    OLECHECK(this->get_exclusiveHueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_exclusiveSaturation(void)
  {
    float pVal;
    OLECHECK(this->get_exclusiveSaturation((float*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_themeBkgColorIsActive(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_themeBkgColorIsActive((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_themeBkgColorActive(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_themeBkgColorActive((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_themeBkgColorInactive(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_themeBkgColorInactive((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            effectType = {read = get_effectType, write = set_effectType};
  __property   long            effectPreset = {read = get_effectPreset, write = set_effectPreset};
  __property   BSTR            settingsView = {read = get_settingsView, write = set_settingsView};
  __property   long            videoZoom = {read = get_videoZoom, write = set_videoZoom};
  __property   VARIANT_BOOL    videoShrinkToFit = {read = get_videoShrinkToFit, write = set_videoShrinkToFit};
  __property   VARIANT_BOOL    videoStretchToFit = {read = get_videoStretchToFit, write = set_videoStretchToFit};
  __property   VARIANT_BOOL    userVideoStretchToFit = {read = get_userVideoStretchToFit, write = set_userVideoStretchToFit};
  __property   VARIANT_BOOL    showCaptions = {read = get_showCaptions, write = set_showCaptions};
  __property   VARIANT_BOOL    showTitles = {read = get_showTitles, write = set_showTitles};
  __property   VARIANT_BOOL    showEffects = {read = get_showEffects, write = set_showEffects};
  __property   VARIANT_BOOL    showFullScreenPlaylist = {read = get_showFullScreenPlaylist, write = set_showFullScreenPlaylist};
  __property   BSTR            contrastMode = {read = get_contrastMode};
  __property   BSTR            displayView = {read = get_displayView, write = set_displayView};
  __property   BSTR            metadataView = {read = get_metadataView, write = set_metadataView};
  __property   VARIANT_BOOL    showSettings = {read = get_showSettings, write = set_showSettings};
  __property   VARIANT_BOOL    showResizeBars = {read = get_showResizeBars, write = set_showResizeBars};
  __property   VARIANT_BOOL    showPlaylist = {read = get_showPlaylist, write = set_showPlaylist};
  __property   VARIANT_BOOL    showMetadata = {read = get_showMetadata, write = set_showMetadata};
  __property   long            settingsWidth = {read = get_settingsWidth, write = set_settingsWidth};
  __property   long            settingsHeight = {read = get_settingsHeight, write = set_settingsHeight};
  __property   long            playlistWidth = {read = get_playlistWidth, write = set_playlistWidth};
  __property   long            playlistHeight = {read = get_playlistHeight, write = set_playlistHeight};
  __property   long            metadataWidth = {read = get_metadataWidth, write = set_metadataWidth};
  __property   long            metadataHeight = {read = get_metadataHeight, write = set_metadataHeight};
  __property   VARIANT_BOOL    fullScreenAvailable = {read = get_fullScreenAvailable, write = set_fullScreenAvailable};
  __property   VARIANT_BOOL    fullScreenRequest = {read = get_fullScreenRequest, write = set_fullScreenRequest};
  __property   VARIANT_BOOL    quickHide = {read = get_quickHide, write = set_quickHide};
  __property   long            displayPreset = {read = get_displayPreset, write = set_displayPreset};
  __property   long            settingsPreset = {read = get_settingsPreset, write = set_settingsPreset};
  __property   long            metadataPreset = {read = get_metadataPreset, write = set_metadataPreset};
  __property   BSTR            userDisplayView = {read = get_userDisplayView};
  __property   BSTR            userWMPDisplayView = {read = get_userWMPDisplayView};
  __property   long            userDisplayPreset = {read = get_userDisplayPreset};
  __property   long            userWMPDisplayPreset = {read = get_userWMPDisplayPreset};
  __property   long            dynamicRangeControl = {read = get_dynamicRangeControl, write = set_dynamicRangeControl};
  __property   float           slowRate = {read = get_slowRate, write = set_slowRate};
  __property   float           fastRate = {read = get_fastRate, write = set_fastRate};
  __property   float           buttonHueShift = {read = get_buttonHueShift, write = set_buttonHueShift};
  __property   float           buttonSaturation = {read = get_buttonSaturation, write = set_buttonSaturation};
  __property   float           backHueShift = {read = get_backHueShift, write = set_backHueShift};
  __property   float           backSaturation = {read = get_backSaturation, write = set_backSaturation};
  __property   long            vizRequest = {read = get_vizRequest, write = set_vizRequest};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            toolbarButtonHighlight = {read = get_toolbarButtonHighlight};
  __property   BSTR            toolbarButtonShadow = {read = get_toolbarButtonShadow};
  __property   BSTR            toolbarButtonFace = {read = get_toolbarButtonFace};
  __property   BSTR            itemPlayingColor = {read = get_itemPlayingColor};
  __property   BSTR            itemPlayingBackgroundColor = {read = get_itemPlayingBackgroundColor};
  __property   BSTR            itemErrorColor = {read = get_itemErrorColor};
  __property   VARIANT_BOOL    appColorLimited = {read = get_appColorLimited};
  __property   VARIANT_BOOL    appColorBlackBackground = {read = get_appColorBlackBackground, write = set_appColorBlackBackground};
  __property   BSTR            appColorVideoBorder = {read = get_appColorVideoBorder, write = set_appColorVideoBorder};
  __property   BSTR            appColorAux1 = {read = get_appColorAux1};
  __property   BSTR            appColorAux2 = {read = get_appColorAux2};
  __property   BSTR            appColorAux3 = {read = get_appColorAux3};
  __property   BSTR            appColorAux4 = {read = get_appColorAux4};
  __property   BSTR            appColorAux5 = {read = get_appColorAux5};
  __property   BSTR            appColorAux6 = {read = get_appColorAux6};
  __property   BSTR            appColorAux7 = {read = get_appColorAux7};
  __property   BSTR            appColorAux8 = {read = get_appColorAux8};
  __property   BSTR            appColorAux9 = {read = get_appColorAux9};
  __property   BSTR            appColorAux10 = {read = get_appColorAux10};
  __property   BSTR            appColorAux11 = {read = get_appColorAux11};
  __property   BSTR            appColorAux12 = {read = get_appColorAux12};
  __property   BSTR            appColorAux13 = {read = get_appColorAux13};
  __property   BSTR            appColorAux14 = {read = get_appColorAux14};
  __property   BSTR            appColorAux15 = {read = get_appColorAux15};
  __property   BSTR            status = {read = get_status, write = set_status};
  __property   BSTR            userWMPSettingsView = {read = get_userWMPSettingsView};
  __property   long            userWMPSettingsPreset = {read = get_userWMPSettingsPreset};
  __property   VARIANT_BOOL    userWMPShowSettings = {read = get_userWMPShowSettings};
  __property   BSTR            userWMPMetadataView = {read = get_userWMPMetadataView};
  __property   long            userWMPMetadataPreset = {read = get_userWMPMetadataPreset};
  __property   VARIANT_BOOL    userWMPShowMetadata = {read = get_userWMPShowMetadata};
  __property   long            captionsHeight = {read = get_captionsHeight, write = set_captionsHeight};
  __property   VARIANT_BOOL    snapToVideo = {read = get_snapToVideo, write = set_snapToVideo};
  __property   VARIANT_BOOL    pinFullScreenControls = {read = get_pinFullScreenControls, write = set_pinFullScreenControls};
  __property   VARIANT_BOOL    fullScreenLocked = {read = get_fullScreenLocked};
  __property   VARIANT_BOOL    isMultiMon = {read = get_isMultiMon};
  __property   float           exclusiveHueShift = {read = get_exclusiveHueShift, write = set_exclusiveHueShift};
  __property   float           exclusiveSaturation = {read = get_exclusiveSaturation, write = set_exclusiveSaturation};
  __property   VARIANT_BOOL    themeBkgColorIsActive = {read = get_themeBkgColorIsActive, write = set_themeBkgColorIsActive};
  __property   BSTR            themeBkgColorActive = {read = get_themeBkgColorActive};
  __property   BSTR            themeBkgColorInactive = {read = get_themeBkgColorInactive};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPBrandDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98BB02D4-ED74-43CC-AD6A-45888F2E0DCC}
// *********************************************************************//
interface IWMPBrandDispatch  : public IDispatch
{
public:
  // [3040] property fullServiceName
  virtual HRESULT STDMETHODCALLTYPE get_fullServiceName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3000] property friendlyName
  virtual HRESULT STDMETHODCALLTYPE get_friendlyName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3001] property guideButtonText
  virtual HRESULT STDMETHODCALLTYPE get_guideButtonText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3002] property guideButtonTip
  virtual HRESULT STDMETHODCALLTYPE get_guideButtonTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [3003] property guideMenuText
  virtual HRESULT STDMETHODCALLTYPE get_guideMenuText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3004] property guideAccText
  virtual HRESULT STDMETHODCALLTYPE get_guideAccText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3005] property task1ButtonText
  virtual HRESULT STDMETHODCALLTYPE get_task1ButtonText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3006] property task1ButtonTip
  virtual HRESULT STDMETHODCALLTYPE get_task1ButtonTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [3007] property task1MenuText
  virtual HRESULT STDMETHODCALLTYPE get_task1MenuText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3008] property task1AccText
  virtual HRESULT STDMETHODCALLTYPE get_task1AccText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3017] property guideUrl
  virtual HRESULT STDMETHODCALLTYPE get_guideUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3018] property task1Url
  virtual HRESULT STDMETHODCALLTYPE get_task1Url(BSTR* pVal/*[out,retval]*/) = 0;
  // [3021] property imageLargeUrl
  virtual HRESULT STDMETHODCALLTYPE get_imageLargeUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3022] property imageSmallUrl
  virtual HRESULT STDMETHODCALLTYPE get_imageSmallUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3023] property imageMenuUrl
  virtual HRESULT STDMETHODCALLTYPE get_imageMenuUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3024] property infoCenterUrl
  virtual HRESULT STDMETHODCALLTYPE get_infoCenterUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3025] property albumInfoUrl
  virtual HRESULT STDMETHODCALLTYPE get_albumInfoUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3026] property buyCDUrl
  virtual HRESULT STDMETHODCALLTYPE get_buyCDUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3027] property htmlViewUrl
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3028] property navigateUrl
  virtual HRESULT STDMETHODCALLTYPE get_navigateUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3029] property cookieUrl
  virtual HRESULT STDMETHODCALLTYPE get_cookieUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3030] property downloadStatusUrl
  virtual HRESULT STDMETHODCALLTYPE get_downloadStatusUrl(BSTR* pVal/*[out,retval]*/) = 0;
  // [3031] property colorPlayer
  virtual HRESULT STDMETHODCALLTYPE get_colorPlayer(BSTR* pVal/*[out,retval]*/) = 0;
  // [3032] property colorPlayerText
  virtual HRESULT STDMETHODCALLTYPE get_colorPlayerText(BSTR* pVal/*[out,retval]*/) = 0;
  // [3035] property navigateDispid
  virtual HRESULT STDMETHODCALLTYPE get_navigateDispid(long* pVal/*[out,retval]*/) = 0;
  // [3036] property navigateParams
  virtual HRESULT STDMETHODCALLTYPE get_navigateParams(BSTR* pVal/*[out,retval]*/) = 0;
  // [3037] property navigatePane
  virtual HRESULT STDMETHODCALLTYPE get_navigatePane(BSTR* pVal/*[out,retval]*/) = 0;
  // [3038] property selectedPane
  virtual HRESULT STDMETHODCALLTYPE get_selectedPane(BSTR* pVal/*[out,retval]*/) = 0;
  // [3038] property selectedPane
  virtual HRESULT STDMETHODCALLTYPE set_selectedPane(BSTR pVal/*[in]*/) = 0;
  // [3041] method setNavigateProps
  virtual HRESULT STDMETHODCALLTYPE setNavigateProps(BSTR bstrPane/*[in]*/, long lDispid/*[in]*/, 
                                                     BSTR bstrParams/*[in]*/) = 0;
  // [3042] method getMediaParams
  virtual HRESULT STDMETHODCALLTYPE getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/, 
                                                   BSTR* pbstrResult/*[out,retval]*/) = 0;
  // [3039] property selectedTask
  virtual HRESULT STDMETHODCALLTYPE set_selectedTask(long Param1/*[in]*/) = 0;
  // [3043] property contentPartnerSelected
  virtual HRESULT STDMETHODCALLTYPE get_contentPartnerSelected(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_fullServiceName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fullServiceName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_friendlyName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_friendlyName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_guideButtonText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_guideButtonText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_guideButtonTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_guideButtonTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_guideMenuText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_guideMenuText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_guideAccText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_guideAccText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_task1ButtonText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_task1ButtonText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_task1ButtonTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_task1ButtonTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_task1MenuText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_task1MenuText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_task1AccText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_task1AccText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_guideUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_guideUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_task1Url(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_task1Url((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_imageLargeUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_imageLargeUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_imageSmallUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_imageSmallUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_imageMenuUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_imageMenuUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_infoCenterUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_infoCenterUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_albumInfoUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_albumInfoUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_buyCDUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_buyCDUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_htmlViewUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_htmlViewUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_navigateUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_navigateUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cookieUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cookieUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downloadStatusUrl(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downloadStatusUrl((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_colorPlayer(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_colorPlayer((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_colorPlayerText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_colorPlayerText((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_navigateDispid(void)
  {
    long pVal;
    OLECHECK(this->get_navigateDispid((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_navigateParams(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_navigateParams((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_navigatePane(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_navigatePane((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_selectedPane(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_selectedPane((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/)
  {
    BSTR pbstrResult = 0;
    OLECHECK(this->getMediaParams(pObject, bstrURL, (BSTR*)&pbstrResult));
    return pbstrResult;
  }

  VARIANT_BOOL __fastcall get_contentPartnerSelected(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_contentPartnerSelected((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            fullServiceName = {read = get_fullServiceName};
  __property   BSTR            friendlyName = {read = get_friendlyName};
  __property   BSTR            guideButtonText = {read = get_guideButtonText};
  __property   BSTR            guideButtonTip = {read = get_guideButtonTip};
  __property   BSTR            guideMenuText = {read = get_guideMenuText};
  __property   BSTR            guideAccText = {read = get_guideAccText};
  __property   BSTR            task1ButtonText = {read = get_task1ButtonText};
  __property   BSTR            task1ButtonTip = {read = get_task1ButtonTip};
  __property   BSTR            task1MenuText = {read = get_task1MenuText};
  __property   BSTR            task1AccText = {read = get_task1AccText};
  __property   BSTR            guideUrl = {read = get_guideUrl};
  __property   BSTR            task1Url = {read = get_task1Url};
  __property   BSTR            imageLargeUrl = {read = get_imageLargeUrl};
  __property   BSTR            imageSmallUrl = {read = get_imageSmallUrl};
  __property   BSTR            imageMenuUrl = {read = get_imageMenuUrl};
  __property   BSTR            infoCenterUrl = {read = get_infoCenterUrl};
  __property   BSTR            albumInfoUrl = {read = get_albumInfoUrl};
  __property   BSTR            buyCDUrl = {read = get_buyCDUrl};
  __property   BSTR            htmlViewUrl = {read = get_htmlViewUrl};
  __property   BSTR            navigateUrl = {read = get_navigateUrl};
  __property   BSTR            cookieUrl = {read = get_cookieUrl};
  __property   BSTR            downloadStatusUrl = {read = get_downloadStatusUrl};
  __property   BSTR            colorPlayer = {read = get_colorPlayer};
  __property   BSTR            colorPlayerText = {read = get_colorPlayerText};
  __property   long            navigateDispid = {read = get_navigateDispid};
  __property   BSTR            navigateParams = {read = get_navigateParams};
  __property   BSTR            navigatePane = {read = get_navigatePane};
  __property   BSTR            selectedPane = {read = get_selectedPane, write = set_selectedPane};
  __property   long            selectedTask = {write = set_selectedTask};
  __property   VARIANT_BOOL    contentPartnerSelected = {read = get_contentPartnerSelected};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPNowPlayingHelperDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {504F112E-77CC-4E3C-A073-5371B31D9B36}
// *********************************************************************//
interface IWMPNowPlayingHelperDispatch  : public IDispatch
{
public:
  // [2901] property viewFriendlyName
  virtual HRESULT STDMETHODCALLTYPE get_viewFriendlyName(BSTR bstrView/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [2902] property viewPresetCount
  virtual HRESULT STDMETHODCALLTYPE get_viewPresetCount(BSTR bstrView/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [2903] method viewPresetName
  virtual HRESULT STDMETHODCALLTYPE get_viewPresetName(BSTR bstrView/*[in]*/, 
                                                       long nPresetIndex/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [2904] property effectFriendlyName
  virtual HRESULT STDMETHODCALLTYPE get_effectFriendlyName(BSTR bstrEffect/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/) = 0;
  // [2905] method effectPresetName
  virtual HRESULT STDMETHODCALLTYPE get_effectPresetName(BSTR bstrEffect/*[in]*/, 
                                                         long nPresetIndex/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [2909] method resolveDisplayView
  virtual HRESULT STDMETHODCALLTYPE resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/, 
                                                       BSTR* pbstrVal/*[out,retval]*/) = 0;
  // [2910] method isValidDisplayView
  virtual HRESULT STDMETHODCALLTYPE isValidDisplayView(BSTR bstrView/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2911] method getSkinFile
  virtual HRESULT STDMETHODCALLTYPE getSkinFile(BSTR* pVal/*[out,retval]*/) = 0;
  // [2912] method captionsAvailable
  virtual HRESULT STDMETHODCALLTYPE get_captionsAvailable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2913] property linkAvailable
  virtual HRESULT STDMETHODCALLTYPE get_linkAvailable(long* pVal/*[out,retval]*/) = 0;
  // [2914] property linkRequest
  virtual HRESULT STDMETHODCALLTYPE get_linkRequest(long* pVal/*[out,retval]*/) = 0;
  // [2914] property linkRequest
  virtual HRESULT STDMETHODCALLTYPE set_linkRequest(long pVal/*[in]*/) = 0;
  // [2915] property linkRequestParams
  virtual HRESULT STDMETHODCALLTYPE get_linkRequestParams(BSTR* pVal/*[out,retval]*/) = 0;
  // [2915] property linkRequestParams
  virtual HRESULT STDMETHODCALLTYPE set_linkRequestParams(BSTR pVal/*[in]*/) = 0;
  // [2917] method getCurrentArtID
  virtual HRESULT STDMETHODCALLTYPE getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/, 
                                                    long* pVal/*[out,retval]*/) = 0;
  // [2918] method getTimeString
  virtual HRESULT STDMETHODCALLTYPE getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [2919] method getCurrentScriptCommand
  virtual HRESULT STDMETHODCALLTYPE getCurrentScriptCommand(BSTR bstrType/*[in]*/, 
                                                            BSTR* pbstrCommand/*[out,retval]*/) = 0;
  // [2920] method calcLayout
  virtual HRESULT STDMETHODCALLTYPE calcLayout(long lWidth/*[in]*/, long lHeight/*[in]*/, 
                                               VARIANT_BOOL vbCaptions/*[in]*/, 
                                               VARIANT_BOOL vbBanner/*[in]*/) = 0;
  // [2921] method getLayoutSize
  virtual HRESULT STDMETHODCALLTYPE getLayoutSize(long nProp/*[in]*/, long* plValue/*[out,retval]*/) = 0;
  // [2922] method getRootPlaylist
  virtual HRESULT STDMETHODCALLTYPE getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/, 
                                                    LPDISPATCH* ppRootPlaylist/*[out,retval]*/) = 0;
  // [2923] method getHTMLViewURL
  virtual HRESULT STDMETHODCALLTYPE getHTMLViewURL(BSTR* pVal/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_canSendLink(VARIANT_BOOL* pCanSendLink/*[out,retval]*/) = 0; // [2924]
  virtual HRESULT STDMETHODCALLTYPE sendLink(double dblStartTime/*[in]*/, double dblEndTime/*[in]*/) = 0; // [2925]
  virtual HRESULT STDMETHODCALLTYPE get_editObj(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [2926]
  virtual HRESULT STDMETHODCALLTYPE set_editObj(LPUNKNOWN ppVal/*[in]*/) = 0; // [2926]
  // [2927] method getStatusString
  virtual HRESULT STDMETHODCALLTYPE getStatusString(BSTR bstrStatusId/*[in]*/, 
                                                    BSTR* pbstrStatus/*[out,retval]*/) = 0;
  // [2939] method getStatusPct
  virtual HRESULT STDMETHODCALLTYPE getStatusPct(BSTR bstrStatusId/*[in]*/, 
                                                 long* pvResult/*[out,retval]*/) = 0;
  // [2940] method getStatusResult
  virtual HRESULT STDMETHODCALLTYPE getStatusResult(BSTR bstrStatusId/*[in]*/, 
                                                    long* pvResult/*[out,retval]*/) = 0;
  // [2941] method getStatusIcon
  virtual HRESULT STDMETHODCALLTYPE getStatusIcon(BSTR bstrStatusId/*[in]*/, 
                                                  long* pvResult/*[out,retval]*/) = 0;
  // [2942] method getStatusIdList
  virtual HRESULT STDMETHODCALLTYPE getStatusIdList(BSTR* pbstrStatus/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_notificationString(BSTR* pbstrNotificationString/*[out,retval]*/) = 0; // [2928]
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewBaseURL(BSTR* pVal/*[out,retval]*/) = 0; // [2930]
  virtual HRESULT STDMETHODCALLTYPE set_htmlViewBaseURL(BSTR pVal/*[in]*/) = 0; // [2930]
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewFullURL(BSTR* pVal/*[out,retval]*/) = 0; // [2933]
  virtual HRESULT STDMETHODCALLTYPE set_htmlViewFullURL(BSTR pVal/*[in]*/) = 0; // [2933]
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewSecureLock(long* pVal/*[out,retval]*/) = 0; // [2929]
  virtual HRESULT STDMETHODCALLTYPE set_htmlViewSecureLock(long pVal/*[in]*/) = 0; // [2929]
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewBusy(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2931]
  virtual HRESULT STDMETHODCALLTYPE set_htmlViewBusy(VARIANT_BOOL pVal/*[in]*/) = 0; // [2931]
  virtual HRESULT STDMETHODCALLTYPE get_htmlViewShowCert(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2932]
  virtual HRESULT STDMETHODCALLTYPE set_htmlViewShowCert(VARIANT_BOOL pVal/*[in]*/) = 0; // [2932]
  virtual HRESULT STDMETHODCALLTYPE get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2934]
  virtual HRESULT STDMETHODCALLTYPE set_previousEnabled(VARIANT_BOOL pVal/*[in]*/) = 0; // [2934]
  virtual HRESULT STDMETHODCALLTYPE get_doPreviousNow(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2935]
  virtual HRESULT STDMETHODCALLTYPE set_doPreviousNow(VARIANT_BOOL pVal/*[in]*/) = 0; // [2935]
  virtual HRESULT STDMETHODCALLTYPE get_DPI(long* pVal/*[out,retval]*/) = 0; // [2936]
  // [2937] clear all user color info
  virtual HRESULT STDMETHODCALLTYPE clearColors(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_lastMessage(BSTR* pVal/*[out,retval]*/) = 0; // [2938]
  virtual HRESULT STDMETHODCALLTYPE set_lastMessage(BSTR pVal/*[in]*/) = 0; // [2938]
  virtual HRESULT STDMETHODCALLTYPE get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2943]
  virtual HRESULT STDMETHODCALLTYPE get_isBidi(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [2944]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_viewFriendlyName(BSTR bstrView/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_viewFriendlyName(bstrView, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_viewPresetCount(BSTR bstrView/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_viewPresetCount(bstrView, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_viewPresetName(BSTR bstrView/*[in]*/, long nPresetIndex/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_viewPresetName(bstrView, nPresetIndex, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_effectFriendlyName(BSTR bstrEffect/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_effectFriendlyName(bstrEffect, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_effectPresetName(BSTR bstrEffect/*[in]*/, long nPresetIndex/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_effectPresetName(bstrEffect, nPresetIndex, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->resolveDisplayView(fSafe, (BSTR*)&pbstrVal));
    return pbstrVal;
  }

  VARIANT_BOOL __fastcall isValidDisplayView(BSTR bstrView/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->isValidDisplayView(bstrView, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall getSkinFile(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->getSkinFile((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_captionsAvailable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_captionsAvailable((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_linkAvailable(void)
  {
    long pVal;
    OLECHECK(this->get_linkAvailable((long*)&pVal));
    return pVal;
  }

  long __fastcall get_linkRequest(void)
  {
    long pVal;
    OLECHECK(this->get_linkRequest((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_linkRequestParams(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_linkRequestParams((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/)
  {
    long pVal;
    OLECHECK(this->getCurrentArtID(fLargeArt, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall getTimeString(double dTime/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->getTimeString(dTime, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall getCurrentScriptCommand(BSTR bstrType/*[in]*/)
  {
    BSTR pbstrCommand = 0;
    OLECHECK(this->getCurrentScriptCommand(bstrType, (BSTR*)&pbstrCommand));
    return pbstrCommand;
  }

  long __fastcall getLayoutSize(long nProp/*[in]*/)
  {
    long plValue;
    OLECHECK(this->getLayoutSize(nProp, (long*)&plValue));
    return plValue;
  }

  LPDISPATCH __fastcall getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/)
  {
    LPDISPATCH ppRootPlaylist;
    OLECHECK(this->getRootPlaylist(pPlaylist, (LPDISPATCH*)&ppRootPlaylist));
    return ppRootPlaylist;
  }

  BSTR __fastcall getHTMLViewURL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->getHTMLViewURL((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_canSendLink(void)
  {
    VARIANT_BOOL pCanSendLink;
    OLECHECK(this->get_canSendLink((VARIANT_BOOL*)&pCanSendLink));
    return pCanSendLink;
  }

  LPUNKNOWN __fastcall get_editObj(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get_editObj((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  BSTR __fastcall getStatusString(BSTR bstrStatusId/*[in]*/)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->getStatusString(bstrStatusId, (BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  long __fastcall getStatusPct(BSTR bstrStatusId/*[in]*/)
  {
    long pvResult;
    OLECHECK(this->getStatusPct(bstrStatusId, (long*)&pvResult));
    return pvResult;
  }

  long __fastcall getStatusResult(BSTR bstrStatusId/*[in]*/)
  {
    long pvResult;
    OLECHECK(this->getStatusResult(bstrStatusId, (long*)&pvResult));
    return pvResult;
  }

  long __fastcall getStatusIcon(BSTR bstrStatusId/*[in]*/)
  {
    long pvResult;
    OLECHECK(this->getStatusIcon(bstrStatusId, (long*)&pvResult));
    return pvResult;
  }

  BSTR __fastcall getStatusIdList(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->getStatusIdList((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  BSTR __fastcall get_notificationString(void)
  {
    BSTR pbstrNotificationString = 0;
    OLECHECK(this->get_notificationString((BSTR*)&pbstrNotificationString));
    return pbstrNotificationString;
  }

  BSTR __fastcall get_htmlViewBaseURL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_htmlViewBaseURL((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_htmlViewFullURL(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_htmlViewFullURL((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_htmlViewSecureLock(void)
  {
    long pVal;
    OLECHECK(this->get_htmlViewSecureLock((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_htmlViewBusy(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_htmlViewBusy((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_htmlViewShowCert(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_htmlViewShowCert((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_previousEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_previousEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_doPreviousNow(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_doPreviousNow((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DPI(void)
  {
    long pVal;
    OLECHECK(this->get_DPI((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_lastMessage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_lastMessage((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_inVistaPlus(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_inVistaPlus((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_isBidi(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_isBidi((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    captionsAvailable = {read = get_captionsAvailable};
  __property   long            linkAvailable = {read = get_linkAvailable};
  __property   long            linkRequest = {read = get_linkRequest, write = set_linkRequest};
  __property   BSTR            linkRequestParams = {read = get_linkRequestParams, write = set_linkRequestParams};
  __property   VARIANT_BOOL    canSendLink = {read = get_canSendLink};
  __property   LPUNKNOWN       editObj = {read = get_editObj, write = set_editObj};
  __property   BSTR            notificationString = {read = get_notificationString};
  __property   BSTR            htmlViewBaseURL = {read = get_htmlViewBaseURL, write = set_htmlViewBaseURL};
  __property   BSTR            htmlViewFullURL = {read = get_htmlViewFullURL, write = set_htmlViewFullURL};
  __property   long            htmlViewSecureLock = {read = get_htmlViewSecureLock, write = set_htmlViewSecureLock};
  __property   VARIANT_BOOL    htmlViewBusy = {read = get_htmlViewBusy, write = set_htmlViewBusy};
  __property   VARIANT_BOOL    htmlViewShowCert = {read = get_htmlViewShowCert, write = set_htmlViewShowCert};
  __property   VARIANT_BOOL    previousEnabled = {read = get_previousEnabled, write = set_previousEnabled};
  __property   VARIANT_BOOL    doPreviousNow = {read = get_doPreviousNow, write = set_doPreviousNow};
  __property   long            DPI = {read = get_DPI};
  __property   BSTR            lastMessage = {read = get_lastMessage, write = set_lastMessage};
  __property   VARIANT_BOOL    inVistaPlus = {read = get_inVistaPlus};
  __property   VARIANT_BOOL    isBidi = {read = get_isBidi};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPNowDoingDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F}
// *********************************************************************//
interface IWMPNowDoingDispatch  : public IDispatch
{
public:
  // [3217] method buyContent
  virtual HRESULT STDMETHODCALLTYPE buyContent(void) = 0;
  // [3218] method hideBasket
  virtual HRESULT STDMETHODCALLTYPE hideBasket(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_DPI(long* pVal/*[out,retval]*/) = 0; // [3219]
  // [3200] property mode
  virtual HRESULT STDMETHODCALLTYPE get_mode(BSTR* pVal/*[out,retval]*/) = 0;
  // [3206] property burn_selectedDrive
  virtual HRESULT STDMETHODCALLTYPE set_burn_selectedDrive(long pVal/*[in]*/) = 0;
  // [3206] property burn_selectedDrive
  virtual HRESULT STDMETHODCALLTYPE get_burn_selectedDrive(long* pVal/*[out,retval]*/) = 0;
  // [3214] property sync_selectedDevice
  virtual HRESULT STDMETHODCALLTYPE get_sync_selectedDevice(long* pVal/*[out,retval]*/) = 0;
  // [3214] property sync_selectedDevice
  virtual HRESULT STDMETHODCALLTYPE set_sync_selectedDevice(long pVal/*[in]*/) = 0;
  // [3208] property burn_numDiscsSpanned
  virtual HRESULT STDMETHODCALLTYPE get_burn_numDiscsSpanned(long* pVal/*[out,retval]*/) = 0;
  // [3221] method editPlaylist
  virtual HRESULT STDMETHODCALLTYPE get_editPlaylist(LPDISPATCH* ppEditPlaylist/*[out,retval]*/) = 0;
  // [3201] property burn_mediaType
  virtual HRESULT STDMETHODCALLTYPE get_burn_mediaType(BSTR* pVal/*[out,retval]*/) = 0;
  // [3202] property burn_contentType
  virtual HRESULT STDMETHODCALLTYPE get_burn_contentType(BSTR* pVal/*[out,retval]*/) = 0;
  // [3203] property burn_freeSpace
  virtual HRESULT STDMETHODCALLTYPE get_burn_freeSpace(long* pVal/*[out,retval]*/) = 0;
  // [3204] property burn_totalSpace
  virtual HRESULT STDMETHODCALLTYPE get_burn_totalSpace(long* pVal/*[out,retval]*/) = 0;
  // [3205] property burn_driveName
  virtual HRESULT STDMETHODCALLTYPE get_burn_driveName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3207] property burn_numDevices
  virtual HRESULT STDMETHODCALLTYPE get_burn_numDevices(long* pVal/*[out,retval]*/) = 0;
  // [3209] property burn_spaceToUse
  virtual HRESULT STDMETHODCALLTYPE get_burn_spaceToUse(long* pVal/*[out,retval]*/) = 0;
  // [3210] property sync_spaceToUse
  virtual HRESULT STDMETHODCALLTYPE get_sync_spaceToUse(long* pVal/*[out,retval]*/) = 0;
  // [3211] property sync_spaceUsed
  virtual HRESULT STDMETHODCALLTYPE get_sync_spaceUsed(long* pVal/*[out,retval]*/) = 0;
  // [3212] property sync_totalSpace
  virtual HRESULT STDMETHODCALLTYPE get_sync_totalSpace(long* pVal/*[out,retval]*/) = 0;
  // [3213] property sync_deviceName
  virtual HRESULT STDMETHODCALLTYPE get_sync_deviceName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3215] property sync_numDevices
  virtual HRESULT STDMETHODCALLTYPE get_sync_numDevices(long* pVal/*[out,retval]*/) = 0;
  // [3216] property sync_oemName
  virtual HRESULT STDMETHODCALLTYPE get_sync_oemName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3220] method logData
  virtual HRESULT STDMETHODCALLTYPE logData(BSTR ID/*[in]*/, BSTR data/*[in]*/) = 0;
  // [3222] method formatTime
  virtual HRESULT STDMETHODCALLTYPE formatTime(long value/*[in]*/, BSTR* pbstrReturn/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_DPI(void)
  {
    long pVal;
    OLECHECK(this->get_DPI((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_mode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_mode((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_selectedDrive(void)
  {
    long pVal;
    OLECHECK(this->get_burn_selectedDrive((long*)&pVal));
    return pVal;
  }

  long __fastcall get_sync_selectedDevice(void)
  {
    long pVal;
    OLECHECK(this->get_sync_selectedDevice((long*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_numDiscsSpanned(void)
  {
    long pVal;
    OLECHECK(this->get_burn_numDiscsSpanned((long*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_editPlaylist(void)
  {
    LPDISPATCH ppEditPlaylist;
    OLECHECK(this->get_editPlaylist((LPDISPATCH*)&ppEditPlaylist));
    return ppEditPlaylist;
  }

  BSTR __fastcall get_burn_mediaType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_burn_mediaType((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_burn_contentType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_burn_contentType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_freeSpace(void)
  {
    long pVal;
    OLECHECK(this->get_burn_freeSpace((long*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_totalSpace(void)
  {
    long pVal;
    OLECHECK(this->get_burn_totalSpace((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_burn_driveName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_burn_driveName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_numDevices(void)
  {
    long pVal;
    OLECHECK(this->get_burn_numDevices((long*)&pVal));
    return pVal;
  }

  long __fastcall get_burn_spaceToUse(void)
  {
    long pVal;
    OLECHECK(this->get_burn_spaceToUse((long*)&pVal));
    return pVal;
  }

  long __fastcall get_sync_spaceToUse(void)
  {
    long pVal;
    OLECHECK(this->get_sync_spaceToUse((long*)&pVal));
    return pVal;
  }

  long __fastcall get_sync_spaceUsed(void)
  {
    long pVal;
    OLECHECK(this->get_sync_spaceUsed((long*)&pVal));
    return pVal;
  }

  long __fastcall get_sync_totalSpace(void)
  {
    long pVal;
    OLECHECK(this->get_sync_totalSpace((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_sync_deviceName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_sync_deviceName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_sync_numDevices(void)
  {
    long pVal;
    OLECHECK(this->get_sync_numDevices((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_sync_oemName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_sync_oemName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall formatTime(long value/*[in]*/)
  {
    BSTR pbstrReturn = 0;
    OLECHECK(this->formatTime(value, (BSTR*)&pbstrReturn));
    return pbstrReturn;
  }


  __property   long            DPI = {read = get_DPI};
  __property   BSTR            mode = {read = get_mode};
  __property   long            burn_selectedDrive = {read = get_burn_selectedDrive, write = set_burn_selectedDrive};
  __property   long            sync_selectedDevice = {read = get_sync_selectedDevice, write = set_sync_selectedDevice};
  __property   long            burn_numDiscsSpanned = {read = get_burn_numDiscsSpanned};
  __property   LPDISPATCH      editPlaylist = {read = get_editPlaylist};
  __property   BSTR            burn_mediaType = {read = get_burn_mediaType};
  __property   BSTR            burn_contentType = {read = get_burn_contentType};
  __property   long            burn_freeSpace = {read = get_burn_freeSpace};
  __property   long            burn_totalSpace = {read = get_burn_totalSpace};
  __property   BSTR            burn_driveName = {read = get_burn_driveName};
  __property   long            burn_numDevices = {read = get_burn_numDevices};
  __property   long            burn_spaceToUse = {read = get_burn_spaceToUse};
  __property   long            sync_spaceToUse = {read = get_sync_spaceToUse};
  __property   long            sync_spaceUsed = {read = get_sync_spaceUsed};
  __property   long            sync_totalSpace = {read = get_sync_totalSpace};
  __property   BSTR            sync_deviceName = {read = get_sync_deviceName};
  __property   long            sync_numDevices = {read = get_sync_numDevices};
  __property   BSTR            sync_oemName = {read = get_sync_oemName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPButtonCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {BB17FFF7-1692-4555-918A-6AF7BFACEDD2}
// *********************************************************************//
interface IWMPButtonCtrlEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall onclick()
  {
    _TDispID _dispid(/* onclick */ DISPID(5120));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IWMPButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {87291B50-0C8E-11D3-BB2A-00A0C93CA73A}
// *********************************************************************//
interface IWMPButtonCtrl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_image(BSTR* pVal/*[out,retval]*/) = 0; // [5102]
  virtual HRESULT STDMETHODCALLTYPE set_image(BSTR pVal/*[in]*/) = 0; // [5102]
  virtual HRESULT STDMETHODCALLTYPE get_hoverImage(BSTR* pVal/*[out,retval]*/) = 0; // [5103]
  virtual HRESULT STDMETHODCALLTYPE set_hoverImage(BSTR pVal/*[in]*/) = 0; // [5103]
  virtual HRESULT STDMETHODCALLTYPE get_downImage(BSTR* pVal/*[out,retval]*/) = 0; // [5104]
  virtual HRESULT STDMETHODCALLTYPE set_downImage(BSTR pVal/*[in]*/) = 0; // [5104]
  virtual HRESULT STDMETHODCALLTYPE get_disabledImage(BSTR* pVal/*[out,retval]*/) = 0; // [5105]
  virtual HRESULT STDMETHODCALLTYPE set_disabledImage(BSTR pVal/*[in]*/) = 0; // [5105]
  virtual HRESULT STDMETHODCALLTYPE get_hoverDownImage(BSTR* pVal/*[out,retval]*/) = 0; // [5106]
  virtual HRESULT STDMETHODCALLTYPE set_hoverDownImage(BSTR pVal/*[in]*/) = 0; // [5106]
  virtual HRESULT STDMETHODCALLTYPE get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [5107]
  virtual HRESULT STDMETHODCALLTYPE set_tiled(VARIANT_BOOL pVal/*[in]*/) = 0; // [5107]
  virtual HRESULT STDMETHODCALLTYPE get_transparencyColor(BSTR* pVal/*[out,retval]*/) = 0; // [5108]
  virtual HRESULT STDMETHODCALLTYPE set_transparencyColor(BSTR pVal/*[in]*/) = 0; // [5108]
  virtual HRESULT STDMETHODCALLTYPE get_down(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [5109]
  virtual HRESULT STDMETHODCALLTYPE set_down(VARIANT_BOOL pVal/*[in]*/) = 0; // [5109]
  virtual HRESULT STDMETHODCALLTYPE get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [5110]
  virtual HRESULT STDMETHODCALLTYPE set_sticky(VARIANT_BOOL pVal/*[in]*/) = 0; // [5110]
  virtual HRESULT STDMETHODCALLTYPE get_upToolTip(BSTR* pVal/*[out,retval]*/) = 0; // [5112]
  virtual HRESULT STDMETHODCALLTYPE set_upToolTip(BSTR pVal/*[in]*/) = 0; // [5112]
  virtual HRESULT STDMETHODCALLTYPE get_downToolTip(BSTR* pVal/*[out,retval]*/) = 0; // [5113]
  virtual HRESULT STDMETHODCALLTYPE set_downToolTip(BSTR pVal/*[in]*/) = 0; // [5113]
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0; // [5114]
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0; // [5114]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_image(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_image((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverDownImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverDownImage((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_tiled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_tiled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_transparencyColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_down(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_down((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_sticky(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_sticky((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_upToolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_upToolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downToolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downToolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPListBoxCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC1880CE-83B9-43A7-A066-C44CE8C82583}
// *********************************************************************//
interface IWMPListBoxCtrl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_selectedItem(long* pnPos/*[out,retval]*/) = 0; // [6108]
  virtual HRESULT STDMETHODCALLTYPE set_selectedItem(long pnPos/*[in]*/) = 0; // [6108]
  virtual HRESULT STDMETHODCALLTYPE get_sorted(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [6100]
  virtual HRESULT STDMETHODCALLTYPE set_sorted(VARIANT_BOOL pVal/*[in]*/) = 0; // [6100]
  virtual HRESULT STDMETHODCALLTYPE get_multiselect(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [6101]
  virtual HRESULT STDMETHODCALLTYPE set_multiselect(VARIANT_BOOL pVal/*[in]*/) = 0; // [6101]
  virtual HRESULT STDMETHODCALLTYPE get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [6102]
  virtual HRESULT STDMETHODCALLTYPE set_readOnly(VARIANT_BOOL pVal/*[in]*/) = 0; // [6102]
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pVal/*[out,retval]*/) = 0; // [6103]
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pVal/*[in]*/) = 0; // [6103]
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0; // [6104]
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0; // [6104]
  virtual HRESULT STDMETHODCALLTYPE get_fontSize(long* pVal/*[out,retval]*/) = 0; // [6105]
  virtual HRESULT STDMETHODCALLTYPE set_fontSize(long pVal/*[in]*/) = 0; // [6105]
  virtual HRESULT STDMETHODCALLTYPE get_fontStyle(BSTR* pVal/*[out,retval]*/) = 0; // [6106]
  virtual HRESULT STDMETHODCALLTYPE set_fontStyle(BSTR pVal/*[in]*/) = 0; // [6106]
  virtual HRESULT STDMETHODCALLTYPE get_fontFace(BSTR* pVal/*[out,retval]*/) = 0; // [6107]
  virtual HRESULT STDMETHODCALLTYPE set_fontFace(BSTR pVal/*[in]*/) = 0; // [6107]
  virtual HRESULT STDMETHODCALLTYPE get_itemCount(long* pVal/*[out,retval]*/) = 0; // [6109]
  virtual HRESULT STDMETHODCALLTYPE get_firstVisibleItem(long* pVal/*[out,retval]*/) = 0; // [6110]
  virtual HRESULT STDMETHODCALLTYPE set_firstVisibleItem(long pVal/*[in]*/) = 0; // [6110]
  virtual HRESULT STDMETHODCALLTYPE set_popUp(VARIANT_BOOL Param1/*[in]*/) = 0; // [6120]
  virtual HRESULT STDMETHODCALLTYPE get_focusItem(long* pVal/*[out,retval]*/) = 0; // [6121]
  virtual HRESULT STDMETHODCALLTYPE set_focusItem(long pVal/*[in]*/) = 0; // [6121]
  virtual HRESULT STDMETHODCALLTYPE get_border(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [6125]
  virtual HRESULT STDMETHODCALLTYPE set_border(VARIANT_BOOL pVal/*[in]*/) = 0; // [6125]
  // [6111] method getItem
  virtual HRESULT STDMETHODCALLTYPE getItem(long nPos/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [6112] method insertItem
  virtual HRESULT STDMETHODCALLTYPE insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/) = 0;
  // [6113] method appendItem
  virtual HRESULT STDMETHODCALLTYPE appendItem(BSTR newVal/*[in]*/) = 0;
  // [6114] method replaceItem
  virtual HRESULT STDMETHODCALLTYPE replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/) = 0;
  // [6115] method deleteItem
  virtual HRESULT STDMETHODCALLTYPE deleteItem(long nPos/*[in]*/) = 0;
  // [6116] method deleteAll
  virtual HRESULT STDMETHODCALLTYPE deleteAll(void) = 0;
  // [6117] method findItem
  virtual HRESULT STDMETHODCALLTYPE findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/, 
                                             long* pnPos/*[out,retval]*/) = 0;
  // [6118] method getNextSelectedItem
  virtual HRESULT STDMETHODCALLTYPE getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                        long* pnSelected/*[out,retval]*/) = 0;
  // [6122] method setSelectedState
  virtual HRESULT STDMETHODCALLTYPE setSelectedState(long nPos/*[in]*/, 
                                                     VARIANT_BOOL vbSelected/*[in]*/) = 0;
  // [6123] method show
  virtual HRESULT STDMETHODCALLTYPE show(void) = 0;
  // [6124] method dismiss
  virtual HRESULT STDMETHODCALLTYPE dismiss(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_selectedItem(void)
  {
    long pnPos;
    OLECHECK(this->get_selectedItem((long*)&pnPos));
    return pnPos;
  }

  VARIANT_BOOL __fastcall get_sorted(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_sorted((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_multiselect(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_multiselect((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_readOnly(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_readOnly((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_fontSize(void)
  {
    long pVal;
    OLECHECK(this->get_fontSize((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontStyle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontFace(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontFace((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_itemCount(void)
  {
    long pVal;
    OLECHECK(this->get_itemCount((long*)&pVal));
    return pVal;
  }

  long __fastcall get_firstVisibleItem(void)
  {
    long pVal;
    OLECHECK(this->get_firstVisibleItem((long*)&pVal));
    return pVal;
  }

  long __fastcall get_focusItem(void)
  {
    long pVal;
    OLECHECK(this->get_focusItem((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_border(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_border((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall getItem(long nPos/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->getItem(nPos, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/)
  {
    long pnPos;
    OLECHECK(this->findItem(nStartIndex, newVal, (long*)&pnPos));
    return pnPos;
  }

  long __fastcall getNextSelectedItem(long nStartIndex/*[in]*/)
  {
    long pnSelected;
    OLECHECK(this->getNextSelectedItem(nStartIndex, (long*)&pnSelected));
    return pnSelected;
  }


  __property   long            selectedItem = {read = get_selectedItem, write = set_selectedItem};
  __property   VARIANT_BOOL    sorted = {read = get_sorted, write = set_sorted};
  __property   VARIANT_BOOL    multiselect = {read = get_multiselect, write = set_multiselect};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            itemCount = {read = get_itemCount};
  __property   long            firstVisibleItem = {read = get_firstVisibleItem, write = set_firstVisibleItem};
  __property   VARIANT_BOOL    popUp = {write = set_popUp};
  __property   long            focusItem = {read = get_focusItem, write = set_focusItem};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPListBoxItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6}
// *********************************************************************//
interface IWMPListBoxItem  : public IDispatch
{
public:
  // [6119] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(BSTR Param1/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   BSTR            value = {write = set_value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPlaylistCtrlColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {63D9D30F-AE4C-4678-8CA8-5720F4FE4419}
// *********************************************************************//
interface IWMPPlaylistCtrlColumn  : public IDispatch
{
public:
  // [5670] property columnName
  virtual HRESULT STDMETHODCALLTYPE get_columnName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5670] property columnName
  virtual HRESULT STDMETHODCALLTYPE set_columnName(BSTR pVal/*[in]*/) = 0;
  // [5671] property columnID
  virtual HRESULT STDMETHODCALLTYPE get_columnID(BSTR* pVal/*[out,retval]*/) = 0;
  // [5671] property columnID
  virtual HRESULT STDMETHODCALLTYPE set_columnID(BSTR pVal/*[in]*/) = 0;
  // [5672] property columnResizeMode
  virtual HRESULT STDMETHODCALLTYPE get_columnResizeMode(BSTR* pVal/*[out,retval]*/) = 0;
  // [5672] property columnResizeMode
  virtual HRESULT STDMETHODCALLTYPE set_columnResizeMode(BSTR pVal/*[in]*/) = 0;
  // [5673] property columnWidth
  virtual HRESULT STDMETHODCALLTYPE get_columnWidth(long* pVal/*[out,retval]*/) = 0;
  // [5673] property columnWidth
  virtual HRESULT STDMETHODCALLTYPE set_columnWidth(long pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_columnName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_columnName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_columnID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_columnID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_columnResizeMode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_columnResizeMode((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_columnWidth(void)
  {
    long pVal;
    OLECHECK(this->get_columnWidth((long*)&pVal));
    return pVal;
  }


  __property   BSTR            columnName = {read = get_columnName, write = set_columnName};
  __property   BSTR            columnID = {read = get_columnID, write = set_columnID};
  __property   BSTR            columnResizeMode = {read = get_columnResizeMode, write = set_columnResizeMode};
  __property   long            columnWidth = {read = get_columnWidth, write = set_columnWidth};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A}
// *********************************************************************//
interface IWMPSliderCtrlEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall ondragbegin()
  {
    _TDispID _dispid(/* ondragbegin */ DISPID(5430));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall ondragend()
  {
    _TDispID _dispid(/* ondragend */ DISPID(5431));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onpositionchange()
  {
    _TDispID _dispid(/* onpositionchange */ DISPID(5432));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IWMPSliderCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F2BF2C8F-405F-11D3-BB39-00A0C93CA73A}
// *********************************************************************//
interface IWMPSliderCtrl  : public IDispatch
{
public:
  // [5400] property direction
  virtual HRESULT STDMETHODCALLTYPE get_direction(BSTR* pVal/*[out,retval]*/) = 0;
  // [5400] property direction
  virtual HRESULT STDMETHODCALLTYPE set_direction(BSTR pVal/*[in]*/) = 0;
  // [5402] property slide
  virtual HRESULT STDMETHODCALLTYPE get_slide(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5402] property slide
  virtual HRESULT STDMETHODCALLTYPE set_slide(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5403] property tiled
  virtual HRESULT STDMETHODCALLTYPE get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5403] property tiled
  virtual HRESULT STDMETHODCALLTYPE set_tiled(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5404] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5404] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pVal/*[in]*/) = 0;
  // [5405] property foregroundEndColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundEndColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5405] property foregroundEndColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundEndColor(BSTR pVal/*[in]*/) = 0;
  // [5406] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5406] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [5407] property backgroundEndColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundEndColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5407] property backgroundEndColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundEndColor(BSTR pVal/*[in]*/) = 0;
  // [5408] property disabledColor
  virtual HRESULT STDMETHODCALLTYPE get_disabledColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5408] property disabledColor
  virtual HRESULT STDMETHODCALLTYPE set_disabledColor(BSTR pVal/*[in]*/) = 0;
  // [5409] property transparencyColor
  virtual HRESULT STDMETHODCALLTYPE get_transparencyColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5409] property transparencyColor
  virtual HRESULT STDMETHODCALLTYPE set_transparencyColor(BSTR pVal/*[in]*/) = 0;
  // [5410] property foregroundImage
  virtual HRESULT STDMETHODCALLTYPE get_foregroundImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5410] property foregroundImage
  virtual HRESULT STDMETHODCALLTYPE set_foregroundImage(BSTR pVal/*[in]*/) = 0;
  // [5411] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE get_backgroundImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5411] property backgroundImage
  virtual HRESULT STDMETHODCALLTYPE set_backgroundImage(BSTR pVal/*[in]*/) = 0;
  // [5412] property backgroundHoverImage
  virtual HRESULT STDMETHODCALLTYPE get_backgroundHoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5412] property backgroundHoverImage
  virtual HRESULT STDMETHODCALLTYPE set_backgroundHoverImage(BSTR pVal/*[in]*/) = 0;
  // [5413] property disabledImage
  virtual HRESULT STDMETHODCALLTYPE get_disabledImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5413] property disabledImage
  virtual HRESULT STDMETHODCALLTYPE set_disabledImage(BSTR pVal/*[in]*/) = 0;
  // [5414] property thumbImage
  virtual HRESULT STDMETHODCALLTYPE get_thumbImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5414] property thumbImage
  virtual HRESULT STDMETHODCALLTYPE set_thumbImage(BSTR pVal/*[in]*/) = 0;
  // [5415] property thumbHoverImage
  virtual HRESULT STDMETHODCALLTYPE get_thumbHoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5415] property thumbHoverImage
  virtual HRESULT STDMETHODCALLTYPE set_thumbHoverImage(BSTR pVal/*[in]*/) = 0;
  // [5416] property thumbDownImage
  virtual HRESULT STDMETHODCALLTYPE get_thumbDownImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5416] property thumbDownImage
  virtual HRESULT STDMETHODCALLTYPE set_thumbDownImage(BSTR pVal/*[in]*/) = 0;
  // [5417] property thumbDisabledImage
  virtual HRESULT STDMETHODCALLTYPE get_thumbDisabledImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5417] property thumbDisabledImage
  virtual HRESULT STDMETHODCALLTYPE set_thumbDisabledImage(BSTR pVal/*[in]*/) = 0;
  // [5418] property min
  virtual HRESULT STDMETHODCALLTYPE get_min(float* pVal/*[out,retval]*/) = 0;
  // [5418] property min
  virtual HRESULT STDMETHODCALLTYPE set_min(float pVal/*[in]*/) = 0;
  // [5419] property max
  virtual HRESULT STDMETHODCALLTYPE get_max(float* pVal/*[out,retval]*/) = 0;
  // [5419] property max
  virtual HRESULT STDMETHODCALLTYPE set_max(float pVal/*[in]*/) = 0;
  // [5420] property value
  virtual HRESULT STDMETHODCALLTYPE get_value(float* pVal/*[out,retval]*/) = 0;
  // [5420] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(float pVal/*[in]*/) = 0;
  // [5421] property toolTip
  virtual HRESULT STDMETHODCALLTYPE get_toolTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [5421] property toolTip
  virtual HRESULT STDMETHODCALLTYPE set_toolTip(BSTR pVal/*[in]*/) = 0;
  // [5422] property cursor
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5422] property cursor
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0;
  // [5423] property borderSize
  virtual HRESULT STDMETHODCALLTYPE get_borderSize(int* pVal/*[out,retval]*/) = 0;
  // [5423] property borderSize
  virtual HRESULT STDMETHODCALLTYPE set_borderSize(int pVal/*[in]*/) = 0;
  // [5424] property foregroundHoverImage
  virtual HRESULT STDMETHODCALLTYPE get_foregroundHoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5424] property foregroundHoverImage
  virtual HRESULT STDMETHODCALLTYPE set_foregroundHoverImage(BSTR pVal/*[in]*/) = 0;
  // [5425] property foregroundValue
  virtual HRESULT STDMETHODCALLTYPE get_foregroundProgress(float* pVal/*[out,retval]*/) = 0;
  // [5425] property foregroundValue
  virtual HRESULT STDMETHODCALLTYPE set_foregroundProgress(float pVal/*[in]*/) = 0;
  // [5426] property useForegroundValue
  virtual HRESULT STDMETHODCALLTYPE get_useForegroundProgress(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5426] property useForegroundValue
  virtual HRESULT STDMETHODCALLTYPE set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_direction(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_direction((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_slide(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_slide((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_tiled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_tiled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundEndColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundEndColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundEndColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundEndColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_transparencyColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundHoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundHoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_thumbImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_thumbImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_thumbHoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_thumbHoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_thumbDownImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_thumbDownImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_thumbDisabledImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_thumbDisabledImage((BSTR*)&pVal));
    return pVal;
  }

  float __fastcall get_min(void)
  {
    float pVal;
    OLECHECK(this->get_min((float*)&pVal));
    return pVal;
  }

  float __fastcall get_max(void)
  {
    float pVal;
    OLECHECK(this->get_max((float*)&pVal));
    return pVal;
  }

  float __fastcall get_value(void)
  {
    float pVal;
    OLECHECK(this->get_value((float*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }

  int __fastcall get_borderSize(void)
  {
    int pVal;
    OLECHECK(this->get_borderSize((int*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundHoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundHoverImage((BSTR*)&pVal));
    return pVal;
  }

  float __fastcall get_foregroundProgress(void)
  {
    float pVal;
    OLECHECK(this->get_foregroundProgress((float*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_useForegroundProgress(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_useForegroundProgress((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            direction = {read = get_direction, write = set_direction};
  __property   VARIANT_BOOL    slide = {read = get_slide, write = set_slide};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            foregroundEndColor = {read = get_foregroundEndColor, write = set_foregroundEndColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundEndColor = {read = get_backgroundEndColor, write = set_backgroundEndColor};
  __property   BSTR            disabledColor = {read = get_disabledColor, write = set_disabledColor};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            foregroundImage = {read = get_foregroundImage, write = set_foregroundImage};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   BSTR            backgroundHoverImage = {read = get_backgroundHoverImage, write = set_backgroundHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            thumbImage = {read = get_thumbImage, write = set_thumbImage};
  __property   BSTR            thumbHoverImage = {read = get_thumbHoverImage, write = set_thumbHoverImage};
  __property   BSTR            thumbDownImage = {read = get_thumbDownImage, write = set_thumbDownImage};
  __property   BSTR            thumbDisabledImage = {read = get_thumbDisabledImage, write = set_thumbDisabledImage};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   int             borderSize = {read = get_borderSize, write = set_borderSize};
  __property   BSTR            foregroundHoverImage = {read = get_foregroundHoverImage, write = set_foregroundHoverImage};
  __property   float           foregroundProgress = {read = get_foregroundProgress, write = set_foregroundProgress};
  __property   VARIANT_BOOL    useForegroundProgress = {read = get_useForegroundProgress, write = set_useForegroundProgress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPVideoCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {A85C0477-714C-4A06-B9F6-7C8CA38B45DC}
// *********************************************************************//
interface IWMPVideoCtrlEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall onvideostart()
  {
    _TDispID _dispid(/* onvideostart */ DISPID(5720));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onvideoend()
  {
    _TDispID _dispid(/* onvideoend */ DISPID(5721));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IWMPVideoCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61CECF10-FC3A-11D2-A1CD-005004602752}
// *********************************************************************//
interface IWMPVideoCtrl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_windowless(VARIANT_BOOL pbClipped/*[in]*/) = 0; // [5700]
  virtual HRESULT STDMETHODCALLTYPE get_windowless(VARIANT_BOOL* pbClipped/*[out,retval]*/) = 0; // [5700]
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pbstrCursor/*[in]*/) = 0; // [5701]
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pbstrCursor/*[out,retval]*/) = 0; // [5701]
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pbstrColor/*[in]*/) = 0; // [5702]
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/) = 0; // [5702]
  virtual HRESULT STDMETHODCALLTYPE set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/) = 0; // [5704]
  virtual HRESULT STDMETHODCALLTYPE get_maintainAspectRatio(VARIANT_BOOL* pbMaintainAspectRatio/*[out,retval]*/) = 0; // [5704]
  virtual HRESULT STDMETHODCALLTYPE set_toolTip(BSTR bstrToolTip/*[in]*/) = 0; // [5706]
  virtual HRESULT STDMETHODCALLTYPE get_toolTip(BSTR* bstrToolTip/*[out,retval]*/) = 0; // [5706]
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0; // [5707]
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/) = 0; // [5707]
  virtual HRESULT STDMETHODCALLTYPE set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/) = 0; // [5703]
  virtual HRESULT STDMETHODCALLTYPE get_shrinkToFit(VARIANT_BOOL* pbShrinkToFit/*[out,retval]*/) = 0; // [5703]
  virtual HRESULT STDMETHODCALLTYPE set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/) = 0; // [5708]
  virtual HRESULT STDMETHODCALLTYPE get_stretchToFit(VARIANT_BOOL* pbStretchToFit/*[out,retval]*/) = 0; // [5708]
  virtual HRESULT STDMETHODCALLTYPE set_zoom(long pzoom/*[in]*/) = 0; // [5709]
  virtual HRESULT STDMETHODCALLTYPE get_zoom(long* pzoom/*[out,retval]*/) = 0; // [5709]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_windowless(void)
  {
    VARIANT_BOOL pbClipped;
    OLECHECK(this->get_windowless((VARIANT_BOOL*)&pbClipped));
    return pbClipped;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pbstrCursor = 0;
    OLECHECK(this->get_cursor((BSTR*)&pbstrCursor));
    return pbstrCursor;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  VARIANT_BOOL __fastcall get_maintainAspectRatio(void)
  {
    VARIANT_BOOL pbMaintainAspectRatio;
    OLECHECK(this->get_maintainAspectRatio((VARIANT_BOOL*)&pbMaintainAspectRatio));
    return pbMaintainAspectRatio;
  }

  BSTR __fastcall get_toolTip(void)
  {
    BSTR bstrToolTip = 0;
    OLECHECK(this->get_toolTip((BSTR*)&bstrToolTip));
    return bstrToolTip;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_shrinkToFit(void)
  {
    VARIANT_BOOL pbShrinkToFit;
    OLECHECK(this->get_shrinkToFit((VARIANT_BOOL*)&pbShrinkToFit));
    return pbShrinkToFit;
  }

  VARIANT_BOOL __fastcall get_stretchToFit(void)
  {
    VARIANT_BOOL pbStretchToFit;
    OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbStretchToFit));
    return pbStretchToFit;
  }

  long __fastcall get_zoom(void)
  {
    long pzoom;
    OLECHECK(this->get_zoom((long*)&pzoom));
    return pzoom;
  }


  __property   VARIANT_BOOL    windowless = {read = get_windowless, write = set_windowless};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   VARIANT_BOOL    maintainAspectRatio = {read = get_maintainAspectRatio, write = set_maintainAspectRatio};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    shrinkToFit = {read = get_shrinkToFit, write = set_shrinkToFit};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   long            zoom = {read = get_zoom, write = set_zoom};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPEffectsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769}
// *********************************************************************//
interface IWMPEffectsCtrl  : public IDispatch
{
public:
  // [5500] property windowed
  virtual HRESULT STDMETHODCALLTYPE get_windowed(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5500] property windowed
  virtual HRESULT STDMETHODCALLTYPE set_windowed(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5501] property allowAll
  virtual HRESULT STDMETHODCALLTYPE get_allowAll(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5501] property allowAll
  virtual HRESULT STDMETHODCALLTYPE set_allowAll(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5507] property currentEffectType
  virtual HRESULT STDMETHODCALLTYPE set_currentEffectType(BSTR pVal/*[in]*/) = 0;
  // [5507] property currentEffectType
  virtual HRESULT STDMETHODCALLTYPE get_currentEffectType(BSTR* pVal/*[out,retval]*/) = 0;
  // [5506] property currentEffectTitle
  virtual HRESULT STDMETHODCALLTYPE get_currentEffectTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5502] method next
  virtual HRESULT STDMETHODCALLTYPE next(void) = 0;
  // [5503] method previous
  virtual HRESULT STDMETHODCALLTYPE previous(void) = 0;
  // [5504] method settings
  virtual HRESULT STDMETHODCALLTYPE settings(void) = 0;
  // [5505] property currentEffect
  virtual HRESULT STDMETHODCALLTYPE get_currentEffect(LPDISPATCH* p/*[out,retval]*/) = 0;
  // [5505] property currentEffect
  virtual HRESULT STDMETHODCALLTYPE set_currentEffect(LPDISPATCH p/*[in]*/) = 0;
  // [5509] method nextEffect
  virtual HRESULT STDMETHODCALLTYPE nextEffect(void) = 0;
  // [5510] method previousEffect
  virtual HRESULT STDMETHODCALLTYPE previousEffect(void) = 0;
  // [5511] method nextPreset
  virtual HRESULT STDMETHODCALLTYPE nextPreset(void) = 0;
  // [5512] method previousPreset
  virtual HRESULT STDMETHODCALLTYPE previousPreset(void) = 0;
  // [5513] property currentPreset
  virtual HRESULT STDMETHODCALLTYPE get_currentPreset(long* pVal/*[out,retval]*/) = 0;
  // [5513] property currentPreset
  virtual HRESULT STDMETHODCALLTYPE set_currentPreset(long pVal/*[in]*/) = 0;
  // [5514] property currentPresetTitle
  virtual HRESULT STDMETHODCALLTYPE get_currentPresetTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5515] property currentEffectPresetCount
  virtual HRESULT STDMETHODCALLTYPE get_currentEffectPresetCount(long* pVal/*[out,retval]*/) = 0;
  // [5516] property fullScreen
  virtual HRESULT STDMETHODCALLTYPE get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [5516] property fullScreen
  virtual HRESULT STDMETHODCALLTYPE set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/) = 0;
  // [5517] property canGoFullScreen
  virtual HRESULT STDMETHODCALLTYPE get_effectCanGoFullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [5518] property canGoFullScreen
  virtual HRESULT STDMETHODCALLTYPE get_effectHasPropertyPage(VARIANT_BOOL* pbPropertyPage/*[out,retval]*/) = 0;
  // [5520] property effectCount
  virtual HRESULT STDMETHODCALLTYPE get_effectCount(long* pVal/*[out,retval]*/) = 0;
  // [5521] property effectTitle(index)
  virtual HRESULT STDMETHODCALLTYPE get_effectTitle(long index/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [5522] property effectType(index)
  virtual HRESULT STDMETHODCALLTYPE get_effectType(long index/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_windowed(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_windowed((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_allowAll(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_allowAll((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentEffectType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentEffectType((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentEffectTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentEffectTitle((BSTR*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_currentEffect(void)
  {
    LPDISPATCH p;
    OLECHECK(this->get_currentEffect((LPDISPATCH*)&p));
    return p;
  }

  long __fastcall get_currentPreset(void)
  {
    long pVal;
    OLECHECK(this->get_currentPreset((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentPresetTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentPresetTitle((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_currentEffectPresetCount(void)
  {
    long pVal;
    OLECHECK(this->get_currentEffectPresetCount((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_effectCanGoFullScreen(void)
  {
    VARIANT_BOOL pbFullScreen;
    OLECHECK(this->get_effectCanGoFullScreen((VARIANT_BOOL*)&pbFullScreen));
    return pbFullScreen;
  }

  VARIANT_BOOL __fastcall get_effectHasPropertyPage(void)
  {
    VARIANT_BOOL pbPropertyPage;
    OLECHECK(this->get_effectHasPropertyPage((VARIANT_BOOL*)&pbPropertyPage));
    return pbPropertyPage;
  }

  long __fastcall get_effectCount(void)
  {
    long pVal;
    OLECHECK(this->get_effectCount((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_effectTitle(long index/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_effectTitle(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_effectType(long index/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_effectType(index, (BSTR*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    windowed = {read = get_windowed, write = set_windowed};
  __property   VARIANT_BOOL    allowAll = {read = get_allowAll, write = set_allowAll};
  __property   BSTR            currentEffectType = {read = get_currentEffectType, write = set_currentEffectType};
  __property   BSTR            currentEffectTitle = {read = get_currentEffectTitle};
  __property   LPDISPATCH      currentEffect = {read = get_currentEffect, write = set_currentEffect};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            currentEffectPresetCount = {read = get_currentEffectPresetCount};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    effectCanGoFullScreen = {read = get_effectCanGoFullScreen};
  __property   VARIANT_BOOL    effectHasPropertyPage = {read = get_effectHasPropertyPage};
  __property   long            effectCount = {read = get_effectCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPEqualizerSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2BD3716F-A914-49FB-8655-996D5F495498}
// *********************************************************************//
interface IWMPEqualizerSettingsCtrl  : public IDispatch
{
public:
  // [5800] property bypass
  virtual HRESULT STDMETHODCALLTYPE get_bypass(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5800] property bypass
  virtual HRESULT STDMETHODCALLTYPE set_bypass(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5804] property gainLevel1
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel1(float* pflLevel/*[out,retval]*/) = 0;
  // [5804] property gainLevel1
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel1(float pflLevel/*[in]*/) = 0;
  // [5805] property gainLevel2
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel2(float* pflLevel/*[out,retval]*/) = 0;
  // [5805] property gainLevel2
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel2(float pflLevel/*[in]*/) = 0;
  // [5806] property gainLevel3
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel3(float* pflLevel/*[out,retval]*/) = 0;
  // [5806] property gainLevel3
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel3(float pflLevel/*[in]*/) = 0;
  // [5807] property gainLevel4
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel4(float* pflLevel/*[out,retval]*/) = 0;
  // [5807] property gainLevel4
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel4(float pflLevel/*[in]*/) = 0;
  // [5808] property gainLevel5
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel5(float* pflLevel/*[out,retval]*/) = 0;
  // [5808] property gainLevel5
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel5(float pflLevel/*[in]*/) = 0;
  // [5809] property gainLevel6
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel6(float* pflLevel/*[out,retval]*/) = 0;
  // [5809] property gainLevel6
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel6(float pflLevel/*[in]*/) = 0;
  // [5810] property gainLevel7
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel7(float* pflLevel/*[out,retval]*/) = 0;
  // [5810] property gainLevel7
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel7(float pflLevel/*[in]*/) = 0;
  // [5811] property gainLevel8
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel8(float* pflLevel/*[out,retval]*/) = 0;
  // [5811] property gainLevel8
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel8(float pflLevel/*[in]*/) = 0;
  // [5812] property gainLevel9
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel9(float* pflLevel/*[out,retval]*/) = 0;
  // [5812] property gainLevel9
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel9(float pflLevel/*[in]*/) = 0;
  // [5813] property gainLevel10
  virtual HRESULT STDMETHODCALLTYPE get_gainLevel10(float* pflLevel/*[out,retval]*/) = 0;
  // [5813] property gainLevel10
  virtual HRESULT STDMETHODCALLTYPE set_gainLevel10(float pflLevel/*[in]*/) = 0;
  // [5815] property gainLevels
  virtual HRESULT STDMETHODCALLTYPE get_gainLevels(long iIndex/*[in]*/, 
                                                   float* pflLevel/*[out,retval]*/) = 0;
  // [5815] property gainLevels
  virtual HRESULT STDMETHODCALLTYPE set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/) = 0;
  // [5814] method reset
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_bands(long* pbands/*[out,retval]*/) = 0; // [5801]
  // [5816] method nextPreset
  virtual HRESULT STDMETHODCALLTYPE nextPreset(void) = 0;
  // [5817] method previousPreset
  virtual HRESULT STDMETHODCALLTYPE previousPreset(void) = 0;
  // [5818] property currentPreset
  virtual HRESULT STDMETHODCALLTYPE get_currentPreset(long* pVal/*[out,retval]*/) = 0;
  // [5818] property currentPreset
  virtual HRESULT STDMETHODCALLTYPE set_currentPreset(long pVal/*[in]*/) = 0;
  // [5819] property currentPresetTitle
  virtual HRESULT STDMETHODCALLTYPE get_currentPresetTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5820] property presetCount
  virtual HRESULT STDMETHODCALLTYPE get_presetCount(long* pVal/*[out,retval]*/) = 0;
  // [5821] property enhancedAudio
  virtual HRESULT STDMETHODCALLTYPE get_enhancedAudio(VARIANT_BOOL* pfVal/*[out,retval]*/) = 0;
  // [5821] property enhancedAudio
  virtual HRESULT STDMETHODCALLTYPE set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/) = 0;
  // [5822] property speakerSize
  virtual HRESULT STDMETHODCALLTYPE get_speakerSize(long* plVal/*[out,retval]*/) = 0;
  // [5822] property speakerSize
  virtual HRESULT STDMETHODCALLTYPE set_speakerSize(long plVal/*[in]*/) = 0;
  // [5823] property currentSpeakerName
  virtual HRESULT STDMETHODCALLTYPE get_currentSpeakerName(BSTR* pbstrName/*[out,retval]*/) = 0;
  // [5824] property truBassLevel
  virtual HRESULT STDMETHODCALLTYPE get_truBassLevel(long* plTruBassLevel/*[out,retval]*/) = 0;
  // [5824] property truBassLevel
  virtual HRESULT STDMETHODCALLTYPE set_truBassLevel(long plTruBassLevel/*[in]*/) = 0;
  // [5825] property wowLevel
  virtual HRESULT STDMETHODCALLTYPE get_wowLevel(long* plWowLevel/*[out,retval]*/) = 0;
  // [5825] property wowLevel
  virtual HRESULT STDMETHODCALLTYPE set_wowLevel(long plWowLevel/*[in]*/) = 0;
  // [5827] property splineTension
  virtual HRESULT STDMETHODCALLTYPE get_splineTension(float* pflSplineTension/*[out,retval]*/) = 0;
  // [5827] property splineTension
  virtual HRESULT STDMETHODCALLTYPE set_splineTension(float pflSplineTension/*[in]*/) = 0;
  // [5826] property enableSplineTension
  virtual HRESULT STDMETHODCALLTYPE get_enableSplineTension(VARIANT_BOOL* pfEnableSplineTension/*[out,retval]*/) = 0;
  // [5826] property enableSplineTension
  virtual HRESULT STDMETHODCALLTYPE set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/) = 0;
  // [5828] property presetTitle
  virtual HRESULT STDMETHODCALLTYPE get_presetTitle(long iIndex/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [5829] property normalization
  virtual HRESULT STDMETHODCALLTYPE get_normalization(VARIANT_BOOL* pfVal/*[out,retval]*/) = 0;
  // [5829] property normalization
  virtual HRESULT STDMETHODCALLTYPE set_normalization(VARIANT_BOOL pfVal/*[in]*/) = 0;
  // [5830] property normalizationAverage
  virtual HRESULT STDMETHODCALLTYPE get_normalizationAverage(float* pflAverage/*[out,retval]*/) = 0;
  // [5831] property normalizationPeak
  virtual HRESULT STDMETHODCALLTYPE get_normalizationPeak(float* pflPeak/*[out,retval]*/) = 0;
  // [5832] property crossFade
  virtual HRESULT STDMETHODCALLTYPE get_crossFade(VARIANT_BOOL* pfVal/*[out,retval]*/) = 0;
  // [5832] property crossFade
  virtual HRESULT STDMETHODCALLTYPE set_crossFade(VARIANT_BOOL pfVal/*[in]*/) = 0;
  // [5833] property crossFadeWindow
  virtual HRESULT STDMETHODCALLTYPE get_crossFadeWindow(long* plWindow/*[out,retval]*/) = 0;
  // [5833] property crossFadeWindow
  virtual HRESULT STDMETHODCALLTYPE set_crossFadeWindow(long plWindow/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_bypass(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_bypass((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  float __fastcall get_gainLevel1(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel1((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel2(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel2((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel3(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel3((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel4(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel4((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel5(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel5((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel6(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel6((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel7(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel7((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel8(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel8((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel9(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel9((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevel10(void)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevel10((float*)&pflLevel));
    return pflLevel;
  }

  float __fastcall get_gainLevels(long iIndex/*[in]*/)
  {
    float pflLevel;
    OLECHECK(this->get_gainLevels(iIndex, (float*)&pflLevel));
    return pflLevel;
  }

  long __fastcall get_bands(void)
  {
    long pbands;
    OLECHECK(this->get_bands((long*)&pbands));
    return pbands;
  }

  long __fastcall get_currentPreset(void)
  {
    long pVal;
    OLECHECK(this->get_currentPreset((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currentPresetTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currentPresetTitle((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_presetCount(void)
  {
    long pVal;
    OLECHECK(this->get_presetCount((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_enhancedAudio(void)
  {
    VARIANT_BOOL pfVal;
    OLECHECK(this->get_enhancedAudio((VARIANT_BOOL*)&pfVal));
    return pfVal;
  }

  long __fastcall get_speakerSize(void)
  {
    long plVal;
    OLECHECK(this->get_speakerSize((long*)&plVal));
    return plVal;
  }

  BSTR __fastcall get_currentSpeakerName(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_currentSpeakerName((BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_truBassLevel(void)
  {
    long plTruBassLevel;
    OLECHECK(this->get_truBassLevel((long*)&plTruBassLevel));
    return plTruBassLevel;
  }

  long __fastcall get_wowLevel(void)
  {
    long plWowLevel;
    OLECHECK(this->get_wowLevel((long*)&plWowLevel));
    return plWowLevel;
  }

  float __fastcall get_splineTension(void)
  {
    float pflSplineTension;
    OLECHECK(this->get_splineTension((float*)&pflSplineTension));
    return pflSplineTension;
  }

  VARIANT_BOOL __fastcall get_enableSplineTension(void)
  {
    VARIANT_BOOL pfEnableSplineTension;
    OLECHECK(this->get_enableSplineTension((VARIANT_BOOL*)&pfEnableSplineTension));
    return pfEnableSplineTension;
  }

  BSTR __fastcall get_presetTitle(long iIndex/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_presetTitle(iIndex, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_normalization(void)
  {
    VARIANT_BOOL pfVal;
    OLECHECK(this->get_normalization((VARIANT_BOOL*)&pfVal));
    return pfVal;
  }

  float __fastcall get_normalizationAverage(void)
  {
    float pflAverage;
    OLECHECK(this->get_normalizationAverage((float*)&pflAverage));
    return pflAverage;
  }

  float __fastcall get_normalizationPeak(void)
  {
    float pflPeak;
    OLECHECK(this->get_normalizationPeak((float*)&pflPeak));
    return pflPeak;
  }

  VARIANT_BOOL __fastcall get_crossFade(void)
  {
    VARIANT_BOOL pfVal;
    OLECHECK(this->get_crossFade((VARIANT_BOOL*)&pfVal));
    return pfVal;
  }

  long __fastcall get_crossFadeWindow(void)
  {
    long plWindow;
    OLECHECK(this->get_crossFadeWindow((long*)&plWindow));
    return plWindow;
  }


  __property   VARIANT_BOOL    bypass = {read = get_bypass, write = set_bypass};
  __property   float           gainLevel1 = {read = get_gainLevel1, write = set_gainLevel1};
  __property   float           gainLevel2 = {read = get_gainLevel2, write = set_gainLevel2};
  __property   float           gainLevel3 = {read = get_gainLevel3, write = set_gainLevel3};
  __property   float           gainLevel4 = {read = get_gainLevel4, write = set_gainLevel4};
  __property   float           gainLevel5 = {read = get_gainLevel5, write = set_gainLevel5};
  __property   float           gainLevel6 = {read = get_gainLevel6, write = set_gainLevel6};
  __property   float           gainLevel7 = {read = get_gainLevel7, write = set_gainLevel7};
  __property   float           gainLevel8 = {read = get_gainLevel8, write = set_gainLevel8};
  __property   float           gainLevel9 = {read = get_gainLevel9, write = set_gainLevel9};
  __property   float           gainLevel10 = {read = get_gainLevel10, write = set_gainLevel10};
  __property   long            bands = {read = get_bands};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            presetCount = {read = get_presetCount};
  __property   VARIANT_BOOL    enhancedAudio = {read = get_enhancedAudio, write = set_enhancedAudio};
  __property   long            speakerSize = {read = get_speakerSize, write = set_speakerSize};
  __property   BSTR            currentSpeakerName = {read = get_currentSpeakerName};
  __property   long            truBassLevel = {read = get_truBassLevel, write = set_truBassLevel};
  __property   long            wowLevel = {read = get_wowLevel, write = set_wowLevel};
  __property   float           splineTension = {read = get_splineTension, write = set_splineTension};
  __property   VARIANT_BOOL    enableSplineTension = {read = get_enableSplineTension, write = set_enableSplineTension};
  __property   VARIANT_BOOL    normalization = {read = get_normalization, write = set_normalization};
  __property   float           normalizationAverage = {read = get_normalizationAverage};
  __property   float           normalizationPeak = {read = get_normalizationPeak};
  __property   VARIANT_BOOL    crossFade = {read = get_crossFade, write = set_crossFade};
  __property   long            crossFadeWindow = {read = get_crossFadeWindow, write = set_crossFadeWindow};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPVideoSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6}
// *********************************************************************//
interface IWMPVideoSettingsCtrl  : public IDispatch
{
public:
  // [5900] property brightness
  virtual HRESULT STDMETHODCALLTYPE get_brightness(long* pVal/*[out,retval]*/) = 0;
  // [5900] property brightness
  virtual HRESULT STDMETHODCALLTYPE set_brightness(long pVal/*[in]*/) = 0;
  // [5901] property contrast
  virtual HRESULT STDMETHODCALLTYPE get_contrast(long* pVal/*[out,retval]*/) = 0;
  // [5901] property contrast
  virtual HRESULT STDMETHODCALLTYPE set_contrast(long pVal/*[in]*/) = 0;
  // [5902] property hue
  virtual HRESULT STDMETHODCALLTYPE get_hue(long* pVal/*[out,retval]*/) = 0;
  // [5902] property hue
  virtual HRESULT STDMETHODCALLTYPE set_hue(long pVal/*[in]*/) = 0;
  // [5903] property saturation
  virtual HRESULT STDMETHODCALLTYPE get_saturation(long* pVal/*[out,retval]*/) = 0;
  // [5903] property saturation
  virtual HRESULT STDMETHODCALLTYPE set_saturation(long pVal/*[in]*/) = 0;
  // [5904] method reset
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_brightness(void)
  {
    long pVal;
    OLECHECK(this->get_brightness((long*)&pVal));
    return pVal;
  }

  long __fastcall get_contrast(void)
  {
    long pVal;
    OLECHECK(this->get_contrast((long*)&pVal));
    return pVal;
  }

  long __fastcall get_hue(void)
  {
    long pVal;
    OLECHECK(this->get_hue((long*)&pVal));
    return pVal;
  }

  long __fastcall get_saturation(void)
  {
    long pVal;
    OLECHECK(this->get_saturation((long*)&pVal));
    return pVal;
  }


  __property   long            brightness = {read = get_brightness, write = set_brightness};
  __property   long            contrast = {read = get_contrast, write = set_contrast};
  __property   long            hue = {read = get_hue, write = set_hue};
  __property   long            saturation = {read = get_saturation, write = set_saturation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPLibraryTreeCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B738FCAE-F089-45DF-AED6-034B9E7DB632}
// *********************************************************************//
interface IWMPLibraryTreeCtrl  : public IDispatch
{
public:
  // [6401] property dropDownVisible
  virtual HRESULT STDMETHODCALLTYPE get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6401] property dropDownVisible
  virtual HRESULT STDMETHODCALLTYPE set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6402] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [6402] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pVal/*[in]*/) = 0;
  // [6403] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [6403] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [6404] property fontSize
  virtual HRESULT STDMETHODCALLTYPE get_fontSize(long* pVal/*[out,retval]*/) = 0;
  // [6404] property fontSize
  virtual HRESULT STDMETHODCALLTYPE set_fontSize(long pVal/*[in]*/) = 0;
  // [6405] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE get_fontStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [6405] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE set_fontStyle(BSTR pVal/*[in]*/) = 0;
  // [6406] property fontFace
  virtual HRESULT STDMETHODCALLTYPE get_fontFace(BSTR* pVal/*[out,retval]*/) = 0;
  // [6406] property fontFace
  virtual HRESULT STDMETHODCALLTYPE set_fontFace(BSTR pVal/*[in]*/) = 0;
  // [6407] property filter
  virtual HRESULT STDMETHODCALLTYPE get_filter(BSTR* pVal/*[out,retval]*/) = 0;
  // [6407] property filter
  virtual HRESULT STDMETHODCALLTYPE set_filter(BSTR pVal/*[in]*/) = 0;
  // [6408] property expandState
  virtual HRESULT STDMETHODCALLTYPE get_expandState(BSTR* pVal/*[out,retval]*/) = 0;
  // [6408] property expandState
  virtual HRESULT STDMETHODCALLTYPE set_expandState(BSTR pVal/*[in]*/) = 0;
  // [6409] property playlist
  virtual HRESULT STDMETHODCALLTYPE get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [6409] property playlist
  virtual HRESULT STDMETHODCALLTYPE set_Playlist(Wmplib_tlb::IWMPPlaylist* ppPlaylist/*[in]*/) = 0;
  // [6410] property selectedPlaylist
  virtual HRESULT STDMETHODCALLTYPE get_selectedPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/) = 0;
  // [6411] property selectedMedia
  virtual HRESULT STDMETHODCALLTYPE get_selectedMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_dropDownVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_dropDownVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_fontSize(void)
  {
    long pVal;
    OLECHECK(this->get_fontSize((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontStyle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontFace(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontFace((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_filter(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_filter((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_expandState(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_expandState((BSTR*)&pVal));
    return pVal;
  }

  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void)
  {
    Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
    OLECHECK(this->get_Playlist(&ppPlaylist));
    return ppPlaylist;
  }

  HRESULT __fastcall  set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/)
  {
    return set_Playlist((Wmplib_tlb::IWMPPlaylist*)ppPlaylist/*[in]*/);
  }

  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_selectedPlaylist(void)
  {
    Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
    OLECHECK(this->get_selectedPlaylist(&ppPlaylist));
    return ppPlaylist;
  }

  Wmplib_tlb::IWMPMediaPtr __fastcall get_selectedMedia(void)
  {
    Wmplib_tlb::IWMPMediaPtr ppMedia;
    OLECHECK(this->get_selectedMedia(&ppMedia));
    return ppMedia;
  }


  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            filter = {read = get_filter, write = set_filter};
  __property   BSTR            expandState = {read = get_expandState, write = set_expandState};
  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   Wmplib_tlb::IWMPPlaylistPtr selectedPlaylist = {read = get_selectedPlaylist};
  __property   Wmplib_tlb::IWMPMediaPtr selectedMedia = {read = get_selectedMedia};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPEditCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70E1217C-C617-4CFD-BD8A-69CA2043E70B}
// *********************************************************************//
interface IWMPEditCtrl  : public IDispatch
{
public:
  // [0] property value
  virtual HRESULT STDMETHODCALLTYPE get_value(BSTR* pVal/*[out,retval]*/) = 0;
  // [0] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(BSTR pVal/*[in]*/) = 0;
  // [6000] property border
  virtual HRESULT STDMETHODCALLTYPE get_border(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6000] property border
  virtual HRESULT STDMETHODCALLTYPE set_border(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6001] property justification
  virtual HRESULT STDMETHODCALLTYPE get_justification(BSTR* pVal/*[out,retval]*/) = 0;
  // [6001] property justification
  virtual HRESULT STDMETHODCALLTYPE set_justification(BSTR pVal/*[in]*/) = 0;
  // [6002] property editStyle
  virtual HRESULT STDMETHODCALLTYPE get_editStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [6002] property editStyle
  virtual HRESULT STDMETHODCALLTYPE set_editStyle(BSTR pVal/*[in]*/) = 0;
  // [6003] property wordWrap
  virtual HRESULT STDMETHODCALLTYPE get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6003] property wordWrap
  virtual HRESULT STDMETHODCALLTYPE set_wordWrap(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6004] property readOnly
  virtual HRESULT STDMETHODCALLTYPE get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6004] property readOnly
  virtual HRESULT STDMETHODCALLTYPE set_readOnly(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6005] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [6005] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pVal/*[in]*/) = 0;
  // [6006] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [6006] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [6007] property fontSize
  virtual HRESULT STDMETHODCALLTYPE get_fontSize(long* pVal/*[out,retval]*/) = 0;
  // [6007] property fontSize
  virtual HRESULT STDMETHODCALLTYPE set_fontSize(long pVal/*[in]*/) = 0;
  // [6008] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE get_fontStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [6008] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE set_fontStyle(BSTR pVal/*[in]*/) = 0;
  // [6009] property fontFace
  virtual HRESULT STDMETHODCALLTYPE get_fontFace(BSTR* pVal/*[out,retval]*/) = 0;
  // [6009] property fontFace
  virtual HRESULT STDMETHODCALLTYPE set_fontFace(BSTR pVal/*[in]*/) = 0;
  // [6010] property textLimit
  virtual HRESULT STDMETHODCALLTYPE get_textLimit(long* pVal/*[out,retval]*/) = 0;
  // [6010] property textLimit
  virtual HRESULT STDMETHODCALLTYPE set_textLimit(long pVal/*[in]*/) = 0;
  // [6011] property lineCount
  virtual HRESULT STDMETHODCALLTYPE get_lineCount(long* pVal/*[out,retval]*/) = 0;
  // [6012] method getLine
  virtual HRESULT STDMETHODCALLTYPE getLine(long nIndex/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [6013] method getSelectionStart
  virtual HRESULT STDMETHODCALLTYPE getSelectionStart(long* pnStart/*[out,retval]*/) = 0;
  // [6014] method getSelectionEnd
  virtual HRESULT STDMETHODCALLTYPE getSelectionEnd(long* pnEnd/*[out,retval]*/) = 0;
  // [6015] method setSelection
  virtual HRESULT STDMETHODCALLTYPE setSelection(long nStart/*[in]*/, long nEnd/*[in]*/) = 0;
  // [6016] method replaceSelection
  virtual HRESULT STDMETHODCALLTYPE replaceSelection(BSTR newVal/*[in]*/) = 0;
  // [6017] method getLineIndex
  virtual HRESULT STDMETHODCALLTYPE getLineIndex(long nIndex/*[in]*/, 
                                                 long* pnPosition/*[out,retval]*/) = 0;
  // [6018] method getLineFromChar
  virtual HRESULT STDMETHODCALLTYPE getLineFromChar(long nPosition/*[in]*/, 
                                                    long* pnLine/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_value(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_value((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_border(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_border((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_justification(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_justification((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_editStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_editStyle((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_wordWrap(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_wordWrap((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_readOnly(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_readOnly((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_fontSize(void)
  {
    long pVal;
    OLECHECK(this->get_fontSize((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontStyle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontFace(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontFace((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_textLimit(void)
  {
    long pVal;
    OLECHECK(this->get_textLimit((long*)&pVal));
    return pVal;
  }

  long __fastcall get_lineCount(void)
  {
    long pVal;
    OLECHECK(this->get_lineCount((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall getLine(long nIndex/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->getLine(nIndex, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall getSelectionStart(void)
  {
    long pnStart;
    OLECHECK(this->getSelectionStart((long*)&pnStart));
    return pnStart;
  }

  long __fastcall getSelectionEnd(void)
  {
    long pnEnd;
    OLECHECK(this->getSelectionEnd((long*)&pnEnd));
    return pnEnd;
  }

  long __fastcall getLineIndex(long nIndex/*[in]*/)
  {
    long pnPosition;
    OLECHECK(this->getLineIndex(nIndex, (long*)&pnPosition));
    return pnPosition;
  }

  long __fastcall getLineFromChar(long nPosition/*[in]*/)
  {
    long pnLine;
    OLECHECK(this->getLineFromChar(nPosition, (long*)&pnLine));
    return pnLine;
  }


  __property   BSTR            value = {read = get_value, write = set_value};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   BSTR            editStyle = {read = get_editStyle, write = set_editStyle};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            textLimit = {read = get_textLimit, write = set_textLimit};
  __property   long            lineCount = {read = get_lineCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPPluginUIHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D0AD945-289E-45C5-A9C6-F301F0152108}
// *********************************************************************//
interface IWMPPluginUIHost  : public IDispatch
{
public:
  // [6201] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [6201] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [6202] property objectID
  virtual HRESULT STDMETHODCALLTYPE get_objectID(BSTR* pVal/*[out,retval]*/) = 0;
  // [6202] property objectID
  virtual HRESULT STDMETHODCALLTYPE set_objectID(BSTR pVal/*[in]*/) = 0;
  // [6203] method getProperty
  virtual HRESULT STDMETHODCALLTYPE getProperty(BSTR bstrName/*[in]*/, VARIANT* pVal/*[out,retval]*/) = 0;
  // [6204] method setProperty
  virtual HRESULT STDMETHODCALLTYPE setProperty(BSTR bstrName/*[in]*/, VARIANT newVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_objectID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_objectID((BSTR*)&pVal));
    return pVal;
  }

  VARIANT __fastcall getProperty(BSTR bstrName/*[in]*/)
  {
    VARIANT pVal;
    OLECHECK(this->getProperty(bstrName, (VARIANT*)&pVal));
    return pVal;
  }


  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            objectID = {read = get_objectID, write = set_objectID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {158A7ADC-33DA-4039-A553-BDDBBE389F5C}
// *********************************************************************//
interface IWMPMenuCtrl  : public IDispatch
{
public:
  // [6301] method deleteAllItems
  virtual HRESULT STDMETHODCALLTYPE deleteAllItems(void) = 0;
  // [6302] method appendItem
  virtual HRESULT STDMETHODCALLTYPE appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/) = 0;
  // [6303] method appendSeparator
  virtual HRESULT STDMETHODCALLTYPE appendSeparator(void) = 0;
  // [6304] property enableItem
  virtual HRESULT STDMETHODCALLTYPE enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/) = 0;
  // [6305] property checkItem
  virtual HRESULT STDMETHODCALLTYPE checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/) = 0;
  // [6306] property checkRadioItem
  virtual HRESULT STDMETHODCALLTYPE checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/) = 0;
  // [6307] property showFlags
  virtual HRESULT STDMETHODCALLTYPE get_showFlags(long* pVal/*[out,retval]*/) = 0;
  // [6307] property showFlags
  virtual HRESULT STDMETHODCALLTYPE set_showFlags(long pVal/*[in]*/) = 0;
  // [6308] method show
  virtual HRESULT STDMETHODCALLTYPE show(long* pnID/*[out,retval]*/) = 0;
  // [6309] method showEx
  virtual HRESULT STDMETHODCALLTYPE showEx(long nID/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_showFlags(void)
  {
    long pVal;
    OLECHECK(this->get_showFlags((long*)&pVal));
    return pVal;
  }

  long __fastcall show(void)
  {
    long pnID;
    OLECHECK(this->show((long*)&pnID));
    return pnID;
  }


  __property   long            showFlags = {read = get_showFlags, write = set_showFlags};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPAutoMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875}
// *********************************************************************//
interface IWMPAutoMenuCtrl  : public IDispatch
{
public:
  // [6501] method show
  virtual HRESULT STDMETHODCALLTYPE show(BSTR newVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPRegionalButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B1-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
interface IWMPRegionalButtonCtrl  : public IDispatch
{
public:
  // [5300] property Image
  virtual HRESULT STDMETHODCALLTYPE get_image(BSTR* pVal/*[out,retval]*/) = 0;
  // [5300] property Image
  virtual HRESULT STDMETHODCALLTYPE set_image(BSTR pVal/*[in]*/) = 0;
  // [5301] property HoverImage
  virtual HRESULT STDMETHODCALLTYPE get_hoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5301] property HoverImage
  virtual HRESULT STDMETHODCALLTYPE set_hoverImage(BSTR pVal/*[in]*/) = 0;
  // [5302] property DownImage
  virtual HRESULT STDMETHODCALLTYPE get_downImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5302] property DownImage
  virtual HRESULT STDMETHODCALLTYPE set_downImage(BSTR pVal/*[in]*/) = 0;
  // [5303] property HoverDownImage
  virtual HRESULT STDMETHODCALLTYPE get_hoverDownImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5303] property HoverDownImage
  virtual HRESULT STDMETHODCALLTYPE set_hoverDownImage(BSTR pVal/*[in]*/) = 0;
  // [5317] property hoverHoverImage
  virtual HRESULT STDMETHODCALLTYPE get_hoverHoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5317] property hoverHoverImage
  virtual HRESULT STDMETHODCALLTYPE set_hoverHoverImage(BSTR pVal/*[in]*/) = 0;
  // [5304] property DisabledImage
  virtual HRESULT STDMETHODCALLTYPE get_disabledImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5304] property DisabledImage
  virtual HRESULT STDMETHODCALLTYPE set_disabledImage(BSTR pVal/*[in]*/) = 0;
  // [5305] property MappingImage
  virtual HRESULT STDMETHODCALLTYPE get_mappingImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5305] property MappingImage
  virtual HRESULT STDMETHODCALLTYPE set_mappingImage(BSTR pVal/*[in]*/) = 0;
  // [5306] property TransparencyColor
  virtual HRESULT STDMETHODCALLTYPE get_transparencyColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5306] property TransparencyColor
  virtual HRESULT STDMETHODCALLTYPE set_transparencyColor(BSTR pVal/*[in]*/) = 0;
  // [5308] property Cursor
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5308] property Cursor
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0;
  // [5309] property ShowBackground
  virtual HRESULT STDMETHODCALLTYPE get_showBackground(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5309] property ShowBackground
  virtual HRESULT STDMETHODCALLTYPE set_showBackground(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5310] property Radio
  virtual HRESULT STDMETHODCALLTYPE get_radio(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5310] property Radio
  virtual HRESULT STDMETHODCALLTYPE set_radio(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5311] property ButtonCount
  virtual HRESULT STDMETHODCALLTYPE get_buttonCount(long* nButtons/*[out,retval]*/) = 0;
  // [5312] method CreateButton
  virtual HRESULT STDMETHODCALLTYPE createButton(LPDISPATCH* pButton/*[out,retval]*/) = 0;
  // [5313] method GetButton
  virtual HRESULT STDMETHODCALLTYPE getButton(long nButton/*[in]*/, 
                                              LPDISPATCH* pButton/*[out,retval]*/) = 0;
  // [5314] method Click
  virtual HRESULT STDMETHODCALLTYPE _Click(long nButton/*[in]*/) = 0;
  // [5315] property hueShift
  virtual HRESULT STDMETHODCALLTYPE get_hueShift(float* pVal/*[out,retval]*/) = 0;
  // [5315] property hueShift
  virtual HRESULT STDMETHODCALLTYPE set_hueShift(float pVal/*[in]*/) = 0;
  // [5316] property saturation
  virtual HRESULT STDMETHODCALLTYPE get_saturation(float* pVal/*[out,retval]*/) = 0;
  // [5316] property saturation
  virtual HRESULT STDMETHODCALLTYPE set_saturation(float pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_image(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_image((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverDownImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverDownImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverHoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverHoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_mappingImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_mappingImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_transparencyColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showBackground(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showBackground((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_radio(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_radio((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_buttonCount(void)
  {
    long nButtons;
    OLECHECK(this->get_buttonCount((long*)&nButtons));
    return nButtons;
  }

  LPDISPATCH __fastcall createButton(void)
  {
    LPDISPATCH pButton;
    OLECHECK(this->createButton((LPDISPATCH*)&pButton));
    return pButton;
  }

  LPDISPATCH __fastcall getButton(long nButton/*[in]*/)
  {
    LPDISPATCH pButton;
    OLECHECK(this->getButton(nButton, (LPDISPATCH*)&pButton));
    return pButton;
  }

  float __fastcall get_hueShift(void)
  {
    float pVal;
    OLECHECK(this->get_hueShift((float*)&pVal));
    return pVal;
  }

  float __fastcall get_saturation(void)
  {
    float pVal;
    OLECHECK(this->get_saturation((float*)&pVal));
    return pVal;
  }


  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   BSTR            hoverHoverImage = {read = get_hoverHoverImage, write = set_hoverHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            mappingImage = {read = get_mappingImage, write = set_mappingImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    showBackground = {read = get_showBackground, write = set_showBackground};
  __property   VARIANT_BOOL    radio = {read = get_radio, write = set_radio};
  __property   long            buttonCount = {read = get_buttonCount};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPRegionalButtonEvents
// Flags:     (4096) Dispatchable
// GUID:      {50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE}
// *********************************************************************//
interface IWMPRegionalButtonEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall onblur()
  {
    _TDispID _dispid(/* onblur */ DISPID(5360));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onfocus()
  {
    _TDispID _dispid(/* onfocus */ DISPID(5361));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onclick()
  {
    _TDispID _dispid(/* onclick */ DISPID(5362));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall ondblclick()
  {
    _TDispID _dispid(/* ondblclick */ DISPID(5363));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onmousedown()
  {
    _TDispID _dispid(/* onmousedown */ DISPID(5364));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onmouseup()
  {
    _TDispID _dispid(/* onmouseup */ DISPID(5365));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onmousemove()
  {
    _TDispID _dispid(/* onmousemove */ DISPID(5366));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onmouseover()
  {
    _TDispID _dispid(/* onmouseover */ DISPID(5367));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onmouseout()
  {
    _TDispID _dispid(/* onmouseout */ DISPID(5368));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onkeypress()
  {
    _TDispID _dispid(/* onkeypress */ DISPID(5369));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onkeydown()
  {
    _TDispID _dispid(/* onkeydown */ DISPID(5370));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onkeyup()
  {
    _TDispID _dispid(/* onkeyup */ DISPID(5371));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IWMPRegionalButton
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B2-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
interface IWMPRegionalButton  : public IDispatch
{
public:
  // [5330] property UpToolTip
  virtual HRESULT STDMETHODCALLTYPE get_upToolTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [5330] property UpToolTip
  virtual HRESULT STDMETHODCALLTYPE set_upToolTip(BSTR pVal/*[in]*/) = 0;
  // [5331] property DownToolTip
  virtual HRESULT STDMETHODCALLTYPE get_downToolTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [5331] property DownToolTip
  virtual HRESULT STDMETHODCALLTYPE set_downToolTip(BSTR pVal/*[in]*/) = 0;
  // [5332] property MappingColor
  virtual HRESULT STDMETHODCALLTYPE get_mappingColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5332] property MappingColor
  virtual HRESULT STDMETHODCALLTYPE set_mappingColor(BSTR pVal/*[in]*/) = 0;
  // [5333] property Enabled
  virtual HRESULT STDMETHODCALLTYPE get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5333] property Enabled
  virtual HRESULT STDMETHODCALLTYPE set_enabled(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5339] property Sticky
  virtual HRESULT STDMETHODCALLTYPE get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5339] property Sticky
  virtual HRESULT STDMETHODCALLTYPE set_sticky(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5340] property Down
  virtual HRESULT STDMETHODCALLTYPE get_down(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5340] property Down
  virtual HRESULT STDMETHODCALLTYPE set_down(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5341] property Index
  virtual HRESULT STDMETHODCALLTYPE get_index(long* pVal/*[out,retval]*/) = 0;
  // [5342] property TabStop
  virtual HRESULT STDMETHODCALLTYPE get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5342] property TabStop
  virtual HRESULT STDMETHODCALLTYPE set_tabStop(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5343] property Cursor
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5343] property Cursor
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0;
  // [5344] method Click
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0;
  // [5345] property AccName
  virtual HRESULT STDMETHODCALLTYPE get_accName(BSTR* pszName/*[out,retval]*/) = 0;
  // [5345] property AccName
  virtual HRESULT STDMETHODCALLTYPE set_accName(BSTR pszName/*[in]*/) = 0;
  // [5346] property AccDescription
  virtual HRESULT STDMETHODCALLTYPE get_accDescription(BSTR* pszDescription/*[out,retval]*/) = 0;
  // [5346] property AccDescription
  virtual HRESULT STDMETHODCALLTYPE set_accDescription(BSTR pszDescription/*[in]*/) = 0;
  // [5347] property accKeyboardShortcut
  virtual HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/) = 0;
  // [5347] property accKeyboardShortcut
  virtual HRESULT STDMETHODCALLTYPE set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_upToolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_upToolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downToolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downToolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_mappingColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_mappingColor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_enabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_enabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_sticky(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_sticky((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_down(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_down((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_index(void)
  {
    long pVal;
    OLECHECK(this->get_index((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_tabStop(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_tabStop((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_accName(void)
  {
    BSTR pszName = 0;
    OLECHECK(this->get_accName((BSTR*)&pszName));
    return pszName;
  }

  BSTR __fastcall get_accDescription(void)
  {
    BSTR pszDescription = 0;
    OLECHECK(this->get_accDescription((BSTR*)&pszDescription));
    return pszDescription;
  }

  BSTR __fastcall get_accKeyboardShortcut(void)
  {
    BSTR pszShortcut = 0;
    OLECHECK(this->get_accKeyboardShortcut((BSTR*)&pszShortcut));
    return pszShortcut;
  }


  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            mappingColor = {read = get_mappingColor, write = set_mappingColor};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   long            index = {read = get_index};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCustomSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {95F45AA4-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
interface IWMPCustomSliderCtrlEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall ondragbegin()
  {
    _TDispID _dispid(/* ondragbegin */ DISPID(5020));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall ondragend()
  {
    _TDispID _dispid(/* ondragend */ DISPID(5021));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onpositionchange()
  {
    _TDispID _dispid(/* onpositionchange */ DISPID(5022));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IWMPCustomSlider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {95F45AA2-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
interface IWMPCustomSlider  : public IDispatch
{
public:
  // [5009] property cursor
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5009] property cursor
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0;
  // [5005] property min
  virtual HRESULT STDMETHODCALLTYPE get_min(float* pVal/*[out,retval]*/) = 0;
  // [5005] property min
  virtual HRESULT STDMETHODCALLTYPE set_min(float pVal/*[in]*/) = 0;
  // [5006] property max
  virtual HRESULT STDMETHODCALLTYPE get_max(float* pVal/*[out,retval]*/) = 0;
  // [5006] property max
  virtual HRESULT STDMETHODCALLTYPE set_max(float pVal/*[in]*/) = 0;
  // [5010] property value
  virtual HRESULT STDMETHODCALLTYPE get_value(float* pVal/*[out,retval]*/) = 0;
  // [5010] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(float pVal/*[in]*/) = 0;
  // [5011] property toolTip
  virtual HRESULT STDMETHODCALLTYPE get_toolTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [5011] property toolTip
  virtual HRESULT STDMETHODCALLTYPE set_toolTip(BSTR pVal/*[in]*/) = 0;
  // [5002] property positionImage
  virtual HRESULT STDMETHODCALLTYPE get_positionImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5002] property positionImage
  virtual HRESULT STDMETHODCALLTYPE set_positionImage(BSTR pVal/*[in]*/) = 0;
  // [5001] property image
  virtual HRESULT STDMETHODCALLTYPE get_image(BSTR* pVal/*[out,retval]*/) = 0;
  // [5001] property image
  virtual HRESULT STDMETHODCALLTYPE set_image(BSTR pVal/*[in]*/) = 0;
  // [5003] property hoverImage
  virtual HRESULT STDMETHODCALLTYPE get_hoverImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5003] property hoverImage
  virtual HRESULT STDMETHODCALLTYPE set_hoverImage(BSTR pVal/*[in]*/) = 0;
  // [5004] property disabledImage
  virtual HRESULT STDMETHODCALLTYPE get_disabledImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5004] property disabledImage
  virtual HRESULT STDMETHODCALLTYPE set_disabledImage(BSTR pVal/*[in]*/) = 0;
  // [5012] property downImage
  virtual HRESULT STDMETHODCALLTYPE get_downImage(BSTR* pVal/*[out,retval]*/) = 0;
  // [5012] property downImage
  virtual HRESULT STDMETHODCALLTYPE set_downImage(BSTR pVal/*[in]*/) = 0;
  // [5008] property transparancyColor
  virtual HRESULT STDMETHODCALLTYPE get_transparencyColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5008] property transparancyColor
  virtual HRESULT STDMETHODCALLTYPE set_transparencyColor(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }

  float __fastcall get_min(void)
  {
    float pVal;
    OLECHECK(this->get_min((float*)&pVal));
    return pVal;
  }

  float __fastcall get_max(void)
  {
    float pVal;
    OLECHECK(this->get_max((float*)&pVal));
    return pVal;
  }

  float __fastcall get_value(void)
  {
    float pVal;
    OLECHECK(this->get_value((float*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_positionImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_positionImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_image(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_image((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_downImage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_downImage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_transparencyColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            positionImage = {read = get_positionImage, write = set_positionImage};
  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPTextCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {237DAC8E-0E32-11D3-A2E2-00C04F79F88E}
// *********************************************************************//
interface IWMPTextCtrl  : public IDispatch
{
public:
  // [5201] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5201] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [5206] property fontFace
  virtual HRESULT STDMETHODCALLTYPE get_fontFace(BSTR* pVal/*[out,retval]*/) = 0;
  // [5206] property fontFace
  virtual HRESULT STDMETHODCALLTYPE set_fontFace(BSTR pVal/*[in]*/) = 0;
  // [5207] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE get_fontStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5207] property fontStyle
  virtual HRESULT STDMETHODCALLTYPE set_fontStyle(BSTR pVal/*[in]*/) = 0;
  // [5208] property fontSize
  virtual HRESULT STDMETHODCALLTYPE get_fontSize(long* pVal/*[out,retval]*/) = 0;
  // [5208] property fontSize
  virtual HRESULT STDMETHODCALLTYPE set_fontSize(long pVal/*[in]*/) = 0;
  // [5209] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE get_foregroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5209] property foregroundColor
  virtual HRESULT STDMETHODCALLTYPE set_foregroundColor(BSTR pVal/*[in]*/) = 0;
  // [5210] property hoverBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_hoverBackgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5210] property hoverBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_hoverBackgroundColor(BSTR pVal/*[in]*/) = 0;
  // [5211] property hoverForegroundColor
  virtual HRESULT STDMETHODCALLTYPE get_hoverForegroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5211] property hoverForegroundColor
  virtual HRESULT STDMETHODCALLTYPE set_hoverForegroundColor(BSTR pVal/*[in]*/) = 0;
  // [5212] property hoverFontStyle
  virtual HRESULT STDMETHODCALLTYPE get_hoverFontStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5212] property hoverFontStyle
  virtual HRESULT STDMETHODCALLTYPE set_hoverFontStyle(BSTR pVal/*[in]*/) = 0;
  // [5213] property value
  virtual HRESULT STDMETHODCALLTYPE get_value(BSTR* pVal/*[out,retval]*/) = 0;
  // [5213] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(BSTR pVal/*[in]*/) = 0;
  // [5214] property toolTip
  virtual HRESULT STDMETHODCALLTYPE get_toolTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [5214] property toolTip
  virtual HRESULT STDMETHODCALLTYPE set_toolTip(BSTR pVal/*[in]*/) = 0;
  // [5215] property disabledFontStyle
  virtual HRESULT STDMETHODCALLTYPE get_disabledFontStyle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5215] property disabledFontStyle
  virtual HRESULT STDMETHODCALLTYPE set_disabledFontStyle(BSTR pVal/*[in]*/) = 0;
  // [5216] property disabledForegroundColor
  virtual HRESULT STDMETHODCALLTYPE get_disabledForegroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5216] property disabledForegroundColor
  virtual HRESULT STDMETHODCALLTYPE set_disabledForegroundColor(BSTR pVal/*[in]*/) = 0;
  // [5217] property disabledBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_disabledBackgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5217] property disabledBackgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_disabledBackgroundColor(BSTR pVal/*[in]*/) = 0;
  // [5221] property fontSmoothing
  virtual HRESULT STDMETHODCALLTYPE get_fontSmoothing(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5221] property fontSmoothing
  virtual HRESULT STDMETHODCALLTYPE set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5222] property justification
  virtual HRESULT STDMETHODCALLTYPE get_justification(BSTR* pVal/*[out,retval]*/) = 0;
  // [5222] property justification
  virtual HRESULT STDMETHODCALLTYPE set_justification(BSTR pVal/*[in]*/) = 0;
  // [5223] property wordWrap
  virtual HRESULT STDMETHODCALLTYPE get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5223] property wordWrap
  virtual HRESULT STDMETHODCALLTYPE set_wordWrap(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5224] property cursor
  virtual HRESULT STDMETHODCALLTYPE get_cursor(BSTR* pVal/*[out,retval]*/) = 0;
  // [5224] property cursor
  virtual HRESULT STDMETHODCALLTYPE set_cursor(BSTR pVal/*[in]*/) = 0;
  // [5225] property scrolling
  virtual HRESULT STDMETHODCALLTYPE get_scrolling(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5225] property scrolling
  virtual HRESULT STDMETHODCALLTYPE set_scrolling(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5226] property scrollingDirection
  virtual HRESULT STDMETHODCALLTYPE get_scrollingDirection(BSTR* pVal/*[out,retval]*/) = 0;
  // [5226] property scrollingDirection
  virtual HRESULT STDMETHODCALLTYPE set_scrollingDirection(BSTR pVal/*[in]*/) = 0;
  // [5227] property scrollingDelay
  virtual HRESULT STDMETHODCALLTYPE get_scrollingDelay(int* pVal/*[out,retval]*/) = 0;
  // [5227] property scrollingDelay
  virtual HRESULT STDMETHODCALLTYPE set_scrollingDelay(int pVal/*[in]*/) = 0;
  // [5228] property scrollingAmount
  virtual HRESULT STDMETHODCALLTYPE get_scrollingAmount(int* pVal/*[out,retval]*/) = 0;
  // [5228] property scrollingAmount
  virtual HRESULT STDMETHODCALLTYPE set_scrollingAmount(int pVal/*[in]*/) = 0;
  // [5229] property textWidth
  virtual HRESULT STDMETHODCALLTYPE get_textWidth(int* pVal/*[out,retval]*/) = 0;
  // [5230] property onGlass
  virtual HRESULT STDMETHODCALLTYPE get_onGlass(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5230] property onGlass
  virtual HRESULT STDMETHODCALLTYPE set_onGlass(VARIANT_BOOL pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontFace(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontFace((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_fontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_fontStyle((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_fontSize(void)
  {
    long pVal;
    OLECHECK(this->get_fontSize((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_foregroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverBackgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverBackgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverForegroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverForegroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_hoverFontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_hoverFontStyle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_value(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_value((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_toolTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_toolTip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledFontStyle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledFontStyle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledForegroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledForegroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_disabledBackgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_disabledBackgroundColor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_fontSmoothing(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_fontSmoothing((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_justification(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_justification((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_wordWrap(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_wordWrap((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cursor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cursor((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_scrolling(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_scrolling((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_scrollingDirection(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_scrollingDirection((BSTR*)&pVal));
    return pVal;
  }

  int __fastcall get_scrollingDelay(void)
  {
    int pVal;
    OLECHECK(this->get_scrollingDelay((int*)&pVal));
    return pVal;
  }

  int __fastcall get_scrollingAmount(void)
  {
    int pVal;
    OLECHECK(this->get_scrollingAmount((int*)&pVal));
    return pVal;
  }

  int __fastcall get_textWidth(void)
  {
    int pVal;
    OLECHECK(this->get_textWidth((int*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_onGlass(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_onGlass((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            hoverBackgroundColor = {read = get_hoverBackgroundColor, write = set_hoverBackgroundColor};
  __property   BSTR            hoverForegroundColor = {read = get_hoverForegroundColor, write = set_hoverForegroundColor};
  __property   BSTR            hoverFontStyle = {read = get_hoverFontStyle, write = set_hoverFontStyle};
  __property   BSTR            value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            disabledFontStyle = {read = get_disabledFontStyle, write = set_disabledFontStyle};
  __property   BSTR            disabledForegroundColor = {read = get_disabledForegroundColor, write = set_disabledForegroundColor};
  __property   BSTR            disabledBackgroundColor = {read = get_disabledBackgroundColor, write = set_disabledBackgroundColor};
  __property   VARIANT_BOOL    fontSmoothing = {read = get_fontSmoothing, write = set_fontSmoothing};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    scrolling = {read = get_scrolling, write = set_scrolling};
  __property   BSTR            scrollingDirection = {read = get_scrollingDirection, write = set_scrollingDirection};
  __property   int             scrollingDelay = {read = get_scrollingDelay, write = set_scrollingDelay};
  __property   int             scrollingAmount = {read = get_scrollingAmount, write = set_scrollingAmount};
  __property   int             textWidth = {read = get_textWidth};
  __property   VARIANT_BOOL    onGlass = {read = get_onGlass, write = set_onGlass};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITaskCntrCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {891EADB1-1C45-48B0-B704-49A888DA98C4}
// *********************************************************************//
interface ITaskCntrCtrl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CurrentContainer(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentContainer(LPUNKNOWN ppUnk/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_CurrentContainer(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get_CurrentContainer((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   LPUNKNOWN       CurrentContainer = {read = get_CurrentContainer, write = set_CurrentContainer};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WMPCoreEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D84CCA96-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
interface _WMPCoreEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OpenStateChange(long NewState/*[in]*/)
  {
    _TDispID _dispid(/* OpenStateChange */ DISPID(5001));
    TAutoArgs<1> _args;
    _args[1] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlayStateChange(long NewState/*[in]*/)
  {
    _TDispID _dispid(/* PlayStateChange */ DISPID(5101));
    TAutoArgs<1> _args;
    _args[1] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AudioLanguageChange(long LangID/*[in]*/)
  {
    _TDispID _dispid(/* AudioLanguageChange */ DISPID(5102));
    TAutoArgs<1> _args;
    _args[1] = LangID /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StatusChange()
  {
    _TDispID _dispid(/* StatusChange */ DISPID(5002));
    OleProcedure(_dispid);
  }

  void __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
  {
    _TDispID _dispid(/* ScriptCommand */ DISPID(5301));
    TAutoArgs<2> _args;
    _args[1] = scType /*[VT_BSTR:0]*/;
    _args[2] = Param /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall NewStream()
  {
    _TDispID _dispid(/* NewStream */ DISPID(5403));
    OleProcedure(_dispid);
  }

  void __fastcall Disconnect(long Result/*[in]*/)
  {
    _TDispID _dispid(/* Disconnect */ DISPID(5401));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Buffering(VARIANT_BOOL Start/*[in]*/)
  {
    _TDispID _dispid(/* Buffering */ DISPID(5402));
    TAutoArgs<1> _args;
    _args[1] = Start /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Error()
  {
    _TDispID _dispid(/* Error */ DISPID(5501));
    OleProcedure(_dispid);
  }

  void __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, BSTR Description/*[in]*/)
  {
    _TDispID _dispid(/* Warning */ DISPID(5601));
    TAutoArgs<3> _args;
    _args[1] = WarningType /*[VT_I4:0]*/;
    _args[2] = Param /*[VT_I4:0]*/;
    _args[3] = Description /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall EndOfStream(long Result/*[in]*/)
  {
    _TDispID _dispid(/* EndOfStream */ DISPID(5201));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
  {
    _TDispID _dispid(/* PositionChange */ DISPID(5202));
    TAutoArgs<2> _args;
    _args[1] = oldPosition /*[VT_R8:0]*/;
    _args[2] = newPosition /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MarkerHit(long MarkerNum/*[in]*/)
  {
    _TDispID _dispid(/* MarkerHit */ DISPID(5203));
    TAutoArgs<1> _args;
    _args[1] = MarkerNum /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DurationUnitChange(long NewDurationUnit/*[in]*/)
  {
    _TDispID _dispid(/* DurationUnitChange */ DISPID(5204));
    TAutoArgs<1> _args;
    _args[1] = NewDurationUnit /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CdromMediaChange(long CdromNum/*[in]*/)
  {
    _TDispID _dispid(/* CdromMediaChange */ DISPID(5701));
    TAutoArgs<1> _args;
    _args[1] = CdromNum /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                 Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistChange */ DISPID(5801));
    TAutoArgs<2> _args;
    _args[1] = Playlist /*[VT_DISPATCH:0]*/;
    _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
  {
    _TDispID _dispid(/* CurrentPlaylistChange */ DISPID(5804));
    TAutoArgs<1> _args;
    _args[1] = (int)change /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/)
  {
    _TDispID _dispid(/* CurrentPlaylistItemAvailable */ DISPID(5805));
    TAutoArgs<1> _args;
    _args[1] = bstrItemName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaChange(LPDISPATCH Item/*[in]*/)
  {
    _TDispID _dispid(/* MediaChange */ DISPID(5802));
    TAutoArgs<1> _args;
    _args[1] = Item /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/)
  {
    _TDispID _dispid(/* CurrentMediaItemAvailable */ DISPID(5803));
    TAutoArgs<1> _args;
    _args[1] = bstrItemName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* CurrentItemChange */ DISPID(5806));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionChange()
  {
    _TDispID _dispid(/* MediaCollectionChange */ DISPID(5807));
    OleProcedure(_dispid);
  }

  void __fastcall MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                      BSTR bstrAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringAdded */ DISPID(5808));
    TAutoArgs<2> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                        BSTR bstrAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringRemoved */ DISPID(5809));
    TAutoArgs<2> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                        BSTR bstrOldAttribVal/*[in]*/, 
                                                        BSTR bstrNewAttribVal/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionAttributeStringChanged */ DISPID(5820));
    TAutoArgs<3> _args;
    _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
    _args[2] = bstrOldAttribVal /*[VT_BSTR:0]*/;
    _args[3] = bstrNewAttribVal /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionChange()
  {
    _TDispID _dispid(/* PlaylistCollectionChange */ DISPID(5810));
    OleProcedure(_dispid);
  }

  void __fastcall PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistAdded */ DISPID(5811));
    TAutoArgs<1> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistRemoved */ DISPID(5812));
    TAutoArgs<1> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                         VARIANT_BOOL varfIsDeleted/*[in]*/)
  {
    _TDispID _dispid(/* PlaylistCollectionPlaylistSetAsDeleted */ DISPID(5818));
    TAutoArgs<2> _args;
    _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
    _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/)
  {
    _TDispID _dispid(/* ModeChange */ DISPID(5819));
    TAutoArgs<2> _args;
    _args[1] = ModeName /*[VT_BSTR:0]*/;
    _args[2] = NewValue /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaError(LPDISPATCH pMediaObject/*[in]*/)
  {
    _TDispID _dispid(/* MediaError */ DISPID(5821));
    TAutoArgs<1> _args;
    _args[1] = pMediaObject /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/)
  {
    _TDispID _dispid(/* OpenPlaylistSwitch */ DISPID(5823));
    TAutoArgs<1> _args;
    _args[1] = pItem /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DomainChange(BSTR strDomain/*[in]*/)
  {
    _TDispID _dispid(/* DomainChange */ DISPID(5822));
    TAutoArgs<1> _args;
    _args[1] = strDomain /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                         Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                         , long lCollectionIndex/*[in]*/)
  {
    _TDispID _dispid(/* StringCollectionChange */ DISPID(5824));
    TAutoArgs<3> _args;
    _args[1] = pdispStringCollection /*[VT_DISPATCH:0]*/;
    _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
    _args[3] = lCollectionIndex /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionMediaAdded */ DISPID(5825));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/)
  {
    _TDispID _dispid(/* MediaCollectionMediaRemoved */ DISPID(5826));
    TAutoArgs<1> _args;
    _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IWMPGraphEventHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6B550945-018F-11D3-B14A-00C04F79FAA6}
// *********************************************************************//
interface IWMPGraphEventHandler  : public IDispatch
{
public:
  // [8151] Notifies graph state changes
  virtual HRESULT STDMETHODCALLTYPE NotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                           long lGraphState/*[in]*/) = 0;
  // [8173] Notifies graph state changes asynchronously
  virtual HRESULT STDMETHODCALLTYPE AsyncNotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                long lGraphState/*[in]*/) = 0;
  // [8153] Notifies changes in playback rate
  virtual HRESULT STDMETHODCALLTYPE NotifyRateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     double dRate/*[in]*/) = 0;
  // [8157] Notifies the end of playback
  virtual HRESULT STDMETHODCALLTYPE NotifyPlaybackEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                      BSTR bstrQueuedUrl, 
                                                      Wmplib_tlb::ULONG_PTR dwCurrentContext) = 0;
  // [8156] Notifies the end of a stream
  virtual HRESULT STDMETHODCALLTYPE NotifyStreamEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8158] Notifies that a script command was encountered
  virtual HRESULT STDMETHODCALLTYPE NotifyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                        BSTR bstrCommand/*[in]*/, 
                                                        BSTR bstrParam/*[in]*/) = 0;
  // [8172] Notifies that a script command was encountered
  virtual HRESULT STDMETHODCALLTYPE NotifyEarlyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                             BSTR bstrCommand/*[in]*/, 
                                                             BSTR bstrParam/*[in]*/, 
                                                             double dTime/*[in]*/) = 0;
  // [8159] Notifies that a marker was encountered
  virtual HRESULT STDMETHODCALLTYPE NotifyMarkerHit(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                    long lMarker/*[in]*/) = 0;
  // [8160] Notifies that an error has occurred
  virtual HRESULT STDMETHODCALLTYPE NotifyGraphError(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     long lErrMajor/*[in]*/, long lErrMinor/*[in]*/, 
                                                     long lCondition/*[in]*/, BSTR bstrInfo/*[in]*/, 
                                                     LPUNKNOWN punkGraphData/*[in]*/) = 0;
  // [8161] Spawns the Acquire Credentials dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyAcquireCredentials(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                             BSTR bstrRealm/*[in]*/, 
                                                             BSTR bstrSite/*[in]*/, 
                                                             BSTR bstrUser/*[in,out]*/, 
                                                             BSTR bstrPassword/*[in,out]*/, 
                                                             unsigned_long* pdwFlags/*[in,out]*/, 
                                                             VARIANT_BOOL* pfCancel/*[out]*/) = 0;
  // [8178] Spawns the untrusted license dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyUntrustedLicense(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                           BSTR bstrURL/*[in]*/, 
                                                           VARIANT_BOOL* pfCancel/*[out]*/) = 0;
  // [8162] Notifies a communication with the license dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyLicenseDialog(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                        BSTR bstrURL/*[in]*/, 
                                                        BSTR bstrContent/*[in]*/, 
                                                        unsigned_char* pPostData/*[in]*/, 
                                                        unsigned_long dwPostDataSize/*[in]*/, 
                                                        long lResult/*[in]*/) = 0;
  // [8163] Notifies a communication with the Individualization dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyNeedsIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                 VARIANT_BOOL* pfResult/*[out]*/) = 0;
  // [8165] Notifies that new metadata is avail
  virtual HRESULT STDMETHODCALLTYPE NotifyNewMetadata(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8166] Notifies that new capabilities are avail
  virtual HRESULT STDMETHODCALLTYPE NotifyNewMediaCaps(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8167] Notifies that the graph's connection to the media has been lost.
  virtual HRESULT STDMETHODCALLTYPE NotifyDisconnect(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     long lResult/*[in]*/) = 0;
  // [8168] Notifies that the graph save operation started/stopped.
  virtual HRESULT STDMETHODCALLTYPE NotifySave(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                               long fStarted/*[in]*/, long lResult/*[in]*/) = 0;
  // [8169] Notifies if the close call needs to be delayed.
  virtual HRESULT STDMETHODCALLTYPE NotifyDelayClose(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     VARIANT_BOOL fDelay/*[in]*/) = 0;
  // [8170] Notifies when domain changes, parental control and region needs to be handled.
  virtual HRESULT STDMETHODCALLTYPE NotifyDVD(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              long lEventCode/*[in]*/, long lParam1/*[in]*/, 
                                              long lParam2/*[in]*/) = 0;
  // [8171] Requests a callback into the graph on the apps thread
  virtual HRESULT STDMETHODCALLTYPE NotifyRequestAppThreadAction(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                 unsigned_long dwAction/*[in]*/) = 0;
  // [8174] Notifies that a prerolled graph is ready to play with no more buffering
  virtual HRESULT STDMETHODCALLTYPE NotifyPrerollReady(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8177] Notifies core that our DirectShow filters have new icons to display
  virtual HRESULT STDMETHODCALLTYPE NotifyNewIcons(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8179] Notifies core that our step operation has completed
  virtual HRESULT STDMETHODCALLTYPE NotifyStepComplete(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;
  // [8180] Notifies core that our bitrate has changed
  virtual HRESULT STDMETHODCALLTYPE NotifyNewBitrate(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     unsigned_long dwBitrate/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE NotifyGraphCreationPreRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                 Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/, 
                                                                 Wmplib_tlb::ULONG_PTR punkCardeaEncConfig/*[in]*/, 
                                                                 Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/, 
                                                                 Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/) = 0; // [8181]
  virtual HRESULT STDMETHODCALLTYPE NotifyGraphCreationPostRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                  Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/, 
                                                                  Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/, 
                                                                  Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/) = 0; // [8182]
  // [8186] Signals a user event from the renderer
  virtual HRESULT STDMETHODCALLTYPE NotifyGraphUserEvent(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                         long EventCode/*[in]*/) = 0;
  // [8183] Notifies a communication with the Revocation dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyRevocation(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                     VARIANT_BOOL* pfResult/*[out]*/) = 0;
  // [8184] Notifies a communication with the Individualization dialog
  virtual HRESULT STDMETHODCALLTYPE NotifyNeedsWMGraphIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                                        Wmplib_tlb::ULONG_PTR phWnd/*[in]*/, 
                                                                        Wmplib_tlb::ULONG_PTR hIndivEvent/*[in]*/, 
                                                                        VARIANT_BOOL* pfCancel/*[out]*/, 
                                                                        VARIANT_BOOL* pfResult/*[out]*/) = 0;
  // [8185] Notifies core that the content requires fullscreen mode
  virtual HRESULT STDMETHODCALLTYPE NotifyNeedsFullscreen(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBattery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC}
// *********************************************************************//
interface IBattery  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_presetCount(long* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_preset(long nIndex/*[in]*/, 
                                               LPDISPATCH* ppDispatch/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_presetCount(void)
  {
    long pVal;
    OLECHECK(this->get_presetCount((long*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_preset(long nIndex/*[in]*/)
  {
    LPDISPATCH ppDispatch;
    OLECHECK(this->get_preset(nIndex, (LPDISPATCH*)&ppDispatch));
    return ppDispatch;
  }


  __property   long            presetCount = {read = get_presetCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBatteryPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22}
// *********************************************************************//
interface IBatteryPreset  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_title(BSTR* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_title(BSTR pVal/*[in]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_title(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_title((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            title = {read = get_title, write = set_title};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBatteryRandomPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F85E2D65-207D-48DB-84B1-915E1735DB17}
// *********************************************************************//
interface IBatteryRandomPreset  : public Wmplib_tlb::IBatteryPreset
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBatterySavedPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {876E7208-0172-4EBB-B08B-2E1D30DFE44C}
// *********************************************************************//
interface IBatterySavedPreset  : public Wmplib_tlb::IBatteryPreset
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBarsEffect
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33E9291A-F6A9-11D2-9435-00A0C92A2F2D}
// *********************************************************************//
interface IBarsEffect  : public IDispatch
{
public:
  // [8000] property displayMode
  virtual HRESULT STDMETHODCALLTYPE get_displayMode(long* pVal/*[out,retval]*/) = 0;
  // [8000] property displayMode
  virtual HRESULT STDMETHODCALLTYPE set_displayMode(long pVal/*[in]*/) = 0;
  // [8001] property showPeaks
  virtual HRESULT STDMETHODCALLTYPE get_showPeaks(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [8001] property showPeaks
  virtual HRESULT STDMETHODCALLTYPE set_showPeaks(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [8002] property peakHangTime
  virtual HRESULT STDMETHODCALLTYPE get_peakHangTime(long* pVal/*[out,retval]*/) = 0;
  // [8002] property peakHangTime
  virtual HRESULT STDMETHODCALLTYPE set_peakHangTime(long pVal/*[in]*/) = 0;
  // [8003] property peakFallbackAcceleration
  virtual HRESULT STDMETHODCALLTYPE get_peakFallbackAcceleration(float* pVal/*[out,retval]*/) = 0;
  // [8003] property peakFallbackAcceleration
  virtual HRESULT STDMETHODCALLTYPE set_peakFallbackAcceleration(float pVal/*[in]*/) = 0;
  // [8004] property peakFallbackSpeed
  virtual HRESULT STDMETHODCALLTYPE get_peakFallbackSpeed(float* pVal/*[out,retval]*/) = 0;
  // [8004] property peakFallbackSpeed
  virtual HRESULT STDMETHODCALLTYPE set_peakFallbackSpeed(float pVal/*[in]*/) = 0;
  // [8005] property levelFallbackAcceleration
  virtual HRESULT STDMETHODCALLTYPE get_levelFallbackAcceleration(float* pVal/*[out,retval]*/) = 0;
  // [8005] property levelFallbackAcceleration
  virtual HRESULT STDMETHODCALLTYPE set_levelFallbackAcceleration(float pVal/*[in]*/) = 0;
  // [8006] property levelFallbackSpeed
  virtual HRESULT STDMETHODCALLTYPE get_levelFallbackSpeed(float* pVal/*[out,retval]*/) = 0;
  // [8006] property levelFallbackSpeed
  virtual HRESULT STDMETHODCALLTYPE set_levelFallbackSpeed(float pVal/*[in]*/) = 0;
  // [8007] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_backgroundColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [8007] property backgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_backgroundColor(BSTR pVal/*[in]*/) = 0;
  // [8008] property levelColor
  virtual HRESULT STDMETHODCALLTYPE get_levelColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [8008] property levelColor
  virtual HRESULT STDMETHODCALLTYPE set_levelColor(BSTR pVal/*[in]*/) = 0;
  // [8009] property peakColor
  virtual HRESULT STDMETHODCALLTYPE get_peakColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [8009] property peakColor
  virtual HRESULT STDMETHODCALLTYPE set_peakColor(BSTR pVal/*[in]*/) = 0;
  // [8010] property horizontalSpacing
  virtual HRESULT STDMETHODCALLTYPE get_horizontalSpacing(long* pVal/*[out,retval]*/) = 0;
  // [8010] property horizontalSpacing
  virtual HRESULT STDMETHODCALLTYPE set_horizontalSpacing(long pVal/*[in]*/) = 0;
  // [8012] property levelWidth
  virtual HRESULT STDMETHODCALLTYPE get_levelWidth(long* pVal/*[out,retval]*/) = 0;
  // [8012] property levelWidth
  virtual HRESULT STDMETHODCALLTYPE set_levelWidth(long pVal/*[in]*/) = 0;
  // [8013] property levelScale
  virtual HRESULT STDMETHODCALLTYPE get_levelScale(float* pVal/*[out,retval]*/) = 0;
  // [8013] property levelScale
  virtual HRESULT STDMETHODCALLTYPE set_levelScale(float pVal/*[in]*/) = 0;
  // [8014] property fadeRate
  virtual HRESULT STDMETHODCALLTYPE get_fadeRate(long* pVal/*[out,retval]*/) = 0;
  // [8014] property fadeRate
  virtual HRESULT STDMETHODCALLTYPE set_fadeRate(long pVal/*[in]*/) = 0;
  // [8015] property fadeMode
  virtual HRESULT STDMETHODCALLTYPE get_fadeMode(long* pVal/*[out,retval]*/) = 0;
  // [8015] property fadeMode
  virtual HRESULT STDMETHODCALLTYPE set_fadeMode(long pVal/*[in]*/) = 0;
  // [8016] property transparent
  virtual HRESULT STDMETHODCALLTYPE get_transparent(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [8016] property transparent
  virtual HRESULT STDMETHODCALLTYPE set_transparent(VARIANT_BOOL pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_displayMode(void)
  {
    long pVal;
    OLECHECK(this->get_displayMode((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_showPeaks(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_showPeaks((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_peakHangTime(void)
  {
    long pVal;
    OLECHECK(this->get_peakHangTime((long*)&pVal));
    return pVal;
  }

  float __fastcall get_peakFallbackAcceleration(void)
  {
    float pVal;
    OLECHECK(this->get_peakFallbackAcceleration((float*)&pVal));
    return pVal;
  }

  float __fastcall get_peakFallbackSpeed(void)
  {
    float pVal;
    OLECHECK(this->get_peakFallbackSpeed((float*)&pVal));
    return pVal;
  }

  float __fastcall get_levelFallbackAcceleration(void)
  {
    float pVal;
    OLECHECK(this->get_levelFallbackAcceleration((float*)&pVal));
    return pVal;
  }

  float __fastcall get_levelFallbackSpeed(void)
  {
    float pVal;
    OLECHECK(this->get_levelFallbackSpeed((float*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_backgroundColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_levelColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_levelColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_peakColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_peakColor((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_horizontalSpacing(void)
  {
    long pVal;
    OLECHECK(this->get_horizontalSpacing((long*)&pVal));
    return pVal;
  }

  long __fastcall get_levelWidth(void)
  {
    long pVal;
    OLECHECK(this->get_levelWidth((long*)&pVal));
    return pVal;
  }

  float __fastcall get_levelScale(void)
  {
    float pVal;
    OLECHECK(this->get_levelScale((float*)&pVal));
    return pVal;
  }

  long __fastcall get_fadeRate(void)
  {
    long pVal;
    OLECHECK(this->get_fadeRate((long*)&pVal));
    return pVal;
  }

  long __fastcall get_fadeMode(void)
  {
    long pVal;
    OLECHECK(this->get_fadeMode((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_transparent(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_transparent((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   long            displayMode = {read = get_displayMode, write = set_displayMode};
  __property   VARIANT_BOOL    showPeaks = {read = get_showPeaks, write = set_showPeaks};
  __property   long            peakHangTime = {read = get_peakHangTime, write = set_peakHangTime};
  __property   float           peakFallbackAcceleration = {read = get_peakFallbackAcceleration, write = set_peakFallbackAcceleration};
  __property   float           peakFallbackSpeed = {read = get_peakFallbackSpeed, write = set_peakFallbackSpeed};
  __property   float           levelFallbackAcceleration = {read = get_levelFallbackAcceleration, write = set_levelFallbackAcceleration};
  __property   float           levelFallbackSpeed = {read = get_levelFallbackSpeed, write = set_levelFallbackSpeed};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            levelColor = {read = get_levelColor, write = set_levelColor};
  __property   BSTR            peakColor = {read = get_peakColor, write = set_peakColor};
  __property   long            horizontalSpacing = {read = get_horizontalSpacing, write = set_horizontalSpacing};
  __property   long            levelWidth = {read = get_levelWidth, write = set_levelWidth};
  __property   float           levelScale = {read = get_levelScale, write = set_levelScale};
  __property   long            fadeRate = {read = get_fadeRate, write = set_fadeRate};
  __property   long            fadeMode = {read = get_fadeMode, write = set_fadeMode};
  __property   VARIANT_BOOL    transparent = {read = get_transparent, write = set_transparent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84}
// *********************************************************************//
interface IWMPExternal  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_version(BSTR* pBSTR/*[out,retval]*/) = 0; // [10005]
  virtual HRESULT STDMETHODCALLTYPE get_appColorLight(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10012]
  virtual HRESULT STDMETHODCALLTYPE set_OnColorChange(LPDISPATCH Param1/*[in]*/) = 0; // [10018]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_version(void)
  {
    BSTR pBSTR = 0;
    OLECHECK(this->get_version((BSTR*)&pBSTR));
    return pBSTR;
  }

  BSTR __fastcall get_appColorLight(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorLight((BSTR*)&pbstrColor));
    return pbstrColor;
  }


  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPExternalColors
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D10CCDFF-472D-498C-B5FE-3630E5405E0A}
// *********************************************************************//
interface IWMPExternalColors  : public Wmplib_tlb::IWMPExternal
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10013]
  virtual HRESULT STDMETHODCALLTYPE get_appColorDark(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10014]
  virtual HRESULT STDMETHODCALLTYPE get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10015]
  virtual HRESULT STDMETHODCALLTYPE get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10016]
  virtual HRESULT STDMETHODCALLTYPE get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/) = 0; // [10017]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_appColorMedium(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorMedium((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_appColorDark(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorDark((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_appColorButtonHighlight(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorButtonHighlight((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_appColorButtonShadow(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorButtonShadow((BSTR*)&pbstrColor));
    return pbstrColor;
  }

  BSTR __fastcall get_appColorButtonHoverFace(void)
  {
    BSTR pbstrColor = 0;
    OLECHECK(this->get_appColorButtonHoverFace((BSTR*)&pbstrColor));
    return pbstrColor;
  }


  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSubscriptionServiceLimited
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54DF358E-CF38-4010-99F1-F44B0E9000E5}
// *********************************************************************//
interface IWMPSubscriptionServiceLimited  : public Wmplib_tlb::IWMPExternalColors
{
public:
  virtual HRESULT STDMETHODCALLTYPE NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, 
                                                        BSTR bstrTaskPane/*[in]*/, 
                                                        BSTR bstrParams/*[in]*/) = 0; // [10026]
  virtual HRESULT STDMETHODCALLTYPE set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/) = 0; // [10027]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/) = 0; // [10027]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SelectedTaskPane(void)
  {
    BSTR bstrTaskPane = 0;
    OLECHECK(this->get_SelectedTaskPane((BSTR*)&bstrTaskPane));
    return bstrTaskPane;
  }


  __property   BSTR            SelectedTaskPane = {read = get_SelectedTaskPane, write = set_SelectedTaskPane};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSubscriptionServiceExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E922378-EE70-4CEB-BBAB-CE7CE4A04816}
// *********************************************************************//
interface IWMPSubscriptionServiceExternal  : public Wmplib_tlb::IWMPSubscriptionServiceLimited
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DownloadManager(Wmplib_tlb::IWMPDownloadManager** ppDownloadMgr/*[out,retval]*/) = 0; // [10009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPDownloadManagerPtr __fastcall get_DownloadManager(void)
  {
    Wmplib_tlb::IWMPDownloadManagerPtr ppDownloadMgr;
    OLECHECK(this->get_DownloadManager(&ppDownloadMgr));
    return ppDownloadMgr;
  }


  __property   Wmplib_tlb::IWMPDownloadManagerPtr DownloadManager = {read = get_DownloadManager};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDownloadManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D}
// *********************************************************************//
interface IWMPDownloadManager  : public IDispatch
{
public:
  // [1151] Returns a specific download collection
  virtual HRESULT STDMETHODCALLTYPE getDownloadCollection(long lCollectionId/*[in]*/, 
                                                          Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/) = 0;
  // [1152] Creates a download collection
  virtual HRESULT STDMETHODCALLTYPE createDownloadCollection(Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Wmplib_tlb::IWMPDownloadCollection* __fastcall getDownloadCollection(long lCollectionId/*[in]*/)
  {
    Wmplib_tlb::IWMPDownloadCollection* ppCollection = 0;
    OLECHECK(this->getDownloadCollection(lCollectionId, (Wmplib_tlb::IWMPDownloadCollection**)&ppCollection));
    return ppCollection;
  }

  Wmplib_tlb::IWMPDownloadCollection* __fastcall createDownloadCollection(void)
  {
    Wmplib_tlb::IWMPDownloadCollection* ppCollection = 0;
    OLECHECK(this->createDownloadCollection((Wmplib_tlb::IWMPDownloadCollection**)&ppCollection));
    return ppCollection;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDownloadCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A319C7F-85F9-436C-B88E-82FD88000E1C}
// *********************************************************************//
interface IWMPDownloadCollection  : public IDispatch
{
public:
  // [1201] Returns the unique identifier of the collection
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* plId/*[out,retval]*/) = 0;
  // [1202] Returns the number of pending downloads
  virtual HRESULT STDMETHODCALLTYPE get_count(long* plCount/*[out,retval]*/) = 0;
  // [1203] Returns a pending download object
  virtual HRESULT STDMETHODCALLTYPE Item(long lItem/*[in]*/, 
                                         Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/) = 0;
  // [1204] Queues a download
  virtual HRESULT STDMETHODCALLTYPE startDownload(BSTR bstrSourceURL/*[in]*/, BSTR bstrType/*[in]*/, 
                                                  Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/) = 0;
  // [1205] Remove a download from the collection. Cancel if in progress.
  virtual HRESULT STDMETHODCALLTYPE removeItem(long lItem/*[in]*/) = 0;
  // [1206] Clear the download collection
  virtual HRESULT STDMETHODCALLTYPE clear(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long plId;
    OLECHECK(this->get_ID((long*)&plId));
    return plId;
  }

  long __fastcall get_count(void)
  {
    long plCount;
    OLECHECK(this->get_count((long*)&plCount));
    return plCount;
  }

  Wmplib_tlb::IWMPDownloadItem2* __fastcall Item(long lItem/*[in]*/)
  {
    Wmplib_tlb::IWMPDownloadItem2* ppDownload = 0;
    OLECHECK(this->Item(lItem, (Wmplib_tlb::IWMPDownloadItem2**)&ppDownload));
    return ppDownload;
  }

  Wmplib_tlb::IWMPDownloadItem2* __fastcall startDownload(BSTR bstrSourceURL/*[in]*/, 
                                                          BSTR bstrType/*[in]*/)
  {
    Wmplib_tlb::IWMPDownloadItem2* ppDownload = 0;
    OLECHECK(this->startDownload(bstrSourceURL, bstrType, (Wmplib_tlb::IWMPDownloadItem2**)&ppDownload));
    return ppDownload;
  }


  __property   long            ID = {read = get_ID};
  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDownloadItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9470E8E-3F6B-46A9-A0A9-452815C34297}
// *********************************************************************//
interface IWMPDownloadItem  : public IDispatch
{
public:
  // [1251] Returns the source URL of the download
  virtual HRESULT STDMETHODCALLTYPE get_sourceURL(BSTR* pbstrURL/*[out,retval]*/) = 0;
  // [1252] Returns the size of the download
  virtual HRESULT STDMETHODCALLTYPE get_size(long* plSize/*[out,retval]*/) = 0;
  // [1253] Returns the type of the download
  virtual HRESULT STDMETHODCALLTYPE get_type(BSTR* pbstrType/*[out,retval]*/) = 0;
  // [1254] Returns the progress (in bytes) of the download
  virtual HRESULT STDMETHODCALLTYPE get_progress(long* plProgress/*[out,retval]*/) = 0;
  // [1255] Returns the state of the download
  virtual HRESULT STDMETHODCALLTYPE get_downloadState(Wmplib_tlb::WMPSubscriptionDownloadState* pwmpsdls/*[out,retval]*/) = 0;
  // [1256] Pauses the download
  virtual HRESULT STDMETHODCALLTYPE pause(void) = 0;
  // [1257] Resumes the download
  virtual HRESULT STDMETHODCALLTYPE resume(void) = 0;
  // [1258] Cancels the download
  virtual HRESULT STDMETHODCALLTYPE cancel(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_sourceURL(void)
  {
    BSTR pbstrURL = 0;
    OLECHECK(this->get_sourceURL((BSTR*)&pbstrURL));
    return pbstrURL;
  }

  long __fastcall get_size(void)
  {
    long plSize;
    OLECHECK(this->get_size((long*)&plSize));
    return plSize;
  }

  BSTR __fastcall get_type(void)
  {
    BSTR pbstrType = 0;
    OLECHECK(this->get_type((BSTR*)&pbstrType));
    return pbstrType;
  }

  long __fastcall get_progress(void)
  {
    long plProgress;
    OLECHECK(this->get_progress((long*)&plProgress));
    return plProgress;
  }

  Wmplib_tlb::WMPSubscriptionDownloadState __fastcall get_downloadState(void)
  {
    Wmplib_tlb::WMPSubscriptionDownloadState pwmpsdls;
    OLECHECK(this->get_downloadState((Wmplib_tlb::WMPSubscriptionDownloadState*)&pwmpsdls));
    return pwmpsdls;
  }


  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   long            size = {read = get_size};
  __property   BSTR            type = {read = get_type};
  __property   long            progress = {read = get_progress};
  __property   Wmplib_tlb::WMPSubscriptionDownloadState downloadState = {read = get_downloadState};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDownloadItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9FBB3336-6DA3-479D-B8FF-67D46E20A987}
// *********************************************************************//
interface IWMPDownloadItem2  : public Wmplib_tlb::IWMPDownloadItem
{
public:
  // [1301] Returns the value of specified attribute for this download item
  virtual HRESULT STDMETHODCALLTYPE getItemInfo(BSTR bstrItemName/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall getItemInfo(BSTR bstrItemName/*[in]*/)
  {
    BSTR pbstrVal = 0;
    OLECHECK(this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal));
    return pbstrVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPSubscriptionServicePlayMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F0248C1-62B3-42D7-B927-029119E6AD14}
// *********************************************************************//
interface IWMPSubscriptionServicePlayMedia  : public Wmplib_tlb::IWMPSubscriptionServiceLimited
{
public:
  // [10004] method playMedia
  virtual HRESULT STDMETHODCALLTYPE playMedia(BSTR bstrURL/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPDiscoExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A915CEA2-72DF-41E1-A576-EF0BAE5E5169}
// *********************************************************************//
interface IWMPDiscoExternal  : public Wmplib_tlb::IWMPSubscriptionServiceExternal
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_OnLoginChange(LPDISPATCH Param1/*[in]*/) = 0; // [10028]
  virtual HRESULT STDMETHODCALLTYPE get_userLoggedIn(VARIANT_BOOL* pvbLoggedIn/*[out,retval]*/) = 0; // [10029]
  virtual HRESULT STDMETHODCALLTYPE attemptLogin(void) = 0; // [10030]
  virtual HRESULT STDMETHODCALLTYPE get_accountType(BSTR* pbstrAcctType/*[out,retval]*/) = 0; // [10031]
  virtual HRESULT STDMETHODCALLTYPE set_OnViewChange(LPDISPATCH Param1/*[in]*/) = 0; // [10032]
  virtual HRESULT STDMETHODCALLTYPE changeView(BSTR bstrLibraryLocationType/*[in]*/, 
                                               BSTR bstrLibraryLocationID/*[in]*/, 
                                               BSTR bstrFilter/*[in]*/, BSTR bstrViewParams/*[in]*/) = 0; // [10033]
  virtual HRESULT STDMETHODCALLTYPE changeViewOnlineList(BSTR bstrLibraryLocationType/*[in]*/, 
                                                         BSTR bstrLibraryLocationID/*[in]*/, 
                                                         BSTR bstrParams/*[in]*/, 
                                                         BSTR bstrFriendlyName/*[in]*/, 
                                                         BSTR bstrListType/*[in]*/, 
                                                         BSTR bstrViewMode/*[in]*/) = 0; // [10034]
  virtual HRESULT STDMETHODCALLTYPE get_libraryLocationType(BSTR* pbstrLibraryLocationType/*[out,retval]*/) = 0; // [10035]
  virtual HRESULT STDMETHODCALLTYPE get_libraryLocationID(BSTR* pbstrLibraryLocationID/*[out,retval]*/) = 0; // [10036]
  virtual HRESULT STDMETHODCALLTYPE get_selectedItemType(BSTR* pbstrSelectedItemType/*[out,retval]*/) = 0; // [10037]
  virtual HRESULT STDMETHODCALLTYPE get_selectedItemID(BSTR* pbstrLibraryLocationID/*[out,retval]*/) = 0; // [10038]
  virtual HRESULT STDMETHODCALLTYPE get_filter(BSTR* pbstrFilter/*[out,retval]*/) = 0; // [10039]
  virtual HRESULT STDMETHODCALLTYPE get_task(BSTR* pbstrTask/*[out,retval]*/) = 0; // [10040]
  virtual HRESULT STDMETHODCALLTYPE get_viewParameters(BSTR* pbstrViewParameters/*[out,retval]*/) = 0; // [10041]
  virtual HRESULT STDMETHODCALLTYPE cancelNavigate(void) = 0; // [10042]
  virtual HRESULT STDMETHODCALLTYPE showPopup(long lPopupIndex/*[in]*/, BSTR bstrParameters/*[in]*/) = 0; // [10043]
  virtual HRESULT STDMETHODCALLTYPE addToBasket(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/) = 0; // [10044]
  virtual HRESULT STDMETHODCALLTYPE get_basketTitle(BSTR* bstrParams/*[out,retval]*/) = 0; // [10045]
  virtual HRESULT STDMETHODCALLTYPE play(BSTR bstrLibraryLocationType/*[in]*/, 
                                         BSTR bstrLibraryLocationIDs/*[in]*/) = 0; // [10046]
  virtual HRESULT STDMETHODCALLTYPE download(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/) = 0; // [10047]
  virtual HRESULT STDMETHODCALLTYPE buy(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/) = 0; // [10048]
  virtual HRESULT STDMETHODCALLTYPE saveCurrentViewToLibrary(BSTR bstrFriendlyListType/*[in]*/, 
                                                             VARIANT_BOOL fDynamic/*[in]*/) = 0; // [10049]
  virtual HRESULT STDMETHODCALLTYPE authenticate(long lAuthenticationIndex/*[in]*/) = 0; // [10050]
  virtual HRESULT STDMETHODCALLTYPE sendMessage(BSTR bstrMsg/*[in]*/, BSTR bstrParam/*[in]*/) = 0; // [10051]
  virtual HRESULT STDMETHODCALLTYPE set_OnSendMessageComplete(LPDISPATCH Param1/*[in]*/) = 0; // [10052]
  virtual HRESULT STDMETHODCALLTYPE set_ignoreIEHistory(VARIANT_BOOL Param1/*[in]*/) = 0; // [10053]
  virtual HRESULT STDMETHODCALLTYPE get_pluginRunning(VARIANT_BOOL* pfPluginRunning/*[out,retval]*/) = 0; // [10054]
  virtual HRESULT STDMETHODCALLTYPE get_templateBeingDisplayedInLocalLibrary(VARIANT_BOOL* pfTemplateDisplayed/*[out,retval]*/) = 0; // [10055]
  virtual HRESULT STDMETHODCALLTYPE set_OnChangeViewError(LPDISPATCH Param1/*[in]*/) = 0; // [10056]
  virtual HRESULT STDMETHODCALLTYPE set_OnChangeViewOnlineListError(LPDISPATCH Param1/*[in]*/) = 0; // [10057]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_userLoggedIn(void)
  {
    VARIANT_BOOL pvbLoggedIn;
    OLECHECK(this->get_userLoggedIn((VARIANT_BOOL*)&pvbLoggedIn));
    return pvbLoggedIn;
  }

  BSTR __fastcall get_accountType(void)
  {
    BSTR pbstrAcctType = 0;
    OLECHECK(this->get_accountType((BSTR*)&pbstrAcctType));
    return pbstrAcctType;
  }

  BSTR __fastcall get_libraryLocationType(void)
  {
    BSTR pbstrLibraryLocationType = 0;
    OLECHECK(this->get_libraryLocationType((BSTR*)&pbstrLibraryLocationType));
    return pbstrLibraryLocationType;
  }

  BSTR __fastcall get_libraryLocationID(void)
  {
    BSTR pbstrLibraryLocationID = 0;
    OLECHECK(this->get_libraryLocationID((BSTR*)&pbstrLibraryLocationID));
    return pbstrLibraryLocationID;
  }

  BSTR __fastcall get_selectedItemType(void)
  {
    BSTR pbstrSelectedItemType = 0;
    OLECHECK(this->get_selectedItemType((BSTR*)&pbstrSelectedItemType));
    return pbstrSelectedItemType;
  }

  BSTR __fastcall get_selectedItemID(void)
  {
    BSTR pbstrLibraryLocationID = 0;
    OLECHECK(this->get_selectedItemID((BSTR*)&pbstrLibraryLocationID));
    return pbstrLibraryLocationID;
  }

  BSTR __fastcall get_filter(void)
  {
    BSTR pbstrFilter = 0;
    OLECHECK(this->get_filter((BSTR*)&pbstrFilter));
    return pbstrFilter;
  }

  BSTR __fastcall get_task(void)
  {
    BSTR pbstrTask = 0;
    OLECHECK(this->get_task((BSTR*)&pbstrTask));
    return pbstrTask;
  }

  BSTR __fastcall get_viewParameters(void)
  {
    BSTR pbstrViewParameters = 0;
    OLECHECK(this->get_viewParameters((BSTR*)&pbstrViewParameters));
    return pbstrViewParameters;
  }

  BSTR __fastcall get_basketTitle(void)
  {
    BSTR bstrParams = 0;
    OLECHECK(this->get_basketTitle((BSTR*)&bstrParams));
    return bstrParams;
  }

  VARIANT_BOOL __fastcall get_pluginRunning(void)
  {
    VARIANT_BOOL pfPluginRunning;
    OLECHECK(this->get_pluginRunning((VARIANT_BOOL*)&pfPluginRunning));
    return pfPluginRunning;
  }

  VARIANT_BOOL __fastcall get_templateBeingDisplayedInLocalLibrary(void)
  {
    VARIANT_BOOL pfTemplateDisplayed;
    OLECHECK(this->get_templateBeingDisplayedInLocalLibrary((VARIANT_BOOL*)&pfTemplateDisplayed));
    return pfTemplateDisplayed;
  }


  __property   LPDISPATCH      OnLoginChange = {write = set_OnLoginChange};
  __property   VARIANT_BOOL    userLoggedIn = {read = get_userLoggedIn};
  __property   BSTR            accountType = {read = get_accountType};
  __property   LPDISPATCH      OnViewChange = {write = set_OnViewChange};
  __property   BSTR            libraryLocationType = {read = get_libraryLocationType};
  __property   BSTR            libraryLocationID = {read = get_libraryLocationID};
  __property   BSTR            selectedItemType = {read = get_selectedItemType};
  __property   BSTR            selectedItemID = {read = get_selectedItemID};
  __property   BSTR            filter = {read = get_filter};
  __property   BSTR            task = {read = get_task};
  __property   BSTR            viewParameters = {read = get_viewParameters};
  __property   BSTR            basketTitle = {read = get_basketTitle};
  __property   LPDISPATCH      OnSendMessageComplete = {write = set_OnSendMessageComplete};
  __property   VARIANT_BOOL    ignoreIEHistory = {write = set_ignoreIEHistory};
  __property   VARIANT_BOOL    pluginRunning = {read = get_pluginRunning};
  __property   VARIANT_BOOL    templateBeingDisplayedInLocalLibrary = {read = get_templateBeingDisplayedInLocalLibrary};
  __property   LPDISPATCH      OnChangeViewError = {write = set_OnChangeViewError};
  __property   LPDISPATCH      OnChangeViewOnlineListError = {write = set_OnChangeViewOnlineListError};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPCDDVDWizardExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D7EF888-1D3C-484A-A906-9F49D99BB344}
// *********************************************************************//
interface IWMPCDDVDWizardExternal  : public Wmplib_tlb::IWMPExternalColors
{
public:
  virtual HRESULT STDMETHODCALLTYPE WriteNames(BSTR bstrTOC/*[in]*/, BSTR bstrMetadata/*[in]*/) = 0; // [10001]
  virtual HRESULT STDMETHODCALLTYPE ReturnToMainTask(void) = 0; // [10002]
  virtual HRESULT STDMETHODCALLTYPE WriteNamesEx(Wmplib_tlb::WMP_WRITENAMESEX_TYPE type/*[in]*/, 
                                                 BSTR bstrTypeId/*[in]*/, BSTR bstrMetadata/*[in]*/, 
                                                 VARIANT_BOOL fRenameRegroupFiles/*[in]*/) = 0; // [10007]
  virtual HRESULT STDMETHODCALLTYPE GetMDQByRequestID(BSTR bstrRequestID/*[in]*/, 
                                                      BSTR* pbstrMDQ/*[out,retval]*/) = 0; // [10008]
  virtual HRESULT STDMETHODCALLTYPE EditMetadata(void) = 0; // [10011]
  virtual HRESULT STDMETHODCALLTYPE IsMetadataAvailableForEdit(VARIANT_BOOL* pbIsAvailable/*[out,retval]*/) = 0; // [10010]
  virtual HRESULT STDMETHODCALLTYPE BuyCD(BSTR bstrTitle/*[in]*/, BSTR bstrArtist/*[in]*/, 
                                          BSTR bstrAlbum/*[in]*/, BSTR bstrUFID/*[in]*/, 
                                          BSTR bstrWMID/*[in]*/) = 0; // [10023]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall GetMDQByRequestID(BSTR bstrRequestID/*[in]*/)
  {
    BSTR pbstrMDQ = 0;
    OLECHECK(this->GetMDQByRequestID(bstrRequestID, (BSTR*)&pbstrMDQ));
    return pbstrMDQ;
  }

  VARIANT_BOOL __fastcall IsMetadataAvailableForEdit(void)
  {
    VARIANT_BOOL pbIsAvailable;
    OLECHECK(this->IsMetadataAvailableForEdit((VARIANT_BOOL*)&pbIsAvailable));
    return pbIsAvailable;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPBaseExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F81B2A59-02BC-4003-8B2F-C124AF66FC66}
// *********************************************************************//
interface IWMPBaseExternal  : public Wmplib_tlb::IWMPExternal
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPOfflineExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3148E685-B243-423D-8341-8480D6EFF674}
// *********************************************************************//
interface IWMPOfflineExternal  : public Wmplib_tlb::IWMPExternal
{
public:
  virtual HRESULT STDMETHODCALLTYPE forceOnline(void) = 0; // [10025]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPRemoteUPnPService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17E5DC63-E296-4EDE-B9CC-CF57D18ED10E}
// *********************************************************************//
interface IWMPRemoteUPnPService  : public IDispatch
{
public:
  // [10121] Register an event handler
  virtual HRESULT STDMETHODCALLTYPE RegisterEvent(BSTR bstrVariableName/*[in]*/, 
                                                  LPDISPATCH pdispJScriptCode/*[in]*/) = 0;
  // [10122] Unregister an event handler
  virtual HRESULT STDMETHODCALLTYPE UnregisterEvent(BSTR bstrVariableName/*[in]*/) = 0;
  // [10123] returns the service ID for the service
  virtual HRESULT STDMETHODCALLTYPE ID(BSTR* pbstrID/*[out,retval]*/) = 0;
  // [10124] invokes an action of the device
  virtual HRESULT STDMETHODCALLTYPE InvokeAction(BSTR bstrActionName/*[in]*/, 
                                                 LPDISPATCH pdispInArgs/*[in]*/, 
                                                 LPDISPATCH pdispOutArgs/*[in]*/, 
                                                 LPDISPATCH pdispRetVals/*[in]*/) = 0;
  // [10125] Last request (InvokeAction or QueryStateVariable) result
  virtual HRESULT STDMETHODCALLTYPE LastTransportStatus(long* plValue/*[out,retval]*/) = 0;
  // [10126] returns the value of one of the service's state variables
  virtual HRESULT STDMETHODCALLTYPE QueryStateVariable(BSTR bstrVariableName/*[in]*/, 
                                                       VARIANT* pvarValue/*[out,retval]*/) = 0;
  // [10127] returns the service type identifier for the device
  virtual HRESULT STDMETHODCALLTYPE ServiceTypeIdentifier(BSTR* pbstrValue/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall ID(void)
  {
    BSTR pbstrID = 0;
    OLECHECK(this->ID((BSTR*)&pbstrID));
    return pbstrID;
  }

  long __fastcall LastTransportStatus(void)
  {
    long plValue;
    OLECHECK(this->LastTransportStatus((long*)&plValue));
    return plValue;
  }

  VARIANT __fastcall QueryStateVariable(BSTR bstrVariableName/*[in]*/)
  {
    VARIANT pvarValue;
    OLECHECK(this->QueryStateVariable(bstrVariableName, (VARIANT*)&pvarValue));
    return pvarValue;
  }

  BSTR __fastcall ServiceTypeIdentifier(void)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->ServiceTypeIdentifier((BSTR*)&pbstrValue));
    return pbstrValue;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPRemoteUPnPDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76F13F00-6E17-4D98-BE2D-D2A84CFF5BFD}
// *********************************************************************//
interface IWMPRemoteUPnPDevice  : public IDispatch
{
public:
  // [10131] returns a descriptive name for this device
  virtual HRESULT STDMETHODCALLTYPE friendlyName(BSTR* pbstrService/*[out,retval]*/) = 0;
  // [10132] locates a specified service from the device
  virtual HRESULT STDMETHODCALLTYPE FindService(BSTR bstrService/*[in]*/, 
                                                LPDISPATCH* ppdispService/*[out,retval]*/) = 0;
  // [10133] Return the UPnP device associated with this object
  virtual HRESULT STDMETHODCALLTYPE getDevice(LPUNKNOWN* ppDevice) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall friendlyName(void)
  {
    BSTR pbstrService = 0;
    OLECHECK(this->friendlyName((BSTR*)&pbstrService));
    return pbstrService;
  }

  LPDISPATCH __fastcall FindService(BSTR bstrService/*[in]*/)
  {
    LPDISPATCH ppdispService;
    OLECHECK(this->FindService(bstrService, (LPDISPATCH*)&ppdispService));
    return ppdispService;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWMPRemoteDeviceController
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {968F36CA-CB43-4F6A-A03B-66A9C05A93EE}
// *********************************************************************//
interface IWMPRemoteDeviceController  : public IDispatch
{
public:
  // [10101] This method is used to register a callback function to be notified when the player's notion of the current device has changed
  virtual HRESULT STDMETHODCALLTYPE RegisterDeviceSwitch(LPDISPATCH pdispJScriptFunction/*[in]*/) = 0;
  // [10102] Updates our sorted list of available devices
  virtual HRESULT STDMETHODCALLTYPE SyncDeviceList(void) = 0;
  // [10103] Returns the number of available remote devices
  virtual HRESULT STDMETHODCALLTYPE get_numberDevices(long* plNumberDevices/*[out,retval]*/) = 0;
  // [10104] Returns the Nth remote device
  virtual HRESULT STDMETHODCALLTYPE getDevice(long lIndex/*[in]*/, 
                                              LPDISPATCH* ppDevice/*[out,retval]*/) = 0;
  // [10106] Changes our UI to the specified device
  virtual HRESULT STDMETHODCALLTYPE SwitchUIToMatchDevice(LPDISPATCH pdispDevice/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_numberDevices(void)
  {
    long plNumberDevices;
    OLECHECK(this->get_numberDevices((long*)&plNumberDevices));
    return plNumberDevices;
  }

  LPDISPATCH __fastcall getDevice(long lIndex/*[in]*/)
  {
    LPDISPATCH ppDevice;
    OLECHECK(this->getDevice(lIndex, (LPDISPATCH*)&ppDevice));
    return ppDevice;
  }


  __property   long            numberDevices = {read = get_numberDevices};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUPnPService_IWMPUPnPAVTransportDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EA1DE14-E288-4958-A23C-942634A27EB5}
// *********************************************************************//
interface IUPnPService_IWMPUPnPAVTransportDual  : public IDispatch
{
public:
  // [1] Property TransportState
  virtual HRESULT STDMETHODCALLTYPE get_TransportState(BSTR* pTransportState/*[out,retval]*/) = 0;
  // [2] Property TransportStatus
  virtual HRESULT STDMETHODCALLTYPE get_TransportStatus(BSTR* pTransportStatus/*[out,retval]*/) = 0;
  // [3] Property PlaybackStorageMedium
  virtual HRESULT STDMETHODCALLTYPE get_PlaybackStorageMedium(BSTR* pPlaybackStorageMedium/*[out,retval]*/) = 0;
  // [4] Property RecordStorageMedium
  virtual HRESULT STDMETHODCALLTYPE get_RecordStorageMedium(BSTR* pRecordStorageMedium/*[out,retval]*/) = 0;
  // [5] Property PossiblePlaybackStorageMedia
  virtual HRESULT STDMETHODCALLTYPE get_PossiblePlaybackStorageMedia(BSTR* pPossiblePlaybackStorageMedia/*[out,retval]*/) = 0;
  // [6] Property PossibleRecordStorageMedia
  virtual HRESULT STDMETHODCALLTYPE get_PossibleRecordStorageMedia(BSTR* pPossibleRecordStorageMedia/*[out,retval]*/) = 0;
  // [7] Property CurrentPlayMode
  virtual HRESULT STDMETHODCALLTYPE get_CurrentPlayMode(BSTR* pCurrentPlayMode/*[out,retval]*/) = 0;
  // [8] Property TransportPlaySpeed
  virtual HRESULT STDMETHODCALLTYPE get_TransportPlaySpeed(BSTR* pTransportPlaySpeed/*[out,retval]*/) = 0;
  // [9] Property RecordMediumWriteStatus
  virtual HRESULT STDMETHODCALLTYPE get_RecordMediumWriteStatus(BSTR* pRecordMediumWriteStatus/*[out,retval]*/) = 0;
  // [10] Property CurrentRecordQualityMode
  virtual HRESULT STDMETHODCALLTYPE get_CurrentRecordQualityMode(BSTR* pCurrentRecordQualityMode/*[out,retval]*/) = 0;
  // [11] Property PossibleRecordQualityModes
  virtual HRESULT STDMETHODCALLTYPE get_PossibleRecordQualityModes(BSTR* pPossibleRecordQualityModes/*[out,retval]*/) = 0;
  // [12] Property NumberOfTracks
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfTracks(unsigned_long* pNumberOfTracks/*[out,retval]*/) = 0;
  // [13] Property CurrentTrack
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTrack(unsigned_long* pCurrentTrack/*[out,retval]*/) = 0;
  // [14] Property CurrentTrackDuration
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTrackDuration(BSTR* pCurrentTrackDuration/*[out,retval]*/) = 0;
  // [15] Property CurrentMediaDuration
  virtual HRESULT STDMETHODCALLTYPE get_CurrentMediaDuration(BSTR* pCurrentMediaDuration/*[out,retval]*/) = 0;
  // [16] Property CurrentTrackMetaData
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTrackMetaData(BSTR* pCurrentTrackMetaData/*[out,retval]*/) = 0;
  // [17] Property CurrentTrackURI
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTrackURI(BSTR* pCurrentTrackURI/*[out,retval]*/) = 0;
  // [18] Property AVTransportURI
  virtual HRESULT STDMETHODCALLTYPE get_AVTransportURI(BSTR* pAVTransportURI/*[out,retval]*/) = 0;
  // [19] Property AVTransportURIMetaData
  virtual HRESULT STDMETHODCALLTYPE get_AVTransportURIMetaData(BSTR* pAVTransportURIMetaData/*[out,retval]*/) = 0;
  // [20] Property NextAVTransportURI
  virtual HRESULT STDMETHODCALLTYPE get_NextAVTransportURI(BSTR* pNextAVTransportURI/*[out,retval]*/) = 0;
  // [21] Property NextAVTransportURIMetaData
  virtual HRESULT STDMETHODCALLTYPE get_NextAVTransportURIMetaData(BSTR* pNextAVTransportURIMetaData/*[out,retval]*/) = 0;
  // [22] Property RelativeTimePosition
  virtual HRESULT STDMETHODCALLTYPE get_RelativeTimePosition(BSTR* pRelativeTimePosition/*[out,retval]*/) = 0;
  // [23] Property AbsoluteTimePosition
  virtual HRESULT STDMETHODCALLTYPE get_AbsoluteTimePosition(BSTR* pAbsoluteTimePosition/*[out,retval]*/) = 0;
  // [24] Property RelativeCounterPosition
  virtual HRESULT STDMETHODCALLTYPE get_RelativeCounterPosition(long* pRelativeCounterPosition/*[out,retval]*/) = 0;
  // [25] Property AbsoluteCounterPosition
  virtual HRESULT STDMETHODCALLTYPE get_AbsoluteCounterPosition(long* pAbsoluteCounterPosition/*[out,retval]*/) = 0;
  // [26] Property CurrentTransportActions
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTransportActions(BSTR* pCurrentTransportActions/*[out,retval]*/) = 0;
  // [27] Property LastChange
  virtual HRESULT STDMETHODCALLTYPE get_LastChange(BSTR* pLastChange/*[out,retval]*/) = 0;
  // [28] Property A_ARG_TYPE_SeekMode
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_SeekMode(BSTR* pA_ARG_TYPE_SeekMode/*[out,retval]*/) = 0;
  // [29] Property A_ARG_TYPE_SeekTarget
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_SeekTarget(BSTR* pA_ARG_TYPE_SeekTarget/*[out,retval]*/) = 0;
  // [30] Property A_ARG_TYPE_InstanceID
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_InstanceID(unsigned_long* pA_ARG_TYPE_InstanceID/*[out,retval]*/) = 0;
  // [31] Method SetAVTransportURI
  virtual HRESULT STDMETHODCALLTYPE SetAVTransportURI(unsigned_long InstanceID/*[in]*/, 
                                                      BSTR CurrentURI/*[in]*/, 
                                                      BSTR CurrentURIMetaData/*[in]*/) = 0;
  // [32] Method SetNextAVTransportURI
  virtual HRESULT STDMETHODCALLTYPE SetNextAVTransportURI(unsigned_long InstanceID/*[in]*/, 
                                                          BSTR NextURI/*[in]*/, 
                                                          BSTR NextURIMetaData/*[in]*/) = 0;
  // [33] Method GetMediaInfo
  virtual HRESULT STDMETHODCALLTYPE GetMediaInfo(unsigned_long InstanceID/*[in]*/, 
                                                 unsigned_long* pNrTracks/*[in,out]*/, 
                                                 BSTR* pMediaDuration/*[in,out]*/, 
                                                 BSTR* pCurrentURI/*[in,out]*/, 
                                                 BSTR* pCurrentURIMetaData/*[in,out]*/, 
                                                 BSTR* pNextURI/*[in,out]*/, 
                                                 BSTR* pNextURIMetaData/*[in,out]*/, 
                                                 BSTR* pPlayMedium/*[in,out]*/, 
                                                 BSTR* pRecordMedium/*[in,out]*/, 
                                                 BSTR* pWriteStatus/*[in,out]*/) = 0;
  // [34] Method GetTransportInfo
  virtual HRESULT STDMETHODCALLTYPE GetTransportInfo(unsigned_long InstanceID/*[in]*/, 
                                                     BSTR* pCurrentTransportState/*[in,out]*/, 
                                                     BSTR* pCurrentTransportStatus/*[in,out]*/, 
                                                     BSTR* pCurrentSpeed/*[in,out]*/) = 0;
  // [35] Method GetPositionInfo
  virtual HRESULT STDMETHODCALLTYPE GetPositionInfo(unsigned_long InstanceID/*[in]*/, 
                                                    unsigned_long* pTrack/*[in,out]*/, 
                                                    BSTR* pTrackDuration/*[in,out]*/, 
                                                    BSTR* pTrackMetaData/*[in,out]*/, 
                                                    BSTR* pTrackURI/*[in,out]*/, 
                                                    BSTR* pRelTime/*[in,out]*/, 
                                                    BSTR* pAbsTime/*[in,out]*/, 
                                                    long* pRelCount/*[in,out]*/, 
                                                    long* pAbsCount/*[in,out]*/) = 0;
  // [36] Method GetDeviceCapabilities
  virtual HRESULT STDMETHODCALLTYPE GetDeviceCapabilities(unsigned_long InstanceID/*[in]*/, 
                                                          BSTR* pPlayMedia/*[in,out]*/, 
                                                          BSTR* pRecMedia/*[in,out]*/, 
                                                          BSTR* pRecQualityModes/*[in,out]*/) = 0;
  // [37] Method GetTransportSettings
  virtual HRESULT STDMETHODCALLTYPE GetTransportSettings(unsigned_long InstanceID/*[in]*/, 
                                                         BSTR* pPlayMode/*[in,out]*/, 
                                                         BSTR* pRecQualityMode/*[in,out]*/) = 0;
  // [38] Method Stop
  virtual HRESULT STDMETHODCALLTYPE stop(unsigned_long InstanceID/*[in]*/) = 0;
  // [39] Method Play
  virtual HRESULT STDMETHODCALLTYPE play(unsigned_long InstanceID/*[in]*/, BSTR Speed/*[in]*/) = 0;
  // [40] Method Pause
  virtual HRESULT STDMETHODCALLTYPE pause(unsigned_long InstanceID/*[in]*/) = 0;
  // [41] Method Record
  virtual HRESULT STDMETHODCALLTYPE Record(unsigned_long InstanceID/*[in]*/) = 0;
  // [42] Method Seek
  virtual HRESULT STDMETHODCALLTYPE Seek(unsigned_long InstanceID/*[in]*/, BSTR Unit/*[in]*/, 
                                         BSTR Target/*[in]*/) = 0;
  // [43] Method Next
  virtual HRESULT STDMETHODCALLTYPE next(unsigned_long InstanceID/*[in]*/) = 0;
  // [44] Method Previous
  virtual HRESULT STDMETHODCALLTYPE previous(unsigned_long InstanceID/*[in]*/) = 0;
  // [45] Method SetPlayMode
  virtual HRESULT STDMETHODCALLTYPE SetPlayMode(unsigned_long InstanceID/*[in]*/, 
                                                BSTR NewPlayMode/*[in]*/) = 0;
  // [46] Method SetRecordQualityMode
  virtual HRESULT STDMETHODCALLTYPE SetRecordQualityMode(unsigned_long InstanceID/*[in]*/, 
                                                         BSTR NewRecordQualityMode/*[in]*/) = 0;
  // [47] Method GetCurrentTransportActions
  virtual HRESULT STDMETHODCALLTYPE GetCurrentTransportActions(unsigned_long InstanceID/*[in]*/, 
                                                               BSTR* pActions/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_TransportState(void)
  {
    BSTR pTransportState = 0;
    OLECHECK(this->get_TransportState((BSTR*)&pTransportState));
    return pTransportState;
  }

  BSTR __fastcall get_TransportStatus(void)
  {
    BSTR pTransportStatus = 0;
    OLECHECK(this->get_TransportStatus((BSTR*)&pTransportStatus));
    return pTransportStatus;
  }

  BSTR __fastcall get_PlaybackStorageMedium(void)
  {
    BSTR pPlaybackStorageMedium = 0;
    OLECHECK(this->get_PlaybackStorageMedium((BSTR*)&pPlaybackStorageMedium));
    return pPlaybackStorageMedium;
  }

  BSTR __fastcall get_RecordStorageMedium(void)
  {
    BSTR pRecordStorageMedium = 0;
    OLECHECK(this->get_RecordStorageMedium((BSTR*)&pRecordStorageMedium));
    return pRecordStorageMedium;
  }

  BSTR __fastcall get_PossiblePlaybackStorageMedia(void)
  {
    BSTR pPossiblePlaybackStorageMedia = 0;
    OLECHECK(this->get_PossiblePlaybackStorageMedia((BSTR*)&pPossiblePlaybackStorageMedia));
    return pPossiblePlaybackStorageMedia;
  }

  BSTR __fastcall get_PossibleRecordStorageMedia(void)
  {
    BSTR pPossibleRecordStorageMedia = 0;
    OLECHECK(this->get_PossibleRecordStorageMedia((BSTR*)&pPossibleRecordStorageMedia));
    return pPossibleRecordStorageMedia;
  }

  BSTR __fastcall get_CurrentPlayMode(void)
  {
    BSTR pCurrentPlayMode = 0;
    OLECHECK(this->get_CurrentPlayMode((BSTR*)&pCurrentPlayMode));
    return pCurrentPlayMode;
  }

  BSTR __fastcall get_TransportPlaySpeed(void)
  {
    BSTR pTransportPlaySpeed = 0;
    OLECHECK(this->get_TransportPlaySpeed((BSTR*)&pTransportPlaySpeed));
    return pTransportPlaySpeed;
  }

  BSTR __fastcall get_RecordMediumWriteStatus(void)
  {
    BSTR pRecordMediumWriteStatus = 0;
    OLECHECK(this->get_RecordMediumWriteStatus((BSTR*)&pRecordMediumWriteStatus));
    return pRecordMediumWriteStatus;
  }

  BSTR __fastcall get_CurrentRecordQualityMode(void)
  {
    BSTR pCurrentRecordQualityMode = 0;
    OLECHECK(this->get_CurrentRecordQualityMode((BSTR*)&pCurrentRecordQualityMode));
    return pCurrentRecordQualityMode;
  }

  BSTR __fastcall get_PossibleRecordQualityModes(void)
  {
    BSTR pPossibleRecordQualityModes = 0;
    OLECHECK(this->get_PossibleRecordQualityModes((BSTR*)&pPossibleRecordQualityModes));
    return pPossibleRecordQualityModes;
  }

  unsigned_long __fastcall get_NumberOfTracks(void)
  {
    unsigned_long pNumberOfTracks;
    OLECHECK(this->get_NumberOfTracks((unsigned_long*)&pNumberOfTracks));
    return pNumberOfTracks;
  }

  unsigned_long __fastcall get_CurrentTrack(void)
  {
    unsigned_long pCurrentTrack;
    OLECHECK(this->get_CurrentTrack((unsigned_long*)&pCurrentTrack));
    return pCurrentTrack;
  }

  BSTR __fastcall get_CurrentTrackDuration(void)
  {
    BSTR pCurrentTrackDuration = 0;
    OLECHECK(this->get_CurrentTrackDuration((BSTR*)&pCurrentTrackDuration));
    return pCurrentTrackDuration;
  }

  BSTR __fastcall get_CurrentMediaDuration(void)
  {
    BSTR pCurrentMediaDuration = 0;
    OLECHECK(this->get_CurrentMediaDuration((BSTR*)&pCurrentMediaDuration));
    return pCurrentMediaDuration;
  }

  BSTR __fastcall get_CurrentTrackMetaData(void)
  {
    BSTR pCurrentTrackMetaData = 0;
    OLECHECK(this->get_CurrentTrackMetaData((BSTR*)&pCurrentTrackMetaData));
    return pCurrentTrackMetaData;
  }

  BSTR __fastcall get_CurrentTrackURI(void)
  {
    BSTR pCurrentTrackURI = 0;
    OLECHECK(this->get_CurrentTrackURI((BSTR*)&pCurrentTrackURI));
    return pCurrentTrackURI;
  }

  BSTR __fastcall get_AVTransportURI(void)
  {
    BSTR pAVTransportURI = 0;
    OLECHECK(this->get_AVTransportURI((BSTR*)&pAVTransportURI));
    return pAVTransportURI;
  }

  BSTR __fastcall get_AVTransportURIMetaData(void)
  {
    BSTR pAVTransportURIMetaData = 0;
    OLECHECK(this->get_AVTransportURIMetaData((BSTR*)&pAVTransportURIMetaData));
    return pAVTransportURIMetaData;
  }

  BSTR __fastcall get_NextAVTransportURI(void)
  {
    BSTR pNextAVTransportURI = 0;
    OLECHECK(this->get_NextAVTransportURI((BSTR*)&pNextAVTransportURI));
    return pNextAVTransportURI;
  }

  BSTR __fastcall get_NextAVTransportURIMetaData(void)
  {
    BSTR pNextAVTransportURIMetaData = 0;
    OLECHECK(this->get_NextAVTransportURIMetaData((BSTR*)&pNextAVTransportURIMetaData));
    return pNextAVTransportURIMetaData;
  }

  BSTR __fastcall get_RelativeTimePosition(void)
  {
    BSTR pRelativeTimePosition = 0;
    OLECHECK(this->get_RelativeTimePosition((BSTR*)&pRelativeTimePosition));
    return pRelativeTimePosition;
  }

  BSTR __fastcall get_AbsoluteTimePosition(void)
  {
    BSTR pAbsoluteTimePosition = 0;
    OLECHECK(this->get_AbsoluteTimePosition((BSTR*)&pAbsoluteTimePosition));
    return pAbsoluteTimePosition;
  }

  long __fastcall get_RelativeCounterPosition(void)
  {
    long pRelativeCounterPosition;
    OLECHECK(this->get_RelativeCounterPosition((long*)&pRelativeCounterPosition));
    return pRelativeCounterPosition;
  }

  long __fastcall get_AbsoluteCounterPosition(void)
  {
    long pAbsoluteCounterPosition;
    OLECHECK(this->get_AbsoluteCounterPosition((long*)&pAbsoluteCounterPosition));
    return pAbsoluteCounterPosition;
  }

  BSTR __fastcall get_CurrentTransportActions(void)
  {
    BSTR pCurrentTransportActions = 0;
    OLECHECK(this->get_CurrentTransportActions((BSTR*)&pCurrentTransportActions));
    return pCurrentTransportActions;
  }

  BSTR __fastcall get_LastChange(void)
  {
    BSTR pLastChange = 0;
    OLECHECK(this->get_LastChange((BSTR*)&pLastChange));
    return pLastChange;
  }

  BSTR __fastcall get_A_ARG_TYPE_SeekMode(void)
  {
    BSTR pA_ARG_TYPE_SeekMode = 0;
    OLECHECK(this->get_A_ARG_TYPE_SeekMode((BSTR*)&pA_ARG_TYPE_SeekMode));
    return pA_ARG_TYPE_SeekMode;
  }

  BSTR __fastcall get_A_ARG_TYPE_SeekTarget(void)
  {
    BSTR pA_ARG_TYPE_SeekTarget = 0;
    OLECHECK(this->get_A_ARG_TYPE_SeekTarget((BSTR*)&pA_ARG_TYPE_SeekTarget));
    return pA_ARG_TYPE_SeekTarget;
  }

  unsigned_long __fastcall get_A_ARG_TYPE_InstanceID(void)
  {
    unsigned_long pA_ARG_TYPE_InstanceID;
    OLECHECK(this->get_A_ARG_TYPE_InstanceID((unsigned_long*)&pA_ARG_TYPE_InstanceID));
    return pA_ARG_TYPE_InstanceID;
  }


  __property   BSTR            TransportState = {read = get_TransportState};
  __property   BSTR            TransportStatus = {read = get_TransportStatus};
  __property   BSTR            PlaybackStorageMedium = {read = get_PlaybackStorageMedium};
  __property   BSTR            RecordStorageMedium = {read = get_RecordStorageMedium};
  __property   BSTR            PossiblePlaybackStorageMedia = {read = get_PossiblePlaybackStorageMedia};
  __property   BSTR            PossibleRecordStorageMedia = {read = get_PossibleRecordStorageMedia};
  __property   BSTR            CurrentPlayMode = {read = get_CurrentPlayMode};
  __property   BSTR            TransportPlaySpeed = {read = get_TransportPlaySpeed};
  __property   BSTR            RecordMediumWriteStatus = {read = get_RecordMediumWriteStatus};
  __property   BSTR            CurrentRecordQualityMode = {read = get_CurrentRecordQualityMode};
  __property   BSTR            PossibleRecordQualityModes = {read = get_PossibleRecordQualityModes};
  __property   unsigned_long   NumberOfTracks = {read = get_NumberOfTracks};
  __property   unsigned_long   CurrentTrack = {read = get_CurrentTrack};
  __property   BSTR            CurrentTrackDuration = {read = get_CurrentTrackDuration};
  __property   BSTR            CurrentMediaDuration = {read = get_CurrentMediaDuration};
  __property   BSTR            CurrentTrackMetaData = {read = get_CurrentTrackMetaData};
  __property   BSTR            CurrentTrackURI = {read = get_CurrentTrackURI};
  __property   BSTR            AVTransportURI = {read = get_AVTransportURI};
  __property   BSTR            AVTransportURIMetaData = {read = get_AVTransportURIMetaData};
  __property   BSTR            NextAVTransportURI = {read = get_NextAVTransportURI};
  __property   BSTR            NextAVTransportURIMetaData = {read = get_NextAVTransportURIMetaData};
  __property   BSTR            RelativeTimePosition = {read = get_RelativeTimePosition};
  __property   BSTR            AbsoluteTimePosition = {read = get_AbsoluteTimePosition};
  __property   long            RelativeCounterPosition = {read = get_RelativeCounterPosition};
  __property   long            AbsoluteCounterPosition = {read = get_AbsoluteCounterPosition};
  __property   BSTR            CurrentTransportActions = {read = get_CurrentTransportActions};
  __property   BSTR            LastChange = {read = get_LastChange};
  __property   BSTR            A_ARG_TYPE_SeekMode = {read = get_A_ARG_TYPE_SeekMode};
  __property   BSTR            A_ARG_TYPE_SeekTarget = {read = get_A_ARG_TYPE_SeekTarget};
  __property   unsigned_long   A_ARG_TYPE_InstanceID = {read = get_A_ARG_TYPE_InstanceID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUPnPService_IWMPUPnPBinaryControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7CAD1D24-EDED-47FA-A1D8-4628FBE5638C}
// *********************************************************************//
interface IUPnPService_IWMPUPnPBinaryControlDual  : public IDispatch
{
public:
  // [1] Property CurrentState
  virtual HRESULT STDMETHODCALLTYPE get_CurrentState(BSTR* pCurrentState/*[out,retval]*/) = 0;
  // [2] Method GetCurrentState
  virtual HRESULT STDMETHODCALLTYPE GetCurrentState(BSTR* pcurrState/*[out,retval]*/) = 0;
  // [3] Method SetCurrentState
  virtual HRESULT STDMETHODCALLTYPE SetCurrentState(BSTR NewState/*[in]*/) = 0;
  // [4] Method SetOn
  virtual HRESULT STDMETHODCALLTYPE SetOn(void) = 0;
  // [5] Method SetOff
  virtual HRESULT STDMETHODCALLTYPE SetOff(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CurrentState(void)
  {
    BSTR pCurrentState = 0;
    OLECHECK(this->get_CurrentState((BSTR*)&pCurrentState));
    return pCurrentState;
  }

  BSTR __fastcall GetCurrentState(void)
  {
    BSTR pcurrState = 0;
    OLECHECK(this->GetCurrentState((BSTR*)&pcurrState));
    return pcurrState;
  }


  __property   BSTR            CurrentState = {read = get_CurrentState};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUPnPService_IWMPUPnPVariableControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A09862E-47B1-4D17-94EA-2BDE3014DD42}
// *********************************************************************//
interface IUPnPService_IWMPUPnPVariableControlDual  : public IDispatch
{
public:
  // [1] Property CurrentPercent
  virtual HRESULT STDMETHODCALLTYPE get_CurrentPercent(float* pCurrentPercent/*[out,retval]*/) = 0;
  // [2] Property CurrentValue
  virtual HRESULT STDMETHODCALLTYPE get_CurrentValue(float* pCurrentValue/*[out,retval]*/) = 0;
  // [3] Property UnitOfMeasure
  virtual HRESULT STDMETHODCALLTYPE get_UnitOfMeasure(BSTR* pUnitOfMeasure/*[out,retval]*/) = 0;
  // [4] Property MinValue
  virtual HRESULT STDMETHODCALLTYPE get_MinValue(float* pMinValue/*[out,retval]*/) = 0;
  // [5] Property MaxValue
  virtual HRESULT STDMETHODCALLTYPE get_MaxValue(float* pMaxValue/*[out,retval]*/) = 0;
  // [6] Property NumberOfSteps
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfSteps(unsigned_long* pNumberOfSteps/*[out,retval]*/) = 0;
  // [7] Method GetCurrentPercent
  virtual HRESULT STDMETHODCALLTYPE GetCurrentPercent(float* pcurPercent/*[in,out]*/) = 0;
  // [8] Method GetCurrentValue
  virtual HRESULT STDMETHODCALLTYPE GetCurrentValue(float* pcurValue/*[in,out]*/) = 0;
  // [9] Method GetUnitOfMeasure
  virtual HRESULT STDMETHODCALLTYPE GetUnitOfMeasure(BSTR* pUnitOfMeasure/*[in,out]*/) = 0;
  // [10] Method GetMinValue
  virtual HRESULT STDMETHODCALLTYPE GetMinValue(float* pMinValue/*[in,out]*/) = 0;
  // [11] Method GetMaxValue
  virtual HRESULT STDMETHODCALLTYPE GetMaxValue(float* pMaxValue/*[in,out]*/) = 0;
  // [12] Method GetNumberOfSteps
  virtual HRESULT STDMETHODCALLTYPE GetNumberOfSteps(unsigned_long* pNumberOfSteps/*[in,out]*/) = 0;
  // [13] Method SetCurrentPercent
  virtual HRESULT STDMETHODCALLTYPE SetCurrentPercent(float newCurrentPercent/*[in]*/) = 0;
  // [14] Method SetCurrentValue
  virtual HRESULT STDMETHODCALLTYPE SetCurrentValue(float newCurrentValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  float __fastcall get_CurrentPercent(void)
  {
    float pCurrentPercent;
    OLECHECK(this->get_CurrentPercent((float*)&pCurrentPercent));
    return pCurrentPercent;
  }

  float __fastcall get_CurrentValue(void)
  {
    float pCurrentValue;
    OLECHECK(this->get_CurrentValue((float*)&pCurrentValue));
    return pCurrentValue;
  }

  BSTR __fastcall get_UnitOfMeasure(void)
  {
    BSTR pUnitOfMeasure = 0;
    OLECHECK(this->get_UnitOfMeasure((BSTR*)&pUnitOfMeasure));
    return pUnitOfMeasure;
  }

  float __fastcall get_MinValue(void)
  {
    float pMinValue;
    OLECHECK(this->get_MinValue((float*)&pMinValue));
    return pMinValue;
  }

  float __fastcall get_MaxValue(void)
  {
    float pMaxValue;
    OLECHECK(this->get_MaxValue((float*)&pMaxValue));
    return pMaxValue;
  }

  unsigned_long __fastcall get_NumberOfSteps(void)
  {
    unsigned_long pNumberOfSteps;
    OLECHECK(this->get_NumberOfSteps((unsigned_long*)&pNumberOfSteps));
    return pNumberOfSteps;
  }


  __property   float           CurrentPercent = {read = get_CurrentPercent};
  __property   float           CurrentValue = {read = get_CurrentValue};
  __property   BSTR            UnitOfMeasure = {read = get_UnitOfMeasure};
  __property   float           MinValue = {read = get_MinValue};
  __property   float           MaxValue = {read = get_MaxValue};
  __property   unsigned_long   NumberOfSteps = {read = get_NumberOfSteps};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUPnPService_IWMPUPnPConnectionManagerDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AF41667-542C-42EA-BF53-DC101168C503}
// *********************************************************************//
interface IUPnPService_IWMPUPnPConnectionManagerDual  : public IDispatch
{
public:
  // [1] Property SourceProtocolINfo
  virtual HRESULT STDMETHODCALLTYPE get_SourceProtocolInfo(BSTR* pSourceProtocolInfo/*[out,retval]*/) = 0;
  // [2] Property SinkProtocolInfo
  virtual HRESULT STDMETHODCALLTYPE get_SinkProtocolInfo(BSTR* pSinkProtocolInfo/*[out,retval]*/) = 0;
  // [3] Property CurrentConnectionIDs
  virtual HRESULT STDMETHODCALLTYPE get_CurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[out,retval]*/) = 0;
  // [4] Property A_ARG_TYPE_ConnectionStatus
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_ConnectionStatus(BSTR* pA_ARG_TYPE_ConnectionStatus/*[out,retval]*/) = 0;
  // [5] Property A_ARG_TYPE_ConnectionManager
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_ConnectionManager(BSTR* pA_ARG_TYPE_ConnectionManager/*[out,retval]*/) = 0;
  // [6] Property A_ARG_TYPE_Direction
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_Direction(BSTR* pA_ARG_TYPE_Direction/*[out,retval]*/) = 0;
  // [7] Property A_ARG_TYPE_ProtocolInfo
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_ProtocolInfo(BSTR* pA_ARG_TYPE_ProtocolInfo/*[out,retval]*/) = 0;
  // [8] Property A_ARG_TYPE_ConnectionID
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_ConnectionID(long* pA_ARG_TYPE_ConnectionID/*[out,retval]*/) = 0;
  // [9] Property A_ARG_TYPE_AVTransportID
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_AVTransportID(long* pA_ARG_TYPE_AVTransportID/*[out,retval]*/) = 0;
  // [10] Property A_ARG_TYPE_RcsID
  virtual HRESULT STDMETHODCALLTYPE get_A_ARG_TYPE_RcsID(long* pA_ARG_TYPE_RcsID/*[out,retval]*/) = 0;
  // [11] Method GetProtocolInfo
  virtual HRESULT STDMETHODCALLTYPE GetProtocolInfo(BSTR* pSourceProtocol/*[in,out]*/, 
                                                    BSTR* pSinkProtocol/*[in,out]*/) = 0;
  // [12] Method PrepareForConnection
  virtual HRESULT STDMETHODCALLTYPE PrepareForConnection(BSTR remoteProtocolInfo/*[in]*/, 
                                                         BSTR peerConnectionManager/*[in]*/, 
                                                         long peerConnectionID/*[in]*/, 
                                                         BSTR direction/*[in]*/, 
                                                         long* pConnectionID/*[in,out]*/, 
                                                         long* pAVTransportID/*[in,out]*/, 
                                                         long* pResID/*[in,out]*/) = 0;
  // [13] Method ConnectionComplete
  virtual HRESULT STDMETHODCALLTYPE ConnectionComplete(long connectionID/*[in]*/) = 0;
  // [14] Method GetCurrentConnectionIDs
  virtual HRESULT STDMETHODCALLTYPE GetCurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[in,out]*/) = 0;
  // [15] Method GetCurrentConnectionInfo
  virtual HRESULT STDMETHODCALLTYPE GetCurrentConnectionInfo(long connectionID/*[in]*/, 
                                                             long* pResID/*[in,out]*/, 
                                                             long* pAVTransportID/*[in,out]*/, 
                                                             BSTR* pProtocolInfo/*[in,out]*/, 
                                                             BSTR* pPeerConnectionManager/*[in,out]*/, 
                                                             long* pPeerConnectionID/*[in,out]*/, 
                                                             BSTR* pDirection/*[in,out]*/, 
                                                             BSTR* pStatus/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SourceProtocolInfo(void)
  {
    BSTR pSourceProtocolInfo = 0;
    OLECHECK(this->get_SourceProtocolInfo((BSTR*)&pSourceProtocolInfo));
    return pSourceProtocolInfo;
  }

  BSTR __fastcall get_SinkProtocolInfo(void)
  {
    BSTR pSinkProtocolInfo = 0;
    OLECHECK(this->get_SinkProtocolInfo((BSTR*)&pSinkProtocolInfo));
    return pSinkProtocolInfo;
  }

  BSTR __fastcall get_CurrentConnectionIDs(void)
  {
    BSTR pCurrentConnectionIDs = 0;
    OLECHECK(this->get_CurrentConnectionIDs((BSTR*)&pCurrentConnectionIDs));
    return pCurrentConnectionIDs;
  }

  BSTR __fastcall get_A_ARG_TYPE_ConnectionStatus(void)
  {
    BSTR pA_ARG_TYPE_ConnectionStatus = 0;
    OLECHECK(this->get_A_ARG_TYPE_ConnectionStatus((BSTR*)&pA_ARG_TYPE_ConnectionStatus));
    return pA_ARG_TYPE_ConnectionStatus;
  }

  BSTR __fastcall get_A_ARG_TYPE_ConnectionManager(void)
  {
    BSTR pA_ARG_TYPE_ConnectionManager = 0;
    OLECHECK(this->get_A_ARG_TYPE_ConnectionManager((BSTR*)&pA_ARG_TYPE_ConnectionManager));
    return pA_ARG_TYPE_ConnectionManager;
  }

  BSTR __fastcall get_A_ARG_TYPE_Direction(void)
  {
    BSTR pA_ARG_TYPE_Direction = 0;
    OLECHECK(this->get_A_ARG_TYPE_Direction((BSTR*)&pA_ARG_TYPE_Direction));
    return pA_ARG_TYPE_Direction;
  }

  BSTR __fastcall get_A_ARG_TYPE_ProtocolInfo(void)
  {
    BSTR pA_ARG_TYPE_ProtocolInfo = 0;
    OLECHECK(this->get_A_ARG_TYPE_ProtocolInfo((BSTR*)&pA_ARG_TYPE_ProtocolInfo));
    return pA_ARG_TYPE_ProtocolInfo;
  }

  long __fastcall get_A_ARG_TYPE_ConnectionID(void)
  {
    long pA_ARG_TYPE_ConnectionID;
    OLECHECK(this->get_A_ARG_TYPE_ConnectionID((long*)&pA_ARG_TYPE_ConnectionID));
    return pA_ARG_TYPE_ConnectionID;
  }

  long __fastcall get_A_ARG_TYPE_AVTransportID(void)
  {
    long pA_ARG_TYPE_AVTransportID;
    OLECHECK(this->get_A_ARG_TYPE_AVTransportID((long*)&pA_ARG_TYPE_AVTransportID));
    return pA_ARG_TYPE_AVTransportID;
  }

  long __fastcall get_A_ARG_TYPE_RcsID(void)
  {
    long pA_ARG_TYPE_RcsID;
    OLECHECK(this->get_A_ARG_TYPE_RcsID((long*)&pA_ARG_TYPE_RcsID));
    return pA_ARG_TYPE_RcsID;
  }


  __property   BSTR            SourceProtocolInfo = {read = get_SourceProtocolInfo};
  __property   BSTR            SinkProtocolInfo = {read = get_SinkProtocolInfo};
  __property   BSTR            CurrentConnectionIDs = {read = get_CurrentConnectionIDs};
  __property   BSTR            A_ARG_TYPE_ConnectionStatus = {read = get_A_ARG_TYPE_ConnectionStatus};
  __property   BSTR            A_ARG_TYPE_ConnectionManager = {read = get_A_ARG_TYPE_ConnectionManager};
  __property   BSTR            A_ARG_TYPE_Direction = {read = get_A_ARG_TYPE_Direction};
  __property   BSTR            A_ARG_TYPE_ProtocolInfo = {read = get_A_ARG_TYPE_ProtocolInfo};
  __property   long            A_ARG_TYPE_ConnectionID = {read = get_A_ARG_TYPE_ConnectionID};
  __property   long            A_ARG_TYPE_AVTransportID = {read = get_A_ARG_TYPE_AVTransportID};
  __property   long            A_ARG_TYPE_RcsID = {read = get_A_ARG_TYPE_RcsID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUPnPService_IWMPUPnPSkinRetrieverDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC743628-971D-4C1E-B019-50543EFE2BAD}
// *********************************************************************//
interface IUPnPService_IWMPUPnPSkinRetrieverDual  : public IDispatch
{
public:
  // [1] Property SkinURL
  virtual HRESULT STDMETHODCALLTYPE get_SkinURL(BSTR* pSkinURL/*[out,retval]*/) = 0;
  // [2] Method GetSkinURL
  virtual HRESULT STDMETHODCALLTYPE GetSkinURL(BSTR* ppbstrSkinURL/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SkinURL(void)
  {
    BSTR pSkinURL = 0;
    OLECHECK(this->get_SkinURL((BSTR*)&pSkinURL));
    return pSkinURL;
  }


  __property   BSTR            SkinURL = {read = get_SkinURL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IWMPEvents>  TCOMIWMPEvents;

typedef TComInterface<IWMPEvents2>  TCOMIWMPEvents2;

typedef TComInterface<IWMPSyncDevice>  TCOMIWMPSyncDevice;

typedef TComInterface<IWMPEvents3>  TCOMIWMPEvents3;

typedef TComInterface<IWMPCdromRip>  TCOMIWMPCdromRip;

typedef TComInterface<IWMPCdromBurn>  TCOMIWMPCdromBurn;

typedef TComInterface<IWMPPlaylist>  TCOMIWMPPlaylist;

// *********************************************************************//
// DispIntf:  IWMPPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5F0F4F1-130C-11D3-B14E-00C04F79FAA6}
// *********************************************************************//
template<class T>
class IWMPPlaylistDispT : public TAutoDriver<IWMPPlaylist>
{
public:
  IWMPPlaylistDispT(){}

  IWMPPlaylistDispT(IWMPPlaylist *pintf)
  {
    TAutoDriver<IWMPPlaylist>::Bind(pintf, false);
  }

  IWMPPlaylistDispT(IWMPPlaylistPtr pintf)
  {
    TAutoDriver<IWMPPlaylist>::Bind(pintf, true);
  }

  IWMPPlaylistDispT& operator=(IWMPPlaylist *pintf)
  {
    TAutoDriver<IWMPPlaylist>::Bind(pintf, false);
    return *this;
  }

  IWMPPlaylistDispT& operator=(IWMPPlaylistPtr pintf)
  {
    TAutoDriver<IWMPPlaylist>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall get_name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall set_name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_attributeCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_attributeCount(void);
  HRESULT         __fastcall get_attributeName(long lIndex/*[in]*/, 
                                               BSTR* pbstrAttributeName/*[out,retval]*/);
  BSTR            __fastcall get_attributeName(long lIndex/*[in]*/);
  HRESULT         __fastcall get_Item(long lIndex, 
                                      Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall get_Item(long lIndex);
  HRESULT         __fastcall getItemInfo(BSTR bstrName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall setItemInfo(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/, 
                                             VARIANT_BOOL* pvbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/);
  HRESULT         __fastcall clear();
  HRESULT         __fastcall insertItem(long lIndex/*[in]*/, 
                                        Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall appendItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall removeItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall moveItem(long lIndexOld, long lIndexNew);

  __property   long            count = {read = get_count};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            attributeCount = {read = get_attributeCount};
};
typedef IWMPPlaylistDispT<IWMPPlaylist> IWMPPlaylistDisp;

typedef TComInterface<IWMPMedia>  TCOMIWMPMedia;

// *********************************************************************//
// DispIntf:  IWMPMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94D55E95-3FAC-11D3-B155-00C04F79FAA6}
// *********************************************************************//
template<class T>
class IWMPMediaDispT : public TAutoDriver<IWMPMedia>
{
public:
  IWMPMediaDispT(){}

  IWMPMediaDispT(IWMPMedia *pintf)
  {
    TAutoDriver<IWMPMedia>::Bind(pintf, false);
  }

  IWMPMediaDispT(IWMPMediaPtr pintf)
  {
    TAutoDriver<IWMPMedia>::Bind(pintf, true);
  }

  IWMPMediaDispT& operator=(IWMPMedia *pintf)
  {
    TAutoDriver<IWMPMedia>::Bind(pintf, false);
    return *this;
  }

  IWMPMediaDispT& operator=(IWMPMediaPtr pintf)
  {
    TAutoDriver<IWMPMedia>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                             VARIANT_BOOL* pvbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/);
  BSTR            __fastcall get_sourceURL(void);
  HRESULT         __fastcall get_name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall set_name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_imageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_imageSourceWidth(void);
  HRESULT         __fastcall get_imageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_imageSourceHeight(void);
  HRESULT         __fastcall get_markerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_markerCount(void);
  HRESULT         __fastcall getMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall getMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall getMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall getMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall get_duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_duration(void);
  HRESULT         __fastcall get_durationString(BSTR* pbstrDuration/*[out,retval]*/);
  BSTR            __fastcall get_durationString(void);
  HRESULT         __fastcall get_attributeCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_attributeCount(void);
  HRESULT         __fastcall getAttributeName(long lIndex/*[in]*/, 
                                              BSTR* pbstrItemName/*[out,retval]*/);
  BSTR            __fastcall getAttributeName(long lIndex/*[in]*/);
  HRESULT         __fastcall getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/);
  HRESULT         __fastcall getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfoByAtom(long lAtom/*[in]*/);
  HRESULT         __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                                        VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/);
  HRESULT         __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                            VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/);

  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            imageSourceWidth = {read = get_imageSourceWidth};
  __property   long            imageSourceHeight = {read = get_imageSourceHeight};
  __property   long            markerCount = {read = get_markerCount};
  __property   double          duration = {read = get_duration};
  __property   BSTR            durationString = {read = get_durationString};
  __property   long            attributeCount = {read = get_attributeCount};
};
typedef IWMPMediaDispT<IWMPMedia> IWMPMediaDisp;

typedef TComInterface<IWMPLibrary>  TCOMIWMPLibrary;

typedef TComInterface<IWMPMediaCollection>  TCOMIWMPMediaCollection;

// *********************************************************************//
// DispIntf:  IWMPMediaCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8363BC22-B4B4-4B19-989D-1CD765749DD1}
// *********************************************************************//
template<class T>
class IWMPMediaCollectionDispT : public TAutoDriver<IWMPMediaCollection>
{
public:
  IWMPMediaCollectionDispT(){}

  IWMPMediaCollectionDispT(IWMPMediaCollection *pintf)
  {
    TAutoDriver<IWMPMediaCollection>::Bind(pintf, false);
  }

  IWMPMediaCollectionDispT(IWMPMediaCollectionPtr pintf)
  {
    TAutoDriver<IWMPMediaCollection>::Bind(pintf, true);
  }

  IWMPMediaCollectionDispT& operator=(IWMPMediaCollection *pintf)
  {
    TAutoDriver<IWMPMediaCollection>::Bind(pintf, false);
    return *this;
  }

  IWMPMediaCollectionDispT& operator=(IWMPMediaCollectionPtr pintf)
  {
    TAutoDriver<IWMPMediaCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall add(BSTR bstrURL/*[in]*/, 
                                 Wmplib_tlb::IWMPMedia** ppItem/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall add(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall getAll(Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getAll(void);
  HRESULT         __fastcall getByName(BSTR bstrName/*[in]*/, 
                                       Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByName(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall getByGenre(BSTR bstrGenre/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByGenre(BSTR bstrGenre/*[in]*/);
  HRESULT         __fastcall getByAuthor(BSTR bstrAuthor/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAuthor(BSTR bstrAuthor/*[in]*/);
  HRESULT         __fastcall getByAlbum(BSTR bstrAlbum/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAlbum(BSTR bstrAlbum/*[in]*/);
  HRESULT         __fastcall getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/, 
                                            Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAttribute(BSTR bstrAttribute/*[in]*/, 
                                                      BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall remove(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                    VARIANT_BOOL varfDeleteFile/*[in]*/);
  HRESULT         __fastcall getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/, 
                                                          Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPStringCollection* __fastcall getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                                            BSTR bstrMediaType/*[in]*/);
  HRESULT         __fastcall getMediaAtom(BSTR bstrItemName/*[in]*/, long* plAtom/*[out,retval]*/);
  long            __fastcall getMediaAtom(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall setDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                        VARIANT_BOOL varfIsDeleted/*[in]*/);
  HRESULT         __fastcall isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                       VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/);

};
typedef IWMPMediaCollectionDispT<IWMPMediaCollection> IWMPMediaCollectionDisp;

typedef TComInterface<IWMPStringCollection>  TCOMIWMPStringCollection;

// *********************************************************************//
// DispIntf:  IWMPStringCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A976298-8C0D-11D3-B389-00C04F68574B}
// *********************************************************************//
template<class T>
class IWMPStringCollectionDispT : public TAutoDriver<IWMPStringCollection>
{
public:
  IWMPStringCollectionDispT(){}

  IWMPStringCollectionDispT(IWMPStringCollection *pintf)
  {
    TAutoDriver<IWMPStringCollection>::Bind(pintf, false);
  }

  IWMPStringCollectionDispT(IWMPStringCollectionPtr pintf)
  {
    TAutoDriver<IWMPStringCollection>::Bind(pintf, true);
  }

  IWMPStringCollectionDispT& operator=(IWMPStringCollection *pintf)
  {
    TAutoDriver<IWMPStringCollection>::Bind(pintf, false);
    return *this;
  }

  IWMPStringCollectionDispT& operator=(IWMPStringCollectionPtr pintf)
  {
    TAutoDriver<IWMPStringCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall Item(long lIndex/*[in]*/, BSTR* pbstrString/*[out,retval]*/);
  BSTR            __fastcall Item(long lIndex/*[in]*/);

  __property   long            count = {read = get_count};
};
typedef IWMPStringCollectionDispT<IWMPStringCollection> IWMPStringCollectionDisp;

// *********************************************************************//
// DispIntf:  _WMPOCXEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6BF52A51-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
template <class T>
class _WMPOCXEventsDispT : public TAutoDriver<_WMPOCXEvents>
{
public:
  _WMPOCXEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OpenStateChange(long NewState/*[in]*/);
  void            __fastcall PlayStateChange(long NewState/*[in]*/);
  void            __fastcall AudioLanguageChange(long LangID/*[in]*/);
  void            __fastcall StatusChange();
  void            __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/);
  void            __fastcall NewStream();
  void            __fastcall Disconnect(long Result/*[in]*/);
  void            __fastcall Buffering(VARIANT_BOOL Start/*[in]*/);
  void            __fastcall Error();
  void            __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                     BSTR Description/*[in]*/);
  void            __fastcall EndOfStream(long Result/*[in]*/);
  void            __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/);
  void            __fastcall MarkerHit(long MarkerNum/*[in]*/);
  void            __fastcall DurationUnitChange(long NewDurationUnit/*[in]*/);
  void            __fastcall CdromMediaChange(long CdromNum/*[in]*/);
  void            __fastcall PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                            Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
  void            __fastcall CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
  void            __fastcall CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/);
  void            __fastcall MediaChange(LPDISPATCH Item/*[in]*/);
  void            __fastcall CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/);
  void            __fastcall CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/);
  void            __fastcall MediaCollectionChange();
  void            __fastcall MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                                 BSTR bstrAttribVal/*[in]*/);
  void            __fastcall MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                                   BSTR bstrAttribVal/*[in]*/);
  void            __fastcall MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                                   BSTR bstrOldAttribVal/*[in]*/, 
                                                                   BSTR bstrNewAttribVal/*[in]*/);
  void            __fastcall PlaylistCollectionChange();
  void            __fastcall PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/);
  void            __fastcall PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/);
  void            __fastcall PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                                    VARIANT_BOOL varfIsDeleted/*[in]*/);
  void            __fastcall ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/);
  void            __fastcall MediaError(LPDISPATCH pMediaObject/*[in]*/);
  void            __fastcall OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/);
  void            __fastcall DomainChange(BSTR strDomain/*[in]*/);
  void            __fastcall SwitchedToPlayerApplication();
  void            __fastcall SwitchedToControl();
  void            __fastcall PlayerDockedStateChange();
  void            __fastcall PlayerReconnect();
  void            __fastcall _Click(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                    long fX/*[in]*/, long fY/*[in]*/);
  void            __fastcall DoubleClick(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                         long fX/*[in]*/, long fY/*[in]*/);
  void            __fastcall KeyDown(short nKeyCode/*[in]*/, short nShiftState/*[in]*/);
  void            __fastcall KeyPress(short nKeyAscii/*[in]*/);
  void            __fastcall KeyUp(short nKeyCode/*[in]*/, short nShiftState/*[in]*/);
  void            __fastcall MouseDown(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                       long fX/*[in]*/, long fY/*[in]*/);
  void            __fastcall MouseMove(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                       long fX/*[in]*/, long fY/*[in]*/);
  void            __fastcall MouseUp(short nButton/*[in]*/, short nShiftState/*[in]*/, 
                                     long fX/*[in]*/, long fY/*[in]*/);
  void            __fastcall DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/);
  void            __fastcall DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/);
  void            __fastcall DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                Wmplib_tlb::WMPDeviceStatus NewStatus/*[in]*/);
  void            __fastcall DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                   Wmplib_tlb::WMPSyncState NewState/*[in]*/);
  void            __fastcall DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                             LPDISPATCH pMedia/*[in]*/);
  void            __fastcall CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                       HRESULT hrResult/*[in]*/);
  void            __fastcall CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                 Wmplib_tlb::WMPRipState wmprs/*[in]*/);
  void            __fastcall CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                                LPDISPATCH pMedia/*[in]*/);
  void            __fastcall CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                  Wmplib_tlb::WMPBurnState wmpbs/*[in]*/);
  void            __fastcall CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                                 LPDISPATCH pMedia/*[in]*/);
  void            __fastcall CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                            HRESULT hrError/*[in]*/);
  void            __fastcall LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/);
  void            __fastcall LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/);
  void            __fastcall FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss/*[in]*/);
  void            __fastcall StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                                    Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                                    , long lCollectionIndex/*[in]*/);
  void            __fastcall MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/);
  void            __fastcall MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/);

};
typedef _WMPOCXEventsDispT<_WMPOCXEvents> _WMPOCXEventsDisp;

typedef TComInterface<IWMPCore>  TCOMIWMPCore;

// *********************************************************************//
// DispIntf:  IWMPCore
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D84CCA99-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
template<class T>
class IWMPCoreDispT : public TAutoDriver<IWMPCore>
{
public:
  IWMPCoreDispT(){}

  IWMPCoreDispT(IWMPCore *pintf)
  {
    TAutoDriver<IWMPCore>::Bind(pintf, false);
  }

  IWMPCoreDispT(IWMPCorePtr pintf)
  {
    TAutoDriver<IWMPCore>::Bind(pintf, true);
  }

  IWMPCoreDispT& operator=(IWMPCore *pintf)
  {
    TAutoDriver<IWMPCore>::Bind(pintf, false);
    return *this;
  }

  IWMPCoreDispT& operator=(IWMPCorePtr pintf)
  {
    TAutoDriver<IWMPCore>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPCoreDispT<IWMPCore> IWMPCoreDisp;

typedef TComInterface<IWMPCore2>  TCOMIWMPCore2;

// *********************************************************************//
// DispIntf:  IWMPCore2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC17E5B7-7561-4C18-BB90-17D485775659}
// *********************************************************************//
template<class T>
class IWMPCore2DispT : public TAutoDriver<IWMPCore2>
{
public:
  IWMPCore2DispT(){}

  IWMPCore2DispT(IWMPCore2 *pintf)
  {
    TAutoDriver<IWMPCore2>::Bind(pintf, false);
  }

  IWMPCore2DispT(IWMPCore2Ptr pintf)
  {
    TAutoDriver<IWMPCore2>::Bind(pintf, true);
  }

  IWMPCore2DispT& operator=(IWMPCore2 *pintf)
  {
    TAutoDriver<IWMPCore2>::Bind(pintf, false);
    return *this;
  }

  IWMPCore2DispT& operator=(IWMPCore2Ptr pintf)
  {
    TAutoDriver<IWMPCore2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   Wmplib_tlb::IWMPDVDPtr dvd = {read = get_dvd};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPCore2DispT<IWMPCore2> IWMPCore2Disp;

// *********************************************************************//
// SmartIntf: TCOMIWMPCore3
// Interface: IWMPCore3
// *********************************************************************//
template <class T /* IWMPCore3 */ >
class TCOMIWMPCore3T : public TComInterface<IWMPCore3>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPCore3T() {}
  TCOMIWMPCore3T(IWMPCore3 *intf, bool addRef = false) : TComInterface<IWMPCore3>(intf, addRef) {}
  TCOMIWMPCore3T(const TCOMIWMPCore3T& src) : TComInterface<IWMPCore3>(src) {}
  TCOMIWMPCore3T& operator=(const TCOMIWMPCore3T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall newMedia(BSTR bstrURL/*[in]*/, 
                                      Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/);

};
typedef TCOMIWMPCore3T<IWMPCore3> TCOMIWMPCore3;

// *********************************************************************//
// DispIntf:  IWMPCore3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7587C667-628F-499F-88E7-6A6F4E888464}
// *********************************************************************//
template<class T>
class IWMPCore3DispT : public TAutoDriver<IWMPCore3>
{
public:
  IWMPCore3DispT(){}

  IWMPCore3DispT(IWMPCore3 *pintf)
  {
    TAutoDriver<IWMPCore3>::Bind(pintf, false);
  }

  IWMPCore3DispT(IWMPCore3Ptr pintf)
  {
    TAutoDriver<IWMPCore3>::Bind(pintf, true);
  }

  IWMPCore3DispT& operator=(IWMPCore3 *pintf)
  {
    TAutoDriver<IWMPCore3>::Bind(pintf, false);
    return *this;
  }

  IWMPCore3DispT& operator=(IWMPCore3Ptr pintf)
  {
    TAutoDriver<IWMPCore3>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPCore));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPCore);
  }

  HRESULT         __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall newMedia(BSTR bstrURL/*[in]*/, 
                                      Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);


  __property   Wmplib_tlb::IWMPDVDPtr dvd = {read = get_dvd};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPCore3DispT<IWMPCore3> IWMPCore3Disp;

// *********************************************************************//
// SmartIntf: TCOMIWMPPlayer4
// Interface: IWMPPlayer4
// *********************************************************************//
template <class T /* IWMPPlayer4 */ >
class TCOMIWMPPlayer4T : public TComInterface<IWMPPlayer4>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPPlayer4T() {}
  TCOMIWMPPlayer4T(IWMPPlayer4 *intf, bool addRef = false) : TComInterface<IWMPPlayer4>(intf, addRef) {}
  TCOMIWMPPlayer4T(const TCOMIWMPPlayer4T& src) : TComInterface<IWMPPlayer4>(src) {}
  TCOMIWMPPlayer4T& operator=(const TCOMIWMPPlayer4T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen);
  HRESULT         __fastcall get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableContextMenu(void);
  HRESULT         __fastcall set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu);
  HRESULT         __fastcall set_uiMode(BSTR pbstrMode/*[in]*/);
  HRESULT         __fastcall get_uiMode(BSTR* pbstrMode/*[out,retval]*/);
  BSTR            __fastcall get_uiMode(void);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowlessVideo(void);
  HRESULT         __fastcall set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_isRemote(VARIANT_BOOL* pvarfIsRemote/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isRemote(void);
  HRESULT         __fastcall get_playerApplication(Wmplib_tlb::IWMPPlayerApplication** ppIWMPPlayerApplication/*[out,retval]*/);
  Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall get_playerApplication(void);
  HRESULT         __fastcall openPlayer(BSTR bstrURL/*[in]*/);

  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};
  __property   VARIANT_BOOL    isRemote = {read = get_isRemote};
  __property   Wmplib_tlb::IWMPPlayerApplicationPtr playerApplication = {read = get_playerApplication};
};
typedef TCOMIWMPPlayer4T<IWMPPlayer4> TCOMIWMPPlayer4;

// *********************************************************************//
// DispIntf:  IWMPPlayer4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C497D62-8919-413C-82DB-E935FB3EC584}
// *********************************************************************//
template<class T>
class IWMPPlayer4DispT : public TAutoDriver<IWMPPlayer4>
{
public:
  IWMPPlayer4DispT(){}

  IWMPPlayer4DispT(IWMPPlayer4 *pintf)
  {
    TAutoDriver<IWMPPlayer4>::Bind(pintf, false);
  }

  IWMPPlayer4DispT(IWMPPlayer4Ptr pintf)
  {
    TAutoDriver<IWMPPlayer4>::Bind(pintf, true);
  }

  IWMPPlayer4DispT& operator=(IWMPPlayer4 *pintf)
  {
    TAutoDriver<IWMPPlayer4>::Bind(pintf, false);
    return *this;
  }

  IWMPPlayer4DispT& operator=(IWMPPlayer4Ptr pintf)
  {
    TAutoDriver<IWMPPlayer4>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WindowsMediaPlayer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WindowsMediaPlayer);
  }

  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen);
  HRESULT         __fastcall get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableContextMenu(void);
  HRESULT         __fastcall set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu);
  HRESULT         __fastcall set_uiMode(BSTR pbstrMode/*[in]*/);
  HRESULT         __fastcall get_uiMode(BSTR* pbstrMode/*[out,retval]*/);
  BSTR            __fastcall get_uiMode(void);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowlessVideo(void);
  HRESULT         __fastcall set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_isRemote(VARIANT_BOOL* pvarfIsRemote/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isRemote(void);
  HRESULT         __fastcall get_playerApplication(Wmplib_tlb::IWMPPlayerApplication** ppIWMPPlayerApplication/*[out,retval]*/);
  Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall get_playerApplication(void);
  HRESULT         __fastcall openPlayer(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall newMedia(BSTR bstrURL/*[in]*/, 
                                      Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall newMedia(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};
  __property   VARIANT_BOOL    isRemote = {read = get_isRemote};
  __property   Wmplib_tlb::IWMPPlayerApplicationPtr playerApplication = {read = get_playerApplication};


  __property   Wmplib_tlb::IWMPDVDPtr dvd = {read = get_dvd};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPPlayer4DispT<IWMPPlayer4> IWMPPlayer4Disp;

typedef TComInterface<IWMPPlayer3>  TCOMIWMPPlayer3;

// *********************************************************************//
// DispIntf:  IWMPPlayer3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54062B68-052A-4C25-A39F-8B63346511D4}
// *********************************************************************//
template<class T>
class IWMPPlayer3DispT : public TAutoDriver<IWMPPlayer3>
{
public:
  IWMPPlayer3DispT(){}

  IWMPPlayer3DispT(IWMPPlayer3 *pintf)
  {
    TAutoDriver<IWMPPlayer3>::Bind(pintf, false);
  }

  IWMPPlayer3DispT(IWMPPlayer3Ptr pintf)
  {
    TAutoDriver<IWMPPlayer3>::Bind(pintf, true);
  }

  IWMPPlayer3DispT& operator=(IWMPPlayer3 *pintf)
  {
    TAutoDriver<IWMPPlayer3>::Bind(pintf, false);
    return *this;
  }

  IWMPPlayer3DispT& operator=(IWMPPlayer3Ptr pintf)
  {
    TAutoDriver<IWMPPlayer3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen);
  HRESULT         __fastcall get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableContextMenu(void);
  HRESULT         __fastcall set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu);
  HRESULT         __fastcall set_uiMode(BSTR pbstrMode/*[in]*/);
  HRESULT         __fastcall get_uiMode(BSTR* pbstrMode/*[out,retval]*/);
  BSTR            __fastcall get_uiMode(void);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowlessVideo(void);
  HRESULT         __fastcall set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/);
  Wmplib_tlb::IWMPDVDPtr __fastcall get_dvd(void);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};

  __property   Wmplib_tlb::IWMPDVDPtr dvd = {read = get_dvd};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPPlayer3DispT<IWMPPlayer3> IWMPPlayer3Disp;

typedef TComInterface<IWMPControls>  TCOMIWMPControls;

// *********************************************************************//
// DispIntf:  IWMPControls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74C09E02-F828-11D2-A74B-00A0C905F36E}
// *********************************************************************//
template<class T>
class IWMPControlsDispT : public TAutoDriver<IWMPControls>
{
public:
  IWMPControlsDispT(){}

  IWMPControlsDispT(IWMPControls *pintf)
  {
    TAutoDriver<IWMPControls>::Bind(pintf, false);
  }

  IWMPControlsDispT(IWMPControlsPtr pintf)
  {
    TAutoDriver<IWMPControls>::Bind(pintf, true);
  }

  IWMPControlsDispT& operator=(IWMPControls *pintf)
  {
    TAutoDriver<IWMPControls>::Bind(pintf, false);
    return *this;
  }

  IWMPControlsDispT& operator=(IWMPControlsPtr pintf)
  {
    TAutoDriver<IWMPControls>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall play();
  HRESULT         __fastcall stop();
  HRESULT         __fastcall pause();
  HRESULT         __fastcall fastForward();
  HRESULT         __fastcall fastReverse();
  HRESULT         __fastcall get_currentPosition(double* pdCurrentPosition/*[out,retval]*/);
  double          __fastcall get_currentPosition(void);
  HRESULT         __fastcall set_currentPosition(double pdCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/);
  BSTR            __fastcall get_currentPositionString(void);
  HRESULT         __fastcall next();
  HRESULT         __fastcall previous();
  HRESULT         __fastcall get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentItem(void);
  HRESULT         __fastcall set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_currentMarker(long* plMarker/*[out,retval]*/);
  long            __fastcall get_currentMarker(void);
  HRESULT         __fastcall set_currentMarker(long plMarker/*[in]*/);
  HRESULT         __fastcall playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);

  __property   double          currentPosition = {read = get_currentPosition, write = set_currentPosition};
  __property   BSTR            currentPositionString = {read = get_currentPositionString};
  __property   Wmplib_tlb::IWMPMediaPtr currentItem = {read = get_currentItem, write = set_currentItem};
  __property   long            currentMarker = {read = get_currentMarker, write = set_currentMarker};
};
typedef IWMPControlsDispT<IWMPControls> IWMPControlsDisp;

typedef TComInterface<IWMPSettings>  TCOMIWMPSettings;

// *********************************************************************//
// DispIntf:  IWMPSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9104D1AB-80C9-4FED-ABF0-2E6417A6DF14}
// *********************************************************************//
template<class T>
class IWMPSettingsDispT : public TAutoDriver<IWMPSettings>
{
public:
  IWMPSettingsDispT(){}

  IWMPSettingsDispT(IWMPSettings *pintf)
  {
    TAutoDriver<IWMPSettings>::Bind(pintf, false);
  }

  IWMPSettingsDispT(IWMPSettingsPtr pintf)
  {
    TAutoDriver<IWMPSettings>::Bind(pintf, true);
  }

  IWMPSettingsDispT& operator=(IWMPSettings *pintf)
  {
    TAutoDriver<IWMPSettings>::Bind(pintf, false);
    return *this;
  }

  IWMPSettingsDispT& operator=(IWMPSettingsPtr pintf)
  {
    TAutoDriver<IWMPSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall get_autoStart(VARIANT_BOOL* pfAutoStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_autoStart(void);
  HRESULT         __fastcall set_autoStart(VARIANT_BOOL pfAutoStart/*[in]*/);
  HRESULT         __fastcall get_baseURL(BSTR* pbstrBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_baseURL(void);
  HRESULT         __fastcall set_baseURL(BSTR pbstrBaseURL/*[in]*/);
  HRESULT         __fastcall get_defaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/);
  BSTR            __fastcall get_defaultFrame(void);
  HRESULT         __fastcall set_defaultFrame(BSTR pbstrDefaultFrame/*[in]*/);
  HRESULT         __fastcall get_invokeURLs(VARIANT_BOOL* pfInvokeURLs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_invokeURLs(void);
  HRESULT         __fastcall set_invokeURLs(VARIANT_BOOL pfInvokeURLs/*[in]*/);
  HRESULT         __fastcall get_mute(VARIANT_BOOL* pfMute/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_mute(void);
  HRESULT         __fastcall set_mute(VARIANT_BOOL pfMute/*[in]*/);
  HRESULT         __fastcall get_playCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_playCount(void);
  HRESULT         __fastcall set_playCount(long plCount/*[in]*/);
  HRESULT         __fastcall get_rate(double* pdRate/*[out,retval]*/);
  double          __fastcall get_rate(void);
  HRESULT         __fastcall set_rate(double pdRate/*[in]*/);
  HRESULT         __fastcall get_balance(long* plBalance/*[out,retval]*/);
  long            __fastcall get_balance(void);
  HRESULT         __fastcall set_balance(long plBalance/*[in]*/);
  HRESULT         __fastcall get_volume(long* plVolume/*[out,retval]*/);
  long            __fastcall get_volume(void);
  HRESULT         __fastcall set_volume(long plVolume/*[in]*/);
  HRESULT         __fastcall getMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL* pvarfMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall getMode(BSTR bstrMode/*[in]*/);
  HRESULT         __fastcall setMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL varfMode/*[in]*/);
  HRESULT         __fastcall get_enableErrorDialogs(VARIANT_BOOL* pfEnableErrorDialogs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableErrorDialogs(void);
  HRESULT         __fastcall set_enableErrorDialogs(VARIANT_BOOL pfEnableErrorDialogs/*[in]*/);

  __property   VARIANT_BOOL    autoStart = {read = get_autoStart, write = set_autoStart};
  __property   BSTR            baseURL = {read = get_baseURL, write = set_baseURL};
  __property   BSTR            defaultFrame = {read = get_defaultFrame, write = set_defaultFrame};
  __property   VARIANT_BOOL    invokeURLs = {read = get_invokeURLs, write = set_invokeURLs};
  __property   VARIANT_BOOL    mute = {read = get_mute, write = set_mute};
  __property   long            playCount = {read = get_playCount, write = set_playCount};
  __property   double          rate = {read = get_rate, write = set_rate};
  __property   long            balance = {read = get_balance, write = set_balance};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   VARIANT_BOOL    enableErrorDialogs = {read = get_enableErrorDialogs, write = set_enableErrorDialogs};
};
typedef IWMPSettingsDispT<IWMPSettings> IWMPSettingsDisp;

typedef TComInterface<IWMPPlaylistCollection>  TCOMIWMPPlaylistCollection;

// *********************************************************************//
// DispIntf:  IWMPPlaylistCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10A13217-23A7-439B-B1C0-D847C79B7774}
// *********************************************************************//
template<class T>
class IWMPPlaylistCollectionDispT : public TAutoDriver<IWMPPlaylistCollection>
{
public:
  IWMPPlaylistCollectionDispT(){}

  IWMPPlaylistCollectionDispT(IWMPPlaylistCollection *pintf)
  {
    TAutoDriver<IWMPPlaylistCollection>::Bind(pintf, false);
  }

  IWMPPlaylistCollectionDispT(IWMPPlaylistCollectionPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCollection>::Bind(pintf, true);
  }

  IWMPPlaylistCollectionDispT& operator=(IWMPPlaylistCollection *pintf)
  {
    TAutoDriver<IWMPPlaylistCollection>::Bind(pintf, false);
    return *this;
  }

  IWMPPlaylistCollectionDispT& operator=(IWMPPlaylistCollectionPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall newPlaylist(BSTR bstrName/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall newPlaylist(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall getAll(Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistArray* __fastcall getAll(void);
  HRESULT         __fastcall getByName(BSTR bstrName/*[in]*/, 
                                       Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistArray* __fastcall getByName(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall remove(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/);
  HRESULT         __fastcall setDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                        VARIANT_BOOL varfIsDeleted/*[in]*/);
  HRESULT         __fastcall isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                       VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/);
  HRESULT         __fastcall importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                            Wmplib_tlb::IWMPPlaylist** ppImportedItem/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/);

};
typedef IWMPPlaylistCollectionDispT<IWMPPlaylistCollection> IWMPPlaylistCollectionDisp;

typedef TComInterface<IWMPPlaylistArray>  TCOMIWMPPlaylistArray;

// *********************************************************************//
// DispIntf:  IWMPPlaylistArray
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {679409C0-99F7-11D3-9FB7-00105AA620BB}
// *********************************************************************//
template<class T>
class IWMPPlaylistArrayDispT : public TAutoDriver<IWMPPlaylistArray>
{
public:
  IWMPPlaylistArrayDispT(){}

  IWMPPlaylistArrayDispT(IWMPPlaylistArray *pintf)
  {
    TAutoDriver<IWMPPlaylistArray>::Bind(pintf, false);
  }

  IWMPPlaylistArrayDispT(IWMPPlaylistArrayPtr pintf)
  {
    TAutoDriver<IWMPPlaylistArray>::Bind(pintf, true);
  }

  IWMPPlaylistArrayDispT& operator=(IWMPPlaylistArray *pintf)
  {
    TAutoDriver<IWMPPlaylistArray>::Bind(pintf, false);
    return *this;
  }

  IWMPPlaylistArrayDispT& operator=(IWMPPlaylistArrayPtr pintf)
  {
    TAutoDriver<IWMPPlaylistArray>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall Item(long lIndex/*[in]*/, 
                                  Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall Item(long lIndex/*[in]*/);

  __property   long            count = {read = get_count};
};
typedef IWMPPlaylistArrayDispT<IWMPPlaylistArray> IWMPPlaylistArrayDisp;

typedef TComInterface<IWMPNetwork>  TCOMIWMPNetwork;

// *********************************************************************//
// DispIntf:  IWMPNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7}
// *********************************************************************//
template<class T>
class IWMPNetworkDispT : public TAutoDriver<IWMPNetwork>
{
public:
  IWMPNetworkDispT(){}

  IWMPNetworkDispT(IWMPNetwork *pintf)
  {
    TAutoDriver<IWMPNetwork>::Bind(pintf, false);
  }

  IWMPNetworkDispT(IWMPNetworkPtr pintf)
  {
    TAutoDriver<IWMPNetwork>::Bind(pintf, true);
  }

  IWMPNetworkDispT& operator=(IWMPNetwork *pintf)
  {
    TAutoDriver<IWMPNetwork>::Bind(pintf, false);
    return *this;
  }

  IWMPNetworkDispT& operator=(IWMPNetworkPtr pintf)
  {
    TAutoDriver<IWMPNetwork>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_bandWidth(long* plBandwidth/*[out,retval]*/);
  long            __fastcall get_bandWidth(void);
  HRESULT         __fastcall get_recoveredPackets(long* plRecoveredPackets/*[out,retval]*/);
  long            __fastcall get_recoveredPackets(void);
  HRESULT         __fastcall get_sourceProtocol(BSTR* pbstrSourceProtocol/*[out,retval]*/);
  BSTR            __fastcall get_sourceProtocol(void);
  HRESULT         __fastcall get_receivedPackets(long* plReceivedPackets/*[out,retval]*/);
  long            __fastcall get_receivedPackets(void);
  HRESULT         __fastcall get_lostPackets(long* plLostPackets/*[out,retval]*/);
  long            __fastcall get_lostPackets(void);
  HRESULT         __fastcall get_receptionQuality(long* plReceptionQuality/*[out,retval]*/);
  long            __fastcall get_receptionQuality(void);
  HRESULT         __fastcall get_bufferingCount(long* plBufferingCount/*[out,retval]*/);
  long            __fastcall get_bufferingCount(void);
  HRESULT         __fastcall get_bufferingProgress(long* plBufferingProgress/*[out,retval]*/);
  long            __fastcall get_bufferingProgress(void);
  HRESULT         __fastcall get_bufferingTime(long* plBufferingTime/*[out,retval]*/);
  long            __fastcall get_bufferingTime(void);
  HRESULT         __fastcall set_bufferingTime(long plBufferingTime/*[in]*/);
  HRESULT         __fastcall get_frameRate(long* plFrameRate/*[out,retval]*/);
  long            __fastcall get_frameRate(void);
  HRESULT         __fastcall get_maxBitRate(long* plBitRate/*[out,retval]*/);
  long            __fastcall get_maxBitRate(void);
  HRESULT         __fastcall get_bitRate(long* plBitRate/*[out,retval]*/);
  long            __fastcall get_bitRate(void);
  HRESULT         __fastcall getProxySettings(BSTR bstrProtocol/*[in]*/, 
                                              long* plProxySetting/*[out,retval]*/);
  long            __fastcall getProxySettings(BSTR bstrProtocol/*[in]*/);
  HRESULT         __fastcall setProxySettings(BSTR bstrProtocol/*[in]*/, long lProxySetting/*[in]*/);
  HRESULT         __fastcall getProxyName(BSTR bstrProtocol/*[in]*/, 
                                          BSTR* pbstrProxyName/*[out,retval]*/);
  BSTR            __fastcall getProxyName(BSTR bstrProtocol/*[in]*/);
  HRESULT         __fastcall setProxyName(BSTR bstrProtocol/*[in]*/, BSTR bstrProxyName/*[in]*/);
  HRESULT         __fastcall getProxyPort(BSTR bstrProtocol/*[in]*/, 
                                          long* lProxyPort/*[out,retval]*/);
  long            __fastcall getProxyPort(BSTR bstrProtocol/*[in]*/);
  HRESULT         __fastcall setProxyPort(BSTR bstrProtocol/*[in]*/, long lProxyPort/*[in]*/);
  HRESULT         __fastcall getProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                                   BSTR* pbstrExceptionList/*[out,retval]*/);
  BSTR            __fastcall getProxyExceptionList(BSTR bstrProtocol/*[in]*/);
  HRESULT         __fastcall setProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                                   BSTR pbstrExceptionList/*[in]*/);
  HRESULT         __fastcall getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                                    VARIANT_BOOL* pfBypassForLocal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/);
  HRESULT         __fastcall setProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                                    VARIANT_BOOL fBypassForLocal/*[in]*/);
  HRESULT         __fastcall get_maxBandwidth(long* lMaxBandwidth/*[out,retval]*/);
  long            __fastcall get_maxBandwidth(void);
  HRESULT         __fastcall set_maxBandwidth(long lMaxBandwidth/*[in]*/);
  HRESULT         __fastcall get_downloadProgress(long* plDownloadProgress/*[out,retval]*/);
  long            __fastcall get_downloadProgress(void);
  HRESULT         __fastcall get_encodedFrameRate(long* plFrameRate/*[out,retval]*/);
  long            __fastcall get_encodedFrameRate(void);
  HRESULT         __fastcall get_framesSkipped(long* plFrames/*[out,retval]*/);
  long            __fastcall get_framesSkipped(void);

  __property   long            bandWidth = {read = get_bandWidth};
  __property   long            recoveredPackets = {read = get_recoveredPackets};
  __property   BSTR            sourceProtocol = {read = get_sourceProtocol};
  __property   long            receivedPackets = {read = get_receivedPackets};
  __property   long            lostPackets = {read = get_lostPackets};
  __property   long            receptionQuality = {read = get_receptionQuality};
  __property   long            bufferingCount = {read = get_bufferingCount};
  __property   long            bufferingProgress = {read = get_bufferingProgress};
  __property   long            bufferingTime = {read = get_bufferingTime, write = set_bufferingTime};
  __property   long            frameRate = {read = get_frameRate};
  __property   long            maxBitRate = {read = get_maxBitRate};
  __property   long            bitRate = {read = get_bitRate};
  __property   long            maxBandwidth = {read = get_maxBandwidth, write = set_maxBandwidth};
  __property   long            downloadProgress = {read = get_downloadProgress};
  __property   long            encodedFrameRate = {read = get_encodedFrameRate};
  __property   long            framesSkipped = {read = get_framesSkipped};
};
typedef IWMPNetworkDispT<IWMPNetwork> IWMPNetworkDisp;

typedef TComInterface<IWMPCdromCollection>  TCOMIWMPCdromCollection;

// *********************************************************************//
// DispIntf:  IWMPCdromCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE4C8FE2-34B2-11D3-A3BF-006097C9B344}
// *********************************************************************//
template<class T>
class IWMPCdromCollectionDispT : public TAutoDriver<IWMPCdromCollection>
{
public:
  IWMPCdromCollectionDispT(){}

  IWMPCdromCollectionDispT(IWMPCdromCollection *pintf)
  {
    TAutoDriver<IWMPCdromCollection>::Bind(pintf, false);
  }

  IWMPCdromCollectionDispT(IWMPCdromCollectionPtr pintf)
  {
    TAutoDriver<IWMPCdromCollection>::Bind(pintf, true);
  }

  IWMPCdromCollectionDispT& operator=(IWMPCdromCollection *pintf)
  {
    TAutoDriver<IWMPCdromCollection>::Bind(pintf, false);
    return *this;
  }

  IWMPCdromCollectionDispT& operator=(IWMPCdromCollectionPtr pintf)
  {
    TAutoDriver<IWMPCdromCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall Item(long lIndex/*[in]*/, 
                                  Wmplib_tlb::IWMPCdrom** ppItem/*[out,retval]*/);
  Wmplib_tlb::IWMPCdrom* __fastcall Item(long lIndex/*[in]*/);
  HRESULT         __fastcall getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/, 
                                                 Wmplib_tlb::IWMPCdrom** ppCdrom/*[out,retval]*/);
  Wmplib_tlb::IWMPCdrom* __fastcall getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/);

  __property   long            count = {read = get_count};
};
typedef IWMPCdromCollectionDispT<IWMPCdromCollection> IWMPCdromCollectionDisp;

typedef TComInterface<IWMPCdrom>  TCOMIWMPCdrom;

// *********************************************************************//
// DispIntf:  IWMPCdrom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFAB6E98-8730-11D3-B388-00C04F68574B}
// *********************************************************************//
template<class T>
class IWMPCdromDispT : public TAutoDriver<IWMPCdrom>
{
public:
  IWMPCdromDispT(){}

  IWMPCdromDispT(IWMPCdrom *pintf)
  {
    TAutoDriver<IWMPCdrom>::Bind(pintf, false);
  }

  IWMPCdromDispT(IWMPCdromPtr pintf)
  {
    TAutoDriver<IWMPCdrom>::Bind(pintf, true);
  }

  IWMPCdromDispT& operator=(IWMPCdrom *pintf)
  {
    TAutoDriver<IWMPCdrom>::Bind(pintf, false);
    return *this;
  }

  IWMPCdromDispT& operator=(IWMPCdromPtr pintf)
  {
    TAutoDriver<IWMPCdrom>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_driveSpecifier(BSTR* pbstrDrive/*[out,retval]*/);
  BSTR            __fastcall get_driveSpecifier(void);
  HRESULT         __fastcall get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  HRESULT         __fastcall eject();

  __property   BSTR            driveSpecifier = {read = get_driveSpecifier};
  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist};
};
typedef IWMPCdromDispT<IWMPCdrom> IWMPCdromDisp;

typedef TComInterface<IWMPClosedCaption>  TCOMIWMPClosedCaption;

// *********************************************************************//
// DispIntf:  IWMPClosedCaption
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4F2DF574-C588-11D3-9ED0-00C04FB6E937}
// *********************************************************************//
template<class T>
class IWMPClosedCaptionDispT : public TAutoDriver<IWMPClosedCaption>
{
public:
  IWMPClosedCaptionDispT(){}

  IWMPClosedCaptionDispT(IWMPClosedCaption *pintf)
  {
    TAutoDriver<IWMPClosedCaption>::Bind(pintf, false);
  }

  IWMPClosedCaptionDispT(IWMPClosedCaptionPtr pintf)
  {
    TAutoDriver<IWMPClosedCaption>::Bind(pintf, true);
  }

  IWMPClosedCaptionDispT& operator=(IWMPClosedCaption *pintf)
  {
    TAutoDriver<IWMPClosedCaption>::Bind(pintf, false);
    return *this;
  }

  IWMPClosedCaptionDispT& operator=(IWMPClosedCaptionPtr pintf)
  {
    TAutoDriver<IWMPClosedCaption>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SAMIStyle(BSTR* pbstrSAMIStyle/*[out,retval]*/);
  BSTR            __fastcall get_SAMIStyle(void);
  HRESULT         __fastcall set_SAMIStyle(BSTR pbstrSAMIStyle/*[in]*/);
  HRESULT         __fastcall get_SAMILang(BSTR* pbstrSAMILang/*[out,retval]*/);
  BSTR            __fastcall get_SAMILang(void);
  HRESULT         __fastcall set_SAMILang(BSTR pbstrSAMILang/*[in]*/);
  HRESULT         __fastcall get_SAMIFileName(BSTR* pbstrSAMIFileName/*[out,retval]*/);
  BSTR            __fastcall get_SAMIFileName(void);
  HRESULT         __fastcall set_SAMIFileName(BSTR pbstrSAMIFileName/*[in]*/);
  HRESULT         __fastcall get_captioningId(BSTR* pbstrCaptioningID/*[out,retval]*/);
  BSTR            __fastcall get_captioningId(void);
  HRESULT         __fastcall set_captioningId(BSTR pbstrCaptioningID/*[in]*/);

  __property   BSTR            SAMIStyle = {read = get_SAMIStyle, write = set_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang, write = set_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName, write = set_SAMIFileName};
  __property   BSTR            captioningId = {read = get_captioningId, write = set_captioningId};
};
typedef IWMPClosedCaptionDispT<IWMPClosedCaption> IWMPClosedCaptionDisp;

typedef TComInterface<IWMPError>  TCOMIWMPError;

// *********************************************************************//
// DispIntf:  IWMPError
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A12DCF7D-14AB-4C1B-A8CD-63909F06025B}
// *********************************************************************//
template<class T>
class IWMPErrorDispT : public TAutoDriver<IWMPError>
{
public:
  IWMPErrorDispT(){}

  IWMPErrorDispT(IWMPError *pintf)
  {
    TAutoDriver<IWMPError>::Bind(pintf, false);
  }

  IWMPErrorDispT(IWMPErrorPtr pintf)
  {
    TAutoDriver<IWMPError>::Bind(pintf, true);
  }

  IWMPErrorDispT& operator=(IWMPError *pintf)
  {
    TAutoDriver<IWMPError>::Bind(pintf, false);
    return *this;
  }

  IWMPErrorDispT& operator=(IWMPErrorPtr pintf)
  {
    TAutoDriver<IWMPError>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall clearErrorQueue();
  HRESULT         __fastcall get_errorCount(long* plNumErrors/*[out,retval]*/);
  long            __fastcall get_errorCount(void);
  HRESULT         __fastcall get_Item(long dwIndex/*[in]*/, 
                                      Wmplib_tlb::IWMPErrorItem** ppErrorItem/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorItem* __fastcall get_Item(long dwIndex/*[in]*/);
  HRESULT         __fastcall webHelp();

  __property   long            errorCount = {read = get_errorCount};
};
typedef IWMPErrorDispT<IWMPError> IWMPErrorDisp;

typedef TComInterface<IWMPErrorItem>  TCOMIWMPErrorItem;

// *********************************************************************//
// DispIntf:  IWMPErrorItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3614C646-3B3B-4DE7-A81E-930E3F2127B3}
// *********************************************************************//
template<class T>
class IWMPErrorItemDispT : public TAutoDriver<IWMPErrorItem>
{
public:
  IWMPErrorItemDispT(){}

  IWMPErrorItemDispT(IWMPErrorItem *pintf)
  {
    TAutoDriver<IWMPErrorItem>::Bind(pintf, false);
  }

  IWMPErrorItemDispT(IWMPErrorItemPtr pintf)
  {
    TAutoDriver<IWMPErrorItem>::Bind(pintf, true);
  }

  IWMPErrorItemDispT& operator=(IWMPErrorItem *pintf)
  {
    TAutoDriver<IWMPErrorItem>::Bind(pintf, false);
    return *this;
  }

  IWMPErrorItemDispT& operator=(IWMPErrorItemPtr pintf)
  {
    TAutoDriver<IWMPErrorItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_errorCode(long* phr/*[out,retval]*/);
  long            __fastcall get_errorCode(void);
  HRESULT         __fastcall get_errorDescription(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_errorDescription(void);
  HRESULT         __fastcall get_errorContext(VARIANT* pvarContext/*[out,retval]*/);
  VARIANT         __fastcall get_errorContext(void);
  HRESULT         __fastcall get_remedy(long* plRemedy/*[out,retval]*/);
  long            __fastcall get_remedy(void);
  HRESULT         __fastcall get_customUrl(BSTR* pbstrCustomUrl/*[out,retval]*/);
  BSTR            __fastcall get_customUrl(void);

  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            errorDescription = {read = get_errorDescription};
  __property   long            remedy = {read = get_remedy};
  __property   BSTR            customUrl = {read = get_customUrl};
};
typedef IWMPErrorItemDispT<IWMPErrorItem> IWMPErrorItemDisp;

typedef TComInterface<IWMPDVD>  TCOMIWMPDVD;

// *********************************************************************//
// DispIntf:  IWMPDVD
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8DA61686-4668-4A5C-AE5D-803193293DBE}
// *********************************************************************//
template<class T>
class IWMPDVDDispT : public TAutoDriver<IWMPDVD>
{
public:
  IWMPDVDDispT(){}

  IWMPDVDDispT(IWMPDVD *pintf)
  {
    TAutoDriver<IWMPDVD>::Bind(pintf, false);
  }

  IWMPDVDDispT(IWMPDVDPtr pintf)
  {
    TAutoDriver<IWMPDVD>::Bind(pintf, true);
  }

  IWMPDVDDispT& operator=(IWMPDVD *pintf)
  {
    TAutoDriver<IWMPDVD>::Bind(pintf, false);
    return *this;
  }

  IWMPDVDDispT& operator=(IWMPDVDPtr pintf)
  {
    TAutoDriver<IWMPDVD>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall get_domain(BSTR* strDomain/*[out,retval]*/);
  BSTR            __fastcall get_domain(void);
  HRESULT         __fastcall topMenu();
  HRESULT         __fastcall titleMenu();
  HRESULT         __fastcall back();
  HRESULT         __fastcall resume();

  __property   BSTR            domain = {read = get_domain};
};
typedef IWMPDVDDispT<IWMPDVD> IWMPDVDDisp;

typedef TComInterface<IWMPPlayerApplication>  TCOMIWMPPlayerApplication;

// *********************************************************************//
// DispIntf:  IWMPPlayerApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40897764-CEAB-47BE-AD4A-8E28537F9BBF}
// *********************************************************************//
template<class T>
class IWMPPlayerApplicationDispT : public TAutoDriver<IWMPPlayerApplication>
{
public:
  IWMPPlayerApplicationDispT(){}

  IWMPPlayerApplicationDispT(IWMPPlayerApplication *pintf)
  {
    TAutoDriver<IWMPPlayerApplication>::Bind(pintf, false);
  }

  IWMPPlayerApplicationDispT(IWMPPlayerApplicationPtr pintf)
  {
    TAutoDriver<IWMPPlayerApplication>::Bind(pintf, true);
  }

  IWMPPlayerApplicationDispT& operator=(IWMPPlayerApplication *pintf)
  {
    TAutoDriver<IWMPPlayerApplication>::Bind(pintf, false);
    return *this;
  }

  IWMPPlayerApplicationDispT& operator=(IWMPPlayerApplicationPtr pintf)
  {
    TAutoDriver<IWMPPlayerApplication>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall switchToPlayerApplication();
  HRESULT         __fastcall switchToControl();
  HRESULT         __fastcall get_playerDocked(VARIANT_BOOL* pbPlayerDocked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_playerDocked(void);
  HRESULT         __fastcall get_hasDisplay(VARIANT_BOOL* pbHasDisplay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_hasDisplay(void);

  __property   VARIANT_BOOL    playerDocked = {read = get_playerDocked};
  __property   VARIANT_BOOL    hasDisplay = {read = get_hasDisplay};
};
typedef IWMPPlayerApplicationDispT<IWMPPlayerApplication> IWMPPlayerApplicationDisp;

typedef TComInterface<IWMPPlayer2>  TCOMIWMPPlayer2;

// *********************************************************************//
// DispIntf:  IWMPPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0E6B01D1-D407-4C85-BF5F-1C01F6150280}
// *********************************************************************//
template<class T>
class IWMPPlayer2DispT : public TAutoDriver<IWMPPlayer2>
{
public:
  IWMPPlayer2DispT(){}

  IWMPPlayer2DispT(IWMPPlayer2 *pintf)
  {
    TAutoDriver<IWMPPlayer2>::Bind(pintf, false);
  }

  IWMPPlayer2DispT(IWMPPlayer2Ptr pintf)
  {
    TAutoDriver<IWMPPlayer2>::Bind(pintf, true);
  }

  IWMPPlayer2DispT& operator=(IWMPPlayer2 *pintf)
  {
    TAutoDriver<IWMPPlayer2>::Bind(pintf, false);
    return *this;
  }

  IWMPPlayer2DispT& operator=(IWMPPlayer2Ptr pintf)
  {
    TAutoDriver<IWMPPlayer2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen);
  HRESULT         __fastcall get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableContextMenu(void);
  HRESULT         __fastcall set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu);
  HRESULT         __fastcall set_uiMode(BSTR pbstrMode/*[in]*/);
  HRESULT         __fastcall get_uiMode(BSTR* pbstrMode/*[out,retval]*/);
  BSTR            __fastcall get_uiMode(void);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowlessVideo(void);
  HRESULT         __fastcall set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   VARIANT_BOOL    windowlessVideo = {read = get_windowlessVideo, write = set_windowlessVideo};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPPlayer2DispT<IWMPPlayer2> IWMPPlayer2Disp;

typedef TComInterface<IWMPPlayer>  TCOMIWMPPlayer;

// *********************************************************************//
// DispIntf:  IWMPPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BF52A4F-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
template<class T>
class IWMPPlayerDispT : public TAutoDriver<IWMPPlayer>
{
public:
  IWMPPlayerDispT(){}

  IWMPPlayerDispT(IWMPPlayer *pintf)
  {
    TAutoDriver<IWMPPlayer>::Bind(pintf, false);
  }

  IWMPPlayerDispT(IWMPPlayerPtr pintf)
  {
    TAutoDriver<IWMPPlayer>::Bind(pintf, true);
  }

  IWMPPlayerDispT& operator=(IWMPPlayer *pintf)
  {
    TAutoDriver<IWMPPlayer>::Bind(pintf, false);
    return *this;
  }

  IWMPPlayerDispT& operator=(IWMPPlayerPtr pintf)
  {
    TAutoDriver<IWMPPlayer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen);
  HRESULT         __fastcall get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableContextMenu(void);
  HRESULT         __fastcall set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu);
  HRESULT         __fastcall set_uiMode(BSTR pbstrMode/*[in]*/);
  HRESULT         __fastcall get_uiMode(BSTR* pbstrMode/*[out,retval]*/);
  BSTR            __fastcall get_uiMode(void);
  HRESULT         __fastcall close();
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pbstrURL/*[in]*/);
  HRESULT         __fastcall get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/);
  Wmplib_tlb::WMPOpenState __fastcall get_openState(void);
  HRESULT         __fastcall get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/);
  Wmplib_tlb::WMPPlayState __fastcall get_playState(void);
  HRESULT         __fastcall get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/);
  Wmplib_tlb::IWMPControlsPtr __fastcall get_controls(void);
  HRESULT         __fastcall get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/);
  Wmplib_tlb::IWMPSettingsPtr __fastcall get_settings(void);
  HRESULT         __fastcall get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentMedia(void);
  HRESULT         __fastcall set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/);
  HRESULT         __fastcall get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaCollectionPtr __fastcall get_mediaCollection(void);
  HRESULT         __fastcall get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall get_playlistCollection(void);
  HRESULT         __fastcall get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/);
  BSTR            __fastcall get_versionInfo(void);
  HRESULT         __fastcall launchURL(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/);
  Wmplib_tlb::IWMPNetworkPtr __fastcall get_network(void);
  HRESULT         __fastcall get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_currentPlaylist(void);
  HRESULT         __fastcall set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/);
  HRESULT         __fastcall get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPCdromCollectionPtr __fastcall get_cdromCollection(void);
  HRESULT         __fastcall get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/);
  Wmplib_tlb::IWMPClosedCaptionPtr __fastcall get_closedCaption(void);
  HRESULT         __fastcall get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isOnline(void);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_status(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_status(void);

  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    enableContextMenu = {read = get_enableContextMenu, write = set_enableContextMenu};
  __property   BSTR            uiMode = {read = get_uiMode, write = set_uiMode};

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   Wmplib_tlb::WMPOpenState openState = {read = get_openState};
  __property   Wmplib_tlb::WMPPlayState playState = {read = get_playState};
  __property   Wmplib_tlb::IWMPControlsPtr controls = {read = get_controls};
  __property   Wmplib_tlb::IWMPSettingsPtr settings = {read = get_settings};
  __property   Wmplib_tlb::IWMPMediaPtr currentMedia = {read = get_currentMedia, write = set_currentMedia};
  __property   Wmplib_tlb::IWMPMediaCollectionPtr mediaCollection = {read = get_mediaCollection};
  __property   Wmplib_tlb::IWMPPlaylistCollectionPtr playlistCollection = {read = get_playlistCollection};
  __property   BSTR            versionInfo = {read = get_versionInfo};
  __property   Wmplib_tlb::IWMPNetworkPtr network = {read = get_network};
  __property   Wmplib_tlb::IWMPPlaylistPtr currentPlaylist = {read = get_currentPlaylist, write = set_currentPlaylist};
  __property   Wmplib_tlb::IWMPCdromCollectionPtr cdromCollection = {read = get_cdromCollection};
  __property   Wmplib_tlb::IWMPClosedCaptionPtr closedCaption = {read = get_closedCaption};
  __property   VARIANT_BOOL    isOnline = {read = get_isOnline};
  __property   Wmplib_tlb::IWMPErrorPtr Error = {read = get_Error};
  __property   BSTR            status = {read = get_status};
};
typedef IWMPPlayerDispT<IWMPPlayer> IWMPPlayerDisp;

typedef TComInterface<IWMPErrorItem2>  TCOMIWMPErrorItem2;

// *********************************************************************//
// DispIntf:  IWMPErrorItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F75CCEC0-C67C-475C-931E-8719870BEE7D}
// *********************************************************************//
template<class T>
class IWMPErrorItem2DispT : public TAutoDriver<IWMPErrorItem2>
{
public:
  IWMPErrorItem2DispT(){}

  IWMPErrorItem2DispT(IWMPErrorItem2 *pintf)
  {
    TAutoDriver<IWMPErrorItem2>::Bind(pintf, false);
  }

  IWMPErrorItem2DispT(IWMPErrorItem2Ptr pintf)
  {
    TAutoDriver<IWMPErrorItem2>::Bind(pintf, true);
  }

  IWMPErrorItem2DispT& operator=(IWMPErrorItem2 *pintf)
  {
    TAutoDriver<IWMPErrorItem2>::Bind(pintf, false);
    return *this;
  }

  IWMPErrorItem2DispT& operator=(IWMPErrorItem2Ptr pintf)
  {
    TAutoDriver<IWMPErrorItem2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_condition(long* plCondition/*[out,retval]*/);
  long            __fastcall get_condition(void);
  HRESULT         __fastcall get_errorCode(long* phr/*[out,retval]*/);
  long            __fastcall get_errorCode(void);
  HRESULT         __fastcall get_errorDescription(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_errorDescription(void);
  HRESULT         __fastcall get_errorContext(VARIANT* pvarContext/*[out,retval]*/);
  VARIANT         __fastcall get_errorContext(void);
  HRESULT         __fastcall get_remedy(long* plRemedy/*[out,retval]*/);
  long            __fastcall get_remedy(void);
  HRESULT         __fastcall get_customUrl(BSTR* pbstrCustomUrl/*[out,retval]*/);
  BSTR            __fastcall get_customUrl(void);

  __property   long            condition = {read = get_condition};

  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            errorDescription = {read = get_errorDescription};
  __property   long            remedy = {read = get_remedy};
  __property   BSTR            customUrl = {read = get_customUrl};
};
typedef IWMPErrorItem2DispT<IWMPErrorItem2> IWMPErrorItem2Disp;

typedef TComInterface<IWMPControls2>  TCOMIWMPControls2;

// *********************************************************************//
// DispIntf:  IWMPControls2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F030D25-0890-480F-9775-1F7E40AB5B8E}
// *********************************************************************//
template<class T>
class IWMPControls2DispT : public TAutoDriver<IWMPControls2>
{
public:
  IWMPControls2DispT(){}

  IWMPControls2DispT(IWMPControls2 *pintf)
  {
    TAutoDriver<IWMPControls2>::Bind(pintf, false);
  }

  IWMPControls2DispT(IWMPControls2Ptr pintf)
  {
    TAutoDriver<IWMPControls2>::Bind(pintf, true);
  }

  IWMPControls2DispT& operator=(IWMPControls2 *pintf)
  {
    TAutoDriver<IWMPControls2>::Bind(pintf, false);
    return *this;
  }

  IWMPControls2DispT& operator=(IWMPControls2Ptr pintf)
  {
    TAutoDriver<IWMPControls2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall step(long lStep/*[in]*/);
  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall play();
  HRESULT         __fastcall stop();
  HRESULT         __fastcall pause();
  HRESULT         __fastcall fastForward();
  HRESULT         __fastcall fastReverse();
  HRESULT         __fastcall get_currentPosition(double* pdCurrentPosition/*[out,retval]*/);
  double          __fastcall get_currentPosition(void);
  HRESULT         __fastcall set_currentPosition(double pdCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/);
  BSTR            __fastcall get_currentPositionString(void);
  HRESULT         __fastcall next();
  HRESULT         __fastcall previous();
  HRESULT         __fastcall get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentItem(void);
  HRESULT         __fastcall set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_currentMarker(long* plMarker/*[out,retval]*/);
  long            __fastcall get_currentMarker(void);
  HRESULT         __fastcall set_currentMarker(long plMarker/*[in]*/);
  HRESULT         __fastcall playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);


  __property   double          currentPosition = {read = get_currentPosition, write = set_currentPosition};
  __property   BSTR            currentPositionString = {read = get_currentPositionString};
  __property   Wmplib_tlb::IWMPMediaPtr currentItem = {read = get_currentItem, write = set_currentItem};
  __property   long            currentMarker = {read = get_currentMarker, write = set_currentMarker};
};
typedef IWMPControls2DispT<IWMPControls2> IWMPControls2Disp;

typedef TComInterface<IWMPMedia2>  TCOMIWMPMedia2;

// *********************************************************************//
// DispIntf:  IWMPMedia2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB7C88BB-143E-4EA4-ACC3-E4350B2106C3}
// *********************************************************************//
template<class T>
class IWMPMedia2DispT : public TAutoDriver<IWMPMedia2>
{
public:
  IWMPMedia2DispT(){}

  IWMPMedia2DispT(IWMPMedia2 *pintf)
  {
    TAutoDriver<IWMPMedia2>::Bind(pintf, false);
  }

  IWMPMedia2DispT(IWMPMedia2Ptr pintf)
  {
    TAutoDriver<IWMPMedia2>::Bind(pintf, true);
  }

  IWMPMedia2DispT& operator=(IWMPMedia2 *pintf)
  {
    TAutoDriver<IWMPMedia2>::Bind(pintf, false);
    return *this;
  }

  IWMPMedia2DispT& operator=(IWMPMedia2Ptr pintf)
  {
    TAutoDriver<IWMPMedia2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPErrorItem** ppIWMPErrorItem/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorItemPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                             VARIANT_BOOL* pvbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/);
  BSTR            __fastcall get_sourceURL(void);
  HRESULT         __fastcall get_name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall set_name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_imageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_imageSourceWidth(void);
  HRESULT         __fastcall get_imageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_imageSourceHeight(void);
  HRESULT         __fastcall get_markerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_markerCount(void);
  HRESULT         __fastcall getMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall getMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall getMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall getMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall get_duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_duration(void);
  HRESULT         __fastcall get_durationString(BSTR* pbstrDuration/*[out,retval]*/);
  BSTR            __fastcall get_durationString(void);
  HRESULT         __fastcall get_attributeCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_attributeCount(void);
  HRESULT         __fastcall getAttributeName(long lIndex/*[in]*/, 
                                              BSTR* pbstrItemName/*[out,retval]*/);
  BSTR            __fastcall getAttributeName(long lIndex/*[in]*/);
  HRESULT         __fastcall getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/);
  HRESULT         __fastcall getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfoByAtom(long lAtom/*[in]*/);
  HRESULT         __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                                        VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/);
  HRESULT         __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                            VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/);

  __property   Wmplib_tlb::IWMPErrorItemPtr Error = {read = get_Error};

  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            imageSourceWidth = {read = get_imageSourceWidth};
  __property   long            imageSourceHeight = {read = get_imageSourceHeight};
  __property   long            markerCount = {read = get_markerCount};
  __property   double          duration = {read = get_duration};
  __property   BSTR            durationString = {read = get_durationString};
  __property   long            attributeCount = {read = get_attributeCount};
};
typedef IWMPMedia2DispT<IWMPMedia2> IWMPMedia2Disp;

typedef TComInterface<IWMPMedia3>  TCOMIWMPMedia3;

// *********************************************************************//
// DispIntf:  IWMPMedia3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F118EFC7-F03A-4FB4-99C9-1C02A5C1065B}
// *********************************************************************//
template<class T>
class IWMPMedia3DispT : public TAutoDriver<IWMPMedia3>
{
public:
  IWMPMedia3DispT(){}

  IWMPMedia3DispT(IWMPMedia3 *pintf)
  {
    TAutoDriver<IWMPMedia3>::Bind(pintf, false);
  }

  IWMPMedia3DispT(IWMPMedia3Ptr pintf)
  {
    TAutoDriver<IWMPMedia3>::Bind(pintf, true);
  }

  IWMPMedia3DispT& operator=(IWMPMedia3 *pintf)
  {
    TAutoDriver<IWMPMedia3>::Bind(pintf, false);
    return *this;
  }

  IWMPMedia3DispT& operator=(IWMPMedia3Ptr pintf)
  {
    TAutoDriver<IWMPMedia3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall getAttributeCountByType(BSTR bstrType/*[in]*/, 
                                                     BSTR bstrLanguage/*[in]*/, 
                                                     long* plCount/*[out,retval]*/);
  long            __fastcall getAttributeCountByType(BSTR bstrType/*[in]*/, 
                                                     BSTR bstrLanguage/*[in]*/);
  HRESULT         __fastcall getItemInfoByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                               long lIndex/*[in]*/, 
                                               VARIANT* pvarValue/*[out,retval]*/);
  VARIANT         __fastcall getItemInfoByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                               long lIndex/*[in]*/);
  HRESULT         __fastcall get_Error(Wmplib_tlb::IWMPErrorItem** ppIWMPErrorItem/*[out,retval]*/);
  Wmplib_tlb::IWMPErrorItemPtr __fastcall get_Error(void);
  HRESULT         __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                             VARIANT_BOOL* pvbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/);
  BSTR            __fastcall get_sourceURL(void);
  HRESULT         __fastcall get_name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall set_name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_imageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_imageSourceWidth(void);
  HRESULT         __fastcall get_imageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_imageSourceHeight(void);
  HRESULT         __fastcall get_markerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_markerCount(void);
  HRESULT         __fastcall getMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall getMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall getMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall getMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall get_duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_duration(void);
  HRESULT         __fastcall get_durationString(BSTR* pbstrDuration/*[out,retval]*/);
  BSTR            __fastcall get_durationString(void);
  HRESULT         __fastcall get_attributeCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_attributeCount(void);
  HRESULT         __fastcall getAttributeName(long lIndex/*[in]*/, 
                                              BSTR* pbstrItemName/*[out,retval]*/);
  BSTR            __fastcall getAttributeName(long lIndex/*[in]*/);
  HRESULT         __fastcall getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/);
  HRESULT         __fastcall getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfoByAtom(long lAtom/*[in]*/);
  HRESULT         __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                                        VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/);
  HRESULT         __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                            VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isReadOnlyItem(BSTR bstrItemName/*[in]*/);


  __property   Wmplib_tlb::IWMPErrorItemPtr Error = {read = get_Error};

  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   BSTR            name = {read = get_name, write = set_name};
  __property   long            imageSourceWidth = {read = get_imageSourceWidth};
  __property   long            imageSourceHeight = {read = get_imageSourceHeight};
  __property   long            markerCount = {read = get_markerCount};
  __property   double          duration = {read = get_duration};
  __property   BSTR            durationString = {read = get_durationString};
  __property   long            attributeCount = {read = get_attributeCount};
};
typedef IWMPMedia3DispT<IWMPMedia3> IWMPMedia3Disp;

typedef TComInterface<IWMPMetadataPicture>  TCOMIWMPMetadataPicture;

// *********************************************************************//
// DispIntf:  IWMPMetadataPicture
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C29BBE0-F87D-4C45-AA28-A70F0230FFA9}
// *********************************************************************//
template<class T>
class IWMPMetadataPictureDispT : public TAutoDriver<IWMPMetadataPicture>
{
public:
  IWMPMetadataPictureDispT(){}

  IWMPMetadataPictureDispT(IWMPMetadataPicture *pintf)
  {
    TAutoDriver<IWMPMetadataPicture>::Bind(pintf, false);
  }

  IWMPMetadataPictureDispT(IWMPMetadataPicturePtr pintf)
  {
    TAutoDriver<IWMPMetadataPicture>::Bind(pintf, true);
  }

  IWMPMetadataPictureDispT& operator=(IWMPMetadataPicture *pintf)
  {
    TAutoDriver<IWMPMetadataPicture>::Bind(pintf, false);
    return *this;
  }

  IWMPMetadataPictureDispT& operator=(IWMPMetadataPicturePtr pintf)
  {
    TAutoDriver<IWMPMetadataPicture>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_mimeType(BSTR* pbstrMimeType/*[out,retval]*/);
  BSTR            __fastcall get_mimeType(void);
  HRESULT         __fastcall get_pictureType(BSTR* pbstrPictureType/*[out,retval]*/);
  BSTR            __fastcall get_pictureType(void);
  HRESULT         __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall get_URL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);

  __property   BSTR            mimeType = {read = get_mimeType};
  __property   BSTR            pictureType = {read = get_pictureType};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            URL = {read = get_URL};
};
typedef IWMPMetadataPictureDispT<IWMPMetadataPicture> IWMPMetadataPictureDisp;

typedef TComInterface<IWMPMetadataText>  TCOMIWMPMetadataText;

// *********************************************************************//
// DispIntf:  IWMPMetadataText
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {769A72DB-13D2-45E2-9C48-53CA9D5B7450}
// *********************************************************************//
template<class T>
class IWMPMetadataTextDispT : public TAutoDriver<IWMPMetadataText>
{
public:
  IWMPMetadataTextDispT(){}

  IWMPMetadataTextDispT(IWMPMetadataText *pintf)
  {
    TAutoDriver<IWMPMetadataText>::Bind(pintf, false);
  }

  IWMPMetadataTextDispT(IWMPMetadataTextPtr pintf)
  {
    TAutoDriver<IWMPMetadataText>::Bind(pintf, true);
  }

  IWMPMetadataTextDispT& operator=(IWMPMetadataText *pintf)
  {
    TAutoDriver<IWMPMetadataText>::Bind(pintf, false);
    return *this;
  }

  IWMPMetadataTextDispT& operator=(IWMPMetadataTextPtr pintf)
  {
    TAutoDriver<IWMPMetadataText>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall get_text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_text(void);

  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            text = {read = get_text};
};
typedef IWMPMetadataTextDispT<IWMPMetadataText> IWMPMetadataTextDisp;

typedef TComInterface<IWMPSettings2>  TCOMIWMPSettings2;

// *********************************************************************//
// DispIntf:  IWMPSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2}
// *********************************************************************//
template<class T>
class IWMPSettings2DispT : public TAutoDriver<IWMPSettings2>
{
public:
  IWMPSettings2DispT(){}

  IWMPSettings2DispT(IWMPSettings2 *pintf)
  {
    TAutoDriver<IWMPSettings2>::Bind(pintf, false);
  }

  IWMPSettings2DispT(IWMPSettings2Ptr pintf)
  {
    TAutoDriver<IWMPSettings2>::Bind(pintf, true);
  }

  IWMPSettings2DispT& operator=(IWMPSettings2 *pintf)
  {
    TAutoDriver<IWMPSettings2>::Bind(pintf, false);
    return *this;
  }

  IWMPSettings2DispT& operator=(IWMPSettings2Ptr pintf)
  {
    TAutoDriver<IWMPSettings2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_defaultAudioLanguage(long* plLangID/*[out,retval]*/);
  long            __fastcall get_defaultAudioLanguage(void);
  HRESULT         __fastcall get_mediaAccessRights(BSTR* pbstrRights/*[out,retval]*/);
  BSTR            __fastcall get_mediaAccessRights(void);
  HRESULT         __fastcall requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/, 
                                                      VARIANT_BOOL* pvbAccepted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/);
  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall get_autoStart(VARIANT_BOOL* pfAutoStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_autoStart(void);
  HRESULT         __fastcall set_autoStart(VARIANT_BOOL pfAutoStart/*[in]*/);
  HRESULT         __fastcall get_baseURL(BSTR* pbstrBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_baseURL(void);
  HRESULT         __fastcall set_baseURL(BSTR pbstrBaseURL/*[in]*/);
  HRESULT         __fastcall get_defaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/);
  BSTR            __fastcall get_defaultFrame(void);
  HRESULT         __fastcall set_defaultFrame(BSTR pbstrDefaultFrame/*[in]*/);
  HRESULT         __fastcall get_invokeURLs(VARIANT_BOOL* pfInvokeURLs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_invokeURLs(void);
  HRESULT         __fastcall set_invokeURLs(VARIANT_BOOL pfInvokeURLs/*[in]*/);
  HRESULT         __fastcall get_mute(VARIANT_BOOL* pfMute/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_mute(void);
  HRESULT         __fastcall set_mute(VARIANT_BOOL pfMute/*[in]*/);
  HRESULT         __fastcall get_playCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_playCount(void);
  HRESULT         __fastcall set_playCount(long plCount/*[in]*/);
  HRESULT         __fastcall get_rate(double* pdRate/*[out,retval]*/);
  double          __fastcall get_rate(void);
  HRESULT         __fastcall set_rate(double pdRate/*[in]*/);
  HRESULT         __fastcall get_balance(long* plBalance/*[out,retval]*/);
  long            __fastcall get_balance(void);
  HRESULT         __fastcall set_balance(long plBalance/*[in]*/);
  HRESULT         __fastcall get_volume(long* plVolume/*[out,retval]*/);
  long            __fastcall get_volume(void);
  HRESULT         __fastcall set_volume(long plVolume/*[in]*/);
  HRESULT         __fastcall getMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL* pvarfMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall getMode(BSTR bstrMode/*[in]*/);
  HRESULT         __fastcall setMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL varfMode/*[in]*/);
  HRESULT         __fastcall get_enableErrorDialogs(VARIANT_BOOL* pfEnableErrorDialogs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableErrorDialogs(void);
  HRESULT         __fastcall set_enableErrorDialogs(VARIANT_BOOL pfEnableErrorDialogs/*[in]*/);

  __property   long            defaultAudioLanguage = {read = get_defaultAudioLanguage};
  __property   BSTR            mediaAccessRights = {read = get_mediaAccessRights};

  __property   VARIANT_BOOL    autoStart = {read = get_autoStart, write = set_autoStart};
  __property   BSTR            baseURL = {read = get_baseURL, write = set_baseURL};
  __property   BSTR            defaultFrame = {read = get_defaultFrame, write = set_defaultFrame};
  __property   VARIANT_BOOL    invokeURLs = {read = get_invokeURLs, write = set_invokeURLs};
  __property   VARIANT_BOOL    mute = {read = get_mute, write = set_mute};
  __property   long            playCount = {read = get_playCount, write = set_playCount};
  __property   double          rate = {read = get_rate, write = set_rate};
  __property   long            balance = {read = get_balance, write = set_balance};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   VARIANT_BOOL    enableErrorDialogs = {read = get_enableErrorDialogs, write = set_enableErrorDialogs};
};
typedef IWMPSettings2DispT<IWMPSettings2> IWMPSettings2Disp;

typedef TComInterface<IWMPControls3>  TCOMIWMPControls3;

// *********************************************************************//
// DispIntf:  IWMPControls3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1D1110E-D545-476A-9A78-AC3E4CB1E6BD}
// *********************************************************************//
template<class T>
class IWMPControls3DispT : public TAutoDriver<IWMPControls3>
{
public:
  IWMPControls3DispT(){}

  IWMPControls3DispT(IWMPControls3 *pintf)
  {
    TAutoDriver<IWMPControls3>::Bind(pintf, false);
  }

  IWMPControls3DispT(IWMPControls3Ptr pintf)
  {
    TAutoDriver<IWMPControls3>::Bind(pintf, true);
  }

  IWMPControls3DispT& operator=(IWMPControls3 *pintf)
  {
    TAutoDriver<IWMPControls3>::Bind(pintf, false);
    return *this;
  }

  IWMPControls3DispT& operator=(IWMPControls3Ptr pintf)
  {
    TAutoDriver<IWMPControls3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_audioLanguageCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_audioLanguageCount(void);
  HRESULT         __fastcall getAudioLanguageID(long lIndex/*[in]*/, long* plLangID/*[out,retval]*/);
  long            __fastcall getAudioLanguageID(long lIndex/*[in]*/);
  HRESULT         __fastcall getAudioLanguageDescription(long lIndex/*[in]*/, 
                                                         BSTR* pbstrLangDesc/*[out,retval]*/);
  BSTR            __fastcall getAudioLanguageDescription(long lIndex/*[in]*/);
  HRESULT         __fastcall get_currentAudioLanguage(long* plLangID/*[out,retval]*/);
  long            __fastcall get_currentAudioLanguage(void);
  HRESULT         __fastcall set_currentAudioLanguage(long plLangID/*[in]*/);
  HRESULT         __fastcall get_currentAudioLanguageIndex(long* plIndex/*[out,retval]*/);
  long            __fastcall get_currentAudioLanguageIndex(void);
  HRESULT         __fastcall set_currentAudioLanguageIndex(long plIndex/*[in]*/);
  HRESULT         __fastcall getLanguageName(long lLangID/*[in]*/, 
                                             BSTR* pbstrLangName/*[out,retval]*/);
  BSTR            __fastcall getLanguageName(long lLangID/*[in]*/);
  HRESULT         __fastcall get_currentPositionTimecode(BSTR* bstrTimecode/*[out,retval]*/);
  BSTR            __fastcall get_currentPositionTimecode(void);
  HRESULT         __fastcall set_currentPositionTimecode(BSTR bstrTimecode/*[in]*/);
  HRESULT         __fastcall step(long lStep/*[in]*/);
  HRESULT         __fastcall get_isAvailable(BSTR bstrItem/*[in]*/, 
                                             VARIANT_BOOL* pIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isAvailable(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall play();
  HRESULT         __fastcall stop();
  HRESULT         __fastcall pause();
  HRESULT         __fastcall fastForward();
  HRESULT         __fastcall fastReverse();
  HRESULT         __fastcall get_currentPosition(double* pdCurrentPosition/*[out,retval]*/);
  double          __fastcall get_currentPosition(void);
  HRESULT         __fastcall set_currentPosition(double pdCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/);
  BSTR            __fastcall get_currentPositionString(void);
  HRESULT         __fastcall next();
  HRESULT         __fastcall previous();
  HRESULT         __fastcall get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_currentItem(void);
  HRESULT         __fastcall set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/);
  HRESULT         __fastcall get_currentMarker(long* plMarker/*[out,retval]*/);
  long            __fastcall get_currentMarker(void);
  HRESULT         __fastcall set_currentMarker(long plMarker/*[in]*/);
  HRESULT         __fastcall playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/);

  __property   long            audioLanguageCount = {read = get_audioLanguageCount};
  __property   long            currentAudioLanguage = {read = get_currentAudioLanguage, write = set_currentAudioLanguage};
  __property   long            currentAudioLanguageIndex = {read = get_currentAudioLanguageIndex, write = set_currentAudioLanguageIndex};
  __property   BSTR            currentPositionTimecode = {read = get_currentPositionTimecode, write = set_currentPositionTimecode};


  __property   double          currentPosition = {read = get_currentPosition, write = set_currentPosition};
  __property   BSTR            currentPositionString = {read = get_currentPositionString};
  __property   Wmplib_tlb::IWMPMediaPtr currentItem = {read = get_currentItem, write = set_currentItem};
  __property   long            currentMarker = {read = get_currentMarker, write = set_currentMarker};
};
typedef IWMPControls3DispT<IWMPControls3> IWMPControls3Disp;

typedef TComInterface<IWMPClosedCaption2>  TCOMIWMPClosedCaption2;

// *********************************************************************//
// DispIntf:  IWMPClosedCaption2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {350BA78B-6BC8-4113-A5F5-312056934EB6}
// *********************************************************************//
template<class T>
class IWMPClosedCaption2DispT : public TAutoDriver<IWMPClosedCaption2>
{
public:
  IWMPClosedCaption2DispT(){}

  IWMPClosedCaption2DispT(IWMPClosedCaption2 *pintf)
  {
    TAutoDriver<IWMPClosedCaption2>::Bind(pintf, false);
  }

  IWMPClosedCaption2DispT(IWMPClosedCaption2Ptr pintf)
  {
    TAutoDriver<IWMPClosedCaption2>::Bind(pintf, true);
  }

  IWMPClosedCaption2DispT& operator=(IWMPClosedCaption2 *pintf)
  {
    TAutoDriver<IWMPClosedCaption2>::Bind(pintf, false);
    return *this;
  }

  IWMPClosedCaption2DispT& operator=(IWMPClosedCaption2Ptr pintf)
  {
    TAutoDriver<IWMPClosedCaption2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SAMILangCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_SAMILangCount(void);
  HRESULT         __fastcall getSAMILangName(long nIndex/*[in]*/, BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall getSAMILangName(long nIndex/*[in]*/);
  HRESULT         __fastcall getSAMILangID(long nIndex/*[in]*/, long* plLangID/*[out,retval]*/);
  long            __fastcall getSAMILangID(long nIndex/*[in]*/);
  HRESULT         __fastcall get_SAMIStyleCount(long* plCount/*[out,retval]*/);
  long            __fastcall get_SAMIStyleCount(void);
  HRESULT         __fastcall getSAMIStyleName(long nIndex/*[in]*/, BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall getSAMIStyleName(long nIndex/*[in]*/);
  HRESULT         __fastcall get_SAMIStyle(BSTR* pbstrSAMIStyle/*[out,retval]*/);
  BSTR            __fastcall get_SAMIStyle(void);
  HRESULT         __fastcall set_SAMIStyle(BSTR pbstrSAMIStyle/*[in]*/);
  HRESULT         __fastcall get_SAMILang(BSTR* pbstrSAMILang/*[out,retval]*/);
  BSTR            __fastcall get_SAMILang(void);
  HRESULT         __fastcall set_SAMILang(BSTR pbstrSAMILang/*[in]*/);
  HRESULT         __fastcall get_SAMIFileName(BSTR* pbstrSAMIFileName/*[out,retval]*/);
  BSTR            __fastcall get_SAMIFileName(void);
  HRESULT         __fastcall set_SAMIFileName(BSTR pbstrSAMIFileName/*[in]*/);
  HRESULT         __fastcall get_captioningId(BSTR* pbstrCaptioningID/*[out,retval]*/);
  BSTR            __fastcall get_captioningId(void);
  HRESULT         __fastcall set_captioningId(BSTR pbstrCaptioningID/*[in]*/);

  __property   long            SAMILangCount = {read = get_SAMILangCount};
  __property   long            SAMIStyleCount = {read = get_SAMIStyleCount};

  __property   BSTR            SAMIStyle = {read = get_SAMIStyle, write = set_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang, write = set_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName, write = set_SAMIFileName};
  __property   BSTR            captioningId = {read = get_captioningId, write = set_captioningId};
};
typedef IWMPClosedCaption2DispT<IWMPClosedCaption2> IWMPClosedCaption2Disp;

typedef TComInterface<IWMPMediaCollection2>  TCOMIWMPMediaCollection2;

// *********************************************************************//
// DispIntf:  IWMPMediaCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BA957F5-FD8C-4791-B82D-F840401EE474}
// *********************************************************************//
template<class T>
class IWMPMediaCollection2DispT : public TAutoDriver<IWMPMediaCollection2>
{
public:
  IWMPMediaCollection2DispT(){}

  IWMPMediaCollection2DispT(IWMPMediaCollection2 *pintf)
  {
    TAutoDriver<IWMPMediaCollection2>::Bind(pintf, false);
  }

  IWMPMediaCollection2DispT(IWMPMediaCollection2Ptr pintf)
  {
    TAutoDriver<IWMPMediaCollection2>::Bind(pintf, true);
  }

  IWMPMediaCollection2DispT& operator=(IWMPMediaCollection2 *pintf)
  {
    TAutoDriver<IWMPMediaCollection2>::Bind(pintf, false);
    return *this;
  }

  IWMPMediaCollection2DispT& operator=(IWMPMediaCollection2Ptr pintf)
  {
    TAutoDriver<IWMPMediaCollection2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall createQuery(Wmplib_tlb::IWMPQuery** ppQuery/*[out,retval]*/);
  Wmplib_tlb::IWMPQuery* __fastcall createQuery(void);
  HRESULT         __fastcall getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                BSTR bstrMediaType/*[in]*/, 
                                                BSTR bstrSortAttribute/*[in]*/, 
                                                VARIANT_BOOL fSortAscending/*[in]*/, 
                                                Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/, 
                                                          BSTR bstrSortAttribute/*[in]*/, 
                                                          VARIANT_BOOL fSortAscending/*[in]*/);
  HRESULT         __fastcall getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                        Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                        BSTR bstrMediaType/*[in]*/, 
                                                        BSTR bstrSortAttribute/*[in]*/, 
                                                        VARIANT_BOOL fSortAscending/*[in]*/, 
                                                        Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPStringCollection* __fastcall getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                                          Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                                          BSTR bstrMediaType/*[in]*/, 
                                                                          BSTR bstrSortAttribute/*[in]*/, 
                                                                          VARIANT_BOOL fSortAscending/*[in]*/);
  HRESULT         __fastcall getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                        BSTR bstrValue/*[in]*/, 
                                                        BSTR bstrMediaType/*[in]*/, 
                                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                                  BSTR bstrValue/*[in]*/, 
                                                                  BSTR bstrMediaType/*[in]*/);
  HRESULT         __fastcall add(BSTR bstrURL/*[in]*/, 
                                 Wmplib_tlb::IWMPMedia** ppItem/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall add(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall getAll(Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getAll(void);
  HRESULT         __fastcall getByName(BSTR bstrName/*[in]*/, 
                                       Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByName(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall getByGenre(BSTR bstrGenre/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByGenre(BSTR bstrGenre/*[in]*/);
  HRESULT         __fastcall getByAuthor(BSTR bstrAuthor/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAuthor(BSTR bstrAuthor/*[in]*/);
  HRESULT         __fastcall getByAlbum(BSTR bstrAlbum/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAlbum(BSTR bstrAlbum/*[in]*/);
  HRESULT         __fastcall getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/, 
                                            Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall getByAttribute(BSTR bstrAttribute/*[in]*/, 
                                                      BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall remove(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                    VARIANT_BOOL varfDeleteFile/*[in]*/);
  HRESULT         __fastcall getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/, 
                                                          Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPStringCollection* __fastcall getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                                            BSTR bstrMediaType/*[in]*/);
  HRESULT         __fastcall getMediaAtom(BSTR bstrItemName/*[in]*/, long* plAtom/*[out,retval]*/);
  long            __fastcall getMediaAtom(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall setDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                        VARIANT_BOOL varfIsDeleted/*[in]*/);
  HRESULT         __fastcall isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                       VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/);


};
typedef IWMPMediaCollection2DispT<IWMPMediaCollection2> IWMPMediaCollection2Disp;

typedef TComInterface<IWMPStringCollection2>  TCOMIWMPStringCollection2;

// *********************************************************************//
// DispIntf:  IWMPStringCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46AD648D-53F1-4A74-92E2-2A1B68D63FD4}
// *********************************************************************//
template<class T>
class IWMPStringCollection2DispT : public TAutoDriver<IWMPStringCollection2>
{
public:
  IWMPStringCollection2DispT(){}

  IWMPStringCollection2DispT(IWMPStringCollection2 *pintf)
  {
    TAutoDriver<IWMPStringCollection2>::Bind(pintf, false);
  }

  IWMPStringCollection2DispT(IWMPStringCollection2Ptr pintf)
  {
    TAutoDriver<IWMPStringCollection2>::Bind(pintf, true);
  }

  IWMPStringCollection2DispT& operator=(IWMPStringCollection2 *pintf)
  {
    TAutoDriver<IWMPStringCollection2>::Bind(pintf, false);
    return *this;
  }

  IWMPStringCollection2DispT& operator=(IWMPStringCollection2Ptr pintf)
  {
    TAutoDriver<IWMPStringCollection2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/
                                         , VARIANT_BOOL* pvbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/);
  HRESULT         __fastcall getItemInfo(long lCollectionIndex/*[in]*/, BSTR bstrItemName/*[in]*/, 
                                         BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(long lCollectionIndex/*[in]*/, BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall getAttributeCountByType(long lCollectionIndex/*[in]*/, 
                                                     BSTR bstrType/*[in]*/, 
                                                     BSTR bstrLanguage/*[in]*/, 
                                                     long* plCount/*[out,retval]*/);
  long            __fastcall getAttributeCountByType(long lCollectionIndex/*[in]*/, 
                                                     BSTR bstrType/*[in]*/, 
                                                     BSTR bstrLanguage/*[in]*/);
  HRESULT         __fastcall getItemInfoByType(long lCollectionIndex/*[in]*/, BSTR bstrType/*[in]*/
                                               , BSTR bstrLanguage/*[in]*/, 
                                               long lAttributeIndex/*[in]*/, 
                                               VARIANT* pvarValue/*[out,retval]*/);
  VARIANT         __fastcall getItemInfoByType(long lCollectionIndex/*[in]*/, BSTR bstrType/*[in]*/, 
                                               BSTR bstrLanguage/*[in]*/, 
                                               long lAttributeIndex/*[in]*/);
  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall Item(long lIndex/*[in]*/, BSTR* pbstrString/*[out,retval]*/);
  BSTR            __fastcall Item(long lIndex/*[in]*/);


  __property   long            count = {read = get_count};
};
typedef IWMPStringCollection2DispT<IWMPStringCollection2> IWMPStringCollection2Disp;

typedef TComInterface<IWMPQuery>  TCOMIWMPQuery;

// *********************************************************************//
// DispIntf:  IWMPQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A00918F3-A6B0-4BFB-9189-FD834C7BC5A5}
// *********************************************************************//
template<class T>
class IWMPQueryDispT : public TAutoDriver<IWMPQuery>
{
public:
  IWMPQueryDispT(){}

  IWMPQueryDispT(IWMPQuery *pintf)
  {
    TAutoDriver<IWMPQuery>::Bind(pintf, false);
  }

  IWMPQueryDispT(IWMPQueryPtr pintf)
  {
    TAutoDriver<IWMPQuery>::Bind(pintf, true);
  }

  IWMPQueryDispT& operator=(IWMPQuery *pintf)
  {
    TAutoDriver<IWMPQuery>::Bind(pintf, false);
    return *this;
  }

  IWMPQueryDispT& operator=(IWMPQueryPtr pintf)
  {
    TAutoDriver<IWMPQuery>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall addCondition(BSTR bstrAttribute/*[in]*/, BSTR bstrOperator/*[in]*/, 
                                          BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall beginNextGroup();

};
typedef IWMPQueryDispT<IWMPQuery> IWMPQueryDisp;

typedef TComInterface<IWMPPlayerServices>  TCOMIWMPPlayerServices;

typedef TComInterface<IWMPPlayerServices2>  TCOMIWMPPlayerServices2;

typedef TComInterface<IWMPRemoteMediaServices>  TCOMIWMPRemoteMediaServices;

typedef TComInterface<IWMPSyncServices>  TCOMIWMPSyncServices;

typedef TComInterface<IWMPLibraryServices>  TCOMIWMPLibraryServices;

typedef TComInterface<IWMPLibrarySharingServices>  TCOMIWMPLibrarySharingServices;

typedef TComInterface<IWMPFolderMonitorServices>  TCOMIWMPFolderMonitorServices;

typedef TComInterface<IWMPSyncDevice2>  TCOMIWMPSyncDevice2;

// *********************************************************************//
// SmartIntf: TCOMIWMPPlaylistCtrl
// Interface: IWMPPlaylistCtrl
// *********************************************************************//
template <class T /* IWMPPlaylistCtrl */ >
class TCOMIWMPPlaylistCtrlT : public TComInterface<IWMPPlaylistCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPPlaylistCtrlT() {}
  TCOMIWMPPlaylistCtrlT(IWMPPlaylistCtrl *intf, bool addRef = false) : TComInterface<IWMPPlaylistCtrl>(intf, addRef) {}
  TCOMIWMPPlaylistCtrlT(const TCOMIWMPPlaylistCtrlT& src) : TComInterface<IWMPPlaylistCtrl>(src) {}
  TCOMIWMPPlaylistCtrlT& operator=(const TCOMIWMPPlaylistCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Playlist(Wmplib_tlb::IWMPPlaylist** ppdispPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylist* ppdispPlaylist/*[in]*/);
  HRESULT         __fastcall get_columns(BSTR* pbstrColumns/*[out,retval]*/);
  BSTR            __fastcall get_columns(void);
  HRESULT         __fastcall set_columns(BSTR pbstrColumns/*[in]*/);
  HRESULT         __fastcall get_columnCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_columnCount(void);
  HRESULT         __fastcall get_columnOrder(BSTR* pbstrColumnOrder/*[out,retval]*/);
  BSTR            __fastcall get_columnOrder(void);
  HRESULT         __fastcall set_columnOrder(BSTR pbstrColumnOrder/*[in]*/);
  HRESULT         __fastcall get_columnsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_columnsVisible(void);
  HRESULT         __fastcall set_columnsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  HRESULT         __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_playlistItemsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_playlistItemsVisible(void);
  HRESULT         __fastcall set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_checkboxesVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_checkboxesVisible(void);
  HRESULT         __fastcall set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_disabledItemColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_disabledItemColor(void);
  HRESULT         __fastcall set_disabledItemColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemPlayingColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingColor(void);
  HRESULT         __fastcall set_itemPlayingColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemPlayingBackgroundColor(BSTR* pbstrBackgroundColor/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingBackgroundColor(void);
  HRESULT         __fastcall set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_allowItemEditing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowItemEditing(void);
  HRESULT         __fastcall set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_allowColumnSorting(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowColumnSorting(void);
  HRESULT         __fastcall set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownList(BSTR* pbstrList/*[out,retval]*/);
  BSTR            __fastcall get_dropDownList(void);
  HRESULT         __fastcall set_dropDownList(BSTR pbstrList/*[in]*/);
  HRESULT         __fastcall get_dropDownToolTip(BSTR* pbstrToolTip/*[out,retval]*/);
  BSTR            __fastcall get_dropDownToolTip(void);
  HRESULT         __fastcall set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/);
  HRESULT         __fastcall get_copying(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_copying(void);
  HRESULT         __fastcall set_copying(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall copy(void);
  HRESULT         __fastcall abortCopy(void);
  HRESULT         __fastcall deleteSelected(void);
  HRESULT         __fastcall deleteSelectedFromLibrary(void);
  HRESULT         __fastcall moveSelectedUp(void);
  HRESULT         __fastcall moveSelectedDown(void);
  HRESULT         __fastcall addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                 long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall getNextCheckedItem(long nStartIndex/*[in]*/, 
                                                long* pnChecked/*[out,retval]*/);
  long            __fastcall getNextCheckedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall setCheckedState(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  HRESULT         __fastcall sortColumn(long nIndex/*[in]*/);
  HRESULT         __fastcall setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/);
  HRESULT         __fastcall setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/);
  HRESULT         __fastcall get_itemErrorColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemErrorColor(void);
  HRESULT         __fastcall set_itemErrorColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemCount(long* pnItemCount/*[out,retval]*/);
  long            __fastcall get_itemCount(void);
  HRESULT         __fastcall get_itemMedia(long nIndex/*[in]*/, 
                                           Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall get_itemMedia(long nIndex/*[in]*/);
  HRESULT         __fastcall get_itemPlaylist(long nIndex/*[in]*/, 
                                              Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall get_itemPlaylist(long nIndex/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/, 
                                                  long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/);
  HRESULT         __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/, 
                                                 long* pnChecked/*[out,retval]*/);
  long            __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState2(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall setCheckedState2(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  HRESULT         __fastcall get_leftStatus(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_leftStatus(void);
  HRESULT         __fastcall set_leftStatus(BSTR pbstrStatus/*[in]*/);
  HRESULT         __fastcall get_rightStatus(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_rightStatus(void);
  HRESULT         __fastcall set_rightStatus(BSTR pbstrStatus/*[in]*/);
  HRESULT         __fastcall get_editButtonVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_editButtonVisible(void);
  HRESULT         __fastcall set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_dropDownImage(void);
  HRESULT         __fastcall set_dropDownImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_dropDownBackgroundImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_dropDownBackgroundImage(void);
  HRESULT         __fastcall set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_hueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_hueShift(void);
  HRESULT         __fastcall set_hueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_statusColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_statusColor(void);
  HRESULT         __fastcall set_statusColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_toolbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_toolbarVisible(void);
  HRESULT         __fastcall set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_itemSelectedColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedColor(void);
  HRESULT         __fastcall set_itemSelectedColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedFocusLostColor(void);
  HRESULT         __fastcall set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedBackgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedBackgroundColor(void);
  HRESULT         __fastcall set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedBackgroundFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedBackgroundFocusLostColor(void);
  HRESULT         __fastcall set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  HRESULT         __fastcall get_backgroundSplitColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundSplitColor(void);
  HRESULT         __fastcall set_backgroundSplitColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_statusTextColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_statusTextColor(void);
  HRESULT         __fastcall set_statusTextColor(BSTR pbstrColor/*[in]*/);

  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   BSTR            columns = {read = get_columns, write = set_columns};
  __property   long            columnCount = {read = get_columnCount};
  __property   BSTR            columnOrder = {read = get_columnOrder, write = set_columnOrder};
  __property   VARIANT_BOOL    columnsVisible = {read = get_columnsVisible, write = set_columnsVisible};
  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   VARIANT_BOOL    playlistItemsVisible = {read = get_playlistItemsVisible, write = set_playlistItemsVisible};
  __property   VARIANT_BOOL    checkboxesVisible = {read = get_checkboxesVisible, write = set_checkboxesVisible};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            disabledItemColor = {read = get_disabledItemColor, write = set_disabledItemColor};
  __property   BSTR            itemPlayingColor = {read = get_itemPlayingColor, write = set_itemPlayingColor};
  __property   BSTR            itemPlayingBackgroundColor = {read = get_itemPlayingBackgroundColor, write = set_itemPlayingBackgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    allowItemEditing = {read = get_allowItemEditing, write = set_allowItemEditing};
  __property   VARIANT_BOOL    allowColumnSorting = {read = get_allowColumnSorting, write = set_allowColumnSorting};
  __property   BSTR            dropDownList = {read = get_dropDownList, write = set_dropDownList};
  __property   BSTR            dropDownToolTip = {read = get_dropDownToolTip, write = set_dropDownToolTip};
  __property   VARIANT_BOOL    copying = {read = get_copying, write = set_copying};
  __property   BSTR            itemErrorColor = {read = get_itemErrorColor, write = set_itemErrorColor};
  __property   long            itemCount = {read = get_itemCount};
  __property   BSTR            leftStatus = {read = get_leftStatus, write = set_leftStatus};
  __property   BSTR            rightStatus = {read = get_rightStatus, write = set_rightStatus};
  __property   VARIANT_BOOL    editButtonVisible = {read = get_editButtonVisible, write = set_editButtonVisible};
  __property   BSTR            dropDownImage = {read = get_dropDownImage, write = set_dropDownImage};
  __property   BSTR            dropDownBackgroundImage = {read = get_dropDownBackgroundImage, write = set_dropDownBackgroundImage};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};
  __property   BSTR            statusColor = {read = get_statusColor, write = set_statusColor};
  __property   VARIANT_BOOL    toolbarVisible = {read = get_toolbarVisible, write = set_toolbarVisible};
  __property   BSTR            itemSelectedColor = {read = get_itemSelectedColor, write = set_itemSelectedColor};
  __property   BSTR            itemSelectedFocusLostColor = {read = get_itemSelectedFocusLostColor, write = set_itemSelectedFocusLostColor};
  __property   BSTR            itemSelectedBackgroundColor = {read = get_itemSelectedBackgroundColor, write = set_itemSelectedBackgroundColor};
  __property   BSTR            itemSelectedBackgroundFocusLostColor = {read = get_itemSelectedBackgroundFocusLostColor, write = set_itemSelectedBackgroundFocusLostColor};
  __property   BSTR            backgroundSplitColor = {read = get_backgroundSplitColor, write = set_backgroundSplitColor};
  __property   BSTR            statusTextColor = {read = get_statusTextColor, write = set_statusTextColor};
};
typedef TCOMIWMPPlaylistCtrlT<IWMPPlaylistCtrl> TCOMIWMPPlaylistCtrl;

// *********************************************************************//
// DispIntf:  IWMPPlaylistCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70}
// *********************************************************************//
template<class T>
class IWMPPlaylistCtrlDispT : public TAutoDriver<IWMPPlaylistCtrl>
{
public:
  IWMPPlaylistCtrlDispT(){}

  IWMPPlaylistCtrlDispT(IWMPPlaylistCtrl *pintf)
  {
    TAutoDriver<IWMPPlaylistCtrl>::Bind(pintf, false);
  }

  IWMPPlaylistCtrlDispT(IWMPPlaylistCtrlPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCtrl>::Bind(pintf, true);
  }

  IWMPPlaylistCtrlDispT& operator=(IWMPPlaylistCtrl *pintf)
  {
    TAutoDriver<IWMPPlaylistCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPPlaylistCtrlDispT& operator=(IWMPPlaylistCtrlPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPPlaylistCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPPlaylistCtrl);
  }

  HRESULT         __fastcall get_Playlist(Wmplib_tlb::IWMPPlaylist** ppdispPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/);
  HRESULT         __fastcall get_columns(BSTR* pbstrColumns/*[out,retval]*/);
  BSTR            __fastcall get_columns(void);
  HRESULT         __fastcall set_columns(BSTR pbstrColumns/*[in]*/);
  HRESULT         __fastcall get_columnCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_columnCount(void);
  HRESULT         __fastcall get_columnOrder(BSTR* pbstrColumnOrder/*[out,retval]*/);
  BSTR            __fastcall get_columnOrder(void);
  HRESULT         __fastcall set_columnOrder(BSTR pbstrColumnOrder/*[in]*/);
  HRESULT         __fastcall get_columnsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_columnsVisible(void);
  HRESULT         __fastcall set_columnsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  HRESULT         __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_playlistItemsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_playlistItemsVisible(void);
  HRESULT         __fastcall set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_checkboxesVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_checkboxesVisible(void);
  HRESULT         __fastcall set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_disabledItemColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_disabledItemColor(void);
  HRESULT         __fastcall set_disabledItemColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemPlayingColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingColor(void);
  HRESULT         __fastcall set_itemPlayingColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemPlayingBackgroundColor(BSTR* pbstrBackgroundColor/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingBackgroundColor(void);
  HRESULT         __fastcall set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_allowItemEditing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowItemEditing(void);
  HRESULT         __fastcall set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_allowColumnSorting(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowColumnSorting(void);
  HRESULT         __fastcall set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownList(BSTR* pbstrList/*[out,retval]*/);
  BSTR            __fastcall get_dropDownList(void);
  HRESULT         __fastcall set_dropDownList(BSTR pbstrList/*[in]*/);
  HRESULT         __fastcall get_dropDownToolTip(BSTR* pbstrToolTip/*[out,retval]*/);
  BSTR            __fastcall get_dropDownToolTip(void);
  HRESULT         __fastcall set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/);
  HRESULT         __fastcall get_copying(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_copying(void);
  HRESULT         __fastcall set_copying(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall copy();
  HRESULT         __fastcall abortCopy();
  HRESULT         __fastcall deleteSelected();
  HRESULT         __fastcall deleteSelectedFromLibrary();
  HRESULT         __fastcall moveSelectedUp();
  HRESULT         __fastcall moveSelectedDown();
  HRESULT         __fastcall addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                 long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall getNextCheckedItem(long nStartIndex/*[in]*/, 
                                                long* pnChecked/*[out,retval]*/);
  long            __fastcall getNextCheckedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall setCheckedState(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  HRESULT         __fastcall sortColumn(long nIndex/*[in]*/);
  HRESULT         __fastcall setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/);
  HRESULT         __fastcall setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/);
  HRESULT         __fastcall get_itemErrorColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemErrorColor(void);
  HRESULT         __fastcall set_itemErrorColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemCount(long* pnItemCount/*[out,retval]*/);
  long            __fastcall get_itemCount(void);
  HRESULT         __fastcall get_itemMedia(long nIndex/*[in]*/, 
                                           Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMedia* __fastcall get_itemMedia(long nIndex/*[in]*/);
  HRESULT         __fastcall get_itemPlaylist(long nIndex/*[in]*/, 
                                              Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylist* __fastcall get_itemPlaylist(long nIndex/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/, 
                                                  long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem2(long nStartIndex/*[in]*/);
  HRESULT         __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/, 
                                                 long* pnChecked/*[out,retval]*/);
  long            __fastcall getNextCheckedItem2(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState2(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall setCheckedState2(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/);
  HRESULT         __fastcall get_leftStatus(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_leftStatus(void);
  HRESULT         __fastcall set_leftStatus(BSTR pbstrStatus/*[in]*/);
  HRESULT         __fastcall get_rightStatus(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_rightStatus(void);
  HRESULT         __fastcall set_rightStatus(BSTR pbstrStatus/*[in]*/);
  HRESULT         __fastcall get_editButtonVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_editButtonVisible(void);
  HRESULT         __fastcall set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_dropDownImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_dropDownImage(void);
  HRESULT         __fastcall set_dropDownImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_dropDownBackgroundImage(BSTR* pbstrImage/*[out,retval]*/);
  BSTR            __fastcall get_dropDownBackgroundImage(void);
  HRESULT         __fastcall set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/);
  HRESULT         __fastcall get_hueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_hueShift(void);
  HRESULT         __fastcall set_hueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_statusColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_statusColor(void);
  HRESULT         __fastcall set_statusColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_toolbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_toolbarVisible(void);
  HRESULT         __fastcall set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_itemSelectedColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedColor(void);
  HRESULT         __fastcall set_itemSelectedColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedFocusLostColor(void);
  HRESULT         __fastcall set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedBackgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedBackgroundColor(void);
  HRESULT         __fastcall set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_itemSelectedBackgroundFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/);
  BSTR            __fastcall get_itemSelectedBackgroundFocusLostColor(void);
  HRESULT         __fastcall set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/);
  HRESULT         __fastcall get_backgroundSplitColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundSplitColor(void);
  HRESULT         __fastcall set_backgroundSplitColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_statusTextColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_statusTextColor(void);
  HRESULT         __fastcall set_statusTextColor(BSTR pbstrColor/*[in]*/);

  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   BSTR            columns = {read = get_columns, write = set_columns};
  __property   long            columnCount = {read = get_columnCount};
  __property   BSTR            columnOrder = {read = get_columnOrder, write = set_columnOrder};
  __property   VARIANT_BOOL    columnsVisible = {read = get_columnsVisible, write = set_columnsVisible};
  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   VARIANT_BOOL    playlistItemsVisible = {read = get_playlistItemsVisible, write = set_playlistItemsVisible};
  __property   VARIANT_BOOL    checkboxesVisible = {read = get_checkboxesVisible, write = set_checkboxesVisible};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            disabledItemColor = {read = get_disabledItemColor, write = set_disabledItemColor};
  __property   BSTR            itemPlayingColor = {read = get_itemPlayingColor, write = set_itemPlayingColor};
  __property   BSTR            itemPlayingBackgroundColor = {read = get_itemPlayingBackgroundColor, write = set_itemPlayingBackgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    allowItemEditing = {read = get_allowItemEditing, write = set_allowItemEditing};
  __property   VARIANT_BOOL    allowColumnSorting = {read = get_allowColumnSorting, write = set_allowColumnSorting};
  __property   BSTR            dropDownList = {read = get_dropDownList, write = set_dropDownList};
  __property   BSTR            dropDownToolTip = {read = get_dropDownToolTip, write = set_dropDownToolTip};
  __property   VARIANT_BOOL    copying = {read = get_copying, write = set_copying};
  __property   BSTR            itemErrorColor = {read = get_itemErrorColor, write = set_itemErrorColor};
  __property   long            itemCount = {read = get_itemCount};
  __property   BSTR            leftStatus = {read = get_leftStatus, write = set_leftStatus};
  __property   BSTR            rightStatus = {read = get_rightStatus, write = set_rightStatus};
  __property   VARIANT_BOOL    editButtonVisible = {read = get_editButtonVisible, write = set_editButtonVisible};
  __property   BSTR            dropDownImage = {read = get_dropDownImage, write = set_dropDownImage};
  __property   BSTR            dropDownBackgroundImage = {read = get_dropDownBackgroundImage, write = set_dropDownBackgroundImage};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};
  __property   BSTR            statusColor = {read = get_statusColor, write = set_statusColor};
  __property   VARIANT_BOOL    toolbarVisible = {read = get_toolbarVisible, write = set_toolbarVisible};
  __property   BSTR            itemSelectedColor = {read = get_itemSelectedColor, write = set_itemSelectedColor};
  __property   BSTR            itemSelectedFocusLostColor = {read = get_itemSelectedFocusLostColor, write = set_itemSelectedFocusLostColor};
  __property   BSTR            itemSelectedBackgroundColor = {read = get_itemSelectedBackgroundColor, write = set_itemSelectedBackgroundColor};
  __property   BSTR            itemSelectedBackgroundFocusLostColor = {read = get_itemSelectedBackgroundFocusLostColor, write = set_itemSelectedBackgroundFocusLostColor};
  __property   BSTR            backgroundSplitColor = {read = get_backgroundSplitColor, write = set_backgroundSplitColor};
  __property   BSTR            statusTextColor = {read = get_statusTextColor, write = set_statusTextColor};
};
typedef IWMPPlaylistCtrlDispT<IWMPPlaylistCtrl> IWMPPlaylistCtrlDisp;

typedef TComInterface<IAppDispatch>  TCOMIAppDispatch;

// *********************************************************************//
// DispIntf:  IAppDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E41C88DD-2364-4FF7-A0F5-CA9859AF783F}
// *********************************************************************//
template<class T>
class IAppDispatchDispT : public TAutoDriver<IAppDispatch>
{
public:
  IAppDispatchDispT(){}

  IAppDispatchDispT(IAppDispatch *pintf)
  {
    TAutoDriver<IAppDispatch>::Bind(pintf, false);
  }

  IAppDispatchDispT(IAppDispatchPtr pintf)
  {
    TAutoDriver<IAppDispatch>::Bind(pintf, true);
  }

  IAppDispatchDispT& operator=(IAppDispatch *pintf)
  {
    TAutoDriver<IAppDispatch>::Bind(pintf, false);
    return *this;
  }

  IAppDispatchDispT& operator=(IAppDispatchPtr pintf)
  {
    TAutoDriver<IAppDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_titlebarVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_titlebarVisible(void);
  HRESULT         __fastcall set_titlebarVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_titlebarAutoHide(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_titlebarAutoHide(void);
  HRESULT         __fastcall set_titlebarAutoHide(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_currentTask(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentTask(void);
  HRESULT         __fastcall set_currentTask(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_settingsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_settingsVisible(void);
  HRESULT         __fastcall set_settingsVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_playlistVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_playlistVisible(void);
  HRESULT         __fastcall set_playlistVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall gotoSkinMode();
  HRESULT         __fastcall navigatePrevious();
  HRESULT         __fastcall navigateNext();
  HRESULT         __fastcall goFullScreen();
  HRESULT         __fastcall get_fullScreenEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreenEnabled(void);
  HRESULT         __fastcall get_serviceLoginVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_serviceLoginVisible(void);
  HRESULT         __fastcall get_serviceLoginSignedIn(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_serviceLoginSignedIn(void);
  HRESULT         __fastcall serviceLogin();
  HRESULT         __fastcall serviceLogout();
  HRESULT         __fastcall get_serviceGetInfo(BSTR bstrItem/*[in]*/, 
                                                VARIANT* pValue/*[out,retval]*/);
  VARIANT         __fastcall get_serviceGetInfo(BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall get_navigatePreviousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_navigatePreviousEnabled(void);
  HRESULT         __fastcall get_navigateNextEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_navigateNextEnabled(void);
  HRESULT         __fastcall navigateToAddress(BSTR address/*[in]*/);
  HRESULT         __fastcall get_glassEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_glassEnabled(void);
  HRESULT         __fastcall get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_inVistaPlus(void);
  HRESULT         __fastcall adjustLeft(long nDistance/*[in]*/);
  HRESULT         __fastcall get_taskbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_taskbarVisible(void);
  HRESULT         __fastcall set_taskbarVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPI(long* pVal/*[out,retval]*/);
  long            __fastcall get_DPI(void);
  HRESULT         __fastcall get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_previousEnabled(void);
  HRESULT         __fastcall get_playLibraryItemEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_playLibraryItemEnabled(void);
  HRESULT         __fastcall previous();
  HRESULT         __fastcall get_titlebarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_titlebarCurrentlyVisible(void);
  HRESULT         __fastcall get_menubarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_menubarCurrentlyVisible(void);
  HRESULT         __fastcall get_bgPluginRunning(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_bgPluginRunning(void);
  HRESULT         __fastcall configurePlugins(long nType/*[in]*/);
  HRESULT         __fastcall getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getTimeString(double dTime/*[in]*/);
  HRESULT         __fastcall get_maximized(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_maximized(void);
  HRESULT         __fastcall get_top(long* pVal/*[out,retval]*/);
  long            __fastcall get_top(void);
  HRESULT         __fastcall set_top(long pVal/*[in]*/);
  HRESULT         __fastcall get_left(long* pVal/*[out,retval]*/);
  long            __fastcall get_left(void);
  HRESULT         __fastcall set_left(long pVal/*[in]*/);
  HRESULT         __fastcall get_width(long* pVal/*[out,retval]*/);
  long            __fastcall get_width(void);
  HRESULT         __fastcall set_width(long pVal/*[in]*/);
  HRESULT         __fastcall get_height(long* pVal/*[out,retval]*/);
  long            __fastcall get_height(void);
  HRESULT         __fastcall set_height(long pVal/*[in]*/);
  HRESULT         __fastcall setWindowPos(long lTop/*[in]*/, long lLeft/*[in]*/, long lWidth/*[in]*/
                                          , long lHeight/*[in]*/);
  HRESULT         __fastcall logData(BSTR ID/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall get_powerPersonality(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_powerPersonality(void);
  HRESULT         __fastcall navigateNamespace(BSTR address/*[in]*/);
  HRESULT         __fastcall get_exclusiveService(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_exclusiveService(void);
  HRESULT         __fastcall set_windowText(BSTR Param1/*[in]*/);

  __property   VARIANT_BOOL    titlebarVisible = {read = get_titlebarVisible, write = set_titlebarVisible};
  __property   VARIANT_BOOL    titlebarAutoHide = {read = get_titlebarAutoHide, write = set_titlebarAutoHide};
  __property   BSTR            currentTask = {read = get_currentTask, write = set_currentTask};
  __property   VARIANT_BOOL    settingsVisible = {read = get_settingsVisible, write = set_settingsVisible};
  __property   VARIANT_BOOL    playlistVisible = {read = get_playlistVisible, write = set_playlistVisible};
  __property   VARIANT_BOOL    fullScreenEnabled = {read = get_fullScreenEnabled};
  __property   VARIANT_BOOL    serviceLoginVisible = {read = get_serviceLoginVisible};
  __property   VARIANT_BOOL    serviceLoginSignedIn = {read = get_serviceLoginSignedIn};
  __property   VARIANT_BOOL    navigatePreviousEnabled = {read = get_navigatePreviousEnabled};
  __property   VARIANT_BOOL    navigateNextEnabled = {read = get_navigateNextEnabled};
  __property   VARIANT_BOOL    glassEnabled = {read = get_glassEnabled};
  __property   VARIANT_BOOL    inVistaPlus = {read = get_inVistaPlus};
  __property   VARIANT_BOOL    taskbarVisible = {read = get_taskbarVisible, write = set_taskbarVisible};
  __property   long            DPI = {read = get_DPI};
  __property   VARIANT_BOOL    previousEnabled = {read = get_previousEnabled};
  __property   VARIANT_BOOL    playLibraryItemEnabled = {read = get_playLibraryItemEnabled};
  __property   VARIANT_BOOL    titlebarCurrentlyVisible = {read = get_titlebarCurrentlyVisible};
  __property   VARIANT_BOOL    menubarCurrentlyVisible = {read = get_menubarCurrentlyVisible};
  __property   VARIANT_BOOL    bgPluginRunning = {read = get_bgPluginRunning};
  __property   VARIANT_BOOL    maximized = {read = get_maximized};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   BSTR            powerPersonality = {read = get_powerPersonality};
  __property   BSTR            exclusiveService = {read = get_exclusiveService};
  __property   BSTR            windowText = {write = set_windowText};
};
typedef IAppDispatchDispT<IAppDispatch> IAppDispatchDisp;

typedef TComInterface<IWMPSafeBrowser>  TCOMIWMPSafeBrowser;

// *********************************************************************//
// DispIntf:  IWMPSafeBrowser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF870383-83AB-4EA9-BE48-56FA4251AF10}
// *********************************************************************//
template<class T>
class IWMPSafeBrowserDispT : public TAutoDriver<IWMPSafeBrowser>
{
public:
  IWMPSafeBrowserDispT(){}

  IWMPSafeBrowserDispT(IWMPSafeBrowser *pintf)
  {
    TAutoDriver<IWMPSafeBrowser>::Bind(pintf, false);
  }

  IWMPSafeBrowserDispT(IWMPSafeBrowserPtr pintf)
  {
    TAutoDriver<IWMPSafeBrowser>::Bind(pintf, true);
  }

  IWMPSafeBrowserDispT& operator=(IWMPSafeBrowser *pintf)
  {
    TAutoDriver<IWMPSafeBrowser>::Bind(pintf, false);
    return *this;
  }

  IWMPSafeBrowserDispT& operator=(IWMPSafeBrowserPtr pintf)
  {
    TAutoDriver<IWMPSafeBrowser>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_URL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);
  HRESULT         __fastcall set_URL(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_status(long* pVal/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT         __fastcall get_pendingDownloads(long* pVal/*[out,retval]*/);
  long            __fastcall get_pendingDownloads(void);
  HRESULT         __fastcall showSAMIText(BSTR samiText/*[in]*/);
  HRESULT         __fastcall showLyrics(BSTR lyrics/*[in]*/);
  HRESULT         __fastcall loadSpecialPage(BSTR pageName/*[in]*/);
  HRESULT         __fastcall goBack();
  HRESULT         __fastcall goForward();
  HRESULT         __fastcall stop();
  HRESULT         __fastcall refresh();
  HRESULT         __fastcall get_baseURL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_baseURL(void);
  HRESULT         __fastcall get_fullURL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fullURL(void);
  HRESULT         __fastcall get_secureLock(long* pVal/*[out,retval]*/);
  long            __fastcall get_secureLock(void);
  HRESULT         __fastcall get_busy(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_busy(void);
  HRESULT         __fastcall showCert();

  __property   BSTR            URL = {read = get_URL, write = set_URL};
  __property   long            status = {read = get_status};
  __property   long            pendingDownloads = {read = get_pendingDownloads};
  __property   BSTR            baseURL = {read = get_baseURL};
  __property   BSTR            fullURL = {read = get_fullURL};
  __property   long            secureLock = {read = get_secureLock};
  __property   VARIANT_BOOL    busy = {read = get_busy};
};
typedef IWMPSafeBrowserDispT<IWMPSafeBrowser> IWMPSafeBrowserDisp;

typedef TComInterface<IWMPObjectExtendedProps>  TCOMIWMPObjectExtendedProps;

// *********************************************************************//
// DispIntf:  IWMPObjectExtendedProps
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21D077C1-4BAA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
template<class T>
class IWMPObjectExtendedPropsDispT : public TAutoDriver<IWMPObjectExtendedProps>
{
public:
  IWMPObjectExtendedPropsDispT(){}

  IWMPObjectExtendedPropsDispT(IWMPObjectExtendedProps *pintf)
  {
    TAutoDriver<IWMPObjectExtendedProps>::Bind(pintf, false);
  }

  IWMPObjectExtendedPropsDispT(IWMPObjectExtendedPropsPtr pintf)
  {
    TAutoDriver<IWMPObjectExtendedProps>::Bind(pintf, true);
  }

  IWMPObjectExtendedPropsDispT& operator=(IWMPObjectExtendedProps *pintf)
  {
    TAutoDriver<IWMPObjectExtendedProps>::Bind(pintf, false);
    return *this;
  }

  IWMPObjectExtendedPropsDispT& operator=(IWMPObjectExtendedPropsPtr pintf)
  {
    TAutoDriver<IWMPObjectExtendedProps>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_elementType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_elementType(void);
  HRESULT         __fastcall get_left(long* pVal/*[out,retval]*/);
  long            __fastcall get_left(void);
  HRESULT         __fastcall set_left(long pVal/*[in]*/);
  HRESULT         __fastcall get_top(long* pVal/*[out,retval]*/);
  long            __fastcall get_top(void);
  HRESULT         __fastcall set_top(long pVal/*[in]*/);
  HRESULT         __fastcall get_right(long* pVal/*[out,retval]*/);
  long            __fastcall get_right(void);
  HRESULT         __fastcall set_right(long pVal/*[in]*/);
  HRESULT         __fastcall get_bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_bottom(void);
  HRESULT         __fastcall set_bottom(long pVal/*[in]*/);
  HRESULT         __fastcall get_width(long* pVal/*[out,retval]*/);
  long            __fastcall get_width(void);
  HRESULT         __fastcall set_width(long pVal/*[in]*/);
  HRESULT         __fastcall get_height(long* pVal/*[out,retval]*/);
  long            __fastcall get_height(void);
  HRESULT         __fastcall set_height(long pVal/*[in]*/);
  HRESULT         __fastcall get_zIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_zIndex(void);
  HRESULT         __fastcall set_zIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_clippingImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingImage(void);
  HRESULT         __fastcall set_clippingImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_clippingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingColor(void);
  HRESULT         __fastcall set_clippingColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_visible(void);
  HRESULT         __fastcall set_visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  HRESULT         __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_passThrough(void);
  HRESULT         __fastcall set_passThrough(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_horizontalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_horizontalAlignment(void);
  HRESULT         __fastcall set_horizontalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_verticalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_verticalAlignment(void);
  HRESULT         __fastcall set_verticalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, long newWidth/*[in]*/
                                        , long newHeight/*[in]*/, long moveTime/*[in]*/, 
                                        VARIANT_BOOL fSlide/*[in]*/);
  HRESULT         __fastcall get_alphaBlend(long* pVal/*[out,retval]*/);
  long            __fastcall get_alphaBlend(void);
  HRESULT         __fastcall set_alphaBlend(long pVal/*[in]*/);
  HRESULT         __fastcall alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/);
  HRESULT         __fastcall get_accName(BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(void);
  HRESULT         __fastcall set_accName(BSTR pszName/*[in]*/);
  HRESULT         __fastcall get_accDescription(BSTR* pszDesc/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(void);
  HRESULT         __fastcall set_accDescription(BSTR pszDesc/*[in]*/);
  HRESULT         __fastcall get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  HRESULT         __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);
  HRESULT         __fastcall get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizeImages(void);
  HRESULT         __fastcall set_resizeImages(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/);
  BSTR            __fastcall get_nineGridMargins(void);
  HRESULT         __fastcall set_nineGridMargins(BSTR pszMargins/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            elementType = {read = get_elementType};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            right = {read = get_right, write = set_right};
  __property   long            bottom = {read = get_bottom, write = set_bottom};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   long            zIndex = {read = get_zIndex, write = set_zIndex};
  __property   BSTR            clippingImage = {read = get_clippingImage, write = set_clippingImage};
  __property   BSTR            clippingColor = {read = get_clippingColor, write = set_clippingColor};
  __property   VARIANT_BOOL    visible = {read = get_visible, write = set_visible};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   VARIANT_BOOL    passThrough = {read = get_passThrough, write = set_passThrough};
  __property   BSTR            horizontalAlignment = {read = get_horizontalAlignment, write = set_horizontalAlignment};
  __property   BSTR            verticalAlignment = {read = get_verticalAlignment, write = set_verticalAlignment};
  __property   long            alphaBlend = {read = get_alphaBlend, write = set_alphaBlend};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
  __property   VARIANT_BOOL    resizeImages = {read = get_resizeImages, write = set_resizeImages};
  __property   BSTR            nineGridMargins = {read = get_nineGridMargins, write = set_nineGridMargins};
};
typedef IWMPObjectExtendedPropsDispT<IWMPObjectExtendedProps> IWMPObjectExtendedPropsDisp;

typedef TComInterface<IWMPLayoutSubView>  TCOMIWMPLayoutSubView;

// *********************************************************************//
// DispIntf:  IWMPLayoutSubView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {72F486B1-0D43-11D3-BD3F-00C04F6EA5AE}
// *********************************************************************//
template<class T>
class IWMPLayoutSubViewDispT : public TAutoDriver<IWMPLayoutSubView>
{
public:
  IWMPLayoutSubViewDispT(){}

  IWMPLayoutSubViewDispT(IWMPLayoutSubView *pintf)
  {
    TAutoDriver<IWMPLayoutSubView>::Bind(pintf, false);
  }

  IWMPLayoutSubViewDispT(IWMPLayoutSubViewPtr pintf)
  {
    TAutoDriver<IWMPLayoutSubView>::Bind(pintf, true);
  }

  IWMPLayoutSubViewDispT& operator=(IWMPLayoutSubView *pintf)
  {
    TAutoDriver<IWMPLayoutSubView>::Bind(pintf, false);
    return *this;
  }

  IWMPLayoutSubViewDispT& operator=(IWMPLayoutSubViewPtr pintf)
  {
    TAutoDriver<IWMPLayoutSubView>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundTiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_backgroundTiled(void);
  HRESULT         __fastcall set_backgroundTiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImageHueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_backgroundImageHueShift(void);
  HRESULT         __fastcall set_backgroundImageHueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImageSaturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_backgroundImageSaturation(void);
  HRESULT         __fastcall set_backgroundImageSaturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_resizeBackgroundImage(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizeBackgroundImage(void);
  HRESULT         __fastcall set_resizeBackgroundImage(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_elementType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_elementType(void);
  HRESULT         __fastcall get_left(long* pVal/*[out,retval]*/);
  long            __fastcall get_left(void);
  HRESULT         __fastcall set_left(long pVal/*[in]*/);
  HRESULT         __fastcall get_top(long* pVal/*[out,retval]*/);
  long            __fastcall get_top(void);
  HRESULT         __fastcall set_top(long pVal/*[in]*/);
  HRESULT         __fastcall get_right(long* pVal/*[out,retval]*/);
  long            __fastcall get_right(void);
  HRESULT         __fastcall set_right(long pVal/*[in]*/);
  HRESULT         __fastcall get_bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_bottom(void);
  HRESULT         __fastcall set_bottom(long pVal/*[in]*/);
  HRESULT         __fastcall get_width(long* pVal/*[out,retval]*/);
  long            __fastcall get_width(void);
  HRESULT         __fastcall set_width(long pVal/*[in]*/);
  HRESULT         __fastcall get_height(long* pVal/*[out,retval]*/);
  long            __fastcall get_height(void);
  HRESULT         __fastcall set_height(long pVal/*[in]*/);
  HRESULT         __fastcall get_zIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_zIndex(void);
  HRESULT         __fastcall set_zIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_clippingImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingImage(void);
  HRESULT         __fastcall set_clippingImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_clippingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingColor(void);
  HRESULT         __fastcall set_clippingColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_visible(void);
  HRESULT         __fastcall set_visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  HRESULT         __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_passThrough(void);
  HRESULT         __fastcall set_passThrough(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_horizontalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_horizontalAlignment(void);
  HRESULT         __fastcall set_horizontalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_verticalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_verticalAlignment(void);
  HRESULT         __fastcall set_verticalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, long newWidth/*[in]*/
                                        , long newHeight/*[in]*/, long moveTime/*[in]*/, 
                                        VARIANT_BOOL fSlide/*[in]*/);
  HRESULT         __fastcall get_alphaBlend(long* pVal/*[out,retval]*/);
  long            __fastcall get_alphaBlend(void);
  HRESULT         __fastcall set_alphaBlend(long pVal/*[in]*/);
  HRESULT         __fastcall alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/);
  HRESULT         __fastcall get_accName(BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(void);
  HRESULT         __fastcall set_accName(BSTR pszName/*[in]*/);
  HRESULT         __fastcall get_accDescription(BSTR* pszDesc/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(void);
  HRESULT         __fastcall set_accDescription(BSTR pszDesc/*[in]*/);
  HRESULT         __fastcall get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  HRESULT         __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);
  HRESULT         __fastcall get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizeImages(void);
  HRESULT         __fastcall set_resizeImages(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/);
  BSTR            __fastcall get_nineGridMargins(void);
  HRESULT         __fastcall set_nineGridMargins(BSTR pszMargins/*[in]*/);

  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    backgroundTiled = {read = get_backgroundTiled, write = set_backgroundTiled};
  __property   float           backgroundImageHueShift = {read = get_backgroundImageHueShift, write = set_backgroundImageHueShift};
  __property   float           backgroundImageSaturation = {read = get_backgroundImageSaturation, write = set_backgroundImageSaturation};
  __property   VARIANT_BOOL    resizeBackgroundImage = {read = get_resizeBackgroundImage, write = set_resizeBackgroundImage};

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            elementType = {read = get_elementType};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            right = {read = get_right, write = set_right};
  __property   long            bottom = {read = get_bottom, write = set_bottom};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   long            zIndex = {read = get_zIndex, write = set_zIndex};
  __property   BSTR            clippingImage = {read = get_clippingImage, write = set_clippingImage};
  __property   BSTR            clippingColor = {read = get_clippingColor, write = set_clippingColor};
  __property   VARIANT_BOOL    visible = {read = get_visible, write = set_visible};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   VARIANT_BOOL    passThrough = {read = get_passThrough, write = set_passThrough};
  __property   BSTR            horizontalAlignment = {read = get_horizontalAlignment, write = set_horizontalAlignment};
  __property   BSTR            verticalAlignment = {read = get_verticalAlignment, write = set_verticalAlignment};
  __property   long            alphaBlend = {read = get_alphaBlend, write = set_alphaBlend};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
  __property   VARIANT_BOOL    resizeImages = {read = get_resizeImages, write = set_resizeImages};
  __property   BSTR            nineGridMargins = {read = get_nineGridMargins, write = set_nineGridMargins};
};
typedef IWMPLayoutSubViewDispT<IWMPLayoutSubView> IWMPLayoutSubViewDisp;

typedef TComInterface<IWMPLayoutView>  TCOMIWMPLayoutView;

// *********************************************************************//
// DispIntf:  IWMPLayoutView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {172E905D-80D9-4C2F-B7CE-2CCB771787A2}
// *********************************************************************//
template<class T>
class IWMPLayoutViewDispT : public TAutoDriver<IWMPLayoutView>
{
public:
  IWMPLayoutViewDispT(){}

  IWMPLayoutViewDispT(IWMPLayoutView *pintf)
  {
    TAutoDriver<IWMPLayoutView>::Bind(pintf, false);
  }

  IWMPLayoutViewDispT(IWMPLayoutViewPtr pintf)
  {
    TAutoDriver<IWMPLayoutView>::Bind(pintf, true);
  }

  IWMPLayoutViewDispT& operator=(IWMPLayoutView *pintf)
  {
    TAutoDriver<IWMPLayoutView>::Bind(pintf, false);
    return *this;
  }

  IWMPLayoutViewDispT& operator=(IWMPLayoutViewPtr pintf)
  {
    TAutoDriver<IWMPLayoutView>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall set_title(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_category(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_category(void);
  HRESULT         __fastcall set_category(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_focusObjectID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_focusObjectID(void);
  HRESULT         __fastcall set_focusObjectID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_titleBar(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_titleBar(void);
  HRESULT         __fastcall get_resizable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizable(void);
  HRESULT         __fastcall get_timerInterval(long* pVal/*[out,retval]*/);
  long            __fastcall get_timerInterval(void);
  HRESULT         __fastcall set_timerInterval(long pVal/*[in]*/);
  HRESULT         __fastcall get_minWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_minWidth(void);
  HRESULT         __fastcall set_minWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_maxWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_maxWidth(void);
  HRESULT         __fastcall set_maxWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_minHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_minHeight(void);
  HRESULT         __fastcall set_minHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_maxHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_maxHeight(void);
  HRESULT         __fastcall set_maxHeight(long pVal/*[in]*/);
  HRESULT         __fastcall close();
  HRESULT         __fastcall minimize();
  HRESULT         __fastcall maximize();
  HRESULT         __fastcall restore();
  HRESULT         __fastcall size(BSTR bstrDirection/*[in]*/);
  HRESULT         __fastcall returnToMediaCenter();
  HRESULT         __fastcall updateWindow();
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundTiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_backgroundTiled(void);
  HRESULT         __fastcall set_backgroundTiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImageHueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_backgroundImageHueShift(void);
  HRESULT         __fastcall set_backgroundImageHueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImageSaturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_backgroundImageSaturation(void);
  HRESULT         __fastcall set_backgroundImageSaturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_resizeBackgroundImage(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizeBackgroundImage(void);
  HRESULT         __fastcall set_resizeBackgroundImage(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_elementType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_elementType(void);
  HRESULT         __fastcall get_left(long* pVal/*[out,retval]*/);
  long            __fastcall get_left(void);
  HRESULT         __fastcall set_left(long pVal/*[in]*/);
  HRESULT         __fastcall get_top(long* pVal/*[out,retval]*/);
  long            __fastcall get_top(void);
  HRESULT         __fastcall set_top(long pVal/*[in]*/);
  HRESULT         __fastcall get_right(long* pVal/*[out,retval]*/);
  long            __fastcall get_right(void);
  HRESULT         __fastcall set_right(long pVal/*[in]*/);
  HRESULT         __fastcall get_bottom(long* pVal/*[out,retval]*/);
  long            __fastcall get_bottom(void);
  HRESULT         __fastcall set_bottom(long pVal/*[in]*/);
  HRESULT         __fastcall get_width(long* pVal/*[out,retval]*/);
  long            __fastcall get_width(void);
  HRESULT         __fastcall set_width(long pVal/*[in]*/);
  HRESULT         __fastcall get_height(long* pVal/*[out,retval]*/);
  long            __fastcall get_height(void);
  HRESULT         __fastcall set_height(long pVal/*[in]*/);
  HRESULT         __fastcall get_zIndex(long* pVal/*[out,retval]*/);
  long            __fastcall get_zIndex(void);
  HRESULT         __fastcall set_zIndex(long pVal/*[in]*/);
  HRESULT         __fastcall get_clippingImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingImage(void);
  HRESULT         __fastcall set_clippingImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_clippingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clippingColor(void);
  HRESULT         __fastcall set_clippingColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_visible(void);
  HRESULT         __fastcall set_visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  HRESULT         __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_passThrough(void);
  HRESULT         __fastcall set_passThrough(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_horizontalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_horizontalAlignment(void);
  HRESULT         __fastcall set_horizontalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_verticalAlignment(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_verticalAlignment(void);
  HRESULT         __fastcall set_verticalAlignment(BSTR pVal/*[in]*/);
  HRESULT         __fastcall moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/);
  HRESULT         __fastcall moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, long newWidth/*[in]*/
                                        , long newHeight/*[in]*/, long moveTime/*[in]*/, 
                                        VARIANT_BOOL fSlide/*[in]*/);
  HRESULT         __fastcall get_alphaBlend(long* pVal/*[out,retval]*/);
  long            __fastcall get_alphaBlend(void);
  HRESULT         __fastcall set_alphaBlend(long pVal/*[in]*/);
  HRESULT         __fastcall alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/);
  HRESULT         __fastcall get_accName(BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(void);
  HRESULT         __fastcall set_accName(BSTR pszName/*[in]*/);
  HRESULT         __fastcall get_accDescription(BSTR* pszDesc/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(void);
  HRESULT         __fastcall set_accDescription(BSTR pszDesc/*[in]*/);
  HRESULT         __fastcall get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  HRESULT         __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);
  HRESULT         __fastcall get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resizeImages(void);
  HRESULT         __fastcall set_resizeImages(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/);
  BSTR            __fastcall get_nineGridMargins(void);
  HRESULT         __fastcall set_nineGridMargins(BSTR pszMargins/*[in]*/);

  __property   BSTR            title = {read = get_title, write = set_title};
  __property   BSTR            category = {read = get_category, write = set_category};
  __property   BSTR            focusObjectID = {read = get_focusObjectID, write = set_focusObjectID};
  __property   VARIANT_BOOL    titleBar = {read = get_titleBar};
  __property   VARIANT_BOOL    resizable = {read = get_resizable};
  __property   long            timerInterval = {read = get_timerInterval, write = set_timerInterval};
  __property   long            minWidth = {read = get_minWidth, write = set_minWidth};
  __property   long            maxWidth = {read = get_maxWidth, write = set_maxWidth};
  __property   long            minHeight = {read = get_minHeight, write = set_minHeight};
  __property   long            maxHeight = {read = get_maxHeight, write = set_maxHeight};

  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   VARIANT_BOOL    backgroundTiled = {read = get_backgroundTiled, write = set_backgroundTiled};
  __property   float           backgroundImageHueShift = {read = get_backgroundImageHueShift, write = set_backgroundImageHueShift};
  __property   float           backgroundImageSaturation = {read = get_backgroundImageSaturation, write = set_backgroundImageSaturation};
  __property   VARIANT_BOOL    resizeBackgroundImage = {read = get_resizeBackgroundImage, write = set_resizeBackgroundImage};

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            elementType = {read = get_elementType};
  __property   long            left = {read = get_left, write = set_left};
  __property   long            top = {read = get_top, write = set_top};
  __property   long            right = {read = get_right, write = set_right};
  __property   long            bottom = {read = get_bottom, write = set_bottom};
  __property   long            width = {read = get_width, write = set_width};
  __property   long            height = {read = get_height, write = set_height};
  __property   long            zIndex = {read = get_zIndex, write = set_zIndex};
  __property   BSTR            clippingImage = {read = get_clippingImage, write = set_clippingImage};
  __property   BSTR            clippingColor = {read = get_clippingColor, write = set_clippingColor};
  __property   VARIANT_BOOL    visible = {read = get_visible, write = set_visible};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   VARIANT_BOOL    passThrough = {read = get_passThrough, write = set_passThrough};
  __property   BSTR            horizontalAlignment = {read = get_horizontalAlignment, write = set_horizontalAlignment};
  __property   BSTR            verticalAlignment = {read = get_verticalAlignment, write = set_verticalAlignment};
  __property   long            alphaBlend = {read = get_alphaBlend, write = set_alphaBlend};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
  __property   VARIANT_BOOL    resizeImages = {read = get_resizeImages, write = set_resizeImages};
  __property   BSTR            nineGridMargins = {read = get_nineGridMargins, write = set_nineGridMargins};
};
typedef IWMPLayoutViewDispT<IWMPLayoutView> IWMPLayoutViewDisp;

typedef TComInterface<IWMPEventObject>  TCOMIWMPEventObject;

// *********************************************************************//
// DispIntf:  IWMPEventObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
template<class T>
class IWMPEventObjectDispT : public TAutoDriver<IWMPEventObject>
{
public:
  IWMPEventObjectDispT(){}

  IWMPEventObjectDispT(IWMPEventObject *pintf)
  {
    TAutoDriver<IWMPEventObject>::Bind(pintf, false);
  }

  IWMPEventObjectDispT(IWMPEventObjectPtr pintf)
  {
    TAutoDriver<IWMPEventObject>::Bind(pintf, true);
  }

  IWMPEventObjectDispT& operator=(IWMPEventObject *pintf)
  {
    TAutoDriver<IWMPEventObject>::Bind(pintf, false);
    return *this;
  }

  IWMPEventObjectDispT& operator=(IWMPEventObjectPtr pintf)
  {
    TAutoDriver<IWMPEventObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_srcElement(LPDISPATCH* p/*[out,retval]*/);
  LPDISPATCH      __fastcall get_srcElement(void);
  HRESULT         __fastcall get_altKey(VARIANT_BOOL* p/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_altKey(void);
  HRESULT         __fastcall get_ctrlKey(VARIANT_BOOL* p/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ctrlKey(void);
  HRESULT         __fastcall get_shiftKey(VARIANT_BOOL* p/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_shiftKey(void);
  HRESULT         __fastcall get_fromElement(LPDISPATCH* p/*[out,retval]*/);
  LPDISPATCH      __fastcall get_fromElement(void);
  HRESULT         __fastcall get_toElement(LPDISPATCH* p/*[out,retval]*/);
  LPDISPATCH      __fastcall get_toElement(void);
  HRESULT         __fastcall set_keyCode(long p/*[in]*/);
  HRESULT         __fastcall get_keyCode(long* p/*[out,retval]*/);
  long            __fastcall get_keyCode(void);
  HRESULT         __fastcall get_button(long* p/*[out,retval]*/);
  long            __fastcall get_button(void);
  HRESULT         __fastcall get_x(long* p/*[out,retval]*/);
  long            __fastcall get_x(void);
  HRESULT         __fastcall get_y(long* p/*[out,retval]*/);
  long            __fastcall get_y(void);
  HRESULT         __fastcall get_clientX(long* p/*[out,retval]*/);
  long            __fastcall get_clientX(void);
  HRESULT         __fastcall get_clientY(long* p/*[out,retval]*/);
  long            __fastcall get_clientY(void);
  HRESULT         __fastcall get_offsetX(long* p/*[out,retval]*/);
  long            __fastcall get_offsetX(void);
  HRESULT         __fastcall get_offsetY(long* p/*[out,retval]*/);
  long            __fastcall get_offsetY(void);
  HRESULT         __fastcall get_screenX(long* p/*[out,retval]*/);
  long            __fastcall get_screenX(void);
  HRESULT         __fastcall get_screenY(long* p/*[out,retval]*/);
  long            __fastcall get_screenY(void);
  HRESULT         __fastcall get_screenWidth(long* p/*[out,retval]*/);
  long            __fastcall get_screenWidth(void);
  HRESULT         __fastcall get_screenHeight(long* p/*[out,retval]*/);
  long            __fastcall get_screenHeight(void);

  __property   LPDISPATCH      srcElement = {read = get_srcElement};
  __property   VARIANT_BOOL    altKey = {read = get_altKey};
  __property   VARIANT_BOOL    ctrlKey = {read = get_ctrlKey};
  __property   VARIANT_BOOL    shiftKey = {read = get_shiftKey};
  __property   LPDISPATCH      fromElement = {read = get_fromElement};
  __property   LPDISPATCH      toElement = {read = get_toElement};
  __property   long            keyCode = {read = get_keyCode, write = set_keyCode};
  __property   long            button = {read = get_button};
  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};
  __property   long            clientX = {read = get_clientX};
  __property   long            clientY = {read = get_clientY};
  __property   long            offsetX = {read = get_offsetX};
  __property   long            offsetY = {read = get_offsetY};
  __property   long            screenX = {read = get_screenX};
  __property   long            screenY = {read = get_screenY};
  __property   long            screenWidth = {read = get_screenWidth};
  __property   long            screenHeight = {read = get_screenHeight};
};
typedef IWMPEventObjectDispT<IWMPEventObject> IWMPEventObjectDisp;

typedef TComInterface<IWMPTheme>  TCOMIWMPTheme;

// *********************************************************************//
// DispIntf:  IWMPTheme
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6FCAE13D-E492-4584-9C21-D2C052A2A33A}
// *********************************************************************//
template<class T>
class IWMPThemeDispT : public TAutoDriver<IWMPTheme>
{
public:
  IWMPThemeDispT(){}

  IWMPThemeDispT(IWMPTheme *pintf)
  {
    TAutoDriver<IWMPTheme>::Bind(pintf, false);
  }

  IWMPThemeDispT(IWMPThemePtr pintf)
  {
    TAutoDriver<IWMPTheme>::Bind(pintf, true);
  }

  IWMPThemeDispT& operator=(IWMPTheme *pintf)
  {
    TAutoDriver<IWMPTheme>::Bind(pintf, false);
    return *this;
  }

  IWMPThemeDispT& operator=(IWMPThemePtr pintf)
  {
    TAutoDriver<IWMPTheme>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall get_version(float* pfVersion/*[out,retval]*/);
  float           __fastcall get_version(void);
  HRESULT         __fastcall get_authorVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_authorVersion(void);
  HRESULT         __fastcall get_author(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_author(void);
  HRESULT         __fastcall get_copyright(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_copyright(void);
  HRESULT         __fastcall get_currentViewID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentViewID(void);
  HRESULT         __fastcall set_currentViewID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall showErrorDialog();
  HRESULT         __fastcall logString(BSTR stringVal/*[in]*/);
  HRESULT         __fastcall openView(BSTR viewID/*[in]*/);
  HRESULT         __fastcall openViewRelative(BSTR viewID/*[in]*/, long x, long y);
  HRESULT         __fastcall closeView(BSTR viewID/*[in]*/);
  HRESULT         __fastcall openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/, 
                                        BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/);
  HRESULT         __fastcall loadString(BSTR bstrString/*[in]*/, BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall loadString(BSTR bstrString/*[in]*/);
  HRESULT         __fastcall loadPreference(BSTR bstrName/*[in]*/, BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall loadPreference(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall savePreference(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall playSound(BSTR bstrFilename);

  __property   BSTR            title = {read = get_title};
  __property   float           version = {read = get_version};
  __property   BSTR            authorVersion = {read = get_authorVersion};
  __property   BSTR            author = {read = get_author};
  __property   BSTR            copyright = {read = get_copyright};
  __property   BSTR            currentViewID = {read = get_currentViewID, write = set_currentViewID};
};
typedef IWMPThemeDispT<IWMPTheme> IWMPThemeDisp;

typedef TComInterface<IWMPLayoutSettingsDispatch>  TCOMIWMPLayoutSettingsDispatch;

// *********************************************************************//
// DispIntf:  IWMPLayoutSettingsDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81}
// *********************************************************************//
template<class T>
class IWMPLayoutSettingsDispatchDispT : public TAutoDriver<IWMPLayoutSettingsDispatch>
{
public:
  IWMPLayoutSettingsDispatchDispT(){}

  IWMPLayoutSettingsDispatchDispT(IWMPLayoutSettingsDispatch *pintf)
  {
    TAutoDriver<IWMPLayoutSettingsDispatch>::Bind(pintf, false);
  }

  IWMPLayoutSettingsDispatchDispT(IWMPLayoutSettingsDispatchPtr pintf)
  {
    TAutoDriver<IWMPLayoutSettingsDispatch>::Bind(pintf, true);
  }

  IWMPLayoutSettingsDispatchDispT& operator=(IWMPLayoutSettingsDispatch *pintf)
  {
    TAutoDriver<IWMPLayoutSettingsDispatch>::Bind(pintf, false);
    return *this;
  }

  IWMPLayoutSettingsDispatchDispT& operator=(IWMPLayoutSettingsDispatchPtr pintf)
  {
    TAutoDriver<IWMPLayoutSettingsDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_effectType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectType(void);
  HRESULT         __fastcall set_effectType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_effectPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_effectPreset(void);
  HRESULT         __fastcall set_effectPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_settingsView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_settingsView(void);
  HRESULT         __fastcall set_settingsView(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_videoZoom(long* pVal/*[out,retval]*/);
  long            __fastcall get_videoZoom(void);
  HRESULT         __fastcall set_videoZoom(long pVal/*[in]*/);
  HRESULT         __fastcall get_videoShrinkToFit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_videoShrinkToFit(void);
  HRESULT         __fastcall set_videoShrinkToFit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_videoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_videoStretchToFit(void);
  HRESULT         __fastcall set_videoStretchToFit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_userVideoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_userVideoStretchToFit(void);
  HRESULT         __fastcall set_userVideoStretchToFit(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showCaptions(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showCaptions(void);
  HRESULT         __fastcall set_showCaptions(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showTitles(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showTitles(void);
  HRESULT         __fastcall set_showTitles(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showEffects(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showEffects(void);
  HRESULT         __fastcall set_showEffects(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showFullScreenPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showFullScreenPlaylist(void);
  HRESULT         __fastcall set_showFullScreenPlaylist(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_contrastMode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_contrastMode(void);
  HRESULT         __fastcall getNamedString(BSTR bstrName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getNamedString(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall getDurationStringFromSeconds(long lDurationVal/*[in]*/, 
                                                          BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getDurationStringFromSeconds(long lDurationVal/*[in]*/);
  HRESULT         __fastcall get_displayView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_displayView(void);
  HRESULT         __fastcall set_displayView(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_metadataView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_metadataView(void);
  HRESULT         __fastcall set_metadataView(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_showSettings(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showSettings(void);
  HRESULT         __fastcall set_showSettings(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showResizeBars(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showResizeBars(void);
  HRESULT         __fastcall set_showResizeBars(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showPlaylist(void);
  HRESULT         __fastcall set_showPlaylist(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_showMetadata(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showMetadata(void);
  HRESULT         __fastcall set_showMetadata(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_settingsWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_settingsWidth(void);
  HRESULT         __fastcall set_settingsWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_settingsHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_settingsHeight(void);
  HRESULT         __fastcall set_settingsHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_playlistWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_playlistWidth(void);
  HRESULT         __fastcall set_playlistWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_playlistHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_playlistHeight(void);
  HRESULT         __fastcall set_playlistHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_metadataWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_metadataWidth(void);
  HRESULT         __fastcall set_metadataWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_metadataHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_metadataHeight(void);
  HRESULT         __fastcall set_metadataHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_fullScreenAvailable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreenAvailable(void);
  HRESULT         __fastcall set_fullScreenAvailable(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_fullScreenRequest(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreenRequest(void);
  HRESULT         __fastcall set_fullScreenRequest(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_quickHide(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_quickHide(void);
  HRESULT         __fastcall set_quickHide(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_displayPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_displayPreset(void);
  HRESULT         __fastcall set_displayPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_settingsPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_settingsPreset(void);
  HRESULT         __fastcall set_settingsPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_metadataPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_metadataPreset(void);
  HRESULT         __fastcall set_metadataPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_userDisplayView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_userDisplayView(void);
  HRESULT         __fastcall get_userWMPDisplayView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_userWMPDisplayView(void);
  HRESULT         __fastcall get_userDisplayPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_userDisplayPreset(void);
  HRESULT         __fastcall get_userWMPDisplayPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_userWMPDisplayPreset(void);
  HRESULT         __fastcall get_dynamicRangeControl(long* pVal/*[out,retval]*/);
  long            __fastcall get_dynamicRangeControl(void);
  HRESULT         __fastcall set_dynamicRangeControl(long pVal/*[in]*/);
  HRESULT         __fastcall get_slowRate(float* pVal/*[out,retval]*/);
  float           __fastcall get_slowRate(void);
  HRESULT         __fastcall set_slowRate(float pVal/*[in]*/);
  HRESULT         __fastcall get_fastRate(float* pVal/*[out,retval]*/);
  float           __fastcall get_fastRate(void);
  HRESULT         __fastcall set_fastRate(float pVal/*[in]*/);
  HRESULT         __fastcall get_buttonHueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_buttonHueShift(void);
  HRESULT         __fastcall set_buttonHueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_buttonSaturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_buttonSaturation(void);
  HRESULT         __fastcall set_buttonSaturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_backHueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_backHueShift(void);
  HRESULT         __fastcall set_backHueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_backSaturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_backSaturation(void);
  HRESULT         __fastcall set_backSaturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_vizRequest(long* pVal/*[out,retval]*/);
  long            __fastcall get_vizRequest(void);
  HRESULT         __fastcall set_vizRequest(long pVal/*[in]*/);
  HRESULT         __fastcall get_appColorLight(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall get_appColorMedium(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_toolbarButtonHighlight(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolbarButtonHighlight(void);
  HRESULT         __fastcall get_toolbarButtonShadow(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolbarButtonShadow(void);
  HRESULT         __fastcall get_toolbarButtonFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolbarButtonFace(void);
  HRESULT         __fastcall get_itemPlayingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingColor(void);
  HRESULT         __fastcall get_itemPlayingBackgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_itemPlayingBackgroundColor(void);
  HRESULT         __fastcall get_itemErrorColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_itemErrorColor(void);
  HRESULT         __fastcall get_appColorLimited(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_appColorLimited(void);
  HRESULT         __fastcall get_appColorBlackBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_appColorBlackBackground(void);
  HRESULT         __fastcall set_appColorBlackBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_appColorVideoBorder(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorVideoBorder(void);
  HRESULT         __fastcall set_appColorVideoBorder(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_appColorAux1(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux1(void);
  HRESULT         __fastcall get_appColorAux2(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux2(void);
  HRESULT         __fastcall get_appColorAux3(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux3(void);
  HRESULT         __fastcall get_appColorAux4(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux4(void);
  HRESULT         __fastcall get_appColorAux5(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux5(void);
  HRESULT         __fastcall get_appColorAux6(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux6(void);
  HRESULT         __fastcall get_appColorAux7(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux7(void);
  HRESULT         __fastcall get_appColorAux8(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux8(void);
  HRESULT         __fastcall get_appColorAux9(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux9(void);
  HRESULT         __fastcall get_appColorAux10(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux10(void);
  HRESULT         __fastcall get_appColorAux11(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux11(void);
  HRESULT         __fastcall get_appColorAux12(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux12(void);
  HRESULT         __fastcall get_appColorAux13(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux13(void);
  HRESULT         __fastcall get_appColorAux14(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux14(void);
  HRESULT         __fastcall get_appColorAux15(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_appColorAux15(void);
  HRESULT         __fastcall get_status(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_status(void);
  HRESULT         __fastcall set_status(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_userWMPSettingsView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_userWMPSettingsView(void);
  HRESULT         __fastcall get_userWMPSettingsPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_userWMPSettingsPreset(void);
  HRESULT         __fastcall get_userWMPShowSettings(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_userWMPShowSettings(void);
  HRESULT         __fastcall get_userWMPMetadataView(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_userWMPMetadataView(void);
  HRESULT         __fastcall get_userWMPMetadataPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_userWMPMetadataPreset(void);
  HRESULT         __fastcall get_userWMPShowMetadata(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_userWMPShowMetadata(void);
  HRESULT         __fastcall get_captionsHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_captionsHeight(void);
  HRESULT         __fastcall set_captionsHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_snapToVideo(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_snapToVideo(void);
  HRESULT         __fastcall set_snapToVideo(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_pinFullScreenControls(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_pinFullScreenControls(void);
  HRESULT         __fastcall set_pinFullScreenControls(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SetLockFullScreen(VARIANT_BOOL locked, BSTR Val);
  HRESULT         __fastcall get_fullScreenLocked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreenLocked(void);
  HRESULT         __fastcall get_isMultiMon(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isMultiMon(void);
  HRESULT         __fastcall get_exclusiveHueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_exclusiveHueShift(void);
  HRESULT         __fastcall set_exclusiveHueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_exclusiveSaturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_exclusiveSaturation(void);
  HRESULT         __fastcall set_exclusiveSaturation(float pVal/*[in]*/);
  HRESULT         __fastcall get_themeBkgColorIsActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_themeBkgColorIsActive(void);
  HRESULT         __fastcall set_themeBkgColorIsActive(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_themeBkgColorActive(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_themeBkgColorActive(void);
  HRESULT         __fastcall get_themeBkgColorInactive(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_themeBkgColorInactive(void);

  __property   BSTR            effectType = {read = get_effectType, write = set_effectType};
  __property   long            effectPreset = {read = get_effectPreset, write = set_effectPreset};
  __property   BSTR            settingsView = {read = get_settingsView, write = set_settingsView};
  __property   long            videoZoom = {read = get_videoZoom, write = set_videoZoom};
  __property   VARIANT_BOOL    videoShrinkToFit = {read = get_videoShrinkToFit, write = set_videoShrinkToFit};
  __property   VARIANT_BOOL    videoStretchToFit = {read = get_videoStretchToFit, write = set_videoStretchToFit};
  __property   VARIANT_BOOL    userVideoStretchToFit = {read = get_userVideoStretchToFit, write = set_userVideoStretchToFit};
  __property   VARIANT_BOOL    showCaptions = {read = get_showCaptions, write = set_showCaptions};
  __property   VARIANT_BOOL    showTitles = {read = get_showTitles, write = set_showTitles};
  __property   VARIANT_BOOL    showEffects = {read = get_showEffects, write = set_showEffects};
  __property   VARIANT_BOOL    showFullScreenPlaylist = {read = get_showFullScreenPlaylist, write = set_showFullScreenPlaylist};
  __property   BSTR            contrastMode = {read = get_contrastMode};
  __property   BSTR            displayView = {read = get_displayView, write = set_displayView};
  __property   BSTR            metadataView = {read = get_metadataView, write = set_metadataView};
  __property   VARIANT_BOOL    showSettings = {read = get_showSettings, write = set_showSettings};
  __property   VARIANT_BOOL    showResizeBars = {read = get_showResizeBars, write = set_showResizeBars};
  __property   VARIANT_BOOL    showPlaylist = {read = get_showPlaylist, write = set_showPlaylist};
  __property   VARIANT_BOOL    showMetadata = {read = get_showMetadata, write = set_showMetadata};
  __property   long            settingsWidth = {read = get_settingsWidth, write = set_settingsWidth};
  __property   long            settingsHeight = {read = get_settingsHeight, write = set_settingsHeight};
  __property   long            playlistWidth = {read = get_playlistWidth, write = set_playlistWidth};
  __property   long            playlistHeight = {read = get_playlistHeight, write = set_playlistHeight};
  __property   long            metadataWidth = {read = get_metadataWidth, write = set_metadataWidth};
  __property   long            metadataHeight = {read = get_metadataHeight, write = set_metadataHeight};
  __property   VARIANT_BOOL    fullScreenAvailable = {read = get_fullScreenAvailable, write = set_fullScreenAvailable};
  __property   VARIANT_BOOL    fullScreenRequest = {read = get_fullScreenRequest, write = set_fullScreenRequest};
  __property   VARIANT_BOOL    quickHide = {read = get_quickHide, write = set_quickHide};
  __property   long            displayPreset = {read = get_displayPreset, write = set_displayPreset};
  __property   long            settingsPreset = {read = get_settingsPreset, write = set_settingsPreset};
  __property   long            metadataPreset = {read = get_metadataPreset, write = set_metadataPreset};
  __property   BSTR            userDisplayView = {read = get_userDisplayView};
  __property   BSTR            userWMPDisplayView = {read = get_userWMPDisplayView};
  __property   long            userDisplayPreset = {read = get_userDisplayPreset};
  __property   long            userWMPDisplayPreset = {read = get_userWMPDisplayPreset};
  __property   long            dynamicRangeControl = {read = get_dynamicRangeControl, write = set_dynamicRangeControl};
  __property   float           slowRate = {read = get_slowRate, write = set_slowRate};
  __property   float           fastRate = {read = get_fastRate, write = set_fastRate};
  __property   float           buttonHueShift = {read = get_buttonHueShift, write = set_buttonHueShift};
  __property   float           buttonSaturation = {read = get_buttonSaturation, write = set_buttonSaturation};
  __property   float           backHueShift = {read = get_backHueShift, write = set_backHueShift};
  __property   float           backSaturation = {read = get_backSaturation, write = set_backSaturation};
  __property   long            vizRequest = {read = get_vizRequest, write = set_vizRequest};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            toolbarButtonHighlight = {read = get_toolbarButtonHighlight};
  __property   BSTR            toolbarButtonShadow = {read = get_toolbarButtonShadow};
  __property   BSTR            toolbarButtonFace = {read = get_toolbarButtonFace};
  __property   BSTR            itemPlayingColor = {read = get_itemPlayingColor};
  __property   BSTR            itemPlayingBackgroundColor = {read = get_itemPlayingBackgroundColor};
  __property   BSTR            itemErrorColor = {read = get_itemErrorColor};
  __property   VARIANT_BOOL    appColorLimited = {read = get_appColorLimited};
  __property   VARIANT_BOOL    appColorBlackBackground = {read = get_appColorBlackBackground, write = set_appColorBlackBackground};
  __property   BSTR            appColorVideoBorder = {read = get_appColorVideoBorder, write = set_appColorVideoBorder};
  __property   BSTR            appColorAux1 = {read = get_appColorAux1};
  __property   BSTR            appColorAux2 = {read = get_appColorAux2};
  __property   BSTR            appColorAux3 = {read = get_appColorAux3};
  __property   BSTR            appColorAux4 = {read = get_appColorAux4};
  __property   BSTR            appColorAux5 = {read = get_appColorAux5};
  __property   BSTR            appColorAux6 = {read = get_appColorAux6};
  __property   BSTR            appColorAux7 = {read = get_appColorAux7};
  __property   BSTR            appColorAux8 = {read = get_appColorAux8};
  __property   BSTR            appColorAux9 = {read = get_appColorAux9};
  __property   BSTR            appColorAux10 = {read = get_appColorAux10};
  __property   BSTR            appColorAux11 = {read = get_appColorAux11};
  __property   BSTR            appColorAux12 = {read = get_appColorAux12};
  __property   BSTR            appColorAux13 = {read = get_appColorAux13};
  __property   BSTR            appColorAux14 = {read = get_appColorAux14};
  __property   BSTR            appColorAux15 = {read = get_appColorAux15};
  __property   BSTR            status = {read = get_status, write = set_status};
  __property   BSTR            userWMPSettingsView = {read = get_userWMPSettingsView};
  __property   long            userWMPSettingsPreset = {read = get_userWMPSettingsPreset};
  __property   VARIANT_BOOL    userWMPShowSettings = {read = get_userWMPShowSettings};
  __property   BSTR            userWMPMetadataView = {read = get_userWMPMetadataView};
  __property   long            userWMPMetadataPreset = {read = get_userWMPMetadataPreset};
  __property   VARIANT_BOOL    userWMPShowMetadata = {read = get_userWMPShowMetadata};
  __property   long            captionsHeight = {read = get_captionsHeight, write = set_captionsHeight};
  __property   VARIANT_BOOL    snapToVideo = {read = get_snapToVideo, write = set_snapToVideo};
  __property   VARIANT_BOOL    pinFullScreenControls = {read = get_pinFullScreenControls, write = set_pinFullScreenControls};
  __property   VARIANT_BOOL    fullScreenLocked = {read = get_fullScreenLocked};
  __property   VARIANT_BOOL    isMultiMon = {read = get_isMultiMon};
  __property   float           exclusiveHueShift = {read = get_exclusiveHueShift, write = set_exclusiveHueShift};
  __property   float           exclusiveSaturation = {read = get_exclusiveSaturation, write = set_exclusiveSaturation};
  __property   VARIANT_BOOL    themeBkgColorIsActive = {read = get_themeBkgColorIsActive, write = set_themeBkgColorIsActive};
  __property   BSTR            themeBkgColorActive = {read = get_themeBkgColorActive};
  __property   BSTR            themeBkgColorInactive = {read = get_themeBkgColorInactive};
};
typedef IWMPLayoutSettingsDispatchDispT<IWMPLayoutSettingsDispatch> IWMPLayoutSettingsDispatchDisp;

typedef TComInterface<IWMPBrandDispatch>  TCOMIWMPBrandDispatch;

// *********************************************************************//
// DispIntf:  IWMPBrandDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98BB02D4-ED74-43CC-AD6A-45888F2E0DCC}
// *********************************************************************//
template<class T>
class IWMPBrandDispatchDispT : public TAutoDriver<IWMPBrandDispatch>
{
public:
  IWMPBrandDispatchDispT(){}

  IWMPBrandDispatchDispT(IWMPBrandDispatch *pintf)
  {
    TAutoDriver<IWMPBrandDispatch>::Bind(pintf, false);
  }

  IWMPBrandDispatchDispT(IWMPBrandDispatchPtr pintf)
  {
    TAutoDriver<IWMPBrandDispatch>::Bind(pintf, true);
  }

  IWMPBrandDispatchDispT& operator=(IWMPBrandDispatch *pintf)
  {
    TAutoDriver<IWMPBrandDispatch>::Bind(pintf, false);
    return *this;
  }

  IWMPBrandDispatchDispT& operator=(IWMPBrandDispatchPtr pintf)
  {
    TAutoDriver<IWMPBrandDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_fullServiceName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fullServiceName(void);
  HRESULT         __fastcall get_friendlyName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_friendlyName(void);
  HRESULT         __fastcall get_guideButtonText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_guideButtonText(void);
  HRESULT         __fastcall get_guideButtonTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_guideButtonTip(void);
  HRESULT         __fastcall get_guideMenuText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_guideMenuText(void);
  HRESULT         __fastcall get_guideAccText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_guideAccText(void);
  HRESULT         __fastcall get_task1ButtonText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_task1ButtonText(void);
  HRESULT         __fastcall get_task1ButtonTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_task1ButtonTip(void);
  HRESULT         __fastcall get_task1MenuText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_task1MenuText(void);
  HRESULT         __fastcall get_task1AccText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_task1AccText(void);
  HRESULT         __fastcall get_guideUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_guideUrl(void);
  HRESULT         __fastcall get_task1Url(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_task1Url(void);
  HRESULT         __fastcall get_imageLargeUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_imageLargeUrl(void);
  HRESULT         __fastcall get_imageSmallUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_imageSmallUrl(void);
  HRESULT         __fastcall get_imageMenuUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_imageMenuUrl(void);
  HRESULT         __fastcall get_infoCenterUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_infoCenterUrl(void);
  HRESULT         __fastcall get_albumInfoUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_albumInfoUrl(void);
  HRESULT         __fastcall get_buyCDUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_buyCDUrl(void);
  HRESULT         __fastcall get_htmlViewUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_htmlViewUrl(void);
  HRESULT         __fastcall get_navigateUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_navigateUrl(void);
  HRESULT         __fastcall get_cookieUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cookieUrl(void);
  HRESULT         __fastcall get_downloadStatusUrl(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downloadStatusUrl(void);
  HRESULT         __fastcall get_colorPlayer(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_colorPlayer(void);
  HRESULT         __fastcall get_colorPlayerText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_colorPlayerText(void);
  HRESULT         __fastcall get_navigateDispid(long* pVal/*[out,retval]*/);
  long            __fastcall get_navigateDispid(void);
  HRESULT         __fastcall get_navigateParams(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_navigateParams(void);
  HRESULT         __fastcall get_navigatePane(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_navigatePane(void);
  HRESULT         __fastcall get_selectedPane(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_selectedPane(void);
  HRESULT         __fastcall set_selectedPane(BSTR pVal/*[in]*/);
  HRESULT         __fastcall setNavigateProps(BSTR bstrPane/*[in]*/, long lDispid/*[in]*/, 
                                              BSTR bstrParams/*[in]*/);
  HRESULT         __fastcall getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/, 
                                            BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall set_selectedTask(long Param1/*[in]*/);
  HRESULT         __fastcall get_contentPartnerSelected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_contentPartnerSelected(void);

  __property   BSTR            fullServiceName = {read = get_fullServiceName};
  __property   BSTR            friendlyName = {read = get_friendlyName};
  __property   BSTR            guideButtonText = {read = get_guideButtonText};
  __property   BSTR            guideButtonTip = {read = get_guideButtonTip};
  __property   BSTR            guideMenuText = {read = get_guideMenuText};
  __property   BSTR            guideAccText = {read = get_guideAccText};
  __property   BSTR            task1ButtonText = {read = get_task1ButtonText};
  __property   BSTR            task1ButtonTip = {read = get_task1ButtonTip};
  __property   BSTR            task1MenuText = {read = get_task1MenuText};
  __property   BSTR            task1AccText = {read = get_task1AccText};
  __property   BSTR            guideUrl = {read = get_guideUrl};
  __property   BSTR            task1Url = {read = get_task1Url};
  __property   BSTR            imageLargeUrl = {read = get_imageLargeUrl};
  __property   BSTR            imageSmallUrl = {read = get_imageSmallUrl};
  __property   BSTR            imageMenuUrl = {read = get_imageMenuUrl};
  __property   BSTR            infoCenterUrl = {read = get_infoCenterUrl};
  __property   BSTR            albumInfoUrl = {read = get_albumInfoUrl};
  __property   BSTR            buyCDUrl = {read = get_buyCDUrl};
  __property   BSTR            htmlViewUrl = {read = get_htmlViewUrl};
  __property   BSTR            navigateUrl = {read = get_navigateUrl};
  __property   BSTR            cookieUrl = {read = get_cookieUrl};
  __property   BSTR            downloadStatusUrl = {read = get_downloadStatusUrl};
  __property   BSTR            colorPlayer = {read = get_colorPlayer};
  __property   BSTR            colorPlayerText = {read = get_colorPlayerText};
  __property   long            navigateDispid = {read = get_navigateDispid};
  __property   BSTR            navigateParams = {read = get_navigateParams};
  __property   BSTR            navigatePane = {read = get_navigatePane};
  __property   BSTR            selectedPane = {read = get_selectedPane, write = set_selectedPane};
  __property   long            selectedTask = {write = set_selectedTask};
  __property   VARIANT_BOOL    contentPartnerSelected = {read = get_contentPartnerSelected};
};
typedef IWMPBrandDispatchDispT<IWMPBrandDispatch> IWMPBrandDispatchDisp;

typedef TComInterface<IWMPNowPlayingHelperDispatch>  TCOMIWMPNowPlayingHelperDispatch;

// *********************************************************************//
// DispIntf:  IWMPNowPlayingHelperDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {504F112E-77CC-4E3C-A073-5371B31D9B36}
// *********************************************************************//
template<class T>
class IWMPNowPlayingHelperDispatchDispT : public TAutoDriver<IWMPNowPlayingHelperDispatch>
{
public:
  IWMPNowPlayingHelperDispatchDispT(){}

  IWMPNowPlayingHelperDispatchDispT(IWMPNowPlayingHelperDispatch *pintf)
  {
    TAutoDriver<IWMPNowPlayingHelperDispatch>::Bind(pintf, false);
  }

  IWMPNowPlayingHelperDispatchDispT(IWMPNowPlayingHelperDispatchPtr pintf)
  {
    TAutoDriver<IWMPNowPlayingHelperDispatch>::Bind(pintf, true);
  }

  IWMPNowPlayingHelperDispatchDispT& operator=(IWMPNowPlayingHelperDispatch *pintf)
  {
    TAutoDriver<IWMPNowPlayingHelperDispatch>::Bind(pintf, false);
    return *this;
  }

  IWMPNowPlayingHelperDispatchDispT& operator=(IWMPNowPlayingHelperDispatchPtr pintf)
  {
    TAutoDriver<IWMPNowPlayingHelperDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_viewFriendlyName(BSTR bstrView/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_viewFriendlyName(BSTR bstrView/*[in]*/);
  HRESULT         __fastcall get_viewPresetCount(BSTR bstrView/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_viewPresetCount(BSTR bstrView/*[in]*/);
  HRESULT         __fastcall get_viewPresetName(BSTR bstrView/*[in]*/, long nPresetIndex/*[in]*/, 
                                                BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_viewPresetName(BSTR bstrView/*[in]*/, long nPresetIndex/*[in]*/);
  HRESULT         __fastcall get_effectFriendlyName(BSTR bstrEffect/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectFriendlyName(BSTR bstrEffect/*[in]*/);
  HRESULT         __fastcall get_effectPresetName(BSTR bstrEffect/*[in]*/, long nPresetIndex/*[in]*/
                                                  , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectPresetName(BSTR bstrEffect/*[in]*/, long nPresetIndex/*[in]*/);
  HRESULT         __fastcall resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/, 
                                                BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/);
  HRESULT         __fastcall isValidDisplayView(BSTR bstrView/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall isValidDisplayView(BSTR bstrView/*[in]*/);
  HRESULT         __fastcall getSkinFile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getSkinFile(void);
  HRESULT         __fastcall get_captionsAvailable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_captionsAvailable(void);
  HRESULT         __fastcall get_linkAvailable(long* pVal/*[out,retval]*/);
  long            __fastcall get_linkAvailable(void);
  HRESULT         __fastcall get_linkRequest(long* pVal/*[out,retval]*/);
  long            __fastcall get_linkRequest(void);
  HRESULT         __fastcall set_linkRequest(long pVal/*[in]*/);
  HRESULT         __fastcall get_linkRequestParams(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_linkRequestParams(void);
  HRESULT         __fastcall set_linkRequestParams(BSTR pVal/*[in]*/);
  HRESULT         __fastcall getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/, 
                                             long* pVal/*[out,retval]*/);
  long            __fastcall getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/);
  HRESULT         __fastcall getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getTimeString(double dTime/*[in]*/);
  HRESULT         __fastcall getCurrentScriptCommand(BSTR bstrType/*[in]*/, 
                                                     BSTR* pbstrCommand/*[out,retval]*/);
  BSTR            __fastcall getCurrentScriptCommand(BSTR bstrType/*[in]*/);
  HRESULT         __fastcall calcLayout(long lWidth/*[in]*/, long lHeight/*[in]*/, 
                                        VARIANT_BOOL vbCaptions/*[in]*/, 
                                        VARIANT_BOOL vbBanner/*[in]*/);
  HRESULT         __fastcall getLayoutSize(long nProp/*[in]*/, long* plValue/*[out,retval]*/);
  long            __fastcall getLayoutSize(long nProp/*[in]*/);
  HRESULT         __fastcall getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/, 
                                             LPDISPATCH* ppRootPlaylist/*[out,retval]*/);
  LPDISPATCH      __fastcall getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/);
  HRESULT         __fastcall getHTMLViewURL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getHTMLViewURL(void);
  HRESULT         __fastcall get_canSendLink(VARIANT_BOOL* pCanSendLink/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_canSendLink(void);
  HRESULT         __fastcall sendLink(double dblStartTime/*[in]*/, double dblEndTime/*[in]*/);
  HRESULT         __fastcall get_editObj(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_editObj(void);
  HRESULT         __fastcall set_editObj(LPUNKNOWN ppVal/*[in]*/);
  HRESULT         __fastcall getStatusString(BSTR bstrStatusId/*[in]*/, 
                                             BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall getStatusString(BSTR bstrStatusId/*[in]*/);
  HRESULT         __fastcall getStatusPct(BSTR bstrStatusId/*[in]*/, long* pvResult/*[out,retval]*/);
  long            __fastcall getStatusPct(BSTR bstrStatusId/*[in]*/);
  HRESULT         __fastcall getStatusResult(BSTR bstrStatusId/*[in]*/, 
                                             long* pvResult/*[out,retval]*/);
  long            __fastcall getStatusResult(BSTR bstrStatusId/*[in]*/);
  HRESULT         __fastcall getStatusIcon(BSTR bstrStatusId/*[in]*/, long* pvResult/*[out,retval]*/);
  long            __fastcall getStatusIcon(BSTR bstrStatusId/*[in]*/);
  HRESULT         __fastcall getStatusIdList(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall getStatusIdList(void);
  HRESULT         __fastcall get_notificationString(BSTR* pbstrNotificationString/*[out,retval]*/);
  BSTR            __fastcall get_notificationString(void);
  HRESULT         __fastcall get_htmlViewBaseURL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_htmlViewBaseURL(void);
  HRESULT         __fastcall set_htmlViewBaseURL(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_htmlViewFullURL(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_htmlViewFullURL(void);
  HRESULT         __fastcall set_htmlViewFullURL(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_htmlViewSecureLock(long* pVal/*[out,retval]*/);
  long            __fastcall get_htmlViewSecureLock(void);
  HRESULT         __fastcall set_htmlViewSecureLock(long pVal/*[in]*/);
  HRESULT         __fastcall get_htmlViewBusy(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_htmlViewBusy(void);
  HRESULT         __fastcall set_htmlViewBusy(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_htmlViewShowCert(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_htmlViewShowCert(void);
  HRESULT         __fastcall set_htmlViewShowCert(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_previousEnabled(void);
  HRESULT         __fastcall set_previousEnabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_doPreviousNow(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_doPreviousNow(void);
  HRESULT         __fastcall set_doPreviousNow(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPI(long* pVal/*[out,retval]*/);
  long            __fastcall get_DPI(void);
  HRESULT         __fastcall clearColors();
  HRESULT         __fastcall get_lastMessage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_lastMessage(void);
  HRESULT         __fastcall set_lastMessage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_inVistaPlus(void);
  HRESULT         __fastcall get_isBidi(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isBidi(void);

  __property   VARIANT_BOOL    captionsAvailable = {read = get_captionsAvailable};
  __property   long            linkAvailable = {read = get_linkAvailable};
  __property   long            linkRequest = {read = get_linkRequest, write = set_linkRequest};
  __property   BSTR            linkRequestParams = {read = get_linkRequestParams, write = set_linkRequestParams};
  __property   VARIANT_BOOL    canSendLink = {read = get_canSendLink};
  __property   LPUNKNOWN       editObj = {read = get_editObj, write = set_editObj};
  __property   BSTR            notificationString = {read = get_notificationString};
  __property   BSTR            htmlViewBaseURL = {read = get_htmlViewBaseURL, write = set_htmlViewBaseURL};
  __property   BSTR            htmlViewFullURL = {read = get_htmlViewFullURL, write = set_htmlViewFullURL};
  __property   long            htmlViewSecureLock = {read = get_htmlViewSecureLock, write = set_htmlViewSecureLock};
  __property   VARIANT_BOOL    htmlViewBusy = {read = get_htmlViewBusy, write = set_htmlViewBusy};
  __property   VARIANT_BOOL    htmlViewShowCert = {read = get_htmlViewShowCert, write = set_htmlViewShowCert};
  __property   VARIANT_BOOL    previousEnabled = {read = get_previousEnabled, write = set_previousEnabled};
  __property   VARIANT_BOOL    doPreviousNow = {read = get_doPreviousNow, write = set_doPreviousNow};
  __property   long            DPI = {read = get_DPI};
  __property   BSTR            lastMessage = {read = get_lastMessage, write = set_lastMessage};
  __property   VARIANT_BOOL    inVistaPlus = {read = get_inVistaPlus};
  __property   VARIANT_BOOL    isBidi = {read = get_isBidi};
};
typedef IWMPNowPlayingHelperDispatchDispT<IWMPNowPlayingHelperDispatch> IWMPNowPlayingHelperDispatchDisp;

typedef TComInterface<IWMPNowDoingDispatch>  TCOMIWMPNowDoingDispatch;

// *********************************************************************//
// DispIntf:  IWMPNowDoingDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F}
// *********************************************************************//
template<class T>
class IWMPNowDoingDispatchDispT : public TAutoDriver<IWMPNowDoingDispatch>
{
public:
  IWMPNowDoingDispatchDispT(){}

  IWMPNowDoingDispatchDispT(IWMPNowDoingDispatch *pintf)
  {
    TAutoDriver<IWMPNowDoingDispatch>::Bind(pintf, false);
  }

  IWMPNowDoingDispatchDispT(IWMPNowDoingDispatchPtr pintf)
  {
    TAutoDriver<IWMPNowDoingDispatch>::Bind(pintf, true);
  }

  IWMPNowDoingDispatchDispT& operator=(IWMPNowDoingDispatch *pintf)
  {
    TAutoDriver<IWMPNowDoingDispatch>::Bind(pintf, false);
    return *this;
  }

  IWMPNowDoingDispatchDispT& operator=(IWMPNowDoingDispatchPtr pintf)
  {
    TAutoDriver<IWMPNowDoingDispatch>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall buyContent();
  HRESULT         __fastcall hideBasket();
  HRESULT         __fastcall get_DPI(long* pVal/*[out,retval]*/);
  long            __fastcall get_DPI(void);
  HRESULT         __fastcall get_mode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_mode(void);
  HRESULT         __fastcall set_burn_selectedDrive(long pVal/*[in]*/);
  HRESULT         __fastcall get_burn_selectedDrive(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_selectedDrive(void);
  HRESULT         __fastcall get_sync_selectedDevice(long* pVal/*[out,retval]*/);
  long            __fastcall get_sync_selectedDevice(void);
  HRESULT         __fastcall set_sync_selectedDevice(long pVal/*[in]*/);
  HRESULT         __fastcall get_burn_numDiscsSpanned(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_numDiscsSpanned(void);
  HRESULT         __fastcall get_editPlaylist(LPDISPATCH* ppEditPlaylist/*[out,retval]*/);
  LPDISPATCH      __fastcall get_editPlaylist(void);
  HRESULT         __fastcall get_burn_mediaType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_burn_mediaType(void);
  HRESULT         __fastcall get_burn_contentType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_burn_contentType(void);
  HRESULT         __fastcall get_burn_freeSpace(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_freeSpace(void);
  HRESULT         __fastcall get_burn_totalSpace(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_totalSpace(void);
  HRESULT         __fastcall get_burn_driveName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_burn_driveName(void);
  HRESULT         __fastcall get_burn_numDevices(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_numDevices(void);
  HRESULT         __fastcall get_burn_spaceToUse(long* pVal/*[out,retval]*/);
  long            __fastcall get_burn_spaceToUse(void);
  HRESULT         __fastcall get_sync_spaceToUse(long* pVal/*[out,retval]*/);
  long            __fastcall get_sync_spaceToUse(void);
  HRESULT         __fastcall get_sync_spaceUsed(long* pVal/*[out,retval]*/);
  long            __fastcall get_sync_spaceUsed(void);
  HRESULT         __fastcall get_sync_totalSpace(long* pVal/*[out,retval]*/);
  long            __fastcall get_sync_totalSpace(void);
  HRESULT         __fastcall get_sync_deviceName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_sync_deviceName(void);
  HRESULT         __fastcall get_sync_numDevices(long* pVal/*[out,retval]*/);
  long            __fastcall get_sync_numDevices(void);
  HRESULT         __fastcall get_sync_oemName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_sync_oemName(void);
  HRESULT         __fastcall logData(BSTR ID/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall formatTime(long value/*[in]*/, BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall formatTime(long value/*[in]*/);

  __property   long            DPI = {read = get_DPI};
  __property   BSTR            mode = {read = get_mode};
  __property   long            burn_selectedDrive = {read = get_burn_selectedDrive, write = set_burn_selectedDrive};
  __property   long            sync_selectedDevice = {read = get_sync_selectedDevice, write = set_sync_selectedDevice};
  __property   long            burn_numDiscsSpanned = {read = get_burn_numDiscsSpanned};
  __property   LPDISPATCH      editPlaylist = {read = get_editPlaylist};
  __property   BSTR            burn_mediaType = {read = get_burn_mediaType};
  __property   BSTR            burn_contentType = {read = get_burn_contentType};
  __property   long            burn_freeSpace = {read = get_burn_freeSpace};
  __property   long            burn_totalSpace = {read = get_burn_totalSpace};
  __property   BSTR            burn_driveName = {read = get_burn_driveName};
  __property   long            burn_numDevices = {read = get_burn_numDevices};
  __property   long            burn_spaceToUse = {read = get_burn_spaceToUse};
  __property   long            sync_spaceToUse = {read = get_sync_spaceToUse};
  __property   long            sync_spaceUsed = {read = get_sync_spaceUsed};
  __property   long            sync_totalSpace = {read = get_sync_totalSpace};
  __property   BSTR            sync_deviceName = {read = get_sync_deviceName};
  __property   long            sync_numDevices = {read = get_sync_numDevices};
  __property   BSTR            sync_oemName = {read = get_sync_oemName};
};
typedef IWMPNowDoingDispatchDispT<IWMPNowDoingDispatch> IWMPNowDoingDispatchDisp;

// *********************************************************************//
// DispIntf:  IWMPButtonCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {BB17FFF7-1692-4555-918A-6AF7BFACEDD2}
// *********************************************************************//
template <class T>
class IWMPButtonCtrlEventsDispT : public TAutoDriver<IWMPButtonCtrlEvents>
{
public:
  IWMPButtonCtrlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall onclick();

};
typedef IWMPButtonCtrlEventsDispT<IWMPButtonCtrlEvents> IWMPButtonCtrlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPButtonCtrl
// Interface: IWMPButtonCtrl
// *********************************************************************//
template <class T /* IWMPButtonCtrl */ >
class TCOMIWMPButtonCtrlT : public TComInterface<IWMPButtonCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPButtonCtrlT() {}
  TCOMIWMPButtonCtrlT(IWMPButtonCtrl *intf, bool addRef = false) : TComInterface<IWMPButtonCtrl>(intf, addRef) {}
  TCOMIWMPButtonCtrlT(const TCOMIWMPButtonCtrlT& src) : TComInterface<IWMPButtonCtrl>(src) {}
  TCOMIWMPButtonCtrlT& operator=(const TCOMIWMPButtonCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  HRESULT         __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  HRESULT         __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_down(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  HRESULT         __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  HRESULT         __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_upToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_upToolTip(void);
  HRESULT         __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downToolTip(void);
  HRESULT         __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);

  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
};
typedef TCOMIWMPButtonCtrlT<IWMPButtonCtrl> TCOMIWMPButtonCtrl;

// *********************************************************************//
// DispIntf:  IWMPButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {87291B50-0C8E-11D3-BB2A-00A0C93CA73A}
// *********************************************************************//
template<class T>
class IWMPButtonCtrlDispT : public TAutoDriver<IWMPButtonCtrl>
{
public:
  IWMPButtonCtrlDispT(){}

  IWMPButtonCtrlDispT(IWMPButtonCtrl *pintf)
  {
    TAutoDriver<IWMPButtonCtrl>::Bind(pintf, false);
  }

  IWMPButtonCtrlDispT(IWMPButtonCtrlPtr pintf)
  {
    TAutoDriver<IWMPButtonCtrl>::Bind(pintf, true);
  }

  IWMPButtonCtrlDispT& operator=(IWMPButtonCtrl *pintf)
  {
    TAutoDriver<IWMPButtonCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPButtonCtrlDispT& operator=(IWMPButtonCtrlPtr pintf)
  {
    TAutoDriver<IWMPButtonCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPButtonCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPButtonCtrl);
  }

  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  HRESULT         __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  HRESULT         __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_down(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  HRESULT         __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  HRESULT         __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_upToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_upToolTip(void);
  HRESULT         __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downToolTip(void);
  HRESULT         __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);

  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
};
typedef IWMPButtonCtrlDispT<IWMPButtonCtrl> IWMPButtonCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPListBoxCtrl
// Interface: IWMPListBoxCtrl
// *********************************************************************//
template <class T /* IWMPListBoxCtrl */ >
class TCOMIWMPListBoxCtrlT : public TComInterface<IWMPListBoxCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPListBoxCtrlT() {}
  TCOMIWMPListBoxCtrlT(IWMPListBoxCtrl *intf, bool addRef = false) : TComInterface<IWMPListBoxCtrl>(intf, addRef) {}
  TCOMIWMPListBoxCtrlT(const TCOMIWMPListBoxCtrlT& src) : TComInterface<IWMPListBoxCtrl>(src) {}
  TCOMIWMPListBoxCtrlT& operator=(const TCOMIWMPListBoxCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_selectedItem(long* pnPos/*[out,retval]*/);
  long            __fastcall get_selectedItem(void);
  HRESULT         __fastcall set_selectedItem(long pnPos/*[in]*/);
  HRESULT         __fastcall get_sorted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sorted(void);
  HRESULT         __fastcall set_sorted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_multiselect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_multiselect(void);
  HRESULT         __fastcall set_multiselect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  HRESULT         __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_itemCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_itemCount(void);
  HRESULT         __fastcall get_firstVisibleItem(long* pVal/*[out,retval]*/);
  long            __fastcall get_firstVisibleItem(void);
  HRESULT         __fastcall set_firstVisibleItem(long pVal/*[in]*/);
  HRESULT         __fastcall set_popUp(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall get_focusItem(long* pVal/*[out,retval]*/);
  long            __fastcall get_focusItem(void);
  HRESULT         __fastcall set_focusItem(long pVal/*[in]*/);
  HRESULT         __fastcall get_border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  HRESULT         __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall getItem(long nPos/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getItem(long nPos/*[in]*/);
  HRESULT         __fastcall insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall appendItem(BSTR newVal/*[in]*/);
  HRESULT         __fastcall replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall deleteItem(long nPos/*[in]*/);
  HRESULT         __fastcall deleteAll(void);
  HRESULT         __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/, 
                                      long* pnPos/*[out,retval]*/);
  long            __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                 long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState(long nPos/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall show(void);
  HRESULT         __fastcall dismiss(void);

  __property   long            selectedItem = {read = get_selectedItem, write = set_selectedItem};
  __property   VARIANT_BOOL    sorted = {read = get_sorted, write = set_sorted};
  __property   VARIANT_BOOL    multiselect = {read = get_multiselect, write = set_multiselect};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            itemCount = {read = get_itemCount};
  __property   long            firstVisibleItem = {read = get_firstVisibleItem, write = set_firstVisibleItem};
  __property   VARIANT_BOOL    popUp = {write = set_popUp};
  __property   long            focusItem = {read = get_focusItem, write = set_focusItem};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};
};
typedef TCOMIWMPListBoxCtrlT<IWMPListBoxCtrl> TCOMIWMPListBoxCtrl;

// *********************************************************************//
// DispIntf:  IWMPListBoxCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC1880CE-83B9-43A7-A066-C44CE8C82583}
// *********************************************************************//
template<class T>
class IWMPListBoxCtrlDispT : public TAutoDriver<IWMPListBoxCtrl>
{
public:
  IWMPListBoxCtrlDispT(){}

  IWMPListBoxCtrlDispT(IWMPListBoxCtrl *pintf)
  {
    TAutoDriver<IWMPListBoxCtrl>::Bind(pintf, false);
  }

  IWMPListBoxCtrlDispT(IWMPListBoxCtrlPtr pintf)
  {
    TAutoDriver<IWMPListBoxCtrl>::Bind(pintf, true);
  }

  IWMPListBoxCtrlDispT& operator=(IWMPListBoxCtrl *pintf)
  {
    TAutoDriver<IWMPListBoxCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPListBoxCtrlDispT& operator=(IWMPListBoxCtrlPtr pintf)
  {
    TAutoDriver<IWMPListBoxCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPListBoxCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPListBoxCtrl);
  }

  HRESULT         __fastcall get_selectedItem(long* pnPos/*[out,retval]*/);
  long            __fastcall get_selectedItem(void);
  HRESULT         __fastcall set_selectedItem(long pnPos/*[in]*/);
  HRESULT         __fastcall get_sorted(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sorted(void);
  HRESULT         __fastcall set_sorted(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_multiselect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_multiselect(void);
  HRESULT         __fastcall set_multiselect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  HRESULT         __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_itemCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_itemCount(void);
  HRESULT         __fastcall get_firstVisibleItem(long* pVal/*[out,retval]*/);
  long            __fastcall get_firstVisibleItem(void);
  HRESULT         __fastcall set_firstVisibleItem(long pVal/*[in]*/);
  HRESULT         __fastcall set_popUp(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall get_focusItem(long* pVal/*[out,retval]*/);
  long            __fastcall get_focusItem(void);
  HRESULT         __fastcall set_focusItem(long pVal/*[in]*/);
  HRESULT         __fastcall get_border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  HRESULT         __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall getItem(long nPos/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getItem(long nPos/*[in]*/);
  HRESULT         __fastcall insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall appendItem(BSTR newVal/*[in]*/);
  HRESULT         __fastcall replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall deleteItem(long nPos/*[in]*/);
  HRESULT         __fastcall deleteAll();
  HRESULT         __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/, 
                                      long* pnPos/*[out,retval]*/);
  long            __fastcall findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/);
  HRESULT         __fastcall getNextSelectedItem(long nStartIndex/*[in]*/, 
                                                 long* pnSelected/*[out,retval]*/);
  long            __fastcall getNextSelectedItem(long nStartIndex/*[in]*/);
  HRESULT         __fastcall setSelectedState(long nPos/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/);
  HRESULT         __fastcall show();
  HRESULT         __fastcall dismiss();

  __property   long            selectedItem = {read = get_selectedItem, write = set_selectedItem};
  __property   VARIANT_BOOL    sorted = {read = get_sorted, write = set_sorted};
  __property   VARIANT_BOOL    multiselect = {read = get_multiselect, write = set_multiselect};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            itemCount = {read = get_itemCount};
  __property   long            firstVisibleItem = {read = get_firstVisibleItem, write = set_firstVisibleItem};
  __property   VARIANT_BOOL    popUp = {write = set_popUp};
  __property   long            focusItem = {read = get_focusItem, write = set_focusItem};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};
};
typedef IWMPListBoxCtrlDispT<IWMPListBoxCtrl> IWMPListBoxCtrlDisp;

typedef TComInterface<IWMPListBoxItem>  TCOMIWMPListBoxItem;

// *********************************************************************//
// DispIntf:  IWMPListBoxItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6}
// *********************************************************************//
template<class T>
class IWMPListBoxItemDispT : public TAutoDriver<IWMPListBoxItem>
{
public:
  IWMPListBoxItemDispT(){}

  IWMPListBoxItemDispT(IWMPListBoxItem *pintf)
  {
    TAutoDriver<IWMPListBoxItem>::Bind(pintf, false);
  }

  IWMPListBoxItemDispT(IWMPListBoxItemPtr pintf)
  {
    TAutoDriver<IWMPListBoxItem>::Bind(pintf, true);
  }

  IWMPListBoxItemDispT& operator=(IWMPListBoxItem *pintf)
  {
    TAutoDriver<IWMPListBoxItem>::Bind(pintf, false);
    return *this;
  }

  IWMPListBoxItemDispT& operator=(IWMPListBoxItemPtr pintf)
  {
    TAutoDriver<IWMPListBoxItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_value(BSTR Param1/*[in]*/);

  __property   BSTR            value = {write = set_value};
};
typedef IWMPListBoxItemDispT<IWMPListBoxItem> IWMPListBoxItemDisp;

typedef TComInterface<IWMPPlaylistCtrlColumn>  TCOMIWMPPlaylistCtrlColumn;

// *********************************************************************//
// DispIntf:  IWMPPlaylistCtrlColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {63D9D30F-AE4C-4678-8CA8-5720F4FE4419}
// *********************************************************************//
template<class T>
class IWMPPlaylistCtrlColumnDispT : public TAutoDriver<IWMPPlaylistCtrlColumn>
{
public:
  IWMPPlaylistCtrlColumnDispT(){}

  IWMPPlaylistCtrlColumnDispT(IWMPPlaylistCtrlColumn *pintf)
  {
    TAutoDriver<IWMPPlaylistCtrlColumn>::Bind(pintf, false);
  }

  IWMPPlaylistCtrlColumnDispT(IWMPPlaylistCtrlColumnPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCtrlColumn>::Bind(pintf, true);
  }

  IWMPPlaylistCtrlColumnDispT& operator=(IWMPPlaylistCtrlColumn *pintf)
  {
    TAutoDriver<IWMPPlaylistCtrlColumn>::Bind(pintf, false);
    return *this;
  }

  IWMPPlaylistCtrlColumnDispT& operator=(IWMPPlaylistCtrlColumnPtr pintf)
  {
    TAutoDriver<IWMPPlaylistCtrlColumn>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_columnName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_columnName(void);
  HRESULT         __fastcall set_columnName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_columnID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_columnID(void);
  HRESULT         __fastcall set_columnID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_columnResizeMode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_columnResizeMode(void);
  HRESULT         __fastcall set_columnResizeMode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_columnWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_columnWidth(void);
  HRESULT         __fastcall set_columnWidth(long pVal/*[in]*/);

  __property   BSTR            columnName = {read = get_columnName, write = set_columnName};
  __property   BSTR            columnID = {read = get_columnID, write = set_columnID};
  __property   BSTR            columnResizeMode = {read = get_columnResizeMode, write = set_columnResizeMode};
  __property   long            columnWidth = {read = get_columnWidth, write = set_columnWidth};
};
typedef IWMPPlaylistCtrlColumnDispT<IWMPPlaylistCtrlColumn> IWMPPlaylistCtrlColumnDisp;

// *********************************************************************//
// DispIntf:  IWMPSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A}
// *********************************************************************//
template <class T>
class IWMPSliderCtrlEventsDispT : public TAutoDriver<IWMPSliderCtrlEvents>
{
public:
  IWMPSliderCtrlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall ondragbegin();
  HRESULT         __fastcall ondragend();
  HRESULT         __fastcall onpositionchange();

};
typedef IWMPSliderCtrlEventsDispT<IWMPSliderCtrlEvents> IWMPSliderCtrlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPSliderCtrl
// Interface: IWMPSliderCtrl
// *********************************************************************//
template <class T /* IWMPSliderCtrl */ >
class TCOMIWMPSliderCtrlT : public TComInterface<IWMPSliderCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPSliderCtrlT() {}
  TCOMIWMPSliderCtrlT(IWMPSliderCtrl *intf, bool addRef = false) : TComInterface<IWMPSliderCtrl>(intf, addRef) {}
  TCOMIWMPSliderCtrlT(const TCOMIWMPSliderCtrlT& src) : TComInterface<IWMPSliderCtrl>(src) {}
  TCOMIWMPSliderCtrlT& operator=(const TCOMIWMPSliderCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_direction(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_direction(void);
  HRESULT         __fastcall set_direction(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_slide(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_slide(void);
  HRESULT         __fastcall set_slide(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  HRESULT         __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundEndColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundEndColor(void);
  HRESULT         __fastcall set_foregroundEndColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundEndColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundEndColor(void);
  HRESULT         __fastcall set_backgroundEndColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledColor(void);
  HRESULT         __fastcall set_disabledColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundImage(void);
  HRESULT         __fastcall set_foregroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundHoverImage(void);
  HRESULT         __fastcall set_backgroundHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbImage(void);
  HRESULT         __fastcall set_thumbImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbHoverImage(void);
  HRESULT         __fastcall set_thumbHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbDownImage(void);
  HRESULT         __fastcall set_thumbDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbDisabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbDisabledImage(void);
  HRESULT         __fastcall set_thumbDisabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_min(float* pVal/*[out,retval]*/);
  float           __fastcall get_min(void);
  HRESULT         __fastcall set_min(float pVal/*[in]*/);
  HRESULT         __fastcall get_max(float* pVal/*[out,retval]*/);
  float           __fastcall get_max(void);
  HRESULT         __fastcall set_max(float pVal/*[in]*/);
  HRESULT         __fastcall get_value(float* pVal/*[out,retval]*/);
  float           __fastcall get_value(void);
  HRESULT         __fastcall set_value(float pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_borderSize(int* pVal/*[out,retval]*/);
  int             __fastcall get_borderSize(void);
  HRESULT         __fastcall set_borderSize(int pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundHoverImage(void);
  HRESULT         __fastcall set_foregroundHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundProgress(float* pVal/*[out,retval]*/);
  float           __fastcall get_foregroundProgress(void);
  HRESULT         __fastcall set_foregroundProgress(float pVal/*[in]*/);
  HRESULT         __fastcall get_useForegroundProgress(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_useForegroundProgress(void);
  HRESULT         __fastcall set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/);

  __property   BSTR            direction = {read = get_direction, write = set_direction};
  __property   VARIANT_BOOL    slide = {read = get_slide, write = set_slide};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            foregroundEndColor = {read = get_foregroundEndColor, write = set_foregroundEndColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundEndColor = {read = get_backgroundEndColor, write = set_backgroundEndColor};
  __property   BSTR            disabledColor = {read = get_disabledColor, write = set_disabledColor};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            foregroundImage = {read = get_foregroundImage, write = set_foregroundImage};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   BSTR            backgroundHoverImage = {read = get_backgroundHoverImage, write = set_backgroundHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            thumbImage = {read = get_thumbImage, write = set_thumbImage};
  __property   BSTR            thumbHoverImage = {read = get_thumbHoverImage, write = set_thumbHoverImage};
  __property   BSTR            thumbDownImage = {read = get_thumbDownImage, write = set_thumbDownImage};
  __property   BSTR            thumbDisabledImage = {read = get_thumbDisabledImage, write = set_thumbDisabledImage};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   int             borderSize = {read = get_borderSize, write = set_borderSize};
  __property   BSTR            foregroundHoverImage = {read = get_foregroundHoverImage, write = set_foregroundHoverImage};
  __property   float           foregroundProgress = {read = get_foregroundProgress, write = set_foregroundProgress};
  __property   VARIANT_BOOL    useForegroundProgress = {read = get_useForegroundProgress, write = set_useForegroundProgress};
};
typedef TCOMIWMPSliderCtrlT<IWMPSliderCtrl> TCOMIWMPSliderCtrl;

// *********************************************************************//
// DispIntf:  IWMPSliderCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F2BF2C8F-405F-11D3-BB39-00A0C93CA73A}
// *********************************************************************//
template<class T>
class IWMPSliderCtrlDispT : public TAutoDriver<IWMPSliderCtrl>
{
public:
  IWMPSliderCtrlDispT(){}

  IWMPSliderCtrlDispT(IWMPSliderCtrl *pintf)
  {
    TAutoDriver<IWMPSliderCtrl>::Bind(pintf, false);
  }

  IWMPSliderCtrlDispT(IWMPSliderCtrlPtr pintf)
  {
    TAutoDriver<IWMPSliderCtrl>::Bind(pintf, true);
  }

  IWMPSliderCtrlDispT& operator=(IWMPSliderCtrl *pintf)
  {
    TAutoDriver<IWMPSliderCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPSliderCtrlDispT& operator=(IWMPSliderCtrlPtr pintf)
  {
    TAutoDriver<IWMPSliderCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPSliderCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPSliderCtrl);
  }

  HRESULT         __fastcall get_direction(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_direction(void);
  HRESULT         __fastcall set_direction(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_slide(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_slide(void);
  HRESULT         __fastcall set_slide(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tiled(void);
  HRESULT         __fastcall set_tiled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundEndColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundEndColor(void);
  HRESULT         __fastcall set_foregroundEndColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundEndColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundEndColor(void);
  HRESULT         __fastcall set_backgroundEndColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledColor(void);
  HRESULT         __fastcall set_disabledColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundImage(void);
  HRESULT         __fastcall set_foregroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundImage(void);
  HRESULT         __fastcall set_backgroundImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundHoverImage(void);
  HRESULT         __fastcall set_backgroundHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbImage(void);
  HRESULT         __fastcall set_thumbImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbHoverImage(void);
  HRESULT         __fastcall set_thumbHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbDownImage(void);
  HRESULT         __fastcall set_thumbDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_thumbDisabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_thumbDisabledImage(void);
  HRESULT         __fastcall set_thumbDisabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_min(float* pVal/*[out,retval]*/);
  float           __fastcall get_min(void);
  HRESULT         __fastcall set_min(float pVal/*[in]*/);
  HRESULT         __fastcall get_max(float* pVal/*[out,retval]*/);
  float           __fastcall get_max(void);
  HRESULT         __fastcall set_max(float pVal/*[in]*/);
  HRESULT         __fastcall get_value(float* pVal/*[out,retval]*/);
  float           __fastcall get_value(void);
  HRESULT         __fastcall set_value(float pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_borderSize(int* pVal/*[out,retval]*/);
  int             __fastcall get_borderSize(void);
  HRESULT         __fastcall set_borderSize(int pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundHoverImage(void);
  HRESULT         __fastcall set_foregroundHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundProgress(float* pVal/*[out,retval]*/);
  float           __fastcall get_foregroundProgress(void);
  HRESULT         __fastcall set_foregroundProgress(float pVal/*[in]*/);
  HRESULT         __fastcall get_useForegroundProgress(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_useForegroundProgress(void);
  HRESULT         __fastcall set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/);

  __property   BSTR            direction = {read = get_direction, write = set_direction};
  __property   VARIANT_BOOL    slide = {read = get_slide, write = set_slide};
  __property   VARIANT_BOOL    tiled = {read = get_tiled, write = set_tiled};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            foregroundEndColor = {read = get_foregroundEndColor, write = set_foregroundEndColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            backgroundEndColor = {read = get_backgroundEndColor, write = set_backgroundEndColor};
  __property   BSTR            disabledColor = {read = get_disabledColor, write = set_disabledColor};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            foregroundImage = {read = get_foregroundImage, write = set_foregroundImage};
  __property   BSTR            backgroundImage = {read = get_backgroundImage, write = set_backgroundImage};
  __property   BSTR            backgroundHoverImage = {read = get_backgroundHoverImage, write = set_backgroundHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            thumbImage = {read = get_thumbImage, write = set_thumbImage};
  __property   BSTR            thumbHoverImage = {read = get_thumbHoverImage, write = set_thumbHoverImage};
  __property   BSTR            thumbDownImage = {read = get_thumbDownImage, write = set_thumbDownImage};
  __property   BSTR            thumbDisabledImage = {read = get_thumbDisabledImage, write = set_thumbDisabledImage};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   int             borderSize = {read = get_borderSize, write = set_borderSize};
  __property   BSTR            foregroundHoverImage = {read = get_foregroundHoverImage, write = set_foregroundHoverImage};
  __property   float           foregroundProgress = {read = get_foregroundProgress, write = set_foregroundProgress};
  __property   VARIANT_BOOL    useForegroundProgress = {read = get_useForegroundProgress, write = set_useForegroundProgress};
};
typedef IWMPSliderCtrlDispT<IWMPSliderCtrl> IWMPSliderCtrlDisp;

// *********************************************************************//
// DispIntf:  IWMPVideoCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {A85C0477-714C-4A06-B9F6-7C8CA38B45DC}
// *********************************************************************//
template <class T>
class IWMPVideoCtrlEventsDispT : public TAutoDriver<IWMPVideoCtrlEvents>
{
public:
  IWMPVideoCtrlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall onvideostart();
  HRESULT         __fastcall onvideoend();

};
typedef IWMPVideoCtrlEventsDispT<IWMPVideoCtrlEvents> IWMPVideoCtrlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPVideoCtrl
// Interface: IWMPVideoCtrl
// *********************************************************************//
template <class T /* IWMPVideoCtrl */ >
class TCOMIWMPVideoCtrlT : public TComInterface<IWMPVideoCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPVideoCtrlT() {}
  TCOMIWMPVideoCtrlT(IWMPVideoCtrl *intf, bool addRef = false) : TComInterface<IWMPVideoCtrl>(intf, addRef) {}
  TCOMIWMPVideoCtrlT(const TCOMIWMPVideoCtrlT& src) : TComInterface<IWMPVideoCtrl>(src) {}
  TCOMIWMPVideoCtrlT& operator=(const TCOMIWMPVideoCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_windowless(VARIANT_BOOL pbClipped/*[in]*/);
  HRESULT         __fastcall get_windowless(VARIANT_BOOL* pbClipped/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowless(void);
  HRESULT         __fastcall set_cursor(BSTR pbstrCursor/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pbstrCursor/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/);
  HRESULT         __fastcall get_maintainAspectRatio(VARIANT_BOOL* pbMaintainAspectRatio/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_maintainAspectRatio(void);
  HRESULT         __fastcall set_toolTip(BSTR bstrToolTip/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* bstrToolTip/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  HRESULT         __fastcall set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/);
  HRESULT         __fastcall get_shrinkToFit(VARIANT_BOOL* pbShrinkToFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_shrinkToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbStretchToFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_zoom(long pzoom/*[in]*/);
  HRESULT         __fastcall get_zoom(long* pzoom/*[out,retval]*/);
  long            __fastcall get_zoom(void);

  __property   VARIANT_BOOL    windowless = {read = get_windowless, write = set_windowless};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   VARIANT_BOOL    maintainAspectRatio = {read = get_maintainAspectRatio, write = set_maintainAspectRatio};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    shrinkToFit = {read = get_shrinkToFit, write = set_shrinkToFit};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   long            zoom = {read = get_zoom, write = set_zoom};
};
typedef TCOMIWMPVideoCtrlT<IWMPVideoCtrl> TCOMIWMPVideoCtrl;

// *********************************************************************//
// DispIntf:  IWMPVideoCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61CECF10-FC3A-11D2-A1CD-005004602752}
// *********************************************************************//
template<class T>
class IWMPVideoCtrlDispT : public TAutoDriver<IWMPVideoCtrl>
{
public:
  IWMPVideoCtrlDispT(){}

  IWMPVideoCtrlDispT(IWMPVideoCtrl *pintf)
  {
    TAutoDriver<IWMPVideoCtrl>::Bind(pintf, false);
  }

  IWMPVideoCtrlDispT(IWMPVideoCtrlPtr pintf)
  {
    TAutoDriver<IWMPVideoCtrl>::Bind(pintf, true);
  }

  IWMPVideoCtrlDispT& operator=(IWMPVideoCtrl *pintf)
  {
    TAutoDriver<IWMPVideoCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPVideoCtrlDispT& operator=(IWMPVideoCtrlPtr pintf)
  {
    TAutoDriver<IWMPVideoCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPVideoCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPVideoCtrl);
  }

  HRESULT         __fastcall set_windowless(VARIANT_BOOL pbClipped/*[in]*/);
  HRESULT         __fastcall get_windowless(VARIANT_BOOL* pbClipped/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowless(void);
  HRESULT         __fastcall set_cursor(BSTR pbstrCursor/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pbstrCursor/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pbstrColor/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/);
  HRESULT         __fastcall get_maintainAspectRatio(VARIANT_BOOL* pbMaintainAspectRatio/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_maintainAspectRatio(void);
  HRESULT         __fastcall set_toolTip(BSTR bstrToolTip/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* bstrToolTip/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  HRESULT         __fastcall set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/);
  HRESULT         __fastcall get_shrinkToFit(VARIANT_BOOL* pbShrinkToFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_shrinkToFit(void);
  HRESULT         __fastcall set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/);
  HRESULT         __fastcall get_stretchToFit(VARIANT_BOOL* pbStretchToFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_stretchToFit(void);
  HRESULT         __fastcall set_zoom(long pzoom/*[in]*/);
  HRESULT         __fastcall get_zoom(long* pzoom/*[out,retval]*/);
  long            __fastcall get_zoom(void);

  __property   VARIANT_BOOL    windowless = {read = get_windowless, write = set_windowless};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   VARIANT_BOOL    maintainAspectRatio = {read = get_maintainAspectRatio, write = set_maintainAspectRatio};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    shrinkToFit = {read = get_shrinkToFit, write = set_shrinkToFit};
  __property   VARIANT_BOOL    stretchToFit = {read = get_stretchToFit, write = set_stretchToFit};
  __property   long            zoom = {read = get_zoom, write = set_zoom};
};
typedef IWMPVideoCtrlDispT<IWMPVideoCtrl> IWMPVideoCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPEffectsCtrl
// Interface: IWMPEffectsCtrl
// *********************************************************************//
template <class T /* IWMPEffectsCtrl */ >
class TCOMIWMPEffectsCtrlT : public TComInterface<IWMPEffectsCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPEffectsCtrlT() {}
  TCOMIWMPEffectsCtrlT(IWMPEffectsCtrl *intf, bool addRef = false) : TComInterface<IWMPEffectsCtrl>(intf, addRef) {}
  TCOMIWMPEffectsCtrlT(const TCOMIWMPEffectsCtrlT& src) : TComInterface<IWMPEffectsCtrl>(src) {}
  TCOMIWMPEffectsCtrlT& operator=(const TCOMIWMPEffectsCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_windowed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowed(void);
  HRESULT         __fastcall set_windowed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_allowAll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowAll(void);
  HRESULT         __fastcall set_allowAll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_currentEffectType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_currentEffectType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentEffectType(void);
  HRESULT         __fastcall get_currentEffectTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentEffectTitle(void);
  HRESULT         __fastcall next(void);
  HRESULT         __fastcall previous(void);
  HRESULT         __fastcall settings(void);
  HRESULT         __fastcall get_currentEffect(LPDISPATCH* p/*[out,retval]*/);
  LPDISPATCH      __fastcall get_currentEffect(void);
  HRESULT         __fastcall set_currentEffect(LPDISPATCH p/*[in]*/);
  HRESULT         __fastcall nextEffect(void);
  HRESULT         __fastcall previousEffect(void);
  HRESULT         __fastcall nextPreset(void);
  HRESULT         __fastcall previousPreset(void);
  HRESULT         __fastcall get_currentPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentPreset(void);
  HRESULT         __fastcall set_currentPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_currentPresetTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  HRESULT         __fastcall get_currentEffectPresetCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentEffectPresetCount(void);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  HRESULT         __fastcall get_effectCanGoFullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_effectCanGoFullScreen(void);
  HRESULT         __fastcall get_effectHasPropertyPage(VARIANT_BOOL* pbPropertyPage/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_effectHasPropertyPage(void);
  HRESULT         __fastcall get_effectCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_effectCount(void);
  HRESULT         __fastcall get_effectTitle(long index/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectTitle(long index/*[in]*/);
  HRESULT         __fastcall get_effectType(long index/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectType(long index/*[in]*/);

  __property   VARIANT_BOOL    windowed = {read = get_windowed, write = set_windowed};
  __property   VARIANT_BOOL    allowAll = {read = get_allowAll, write = set_allowAll};
  __property   BSTR            currentEffectType = {read = get_currentEffectType, write = set_currentEffectType};
  __property   BSTR            currentEffectTitle = {read = get_currentEffectTitle};
  __property   LPDISPATCH      currentEffect = {read = get_currentEffect, write = set_currentEffect};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            currentEffectPresetCount = {read = get_currentEffectPresetCount};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    effectCanGoFullScreen = {read = get_effectCanGoFullScreen};
  __property   VARIANT_BOOL    effectHasPropertyPage = {read = get_effectHasPropertyPage};
  __property   long            effectCount = {read = get_effectCount};
};
typedef TCOMIWMPEffectsCtrlT<IWMPEffectsCtrl> TCOMIWMPEffectsCtrl;

// *********************************************************************//
// DispIntf:  IWMPEffectsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769}
// *********************************************************************//
template<class T>
class IWMPEffectsCtrlDispT : public TAutoDriver<IWMPEffectsCtrl>
{
public:
  IWMPEffectsCtrlDispT(){}

  IWMPEffectsCtrlDispT(IWMPEffectsCtrl *pintf)
  {
    TAutoDriver<IWMPEffectsCtrl>::Bind(pintf, false);
  }

  IWMPEffectsCtrlDispT(IWMPEffectsCtrlPtr pintf)
  {
    TAutoDriver<IWMPEffectsCtrl>::Bind(pintf, true);
  }

  IWMPEffectsCtrlDispT& operator=(IWMPEffectsCtrl *pintf)
  {
    TAutoDriver<IWMPEffectsCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPEffectsCtrlDispT& operator=(IWMPEffectsCtrlPtr pintf)
  {
    TAutoDriver<IWMPEffectsCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPEffects));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPEffects);
  }

  HRESULT         __fastcall get_windowed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_windowed(void);
  HRESULT         __fastcall set_windowed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_allowAll(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_allowAll(void);
  HRESULT         __fastcall set_allowAll(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_currentEffectType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_currentEffectType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentEffectType(void);
  HRESULT         __fastcall get_currentEffectTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentEffectTitle(void);
  HRESULT         __fastcall next();
  HRESULT         __fastcall previous();
  HRESULT         __fastcall settings();
  HRESULT         __fastcall get_currentEffect(LPDISPATCH* p/*[out,retval]*/);
  LPDISPATCH      __fastcall get_currentEffect(void);
  HRESULT         __fastcall set_currentEffect(LPDISPATCH p/*[in]*/);
  HRESULT         __fastcall nextEffect();
  HRESULT         __fastcall previousEffect();
  HRESULT         __fastcall nextPreset();
  HRESULT         __fastcall previousPreset();
  HRESULT         __fastcall get_currentPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentPreset(void);
  HRESULT         __fastcall set_currentPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_currentPresetTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  HRESULT         __fastcall get_currentEffectPresetCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentEffectPresetCount(void);
  HRESULT         __fastcall get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullScreen(void);
  HRESULT         __fastcall set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/);
  HRESULT         __fastcall get_effectCanGoFullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_effectCanGoFullScreen(void);
  HRESULT         __fastcall get_effectHasPropertyPage(VARIANT_BOOL* pbPropertyPage/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_effectHasPropertyPage(void);
  HRESULT         __fastcall get_effectCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_effectCount(void);
  HRESULT         __fastcall get_effectTitle(long index/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectTitle(long index/*[in]*/);
  HRESULT         __fastcall get_effectType(long index/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_effectType(long index/*[in]*/);

  __property   VARIANT_BOOL    windowed = {read = get_windowed, write = set_windowed};
  __property   VARIANT_BOOL    allowAll = {read = get_allowAll, write = set_allowAll};
  __property   BSTR            currentEffectType = {read = get_currentEffectType, write = set_currentEffectType};
  __property   BSTR            currentEffectTitle = {read = get_currentEffectTitle};
  __property   LPDISPATCH      currentEffect = {read = get_currentEffect, write = set_currentEffect};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            currentEffectPresetCount = {read = get_currentEffectPresetCount};
  __property   VARIANT_BOOL    fullScreen = {read = get_fullScreen, write = set_fullScreen};
  __property   VARIANT_BOOL    effectCanGoFullScreen = {read = get_effectCanGoFullScreen};
  __property   VARIANT_BOOL    effectHasPropertyPage = {read = get_effectHasPropertyPage};
  __property   long            effectCount = {read = get_effectCount};
};
typedef IWMPEffectsCtrlDispT<IWMPEffectsCtrl> IWMPEffectsCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPEqualizerSettingsCtrl
// Interface: IWMPEqualizerSettingsCtrl
// *********************************************************************//
template <class T /* IWMPEqualizerSettingsCtrl */ >
class TCOMIWMPEqualizerSettingsCtrlT : public TComInterface<IWMPEqualizerSettingsCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPEqualizerSettingsCtrlT() {}
  TCOMIWMPEqualizerSettingsCtrlT(IWMPEqualizerSettingsCtrl *intf, bool addRef = false) : TComInterface<IWMPEqualizerSettingsCtrl>(intf, addRef) {}
  TCOMIWMPEqualizerSettingsCtrlT(const TCOMIWMPEqualizerSettingsCtrlT& src) : TComInterface<IWMPEqualizerSettingsCtrl>(src) {}
  TCOMIWMPEqualizerSettingsCtrlT& operator=(const TCOMIWMPEqualizerSettingsCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_bypass(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_bypass(void);
  HRESULT         __fastcall set_bypass(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_gainLevel1(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel1(void);
  HRESULT         __fastcall set_gainLevel1(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel2(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel2(void);
  HRESULT         __fastcall set_gainLevel2(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel3(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel3(void);
  HRESULT         __fastcall set_gainLevel3(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel4(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel4(void);
  HRESULT         __fastcall set_gainLevel4(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel5(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel5(void);
  HRESULT         __fastcall set_gainLevel5(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel6(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel6(void);
  HRESULT         __fastcall set_gainLevel6(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel7(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel7(void);
  HRESULT         __fastcall set_gainLevel7(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel8(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel8(void);
  HRESULT         __fastcall set_gainLevel8(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel9(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel9(void);
  HRESULT         __fastcall set_gainLevel9(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel10(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel10(void);
  HRESULT         __fastcall set_gainLevel10(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevels(long iIndex/*[in]*/, float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevels(long iIndex/*[in]*/);
  HRESULT         __fastcall set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/);
  HRESULT         __fastcall reset(void);
  HRESULT         __fastcall get_bands(long* pbands/*[out,retval]*/);
  long            __fastcall get_bands(void);
  HRESULT         __fastcall nextPreset(void);
  HRESULT         __fastcall previousPreset(void);
  HRESULT         __fastcall get_currentPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentPreset(void);
  HRESULT         __fastcall set_currentPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_currentPresetTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  HRESULT         __fastcall get_presetCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_presetCount(void);
  HRESULT         __fastcall get_enhancedAudio(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enhancedAudio(void);
  HRESULT         __fastcall set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_speakerSize(long* plVal/*[out,retval]*/);
  long            __fastcall get_speakerSize(void);
  HRESULT         __fastcall set_speakerSize(long plVal/*[in]*/);
  HRESULT         __fastcall get_currentSpeakerName(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_currentSpeakerName(void);
  HRESULT         __fastcall get_truBassLevel(long* plTruBassLevel/*[out,retval]*/);
  long            __fastcall get_truBassLevel(void);
  HRESULT         __fastcall set_truBassLevel(long plTruBassLevel/*[in]*/);
  HRESULT         __fastcall get_wowLevel(long* plWowLevel/*[out,retval]*/);
  long            __fastcall get_wowLevel(void);
  HRESULT         __fastcall set_wowLevel(long plWowLevel/*[in]*/);
  HRESULT         __fastcall get_splineTension(float* pflSplineTension/*[out,retval]*/);
  float           __fastcall get_splineTension(void);
  HRESULT         __fastcall set_splineTension(float pflSplineTension/*[in]*/);
  HRESULT         __fastcall get_enableSplineTension(VARIANT_BOOL* pfEnableSplineTension/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableSplineTension(void);
  HRESULT         __fastcall set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/);
  HRESULT         __fastcall get_presetTitle(long iIndex/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_presetTitle(long iIndex/*[in]*/);
  HRESULT         __fastcall get_normalization(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_normalization(void);
  HRESULT         __fastcall set_normalization(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_normalizationAverage(float* pflAverage/*[out,retval]*/);
  float           __fastcall get_normalizationAverage(void);
  HRESULT         __fastcall get_normalizationPeak(float* pflPeak/*[out,retval]*/);
  float           __fastcall get_normalizationPeak(void);
  HRESULT         __fastcall get_crossFade(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_crossFade(void);
  HRESULT         __fastcall set_crossFade(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_crossFadeWindow(long* plWindow/*[out,retval]*/);
  long            __fastcall get_crossFadeWindow(void);
  HRESULT         __fastcall set_crossFadeWindow(long plWindow/*[in]*/);

  __property   VARIANT_BOOL    bypass = {read = get_bypass, write = set_bypass};
  __property   float           gainLevel1 = {read = get_gainLevel1, write = set_gainLevel1};
  __property   float           gainLevel2 = {read = get_gainLevel2, write = set_gainLevel2};
  __property   float           gainLevel3 = {read = get_gainLevel3, write = set_gainLevel3};
  __property   float           gainLevel4 = {read = get_gainLevel4, write = set_gainLevel4};
  __property   float           gainLevel5 = {read = get_gainLevel5, write = set_gainLevel5};
  __property   float           gainLevel6 = {read = get_gainLevel6, write = set_gainLevel6};
  __property   float           gainLevel7 = {read = get_gainLevel7, write = set_gainLevel7};
  __property   float           gainLevel8 = {read = get_gainLevel8, write = set_gainLevel8};
  __property   float           gainLevel9 = {read = get_gainLevel9, write = set_gainLevel9};
  __property   float           gainLevel10 = {read = get_gainLevel10, write = set_gainLevel10};
  __property   long            bands = {read = get_bands};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            presetCount = {read = get_presetCount};
  __property   VARIANT_BOOL    enhancedAudio = {read = get_enhancedAudio, write = set_enhancedAudio};
  __property   long            speakerSize = {read = get_speakerSize, write = set_speakerSize};
  __property   BSTR            currentSpeakerName = {read = get_currentSpeakerName};
  __property   long            truBassLevel = {read = get_truBassLevel, write = set_truBassLevel};
  __property   long            wowLevel = {read = get_wowLevel, write = set_wowLevel};
  __property   float           splineTension = {read = get_splineTension, write = set_splineTension};
  __property   VARIANT_BOOL    enableSplineTension = {read = get_enableSplineTension, write = set_enableSplineTension};
  __property   VARIANT_BOOL    normalization = {read = get_normalization, write = set_normalization};
  __property   float           normalizationAverage = {read = get_normalizationAverage};
  __property   float           normalizationPeak = {read = get_normalizationPeak};
  __property   VARIANT_BOOL    crossFade = {read = get_crossFade, write = set_crossFade};
  __property   long            crossFadeWindow = {read = get_crossFadeWindow, write = set_crossFadeWindow};
};
typedef TCOMIWMPEqualizerSettingsCtrlT<IWMPEqualizerSettingsCtrl> TCOMIWMPEqualizerSettingsCtrl;

// *********************************************************************//
// DispIntf:  IWMPEqualizerSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2BD3716F-A914-49FB-8655-996D5F495498}
// *********************************************************************//
template<class T>
class IWMPEqualizerSettingsCtrlDispT : public TAutoDriver<IWMPEqualizerSettingsCtrl>
{
public:
  IWMPEqualizerSettingsCtrlDispT(){}

  IWMPEqualizerSettingsCtrlDispT(IWMPEqualizerSettingsCtrl *pintf)
  {
    TAutoDriver<IWMPEqualizerSettingsCtrl>::Bind(pintf, false);
  }

  IWMPEqualizerSettingsCtrlDispT(IWMPEqualizerSettingsCtrlPtr pintf)
  {
    TAutoDriver<IWMPEqualizerSettingsCtrl>::Bind(pintf, true);
  }

  IWMPEqualizerSettingsCtrlDispT& operator=(IWMPEqualizerSettingsCtrl *pintf)
  {
    TAutoDriver<IWMPEqualizerSettingsCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPEqualizerSettingsCtrlDispT& operator=(IWMPEqualizerSettingsCtrlPtr pintf)
  {
    TAutoDriver<IWMPEqualizerSettingsCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPEqualizerSettingsCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPEqualizerSettingsCtrl);
  }

  HRESULT         __fastcall get_bypass(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_bypass(void);
  HRESULT         __fastcall set_bypass(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_gainLevel1(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel1(void);
  HRESULT         __fastcall set_gainLevel1(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel2(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel2(void);
  HRESULT         __fastcall set_gainLevel2(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel3(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel3(void);
  HRESULT         __fastcall set_gainLevel3(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel4(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel4(void);
  HRESULT         __fastcall set_gainLevel4(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel5(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel5(void);
  HRESULT         __fastcall set_gainLevel5(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel6(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel6(void);
  HRESULT         __fastcall set_gainLevel6(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel7(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel7(void);
  HRESULT         __fastcall set_gainLevel7(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel8(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel8(void);
  HRESULT         __fastcall set_gainLevel8(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel9(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel9(void);
  HRESULT         __fastcall set_gainLevel9(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevel10(float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevel10(void);
  HRESULT         __fastcall set_gainLevel10(float pflLevel/*[in]*/);
  HRESULT         __fastcall get_gainLevels(long iIndex/*[in]*/, float* pflLevel/*[out,retval]*/);
  float           __fastcall get_gainLevels(long iIndex/*[in]*/);
  HRESULT         __fastcall set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/);
  HRESULT         __fastcall reset();
  HRESULT         __fastcall get_bands(long* pbands/*[out,retval]*/);
  long            __fastcall get_bands(void);
  HRESULT         __fastcall nextPreset();
  HRESULT         __fastcall previousPreset();
  HRESULT         __fastcall get_currentPreset(long* pVal/*[out,retval]*/);
  long            __fastcall get_currentPreset(void);
  HRESULT         __fastcall set_currentPreset(long pVal/*[in]*/);
  HRESULT         __fastcall get_currentPresetTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currentPresetTitle(void);
  HRESULT         __fastcall get_presetCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_presetCount(void);
  HRESULT         __fastcall get_enhancedAudio(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enhancedAudio(void);
  HRESULT         __fastcall set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_speakerSize(long* plVal/*[out,retval]*/);
  long            __fastcall get_speakerSize(void);
  HRESULT         __fastcall set_speakerSize(long plVal/*[in]*/);
  HRESULT         __fastcall get_currentSpeakerName(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_currentSpeakerName(void);
  HRESULT         __fastcall get_truBassLevel(long* plTruBassLevel/*[out,retval]*/);
  long            __fastcall get_truBassLevel(void);
  HRESULT         __fastcall set_truBassLevel(long plTruBassLevel/*[in]*/);
  HRESULT         __fastcall get_wowLevel(long* plWowLevel/*[out,retval]*/);
  long            __fastcall get_wowLevel(void);
  HRESULT         __fastcall set_wowLevel(long plWowLevel/*[in]*/);
  HRESULT         __fastcall get_splineTension(float* pflSplineTension/*[out,retval]*/);
  float           __fastcall get_splineTension(void);
  HRESULT         __fastcall set_splineTension(float pflSplineTension/*[in]*/);
  HRESULT         __fastcall get_enableSplineTension(VARIANT_BOOL* pfEnableSplineTension/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enableSplineTension(void);
  HRESULT         __fastcall set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/);
  HRESULT         __fastcall get_presetTitle(long iIndex/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_presetTitle(long iIndex/*[in]*/);
  HRESULT         __fastcall get_normalization(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_normalization(void);
  HRESULT         __fastcall set_normalization(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_normalizationAverage(float* pflAverage/*[out,retval]*/);
  float           __fastcall get_normalizationAverage(void);
  HRESULT         __fastcall get_normalizationPeak(float* pflPeak/*[out,retval]*/);
  float           __fastcall get_normalizationPeak(void);
  HRESULT         __fastcall get_crossFade(VARIANT_BOOL* pfVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_crossFade(void);
  HRESULT         __fastcall set_crossFade(VARIANT_BOOL pfVal/*[in]*/);
  HRESULT         __fastcall get_crossFadeWindow(long* plWindow/*[out,retval]*/);
  long            __fastcall get_crossFadeWindow(void);
  HRESULT         __fastcall set_crossFadeWindow(long plWindow/*[in]*/);

  __property   VARIANT_BOOL    bypass = {read = get_bypass, write = set_bypass};
  __property   float           gainLevel1 = {read = get_gainLevel1, write = set_gainLevel1};
  __property   float           gainLevel2 = {read = get_gainLevel2, write = set_gainLevel2};
  __property   float           gainLevel3 = {read = get_gainLevel3, write = set_gainLevel3};
  __property   float           gainLevel4 = {read = get_gainLevel4, write = set_gainLevel4};
  __property   float           gainLevel5 = {read = get_gainLevel5, write = set_gainLevel5};
  __property   float           gainLevel6 = {read = get_gainLevel6, write = set_gainLevel6};
  __property   float           gainLevel7 = {read = get_gainLevel7, write = set_gainLevel7};
  __property   float           gainLevel8 = {read = get_gainLevel8, write = set_gainLevel8};
  __property   float           gainLevel9 = {read = get_gainLevel9, write = set_gainLevel9};
  __property   float           gainLevel10 = {read = get_gainLevel10, write = set_gainLevel10};
  __property   long            bands = {read = get_bands};
  __property   long            currentPreset = {read = get_currentPreset, write = set_currentPreset};
  __property   BSTR            currentPresetTitle = {read = get_currentPresetTitle};
  __property   long            presetCount = {read = get_presetCount};
  __property   VARIANT_BOOL    enhancedAudio = {read = get_enhancedAudio, write = set_enhancedAudio};
  __property   long            speakerSize = {read = get_speakerSize, write = set_speakerSize};
  __property   BSTR            currentSpeakerName = {read = get_currentSpeakerName};
  __property   long            truBassLevel = {read = get_truBassLevel, write = set_truBassLevel};
  __property   long            wowLevel = {read = get_wowLevel, write = set_wowLevel};
  __property   float           splineTension = {read = get_splineTension, write = set_splineTension};
  __property   VARIANT_BOOL    enableSplineTension = {read = get_enableSplineTension, write = set_enableSplineTension};
  __property   VARIANT_BOOL    normalization = {read = get_normalization, write = set_normalization};
  __property   float           normalizationAverage = {read = get_normalizationAverage};
  __property   float           normalizationPeak = {read = get_normalizationPeak};
  __property   VARIANT_BOOL    crossFade = {read = get_crossFade, write = set_crossFade};
  __property   long            crossFadeWindow = {read = get_crossFadeWindow, write = set_crossFadeWindow};
};
typedef IWMPEqualizerSettingsCtrlDispT<IWMPEqualizerSettingsCtrl> IWMPEqualizerSettingsCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPVideoSettingsCtrl
// Interface: IWMPVideoSettingsCtrl
// *********************************************************************//
template <class T /* IWMPVideoSettingsCtrl */ >
class TCOMIWMPVideoSettingsCtrlT : public TComInterface<IWMPVideoSettingsCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPVideoSettingsCtrlT() {}
  TCOMIWMPVideoSettingsCtrlT(IWMPVideoSettingsCtrl *intf, bool addRef = false) : TComInterface<IWMPVideoSettingsCtrl>(intf, addRef) {}
  TCOMIWMPVideoSettingsCtrlT(const TCOMIWMPVideoSettingsCtrlT& src) : TComInterface<IWMPVideoSettingsCtrl>(src) {}
  TCOMIWMPVideoSettingsCtrlT& operator=(const TCOMIWMPVideoSettingsCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_brightness(long* pVal/*[out,retval]*/);
  long            __fastcall get_brightness(void);
  HRESULT         __fastcall set_brightness(long pVal/*[in]*/);
  HRESULT         __fastcall get_contrast(long* pVal/*[out,retval]*/);
  long            __fastcall get_contrast(void);
  HRESULT         __fastcall set_contrast(long pVal/*[in]*/);
  HRESULT         __fastcall get_hue(long* pVal/*[out,retval]*/);
  long            __fastcall get_hue(void);
  HRESULT         __fastcall set_hue(long pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(long* pVal/*[out,retval]*/);
  long            __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(long pVal/*[in]*/);
  HRESULT         __fastcall reset(void);

  __property   long            brightness = {read = get_brightness, write = set_brightness};
  __property   long            contrast = {read = get_contrast, write = set_contrast};
  __property   long            hue = {read = get_hue, write = set_hue};
  __property   long            saturation = {read = get_saturation, write = set_saturation};
};
typedef TCOMIWMPVideoSettingsCtrlT<IWMPVideoSettingsCtrl> TCOMIWMPVideoSettingsCtrl;

// *********************************************************************//
// DispIntf:  IWMPVideoSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6}
// *********************************************************************//
template<class T>
class IWMPVideoSettingsCtrlDispT : public TAutoDriver<IWMPVideoSettingsCtrl>
{
public:
  IWMPVideoSettingsCtrlDispT(){}

  IWMPVideoSettingsCtrlDispT(IWMPVideoSettingsCtrl *pintf)
  {
    TAutoDriver<IWMPVideoSettingsCtrl>::Bind(pintf, false);
  }

  IWMPVideoSettingsCtrlDispT(IWMPVideoSettingsCtrlPtr pintf)
  {
    TAutoDriver<IWMPVideoSettingsCtrl>::Bind(pintf, true);
  }

  IWMPVideoSettingsCtrlDispT& operator=(IWMPVideoSettingsCtrl *pintf)
  {
    TAutoDriver<IWMPVideoSettingsCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPVideoSettingsCtrlDispT& operator=(IWMPVideoSettingsCtrlPtr pintf)
  {
    TAutoDriver<IWMPVideoSettingsCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPVideoSettingsCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPVideoSettingsCtrl);
  }

  HRESULT         __fastcall get_brightness(long* pVal/*[out,retval]*/);
  long            __fastcall get_brightness(void);
  HRESULT         __fastcall set_brightness(long pVal/*[in]*/);
  HRESULT         __fastcall get_contrast(long* pVal/*[out,retval]*/);
  long            __fastcall get_contrast(void);
  HRESULT         __fastcall set_contrast(long pVal/*[in]*/);
  HRESULT         __fastcall get_hue(long* pVal/*[out,retval]*/);
  long            __fastcall get_hue(void);
  HRESULT         __fastcall set_hue(long pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(long* pVal/*[out,retval]*/);
  long            __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(long pVal/*[in]*/);
  HRESULT         __fastcall reset();

  __property   long            brightness = {read = get_brightness, write = set_brightness};
  __property   long            contrast = {read = get_contrast, write = set_contrast};
  __property   long            hue = {read = get_hue, write = set_hue};
  __property   long            saturation = {read = get_saturation, write = set_saturation};
};
typedef IWMPVideoSettingsCtrlDispT<IWMPVideoSettingsCtrl> IWMPVideoSettingsCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPLibraryTreeCtrl
// Interface: IWMPLibraryTreeCtrl
// *********************************************************************//
template <class T /* IWMPLibraryTreeCtrl */ >
class TCOMIWMPLibraryTreeCtrlT : public TComInterface<IWMPLibraryTreeCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPLibraryTreeCtrlT() {}
  TCOMIWMPLibraryTreeCtrlT(IWMPLibraryTreeCtrl *intf, bool addRef = false) : TComInterface<IWMPLibraryTreeCtrl>(intf, addRef) {}
  TCOMIWMPLibraryTreeCtrlT(const TCOMIWMPLibraryTreeCtrlT& src) : TComInterface<IWMPLibraryTreeCtrl>(src) {}
  TCOMIWMPLibraryTreeCtrlT& operator=(const TCOMIWMPLibraryTreeCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  HRESULT         __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_filter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_filter(void);
  HRESULT         __fastcall set_filter(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_expandState(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_expandState(void);
  HRESULT         __fastcall set_expandState(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylist* ppPlaylist/*[in]*/);
  HRESULT         __fastcall get_selectedPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_selectedPlaylist(void);
  HRESULT         __fastcall get_selectedMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_selectedMedia(void);

  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            filter = {read = get_filter, write = set_filter};
  __property   BSTR            expandState = {read = get_expandState, write = set_expandState};
  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   Wmplib_tlb::IWMPPlaylistPtr selectedPlaylist = {read = get_selectedPlaylist};
  __property   Wmplib_tlb::IWMPMediaPtr selectedMedia = {read = get_selectedMedia};
};
typedef TCOMIWMPLibraryTreeCtrlT<IWMPLibraryTreeCtrl> TCOMIWMPLibraryTreeCtrl;

// *********************************************************************//
// DispIntf:  IWMPLibraryTreeCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B738FCAE-F089-45DF-AED6-034B9E7DB632}
// *********************************************************************//
template<class T>
class IWMPLibraryTreeCtrlDispT : public TAutoDriver<IWMPLibraryTreeCtrl>
{
public:
  IWMPLibraryTreeCtrlDispT(){}

  IWMPLibraryTreeCtrlDispT(IWMPLibraryTreeCtrl *pintf)
  {
    TAutoDriver<IWMPLibraryTreeCtrl>::Bind(pintf, false);
  }

  IWMPLibraryTreeCtrlDispT(IWMPLibraryTreeCtrlPtr pintf)
  {
    TAutoDriver<IWMPLibraryTreeCtrl>::Bind(pintf, true);
  }

  IWMPLibraryTreeCtrlDispT& operator=(IWMPLibraryTreeCtrl *pintf)
  {
    TAutoDriver<IWMPLibraryTreeCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPLibraryTreeCtrlDispT& operator=(IWMPLibraryTreeCtrlPtr pintf)
  {
    TAutoDriver<IWMPLibraryTreeCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPLibraryTreeCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPLibraryTreeCtrl);
  }

  HRESULT         __fastcall get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_dropDownVisible(void);
  HRESULT         __fastcall set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_filter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_filter(void);
  HRESULT         __fastcall set_filter(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_expandState(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_expandState(void);
  HRESULT         __fastcall set_expandState(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_Playlist(void);
  HRESULT         __fastcall set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/);
  HRESULT         __fastcall get_selectedPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/);
  Wmplib_tlb::IWMPPlaylistPtr __fastcall get_selectedPlaylist(void);
  HRESULT         __fastcall get_selectedMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/);
  Wmplib_tlb::IWMPMediaPtr __fastcall get_selectedMedia(void);

  __property   VARIANT_BOOL    dropDownVisible = {read = get_dropDownVisible, write = set_dropDownVisible};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            filter = {read = get_filter, write = set_filter};
  __property   BSTR            expandState = {read = get_expandState, write = set_expandState};
  __property   Wmplib_tlb::IWMPPlaylistPtr Playlist = {read = get_Playlist, write = set_Playlist};
  __property   Wmplib_tlb::IWMPPlaylistPtr selectedPlaylist = {read = get_selectedPlaylist};
  __property   Wmplib_tlb::IWMPMediaPtr selectedMedia = {read = get_selectedMedia};
};
typedef IWMPLibraryTreeCtrlDispT<IWMPLibraryTreeCtrl> IWMPLibraryTreeCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPEditCtrl
// Interface: IWMPEditCtrl
// *********************************************************************//
template <class T /* IWMPEditCtrl */ >
class TCOMIWMPEditCtrlT : public TComInterface<IWMPEditCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPEditCtrlT() {}
  TCOMIWMPEditCtrlT(IWMPEditCtrl *intf, bool addRef = false) : TComInterface<IWMPEditCtrl>(intf, addRef) {}
  TCOMIWMPEditCtrlT(const TCOMIWMPEditCtrlT& src) : TComInterface<IWMPEditCtrl>(src) {}
  TCOMIWMPEditCtrlT& operator=(const TCOMIWMPEditCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_value(void);
  HRESULT         __fastcall set_value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  HRESULT         __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_justification(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_justification(void);
  HRESULT         __fastcall set_justification(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_editStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_editStyle(void);
  HRESULT         __fastcall set_editStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  HRESULT         __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  HRESULT         __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_textLimit(long* pVal/*[out,retval]*/);
  long            __fastcall get_textLimit(void);
  HRESULT         __fastcall set_textLimit(long pVal/*[in]*/);
  HRESULT         __fastcall get_lineCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_lineCount(void);
  HRESULT         __fastcall getLine(long nIndex/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getLine(long nIndex/*[in]*/);
  HRESULT         __fastcall getSelectionStart(long* pnStart/*[out,retval]*/);
  long            __fastcall getSelectionStart(void);
  HRESULT         __fastcall getSelectionEnd(long* pnEnd/*[out,retval]*/);
  long            __fastcall getSelectionEnd(void);
  HRESULT         __fastcall setSelection(long nStart/*[in]*/, long nEnd/*[in]*/);
  HRESULT         __fastcall replaceSelection(BSTR newVal/*[in]*/);
  HRESULT         __fastcall getLineIndex(long nIndex/*[in]*/, long* pnPosition/*[out,retval]*/);
  long            __fastcall getLineIndex(long nIndex/*[in]*/);
  HRESULT         __fastcall getLineFromChar(long nPosition/*[in]*/, long* pnLine/*[out,retval]*/);
  long            __fastcall getLineFromChar(long nPosition/*[in]*/);

  __property   BSTR            value = {read = get_value, write = set_value};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   BSTR            editStyle = {read = get_editStyle, write = set_editStyle};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            textLimit = {read = get_textLimit, write = set_textLimit};
  __property   long            lineCount = {read = get_lineCount};
};
typedef TCOMIWMPEditCtrlT<IWMPEditCtrl> TCOMIWMPEditCtrl;

// *********************************************************************//
// DispIntf:  IWMPEditCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70E1217C-C617-4CFD-BD8A-69CA2043E70B}
// *********************************************************************//
template<class T>
class IWMPEditCtrlDispT : public TAutoDriver<IWMPEditCtrl>
{
public:
  IWMPEditCtrlDispT(){}

  IWMPEditCtrlDispT(IWMPEditCtrl *pintf)
  {
    TAutoDriver<IWMPEditCtrl>::Bind(pintf, false);
  }

  IWMPEditCtrlDispT(IWMPEditCtrlPtr pintf)
  {
    TAutoDriver<IWMPEditCtrl>::Bind(pintf, true);
  }

  IWMPEditCtrlDispT& operator=(IWMPEditCtrl *pintf)
  {
    TAutoDriver<IWMPEditCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPEditCtrlDispT& operator=(IWMPEditCtrlPtr pintf)
  {
    TAutoDriver<IWMPEditCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPEditCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPEditCtrl);
  }

  HRESULT         __fastcall get_value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_value(void);
  HRESULT         __fastcall set_value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_border(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_border(void);
  HRESULT         __fastcall set_border(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_justification(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_justification(void);
  HRESULT         __fastcall set_justification(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_editStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_editStyle(void);
  HRESULT         __fastcall set_editStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  HRESULT         __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_readOnly(void);
  HRESULT         __fastcall set_readOnly(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_textLimit(long* pVal/*[out,retval]*/);
  long            __fastcall get_textLimit(void);
  HRESULT         __fastcall set_textLimit(long pVal/*[in]*/);
  HRESULT         __fastcall get_lineCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_lineCount(void);
  HRESULT         __fastcall getLine(long nIndex/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall getLine(long nIndex/*[in]*/);
  HRESULT         __fastcall getSelectionStart(long* pnStart/*[out,retval]*/);
  long            __fastcall getSelectionStart(void);
  HRESULT         __fastcall getSelectionEnd(long* pnEnd/*[out,retval]*/);
  long            __fastcall getSelectionEnd(void);
  HRESULT         __fastcall setSelection(long nStart/*[in]*/, long nEnd/*[in]*/);
  HRESULT         __fastcall replaceSelection(BSTR newVal/*[in]*/);
  HRESULT         __fastcall getLineIndex(long nIndex/*[in]*/, long* pnPosition/*[out,retval]*/);
  long            __fastcall getLineIndex(long nIndex/*[in]*/);
  HRESULT         __fastcall getLineFromChar(long nPosition/*[in]*/, long* pnLine/*[out,retval]*/);
  long            __fastcall getLineFromChar(long nPosition/*[in]*/);

  __property   BSTR            value = {read = get_value, write = set_value};
  __property   VARIANT_BOOL    border = {read = get_border, write = set_border};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   BSTR            editStyle = {read = get_editStyle, write = set_editStyle};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   VARIANT_BOOL    readOnly = {read = get_readOnly, write = set_readOnly};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   long            textLimit = {read = get_textLimit, write = set_textLimit};
  __property   long            lineCount = {read = get_lineCount};
};
typedef IWMPEditCtrlDispT<IWMPEditCtrl> IWMPEditCtrlDisp;

typedef TComInterface<IWMPPluginUIHost>  TCOMIWMPPluginUIHost;

// *********************************************************************//
// DispIntf:  IWMPPluginUIHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D0AD945-289E-45C5-A9C6-F301F0152108}
// *********************************************************************//
template<class T>
class IWMPPluginUIHostDispT : public TAutoDriver<IWMPPluginUIHost>
{
public:
  IWMPPluginUIHostDispT(){}

  IWMPPluginUIHostDispT(IWMPPluginUIHost *pintf)
  {
    TAutoDriver<IWMPPluginUIHost>::Bind(pintf, false);
  }

  IWMPPluginUIHostDispT(IWMPPluginUIHostPtr pintf)
  {
    TAutoDriver<IWMPPluginUIHost>::Bind(pintf, true);
  }

  IWMPPluginUIHostDispT& operator=(IWMPPluginUIHost *pintf)
  {
    TAutoDriver<IWMPPluginUIHost>::Bind(pintf, false);
    return *this;
  }

  IWMPPluginUIHostDispT& operator=(IWMPPluginUIHostPtr pintf)
  {
    TAutoDriver<IWMPPluginUIHost>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_objectID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_objectID(void);
  HRESULT         __fastcall set_objectID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall getProperty(BSTR bstrName/*[in]*/, VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR bstrName/*[in]*/);
  HRESULT         __fastcall setProperty(BSTR bstrName/*[in]*/, VARIANT newVal/*[in]*/);

  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            objectID = {read = get_objectID, write = set_objectID};
};
typedef IWMPPluginUIHostDispT<IWMPPluginUIHost> IWMPPluginUIHostDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPMenuCtrl
// Interface: IWMPMenuCtrl
// *********************************************************************//
template <class T /* IWMPMenuCtrl */ >
class TCOMIWMPMenuCtrlT : public TComInterface<IWMPMenuCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPMenuCtrlT() {}
  TCOMIWMPMenuCtrlT(IWMPMenuCtrl *intf, bool addRef = false) : TComInterface<IWMPMenuCtrl>(intf, addRef) {}
  TCOMIWMPMenuCtrlT(const TCOMIWMPMenuCtrlT& src) : TComInterface<IWMPMenuCtrl>(src) {}
  TCOMIWMPMenuCtrlT& operator=(const TCOMIWMPMenuCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall deleteAllItems(void);
  HRESULT         __fastcall appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall appendSeparator(void);
  HRESULT         __fastcall enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall get_showFlags(long* pVal/*[out,retval]*/);
  long            __fastcall get_showFlags(void);
  HRESULT         __fastcall set_showFlags(long pVal/*[in]*/);
  HRESULT         __fastcall show(long* pnID/*[out,retval]*/);
  long            __fastcall show(void);
  HRESULT         __fastcall showEx(long nID/*[in]*/);

  __property   long            showFlags = {read = get_showFlags, write = set_showFlags};
};
typedef TCOMIWMPMenuCtrlT<IWMPMenuCtrl> TCOMIWMPMenuCtrl;

// *********************************************************************//
// DispIntf:  IWMPMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {158A7ADC-33DA-4039-A553-BDDBBE389F5C}
// *********************************************************************//
template<class T>
class IWMPMenuCtrlDispT : public TAutoDriver<IWMPMenuCtrl>
{
public:
  IWMPMenuCtrlDispT(){}

  IWMPMenuCtrlDispT(IWMPMenuCtrl *pintf)
  {
    TAutoDriver<IWMPMenuCtrl>::Bind(pintf, false);
  }

  IWMPMenuCtrlDispT(IWMPMenuCtrlPtr pintf)
  {
    TAutoDriver<IWMPMenuCtrl>::Bind(pintf, true);
  }

  IWMPMenuCtrlDispT& operator=(IWMPMenuCtrl *pintf)
  {
    TAutoDriver<IWMPMenuCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPMenuCtrlDispT& operator=(IWMPMenuCtrlPtr pintf)
  {
    TAutoDriver<IWMPMenuCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPMenuCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPMenuCtrl);
  }

  HRESULT         __fastcall deleteAllItems();
  HRESULT         __fastcall appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/);
  HRESULT         __fastcall appendSeparator();
  HRESULT         __fastcall enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/);
  HRESULT         __fastcall get_showFlags(long* pVal/*[out,retval]*/);
  long            __fastcall get_showFlags(void);
  HRESULT         __fastcall set_showFlags(long pVal/*[in]*/);
  HRESULT         __fastcall show(long* pnID/*[out,retval]*/);
  long            __fastcall show(void);
  HRESULT         __fastcall showEx(long nID/*[in]*/);

  __property   long            showFlags = {read = get_showFlags, write = set_showFlags};
};
typedef IWMPMenuCtrlDispT<IWMPMenuCtrl> IWMPMenuCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPAutoMenuCtrl
// Interface: IWMPAutoMenuCtrl
// *********************************************************************//
template <class T /* IWMPAutoMenuCtrl */ >
class TCOMIWMPAutoMenuCtrlT : public TComInterface<IWMPAutoMenuCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPAutoMenuCtrlT() {}
  TCOMIWMPAutoMenuCtrlT(IWMPAutoMenuCtrl *intf, bool addRef = false) : TComInterface<IWMPAutoMenuCtrl>(intf, addRef) {}
  TCOMIWMPAutoMenuCtrlT(const TCOMIWMPAutoMenuCtrlT& src) : TComInterface<IWMPAutoMenuCtrl>(src) {}
  TCOMIWMPAutoMenuCtrlT& operator=(const TCOMIWMPAutoMenuCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall show(BSTR newVal/*[in]*/);

};
typedef TCOMIWMPAutoMenuCtrlT<IWMPAutoMenuCtrl> TCOMIWMPAutoMenuCtrl;

// *********************************************************************//
// DispIntf:  IWMPAutoMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875}
// *********************************************************************//
template<class T>
class IWMPAutoMenuCtrlDispT : public TAutoDriver<IWMPAutoMenuCtrl>
{
public:
  IWMPAutoMenuCtrlDispT(){}

  IWMPAutoMenuCtrlDispT(IWMPAutoMenuCtrl *pintf)
  {
    TAutoDriver<IWMPAutoMenuCtrl>::Bind(pintf, false);
  }

  IWMPAutoMenuCtrlDispT(IWMPAutoMenuCtrlPtr pintf)
  {
    TAutoDriver<IWMPAutoMenuCtrl>::Bind(pintf, true);
  }

  IWMPAutoMenuCtrlDispT& operator=(IWMPAutoMenuCtrl *pintf)
  {
    TAutoDriver<IWMPAutoMenuCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPAutoMenuCtrlDispT& operator=(IWMPAutoMenuCtrlPtr pintf)
  {
    TAutoDriver<IWMPAutoMenuCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPAutoMenuCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPAutoMenuCtrl);
  }

  HRESULT         __fastcall show(BSTR newVal/*[in]*/);

};
typedef IWMPAutoMenuCtrlDispT<IWMPAutoMenuCtrl> IWMPAutoMenuCtrlDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPRegionalButtonCtrl
// Interface: IWMPRegionalButtonCtrl
// *********************************************************************//
template <class T /* IWMPRegionalButtonCtrl */ >
class TCOMIWMPRegionalButtonCtrlT : public TComInterface<IWMPRegionalButtonCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPRegionalButtonCtrlT() {}
  TCOMIWMPRegionalButtonCtrlT(IWMPRegionalButtonCtrl *intf, bool addRef = false) : TComInterface<IWMPRegionalButtonCtrl>(intf, addRef) {}
  TCOMIWMPRegionalButtonCtrlT(const TCOMIWMPRegionalButtonCtrlT& src) : TComInterface<IWMPRegionalButtonCtrl>(src) {}
  TCOMIWMPRegionalButtonCtrlT& operator=(const TCOMIWMPRegionalButtonCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  HRESULT         __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverHoverImage(void);
  HRESULT         __fastcall set_hoverHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_mappingImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_mappingImage(void);
  HRESULT         __fastcall set_mappingImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_showBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showBackground(void);
  HRESULT         __fastcall set_showBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_radio(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_radio(void);
  HRESULT         __fastcall set_radio(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_buttonCount(long* nButtons/*[out,retval]*/);
  long            __fastcall get_buttonCount(void);
  HRESULT         __fastcall createButton(LPDISPATCH* pButton/*[out,retval]*/);
  LPDISPATCH      __fastcall createButton(void);
  HRESULT         __fastcall getButton(long nButton/*[in]*/, LPDISPATCH* pButton/*[out,retval]*/);
  LPDISPATCH      __fastcall getButton(long nButton/*[in]*/);
  HRESULT         __fastcall _Click(long nButton/*[in]*/);
  HRESULT         __fastcall get_hueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_hueShift(void);
  HRESULT         __fastcall set_hueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(float pVal/*[in]*/);

  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   BSTR            hoverHoverImage = {read = get_hoverHoverImage, write = set_hoverHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            mappingImage = {read = get_mappingImage, write = set_mappingImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    showBackground = {read = get_showBackground, write = set_showBackground};
  __property   VARIANT_BOOL    radio = {read = get_radio, write = set_radio};
  __property   long            buttonCount = {read = get_buttonCount};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};
};
typedef TCOMIWMPRegionalButtonCtrlT<IWMPRegionalButtonCtrl> TCOMIWMPRegionalButtonCtrl;

// *********************************************************************//
// DispIntf:  IWMPRegionalButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B1-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
template<class T>
class IWMPRegionalButtonCtrlDispT : public TAutoDriver<IWMPRegionalButtonCtrl>
{
public:
  IWMPRegionalButtonCtrlDispT(){}

  IWMPRegionalButtonCtrlDispT(IWMPRegionalButtonCtrl *pintf)
  {
    TAutoDriver<IWMPRegionalButtonCtrl>::Bind(pintf, false);
  }

  IWMPRegionalButtonCtrlDispT(IWMPRegionalButtonCtrlPtr pintf)
  {
    TAutoDriver<IWMPRegionalButtonCtrl>::Bind(pintf, true);
  }

  IWMPRegionalButtonCtrlDispT& operator=(IWMPRegionalButtonCtrl *pintf)
  {
    TAutoDriver<IWMPRegionalButtonCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPRegionalButtonCtrlDispT& operator=(IWMPRegionalButtonCtrlPtr pintf)
  {
    TAutoDriver<IWMPRegionalButtonCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPRegionalButtonCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPRegionalButtonCtrl);
  }

  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverDownImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverDownImage(void);
  HRESULT         __fastcall set_hoverDownImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverHoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverHoverImage(void);
  HRESULT         __fastcall set_hoverHoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_mappingImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_mappingImage(void);
  HRESULT         __fastcall set_mappingImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_showBackground(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showBackground(void);
  HRESULT         __fastcall set_showBackground(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_radio(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_radio(void);
  HRESULT         __fastcall set_radio(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_buttonCount(long* nButtons/*[out,retval]*/);
  long            __fastcall get_buttonCount(void);
  HRESULT         __fastcall createButton(LPDISPATCH* pButton/*[out,retval]*/);
  LPDISPATCH      __fastcall createButton(void);
  HRESULT         __fastcall getButton(long nButton/*[in]*/, LPDISPATCH* pButton/*[out,retval]*/);
  LPDISPATCH      __fastcall getButton(long nButton/*[in]*/);
  HRESULT         __fastcall _Click(long nButton/*[in]*/);
  HRESULT         __fastcall get_hueShift(float* pVal/*[out,retval]*/);
  float           __fastcall get_hueShift(void);
  HRESULT         __fastcall set_hueShift(float pVal/*[in]*/);
  HRESULT         __fastcall get_saturation(float* pVal/*[out,retval]*/);
  float           __fastcall get_saturation(void);
  HRESULT         __fastcall set_saturation(float pVal/*[in]*/);

  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            hoverDownImage = {read = get_hoverDownImage, write = set_hoverDownImage};
  __property   BSTR            hoverHoverImage = {read = get_hoverHoverImage, write = set_hoverHoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            mappingImage = {read = get_mappingImage, write = set_mappingImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    showBackground = {read = get_showBackground, write = set_showBackground};
  __property   VARIANT_BOOL    radio = {read = get_radio, write = set_radio};
  __property   long            buttonCount = {read = get_buttonCount};
  __property   float           hueShift = {read = get_hueShift, write = set_hueShift};
  __property   float           saturation = {read = get_saturation, write = set_saturation};
};
typedef IWMPRegionalButtonCtrlDispT<IWMPRegionalButtonCtrl> IWMPRegionalButtonCtrlDisp;

// *********************************************************************//
// DispIntf:  IWMPRegionalButtonEvents
// Flags:     (4096) Dispatchable
// GUID:      {50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE}
// *********************************************************************//
template <class T>
class IWMPRegionalButtonEventsDispT : public TAutoDriver<IWMPRegionalButtonEvents>
{
public:
  IWMPRegionalButtonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall onblur();
  HRESULT         __fastcall onfocus();
  HRESULT         __fastcall onclick();
  HRESULT         __fastcall ondblclick();
  HRESULT         __fastcall onmousedown();
  HRESULT         __fastcall onmouseup();
  HRESULT         __fastcall onmousemove();
  HRESULT         __fastcall onmouseover();
  HRESULT         __fastcall onmouseout();
  HRESULT         __fastcall onkeypress();
  HRESULT         __fastcall onkeydown();
  HRESULT         __fastcall onkeyup();

};
typedef IWMPRegionalButtonEventsDispT<IWMPRegionalButtonEvents> IWMPRegionalButtonEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPRegionalButton
// Interface: IWMPRegionalButton
// *********************************************************************//
template <class T /* IWMPRegionalButton */ >
class TCOMIWMPRegionalButtonT : public TComInterface<IWMPRegionalButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPRegionalButtonT() {}
  TCOMIWMPRegionalButtonT(IWMPRegionalButton *intf, bool addRef = false) : TComInterface<IWMPRegionalButton>(intf, addRef) {}
  TCOMIWMPRegionalButtonT(const TCOMIWMPRegionalButtonT& src) : TComInterface<IWMPRegionalButton>(src) {}
  TCOMIWMPRegionalButtonT& operator=(const TCOMIWMPRegionalButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_upToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_upToolTip(void);
  HRESULT         __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downToolTip(void);
  HRESULT         __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_mappingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_mappingColor(void);
  HRESULT         __fastcall set_mappingColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  HRESULT         __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_down(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  HRESULT         __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_index(long* pVal/*[out,retval]*/);
  long            __fastcall get_index(void);
  HRESULT         __fastcall get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  HRESULT         __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall _Click(void);
  HRESULT         __fastcall get_accName(BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(void);
  HRESULT         __fastcall set_accName(BSTR pszName/*[in]*/);
  HRESULT         __fastcall get_accDescription(BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(void);
  HRESULT         __fastcall set_accDescription(BSTR pszDescription/*[in]*/);
  HRESULT         __fastcall get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  HRESULT         __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);

  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            mappingColor = {read = get_mappingColor, write = set_mappingColor};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   long            index = {read = get_index};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
};
typedef TCOMIWMPRegionalButtonT<IWMPRegionalButton> TCOMIWMPRegionalButton;

// *********************************************************************//
// DispIntf:  IWMPRegionalButton
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B2-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
template<class T>
class IWMPRegionalButtonDispT : public TAutoDriver<IWMPRegionalButton>
{
public:
  IWMPRegionalButtonDispT(){}

  IWMPRegionalButtonDispT(IWMPRegionalButton *pintf)
  {
    TAutoDriver<IWMPRegionalButton>::Bind(pintf, false);
  }

  IWMPRegionalButtonDispT(IWMPRegionalButtonPtr pintf)
  {
    TAutoDriver<IWMPRegionalButton>::Bind(pintf, true);
  }

  IWMPRegionalButtonDispT& operator=(IWMPRegionalButton *pintf)
  {
    TAutoDriver<IWMPRegionalButton>::Bind(pintf, false);
    return *this;
  }

  IWMPRegionalButtonDispT& operator=(IWMPRegionalButtonPtr pintf)
  {
    TAutoDriver<IWMPRegionalButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPRegionalButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPRegionalButton);
  }

  HRESULT         __fastcall get_upToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_upToolTip(void);
  HRESULT         __fastcall set_upToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downToolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downToolTip(void);
  HRESULT         __fastcall set_downToolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_mappingColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_mappingColor(void);
  HRESULT         __fastcall set_mappingColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_enabled(void);
  HRESULT         __fastcall set_enabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_sticky(void);
  HRESULT         __fastcall set_sticky(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_down(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_down(void);
  HRESULT         __fastcall set_down(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_index(long* pVal/*[out,retval]*/);
  long            __fastcall get_index(void);
  HRESULT         __fastcall get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_tabStop(void);
  HRESULT         __fastcall set_tabStop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall _Click();
  HRESULT         __fastcall get_accName(BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(void);
  HRESULT         __fastcall set_accName(BSTR pszName/*[in]*/);
  HRESULT         __fastcall get_accDescription(BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(void);
  HRESULT         __fastcall set_accDescription(BSTR pszDescription/*[in]*/);
  HRESULT         __fastcall get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(void);
  HRESULT         __fastcall set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/);

  __property   BSTR            upToolTip = {read = get_upToolTip, write = set_upToolTip};
  __property   BSTR            downToolTip = {read = get_downToolTip, write = set_downToolTip};
  __property   BSTR            mappingColor = {read = get_mappingColor, write = set_mappingColor};
  __property   VARIANT_BOOL    enabled = {read = get_enabled, write = set_enabled};
  __property   VARIANT_BOOL    sticky = {read = get_sticky, write = set_sticky};
  __property   VARIANT_BOOL    down = {read = get_down, write = set_down};
  __property   long            index = {read = get_index};
  __property   VARIANT_BOOL    tabStop = {read = get_tabStop, write = set_tabStop};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   BSTR            accName = {read = get_accName, write = set_accName};
  __property   BSTR            accDescription = {read = get_accDescription, write = set_accDescription};
  __property   BSTR            accKeyboardShortcut = {read = get_accKeyboardShortcut, write = set_accKeyboardShortcut};
};
typedef IWMPRegionalButtonDispT<IWMPRegionalButton> IWMPRegionalButtonDisp;

// *********************************************************************//
// DispIntf:  IWMPCustomSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {95F45AA4-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
template <class T>
class IWMPCustomSliderCtrlEventsDispT : public TAutoDriver<IWMPCustomSliderCtrlEvents>
{
public:
  IWMPCustomSliderCtrlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall ondragbegin();
  HRESULT         __fastcall ondragend();
  HRESULT         __fastcall onpositionchange();

};
typedef IWMPCustomSliderCtrlEventsDispT<IWMPCustomSliderCtrlEvents> IWMPCustomSliderCtrlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPCustomSlider
// Interface: IWMPCustomSlider
// *********************************************************************//
template <class T /* IWMPCustomSlider */ >
class TCOMIWMPCustomSliderT : public TComInterface<IWMPCustomSlider>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPCustomSliderT() {}
  TCOMIWMPCustomSliderT(IWMPCustomSlider *intf, bool addRef = false) : TComInterface<IWMPCustomSlider>(intf, addRef) {}
  TCOMIWMPCustomSliderT(const TCOMIWMPCustomSliderT& src) : TComInterface<IWMPCustomSlider>(src) {}
  TCOMIWMPCustomSliderT& operator=(const TCOMIWMPCustomSliderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_min(float* pVal/*[out,retval]*/);
  float           __fastcall get_min(void);
  HRESULT         __fastcall set_min(float pVal/*[in]*/);
  HRESULT         __fastcall get_max(float* pVal/*[out,retval]*/);
  float           __fastcall get_max(void);
  HRESULT         __fastcall set_max(float pVal/*[in]*/);
  HRESULT         __fastcall get_value(float* pVal/*[out,retval]*/);
  float           __fastcall get_value(void);
  HRESULT         __fastcall set_value(float pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_positionImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_positionImage(void);
  HRESULT         __fastcall set_positionImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);

  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            positionImage = {read = get_positionImage, write = set_positionImage};
  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
};
typedef TCOMIWMPCustomSliderT<IWMPCustomSlider> TCOMIWMPCustomSlider;

// *********************************************************************//
// DispIntf:  IWMPCustomSlider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {95F45AA2-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
template<class T>
class IWMPCustomSliderDispT : public TAutoDriver<IWMPCustomSlider>
{
public:
  IWMPCustomSliderDispT(){}

  IWMPCustomSliderDispT(IWMPCustomSlider *pintf)
  {
    TAutoDriver<IWMPCustomSlider>::Bind(pintf, false);
  }

  IWMPCustomSliderDispT(IWMPCustomSliderPtr pintf)
  {
    TAutoDriver<IWMPCustomSlider>::Bind(pintf, true);
  }

  IWMPCustomSliderDispT& operator=(IWMPCustomSlider *pintf)
  {
    TAutoDriver<IWMPCustomSlider>::Bind(pintf, false);
    return *this;
  }

  IWMPCustomSliderDispT& operator=(IWMPCustomSliderPtr pintf)
  {
    TAutoDriver<IWMPCustomSlider>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPCustomSliderCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPCustomSliderCtrl);
  }

  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_min(float* pVal/*[out,retval]*/);
  float           __fastcall get_min(void);
  HRESULT         __fastcall set_min(float pVal/*[in]*/);
  HRESULT         __fastcall get_max(float* pVal/*[out,retval]*/);
  float           __fastcall get_max(void);
  HRESULT         __fastcall set_max(float pVal/*[in]*/);
  HRESULT         __fastcall get_value(float* pVal/*[out,retval]*/);
  float           __fastcall get_value(void);
  HRESULT         __fastcall set_value(float pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_positionImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_positionImage(void);
  HRESULT         __fastcall set_positionImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_image(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_image(void);
  HRESULT         __fastcall set_image(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverImage(void);
  HRESULT         __fastcall set_hoverImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledImage(void);
  HRESULT         __fastcall set_disabledImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_downImage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_downImage(void);
  HRESULT         __fastcall set_downImage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transparencyColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_transparencyColor(void);
  HRESULT         __fastcall set_transparencyColor(BSTR pVal/*[in]*/);

  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   float           min = {read = get_min, write = set_min};
  __property   float           max = {read = get_max, write = set_max};
  __property   float           value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            positionImage = {read = get_positionImage, write = set_positionImage};
  __property   BSTR            image = {read = get_image, write = set_image};
  __property   BSTR            hoverImage = {read = get_hoverImage, write = set_hoverImage};
  __property   BSTR            disabledImage = {read = get_disabledImage, write = set_disabledImage};
  __property   BSTR            downImage = {read = get_downImage, write = set_downImage};
  __property   BSTR            transparencyColor = {read = get_transparencyColor, write = set_transparencyColor};
};
typedef IWMPCustomSliderDispT<IWMPCustomSlider> IWMPCustomSliderDisp;

// *********************************************************************//
// SmartIntf: TCOMIWMPTextCtrl
// Interface: IWMPTextCtrl
// *********************************************************************//
template <class T /* IWMPTextCtrl */ >
class TCOMIWMPTextCtrlT : public TComInterface<IWMPTextCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWMPTextCtrlT() {}
  TCOMIWMPTextCtrlT(IWMPTextCtrl *intf, bool addRef = false) : TComInterface<IWMPTextCtrl>(intf, addRef) {}
  TCOMIWMPTextCtrlT(const TCOMIWMPTextCtrlT& src) : TComInterface<IWMPTextCtrl>(src) {}
  TCOMIWMPTextCtrlT& operator=(const TCOMIWMPTextCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverBackgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverBackgroundColor(void);
  HRESULT         __fastcall set_hoverBackgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverForegroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverForegroundColor(void);
  HRESULT         __fastcall set_hoverForegroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverFontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverFontStyle(void);
  HRESULT         __fastcall set_hoverFontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_value(void);
  HRESULT         __fastcall set_value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledFontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledFontStyle(void);
  HRESULT         __fastcall set_disabledFontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledForegroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledForegroundColor(void);
  HRESULT         __fastcall set_disabledForegroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledBackgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledBackgroundColor(void);
  HRESULT         __fastcall set_disabledBackgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSmoothing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fontSmoothing(void);
  HRESULT         __fastcall set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_justification(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_justification(void);
  HRESULT         __fastcall set_justification(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  HRESULT         __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_scrolling(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_scrolling(void);
  HRESULT         __fastcall set_scrolling(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingDirection(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_scrollingDirection(void);
  HRESULT         __fastcall set_scrollingDirection(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingDelay(int* pVal/*[out,retval]*/);
  int             __fastcall get_scrollingDelay(void);
  HRESULT         __fastcall set_scrollingDelay(int pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingAmount(int* pVal/*[out,retval]*/);
  int             __fastcall get_scrollingAmount(void);
  HRESULT         __fastcall set_scrollingAmount(int pVal/*[in]*/);
  HRESULT         __fastcall get_textWidth(int* pVal/*[out,retval]*/);
  int             __fastcall get_textWidth(void);
  HRESULT         __fastcall get_onGlass(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_onGlass(void);
  HRESULT         __fastcall set_onGlass(VARIANT_BOOL pVal/*[in]*/);

  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            hoverBackgroundColor = {read = get_hoverBackgroundColor, write = set_hoverBackgroundColor};
  __property   BSTR            hoverForegroundColor = {read = get_hoverForegroundColor, write = set_hoverForegroundColor};
  __property   BSTR            hoverFontStyle = {read = get_hoverFontStyle, write = set_hoverFontStyle};
  __property   BSTR            value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            disabledFontStyle = {read = get_disabledFontStyle, write = set_disabledFontStyle};
  __property   BSTR            disabledForegroundColor = {read = get_disabledForegroundColor, write = set_disabledForegroundColor};
  __property   BSTR            disabledBackgroundColor = {read = get_disabledBackgroundColor, write = set_disabledBackgroundColor};
  __property   VARIANT_BOOL    fontSmoothing = {read = get_fontSmoothing, write = set_fontSmoothing};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    scrolling = {read = get_scrolling, write = set_scrolling};
  __property   BSTR            scrollingDirection = {read = get_scrollingDirection, write = set_scrollingDirection};
  __property   int             scrollingDelay = {read = get_scrollingDelay, write = set_scrollingDelay};
  __property   int             scrollingAmount = {read = get_scrollingAmount, write = set_scrollingAmount};
  __property   int             textWidth = {read = get_textWidth};
  __property   VARIANT_BOOL    onGlass = {read = get_onGlass, write = set_onGlass};
};
typedef TCOMIWMPTextCtrlT<IWMPTextCtrl> TCOMIWMPTextCtrl;

// *********************************************************************//
// DispIntf:  IWMPTextCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {237DAC8E-0E32-11D3-A2E2-00C04F79F88E}
// *********************************************************************//
template<class T>
class IWMPTextCtrlDispT : public TAutoDriver<IWMPTextCtrl>
{
public:
  IWMPTextCtrlDispT(){}

  IWMPTextCtrlDispT(IWMPTextCtrl *pintf)
  {
    TAutoDriver<IWMPTextCtrl>::Bind(pintf, false);
  }

  IWMPTextCtrlDispT(IWMPTextCtrlPtr pintf)
  {
    TAutoDriver<IWMPTextCtrl>::Bind(pintf, true);
  }

  IWMPTextCtrlDispT& operator=(IWMPTextCtrl *pintf)
  {
    TAutoDriver<IWMPTextCtrl>::Bind(pintf, false);
    return *this;
  }

  IWMPTextCtrlDispT& operator=(IWMPTextCtrlPtr pintf)
  {
    TAutoDriver<IWMPTextCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WMPTextCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WMPTextCtrl);
  }

  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontFace(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontFace(void);
  HRESULT         __fastcall set_fontFace(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_fontStyle(void);
  HRESULT         __fastcall set_fontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_fontSize(void);
  HRESULT         __fastcall set_fontSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_foregroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_foregroundColor(void);
  HRESULT         __fastcall set_foregroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverBackgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverBackgroundColor(void);
  HRESULT         __fastcall set_hoverBackgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverForegroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverForegroundColor(void);
  HRESULT         __fastcall set_hoverForegroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_hoverFontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_hoverFontStyle(void);
  HRESULT         __fastcall set_hoverFontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_value(void);
  HRESULT         __fastcall set_value(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_toolTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_toolTip(void);
  HRESULT         __fastcall set_toolTip(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledFontStyle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledFontStyle(void);
  HRESULT         __fastcall set_disabledFontStyle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledForegroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledForegroundColor(void);
  HRESULT         __fastcall set_disabledForegroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_disabledBackgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_disabledBackgroundColor(void);
  HRESULT         __fastcall set_disabledBackgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_fontSmoothing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fontSmoothing(void);
  HRESULT         __fastcall set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_justification(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_justification(void);
  HRESULT         __fastcall set_justification(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_wordWrap(void);
  HRESULT         __fastcall set_wordWrap(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_cursor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cursor(void);
  HRESULT         __fastcall set_cursor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_scrolling(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_scrolling(void);
  HRESULT         __fastcall set_scrolling(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingDirection(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_scrollingDirection(void);
  HRESULT         __fastcall set_scrollingDirection(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingDelay(int* pVal/*[out,retval]*/);
  int             __fastcall get_scrollingDelay(void);
  HRESULT         __fastcall set_scrollingDelay(int pVal/*[in]*/);
  HRESULT         __fastcall get_scrollingAmount(int* pVal/*[out,retval]*/);
  int             __fastcall get_scrollingAmount(void);
  HRESULT         __fastcall set_scrollingAmount(int pVal/*[in]*/);
  HRESULT         __fastcall get_textWidth(int* pVal/*[out,retval]*/);
  int             __fastcall get_textWidth(void);
  HRESULT         __fastcall get_onGlass(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_onGlass(void);
  HRESULT         __fastcall set_onGlass(VARIANT_BOOL pVal/*[in]*/);

  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            fontFace = {read = get_fontFace, write = set_fontFace};
  __property   BSTR            fontStyle = {read = get_fontStyle, write = set_fontStyle};
  __property   long            fontSize = {read = get_fontSize, write = set_fontSize};
  __property   BSTR            foregroundColor = {read = get_foregroundColor, write = set_foregroundColor};
  __property   BSTR            hoverBackgroundColor = {read = get_hoverBackgroundColor, write = set_hoverBackgroundColor};
  __property   BSTR            hoverForegroundColor = {read = get_hoverForegroundColor, write = set_hoverForegroundColor};
  __property   BSTR            hoverFontStyle = {read = get_hoverFontStyle, write = set_hoverFontStyle};
  __property   BSTR            value = {read = get_value, write = set_value};
  __property   BSTR            toolTip = {read = get_toolTip, write = set_toolTip};
  __property   BSTR            disabledFontStyle = {read = get_disabledFontStyle, write = set_disabledFontStyle};
  __property   BSTR            disabledForegroundColor = {read = get_disabledForegroundColor, write = set_disabledForegroundColor};
  __property   BSTR            disabledBackgroundColor = {read = get_disabledBackgroundColor, write = set_disabledBackgroundColor};
  __property   VARIANT_BOOL    fontSmoothing = {read = get_fontSmoothing, write = set_fontSmoothing};
  __property   BSTR            justification = {read = get_justification, write = set_justification};
  __property   VARIANT_BOOL    wordWrap = {read = get_wordWrap, write = set_wordWrap};
  __property   BSTR            cursor = {read = get_cursor, write = set_cursor};
  __property   VARIANT_BOOL    scrolling = {read = get_scrolling, write = set_scrolling};
  __property   BSTR            scrollingDirection = {read = get_scrollingDirection, write = set_scrollingDirection};
  __property   int             scrollingDelay = {read = get_scrollingDelay, write = set_scrollingDelay};
  __property   int             scrollingAmount = {read = get_scrollingAmount, write = set_scrollingAmount};
  __property   int             textWidth = {read = get_textWidth};
  __property   VARIANT_BOOL    onGlass = {read = get_onGlass, write = set_onGlass};
};
typedef IWMPTextCtrlDispT<IWMPTextCtrl> IWMPTextCtrlDisp;

typedef TComInterface<ITaskCntrCtrl>  TCOMITaskCntrCtrl;

// *********************************************************************//
// DispIntf:  ITaskCntrCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {891EADB1-1C45-48B0-B704-49A888DA98C4}
// *********************************************************************//
template<class T>
class ITaskCntrCtrlDispT : public TAutoDriver<ITaskCntrCtrl>
{
public:
  ITaskCntrCtrlDispT(){}

  ITaskCntrCtrlDispT(ITaskCntrCtrl *pintf)
  {
    TAutoDriver<ITaskCntrCtrl>::Bind(pintf, false);
  }

  ITaskCntrCtrlDispT(ITaskCntrCtrlPtr pintf)
  {
    TAutoDriver<ITaskCntrCtrl>::Bind(pintf, true);
  }

  ITaskCntrCtrlDispT& operator=(ITaskCntrCtrl *pintf)
  {
    TAutoDriver<ITaskCntrCtrl>::Bind(pintf, false);
    return *this;
  }

  ITaskCntrCtrlDispT& operator=(ITaskCntrCtrlPtr pintf)
  {
    TAutoDriver<ITaskCntrCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_CurrentContainer(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_CurrentContainer(void);
  HRESULT         __fastcall set_CurrentContainer(LPUNKNOWN ppUnk/*[in]*/);
  HRESULT         __fastcall Activate();

  __property   LPUNKNOWN       CurrentContainer = {read = get_CurrentContainer, write = set_CurrentContainer};
};
typedef ITaskCntrCtrlDispT<ITaskCntrCtrl> ITaskCntrCtrlDisp;

// *********************************************************************//
// DispIntf:  _WMPCoreEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D84CCA96-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
template <class T>
class _WMPCoreEventsDispT : public TAutoDriver<_WMPCoreEvents>
{
public:
  _WMPCoreEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OpenStateChange(long NewState/*[in]*/);
  void            __fastcall PlayStateChange(long NewState/*[in]*/);
  void            __fastcall AudioLanguageChange(long LangID/*[in]*/);
  void            __fastcall StatusChange();
  void            __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/);
  void            __fastcall NewStream();
  void            __fastcall Disconnect(long Result/*[in]*/);
  void            __fastcall Buffering(VARIANT_BOOL Start/*[in]*/);
  void            __fastcall Error();
  void            __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                     BSTR Description/*[in]*/);
  void            __fastcall EndOfStream(long Result/*[in]*/);
  void            __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/);
  void            __fastcall MarkerHit(long MarkerNum/*[in]*/);
  void            __fastcall DurationUnitChange(long NewDurationUnit/*[in]*/);
  void            __fastcall CdromMediaChange(long CdromNum/*[in]*/);
  void            __fastcall PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                            Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
  void            __fastcall CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/);
  void            __fastcall CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/);
  void            __fastcall MediaChange(LPDISPATCH Item/*[in]*/);
  void            __fastcall CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/);
  void            __fastcall CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/);
  void            __fastcall MediaCollectionChange();
  void            __fastcall MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                                 BSTR bstrAttribVal/*[in]*/);
  void            __fastcall MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                                   BSTR bstrAttribVal/*[in]*/);
  void            __fastcall MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                                   BSTR bstrOldAttribVal/*[in]*/, 
                                                                   BSTR bstrNewAttribVal/*[in]*/);
  void            __fastcall PlaylistCollectionChange();
  void            __fastcall PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/);
  void            __fastcall PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/);
  void            __fastcall PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                                    VARIANT_BOOL varfIsDeleted/*[in]*/);
  void            __fastcall ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/);
  void            __fastcall MediaError(LPDISPATCH pMediaObject/*[in]*/);
  void            __fastcall OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/);
  void            __fastcall DomainChange(BSTR strDomain/*[in]*/);
  void            __fastcall StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                                    Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                                    , long lCollectionIndex/*[in]*/);
  void            __fastcall MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/);
  void            __fastcall MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/);

};
typedef _WMPCoreEventsDispT<_WMPCoreEvents> _WMPCoreEventsDisp;

typedef TComInterface<IWMPGraphEventHandler>  TCOMIWMPGraphEventHandler;

// *********************************************************************//
// DispIntf:  IWMPGraphEventHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6B550945-018F-11D3-B14A-00C04F79FAA6}
// *********************************************************************//
template<class T>
class IWMPGraphEventHandlerDispT : public TAutoDriver<IWMPGraphEventHandler>
{
public:
  IWMPGraphEventHandlerDispT(){}

  IWMPGraphEventHandlerDispT(IWMPGraphEventHandler *pintf)
  {
    TAutoDriver<IWMPGraphEventHandler>::Bind(pintf, false);
  }

  IWMPGraphEventHandlerDispT(IWMPGraphEventHandlerPtr pintf)
  {
    TAutoDriver<IWMPGraphEventHandler>::Bind(pintf, true);
  }

  IWMPGraphEventHandlerDispT& operator=(IWMPGraphEventHandler *pintf)
  {
    TAutoDriver<IWMPGraphEventHandler>::Bind(pintf, false);
    return *this;
  }

  IWMPGraphEventHandlerDispT& operator=(IWMPGraphEventHandlerPtr pintf)
  {
    TAutoDriver<IWMPGraphEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall NotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                    long lGraphState/*[in]*/);
  HRESULT         __fastcall AsyncNotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                         long lGraphState/*[in]*/);
  HRESULT         __fastcall NotifyRateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              double dRate/*[in]*/);
  HRESULT         __fastcall NotifyPlaybackEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                               BSTR bstrQueuedUrl, 
                                               Wmplib_tlb::ULONG_PTR dwCurrentContext);
  HRESULT         __fastcall NotifyStreamEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                 BSTR bstrCommand/*[in]*/, BSTR bstrParam/*[in]*/);
  HRESULT         __fastcall NotifyEarlyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                      BSTR bstrCommand/*[in]*/, 
                                                      BSTR bstrParam/*[in]*/, double dTime/*[in]*/);
  HRESULT         __fastcall NotifyMarkerHit(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                             long lMarker/*[in]*/);
  HRESULT         __fastcall NotifyGraphError(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              long lErrMajor/*[in]*/, long lErrMinor/*[in]*/, 
                                              long lCondition/*[in]*/, BSTR bstrInfo/*[in]*/, 
                                              LPUNKNOWN punkGraphData/*[in]*/);
  HRESULT         __fastcall NotifyAcquireCredentials(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                      BSTR bstrRealm/*[in]*/, BSTR bstrSite/*[in]*/
                                                      , BSTR bstrUser/*[in,out]*/, 
                                                      BSTR bstrPassword/*[in,out]*/, 
                                                      unsigned_long* pdwFlags/*[in,out]*/, 
                                                      VARIANT_BOOL* pfCancel/*[out]*/);
  HRESULT         __fastcall NotifyUntrustedLicense(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                    BSTR bstrURL/*[in]*/, 
                                                    VARIANT_BOOL* pfCancel/*[out]*/);
  HRESULT         __fastcall NotifyLicenseDialog(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                 BSTR bstrURL/*[in]*/, BSTR bstrContent/*[in]*/, 
                                                 unsigned_char* pPostData/*[in]*/, 
                                                 unsigned_long dwPostDataSize/*[in]*/, 
                                                 long lResult/*[in]*/);
  HRESULT         __fastcall NotifyNeedsIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                          VARIANT_BOOL* pfResult/*[out]*/);
  HRESULT         __fastcall NotifyNewMetadata(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyNewMediaCaps(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyDisconnect(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              long lResult/*[in]*/);
  HRESULT         __fastcall NotifySave(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                        long fStarted/*[in]*/, long lResult/*[in]*/);
  HRESULT         __fastcall NotifyDelayClose(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              VARIANT_BOOL fDelay/*[in]*/);
  HRESULT         __fastcall NotifyDVD(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                       long lEventCode/*[in]*/, long lParam1/*[in]*/, 
                                       long lParam2/*[in]*/);
  HRESULT         __fastcall NotifyRequestAppThreadAction(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                          unsigned_long dwAction/*[in]*/);
  HRESULT         __fastcall NotifyPrerollReady(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyNewIcons(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyStepComplete(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);
  HRESULT         __fastcall NotifyNewBitrate(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              unsigned_long dwBitrate/*[in]*/);
  HRESULT         __fastcall NotifyGraphCreationPreRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                          Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/
                                                          , 
                                                          Wmplib_tlb::ULONG_PTR punkCardeaEncConfig/*[in]*/
                                                          , 
                                                          Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/
                                                          , 
                                                          Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/);
  HRESULT         __fastcall NotifyGraphCreationPostRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                           Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/
                                                           , 
                                                           Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/
                                                           , 
                                                           Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/);
  HRESULT         __fastcall NotifyGraphUserEvent(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                  long EventCode/*[in]*/);
  HRESULT         __fastcall NotifyRevocation(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                              VARIANT_BOOL* pfResult/*[out]*/);
  HRESULT         __fastcall NotifyNeedsWMGraphIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                                 , 
                                                                 Wmplib_tlb::ULONG_PTR phWnd/*[in]*/
                                                                 , 
                                                                 Wmplib_tlb::ULONG_PTR hIndivEvent/*[in]*/
                                                                 , VARIANT_BOOL* pfCancel/*[out]*/, 
                                                                 VARIANT_BOOL* pfResult/*[out]*/);
  HRESULT         __fastcall NotifyNeedsFullscreen(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/);

};
typedef IWMPGraphEventHandlerDispT<IWMPGraphEventHandler> IWMPGraphEventHandlerDisp;

typedef TComInterface<IBattery>  TCOMIBattery;

// *********************************************************************//
// DispIntf:  IBattery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC}
// *********************************************************************//
template<class T>
class IBatteryDispT : public TAutoDriver<IBattery>
{
public:
  IBatteryDispT(){}

  IBatteryDispT(IBattery *pintf)
  {
    TAutoDriver<IBattery>::Bind(pintf, false);
  }

  IBatteryDispT(IBatteryPtr pintf)
  {
    TAutoDriver<IBattery>::Bind(pintf, true);
  }

  IBatteryDispT& operator=(IBattery *pintf)
  {
    TAutoDriver<IBattery>::Bind(pintf, false);
    return *this;
  }

  IBatteryDispT& operator=(IBatteryPtr pintf)
  {
    TAutoDriver<IBattery>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_presetCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_presetCount(void);
  HRESULT         __fastcall get_preset(long nIndex/*[in]*/, LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_preset(long nIndex/*[in]*/);

  __property   long            presetCount = {read = get_presetCount};
};
typedef IBatteryDispT<IBattery> IBatteryDisp;

typedef TComInterface<IBatteryPreset>  TCOMIBatteryPreset;

// *********************************************************************//
// DispIntf:  IBatteryPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22}
// *********************************************************************//
template<class T>
class IBatteryPresetDispT : public TAutoDriver<IBatteryPreset>
{
public:
  IBatteryPresetDispT(){}

  IBatteryPresetDispT(IBatteryPreset *pintf)
  {
    TAutoDriver<IBatteryPreset>::Bind(pintf, false);
  }

  IBatteryPresetDispT(IBatteryPresetPtr pintf)
  {
    TAutoDriver<IBatteryPreset>::Bind(pintf, true);
  }

  IBatteryPresetDispT& operator=(IBatteryPreset *pintf)
  {
    TAutoDriver<IBatteryPreset>::Bind(pintf, false);
    return *this;
  }

  IBatteryPresetDispT& operator=(IBatteryPresetPtr pintf)
  {
    TAutoDriver<IBatteryPreset>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall set_title(BSTR pVal/*[in]*/);

  __property   BSTR            title = {read = get_title, write = set_title};
};
typedef IBatteryPresetDispT<IBatteryPreset> IBatteryPresetDisp;

typedef TComInterface<IBatteryRandomPreset>  TCOMIBatteryRandomPreset;

// *********************************************************************//
// DispIntf:  IBatteryRandomPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F85E2D65-207D-48DB-84B1-915E1735DB17}
// *********************************************************************//
template<class T>
class IBatteryRandomPresetDispT : public TAutoDriver<IBatteryRandomPreset>
{
public:
  IBatteryRandomPresetDispT(){}

  IBatteryRandomPresetDispT(IBatteryRandomPreset *pintf)
  {
    TAutoDriver<IBatteryRandomPreset>::Bind(pintf, false);
  }

  IBatteryRandomPresetDispT(IBatteryRandomPresetPtr pintf)
  {
    TAutoDriver<IBatteryRandomPreset>::Bind(pintf, true);
  }

  IBatteryRandomPresetDispT& operator=(IBatteryRandomPreset *pintf)
  {
    TAutoDriver<IBatteryRandomPreset>::Bind(pintf, false);
    return *this;
  }

  IBatteryRandomPresetDispT& operator=(IBatteryRandomPresetPtr pintf)
  {
    TAutoDriver<IBatteryRandomPreset>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall set_title(BSTR pVal/*[in]*/);


  __property   BSTR            title = {read = get_title, write = set_title};
};
typedef IBatteryRandomPresetDispT<IBatteryRandomPreset> IBatteryRandomPresetDisp;

typedef TComInterface<IBatterySavedPreset>  TCOMIBatterySavedPreset;

// *********************************************************************//
// DispIntf:  IBatterySavedPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {876E7208-0172-4EBB-B08B-2E1D30DFE44C}
// *********************************************************************//
template<class T>
class IBatterySavedPresetDispT : public TAutoDriver<IBatterySavedPreset>
{
public:
  IBatterySavedPresetDispT(){}

  IBatterySavedPresetDispT(IBatterySavedPreset *pintf)
  {
    TAutoDriver<IBatterySavedPreset>::Bind(pintf, false);
  }

  IBatterySavedPresetDispT(IBatterySavedPresetPtr pintf)
  {
    TAutoDriver<IBatterySavedPreset>::Bind(pintf, true);
  }

  IBatterySavedPresetDispT& operator=(IBatterySavedPreset *pintf)
  {
    TAutoDriver<IBatterySavedPreset>::Bind(pintf, false);
    return *this;
  }

  IBatterySavedPresetDispT& operator=(IBatterySavedPresetPtr pintf)
  {
    TAutoDriver<IBatterySavedPreset>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall set_title(BSTR pVal/*[in]*/);


  __property   BSTR            title = {read = get_title, write = set_title};
};
typedef IBatterySavedPresetDispT<IBatterySavedPreset> IBatterySavedPresetDisp;

typedef TComInterface<IBarsEffect>  TCOMIBarsEffect;

// *********************************************************************//
// DispIntf:  IBarsEffect
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33E9291A-F6A9-11D2-9435-00A0C92A2F2D}
// *********************************************************************//
template<class T>
class IBarsEffectDispT : public TAutoDriver<IBarsEffect>
{
public:
  IBarsEffectDispT(){}

  IBarsEffectDispT(IBarsEffect *pintf)
  {
    TAutoDriver<IBarsEffect>::Bind(pintf, false);
  }

  IBarsEffectDispT(IBarsEffectPtr pintf)
  {
    TAutoDriver<IBarsEffect>::Bind(pintf, true);
  }

  IBarsEffectDispT& operator=(IBarsEffect *pintf)
  {
    TAutoDriver<IBarsEffect>::Bind(pintf, false);
    return *this;
  }

  IBarsEffectDispT& operator=(IBarsEffectPtr pintf)
  {
    TAutoDriver<IBarsEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_displayMode(long* pVal/*[out,retval]*/);
  long            __fastcall get_displayMode(void);
  HRESULT         __fastcall set_displayMode(long pVal/*[in]*/);
  HRESULT         __fastcall get_showPeaks(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_showPeaks(void);
  HRESULT         __fastcall set_showPeaks(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_peakHangTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_peakHangTime(void);
  HRESULT         __fastcall set_peakHangTime(long pVal/*[in]*/);
  HRESULT         __fastcall get_peakFallbackAcceleration(float* pVal/*[out,retval]*/);
  float           __fastcall get_peakFallbackAcceleration(void);
  HRESULT         __fastcall set_peakFallbackAcceleration(float pVal/*[in]*/);
  HRESULT         __fastcall get_peakFallbackSpeed(float* pVal/*[out,retval]*/);
  float           __fastcall get_peakFallbackSpeed(void);
  HRESULT         __fastcall set_peakFallbackSpeed(float pVal/*[in]*/);
  HRESULT         __fastcall get_levelFallbackAcceleration(float* pVal/*[out,retval]*/);
  float           __fastcall get_levelFallbackAcceleration(void);
  HRESULT         __fastcall set_levelFallbackAcceleration(float pVal/*[in]*/);
  HRESULT         __fastcall get_levelFallbackSpeed(float* pVal/*[out,retval]*/);
  float           __fastcall get_levelFallbackSpeed(void);
  HRESULT         __fastcall set_levelFallbackSpeed(float pVal/*[in]*/);
  HRESULT         __fastcall get_backgroundColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_backgroundColor(void);
  HRESULT         __fastcall set_backgroundColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_levelColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_levelColor(void);
  HRESULT         __fastcall set_levelColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_peakColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_peakColor(void);
  HRESULT         __fastcall set_peakColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_horizontalSpacing(long* pVal/*[out,retval]*/);
  long            __fastcall get_horizontalSpacing(void);
  HRESULT         __fastcall set_horizontalSpacing(long pVal/*[in]*/);
  HRESULT         __fastcall get_levelWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_levelWidth(void);
  HRESULT         __fastcall set_levelWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_levelScale(float* pVal/*[out,retval]*/);
  float           __fastcall get_levelScale(void);
  HRESULT         __fastcall set_levelScale(float pVal/*[in]*/);
  HRESULT         __fastcall get_fadeRate(long* pVal/*[out,retval]*/);
  long            __fastcall get_fadeRate(void);
  HRESULT         __fastcall set_fadeRate(long pVal/*[in]*/);
  HRESULT         __fastcall get_fadeMode(long* pVal/*[out,retval]*/);
  long            __fastcall get_fadeMode(void);
  HRESULT         __fastcall set_fadeMode(long pVal/*[in]*/);
  HRESULT         __fastcall get_transparent(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_transparent(void);
  HRESULT         __fastcall set_transparent(VARIANT_BOOL pVal/*[in]*/);

  __property   long            displayMode = {read = get_displayMode, write = set_displayMode};
  __property   VARIANT_BOOL    showPeaks = {read = get_showPeaks, write = set_showPeaks};
  __property   long            peakHangTime = {read = get_peakHangTime, write = set_peakHangTime};
  __property   float           peakFallbackAcceleration = {read = get_peakFallbackAcceleration, write = set_peakFallbackAcceleration};
  __property   float           peakFallbackSpeed = {read = get_peakFallbackSpeed, write = set_peakFallbackSpeed};
  __property   float           levelFallbackAcceleration = {read = get_levelFallbackAcceleration, write = set_levelFallbackAcceleration};
  __property   float           levelFallbackSpeed = {read = get_levelFallbackSpeed, write = set_levelFallbackSpeed};
  __property   BSTR            backgroundColor = {read = get_backgroundColor, write = set_backgroundColor};
  __property   BSTR            levelColor = {read = get_levelColor, write = set_levelColor};
  __property   BSTR            peakColor = {read = get_peakColor, write = set_peakColor};
  __property   long            horizontalSpacing = {read = get_horizontalSpacing, write = set_horizontalSpacing};
  __property   long            levelWidth = {read = get_levelWidth, write = set_levelWidth};
  __property   float           levelScale = {read = get_levelScale, write = set_levelScale};
  __property   long            fadeRate = {read = get_fadeRate, write = set_fadeRate};
  __property   long            fadeMode = {read = get_fadeMode, write = set_fadeMode};
  __property   VARIANT_BOOL    transparent = {read = get_transparent, write = set_transparent};
};
typedef IBarsEffectDispT<IBarsEffect> IBarsEffectDisp;

typedef TComInterface<IWMPExternal>  TCOMIWMPExternal;

// *********************************************************************//
// DispIntf:  IWMPExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84}
// *********************************************************************//
template<class T>
class IWMPExternalDispT : public TAutoDriver<IWMPExternal>
{
public:
  IWMPExternalDispT(){}

  IWMPExternalDispT(IWMPExternal *pintf)
  {
    TAutoDriver<IWMPExternal>::Bind(pintf, false);
  }

  IWMPExternalDispT(IWMPExternalPtr pintf)
  {
    TAutoDriver<IWMPExternal>::Bind(pintf, true);
  }

  IWMPExternalDispT& operator=(IWMPExternal *pintf)
  {
    TAutoDriver<IWMPExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPExternalDispT& operator=(IWMPExternalPtr pintf)
  {
    TAutoDriver<IWMPExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPExternalDispT<IWMPExternal> IWMPExternalDisp;

typedef TComInterface<IWMPExternalColors>  TCOMIWMPExternalColors;

// *********************************************************************//
// DispIntf:  IWMPExternalColors
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D10CCDFF-472D-498C-B5FE-3630E5405E0A}
// *********************************************************************//
template<class T>
class IWMPExternalColorsDispT : public TAutoDriver<IWMPExternalColors>
{
public:
  IWMPExternalColorsDispT(){}

  IWMPExternalColorsDispT(IWMPExternalColors *pintf)
  {
    TAutoDriver<IWMPExternalColors>::Bind(pintf, false);
  }

  IWMPExternalColorsDispT(IWMPExternalColorsPtr pintf)
  {
    TAutoDriver<IWMPExternalColors>::Bind(pintf, true);
  }

  IWMPExternalColorsDispT& operator=(IWMPExternalColors *pintf)
  {
    TAutoDriver<IWMPExternalColors>::Bind(pintf, false);
    return *this;
  }

  IWMPExternalColorsDispT& operator=(IWMPExternalColorsPtr pintf)
  {
    TAutoDriver<IWMPExternalColors>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);

  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPExternalColorsDispT<IWMPExternalColors> IWMPExternalColorsDisp;

typedef TComInterface<IWMPSubscriptionServiceLimited>  TCOMIWMPSubscriptionServiceLimited;

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServiceLimited
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54DF358E-CF38-4010-99F1-F44B0E9000E5}
// *********************************************************************//
template<class T>
class IWMPSubscriptionServiceLimitedDispT : public TAutoDriver<IWMPSubscriptionServiceLimited>
{
public:
  IWMPSubscriptionServiceLimitedDispT(){}

  IWMPSubscriptionServiceLimitedDispT(IWMPSubscriptionServiceLimited *pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceLimited>::Bind(pintf, false);
  }

  IWMPSubscriptionServiceLimitedDispT(IWMPSubscriptionServiceLimitedPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceLimited>::Bind(pintf, true);
  }

  IWMPSubscriptionServiceLimitedDispT& operator=(IWMPSubscriptionServiceLimited *pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceLimited>::Bind(pintf, false);
    return *this;
  }

  IWMPSubscriptionServiceLimitedDispT& operator=(IWMPSubscriptionServiceLimitedPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceLimited>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, BSTR bstrTaskPane/*[in]*/
                                                 , BSTR bstrParams/*[in]*/);
  HRESULT         __fastcall set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/);
  HRESULT         __fastcall get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/);
  BSTR            __fastcall get_SelectedTaskPane(void);
  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);

  __property   BSTR            SelectedTaskPane = {read = get_SelectedTaskPane, write = set_SelectedTaskPane};

  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPSubscriptionServiceLimitedDispT<IWMPSubscriptionServiceLimited> IWMPSubscriptionServiceLimitedDisp;

typedef TComInterface<IWMPSubscriptionServiceExternal>  TCOMIWMPSubscriptionServiceExternal;

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServiceExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E922378-EE70-4CEB-BBAB-CE7CE4A04816}
// *********************************************************************//
template<class T>
class IWMPSubscriptionServiceExternalDispT : public TAutoDriver<IWMPSubscriptionServiceExternal>
{
public:
  IWMPSubscriptionServiceExternalDispT(){}

  IWMPSubscriptionServiceExternalDispT(IWMPSubscriptionServiceExternal *pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceExternal>::Bind(pintf, false);
  }

  IWMPSubscriptionServiceExternalDispT(IWMPSubscriptionServiceExternalPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceExternal>::Bind(pintf, true);
  }

  IWMPSubscriptionServiceExternalDispT& operator=(IWMPSubscriptionServiceExternal *pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPSubscriptionServiceExternalDispT& operator=(IWMPSubscriptionServiceExternalPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServiceExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_DownloadManager(Wmplib_tlb::IWMPDownloadManager** ppDownloadMgr/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadManagerPtr __fastcall get_DownloadManager(void);
  HRESULT         __fastcall NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, BSTR bstrTaskPane/*[in]*/
                                                 , BSTR bstrParams/*[in]*/);
  HRESULT         __fastcall set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/);
  HRESULT         __fastcall get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/);
  BSTR            __fastcall get_SelectedTaskPane(void);
  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);

  __property   Wmplib_tlb::IWMPDownloadManagerPtr DownloadManager = {read = get_DownloadManager};

  __property   BSTR            SelectedTaskPane = {read = get_SelectedTaskPane, write = set_SelectedTaskPane};

  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPSubscriptionServiceExternalDispT<IWMPSubscriptionServiceExternal> IWMPSubscriptionServiceExternalDisp;

typedef TComInterface<IWMPDownloadManager>  TCOMIWMPDownloadManager;

// *********************************************************************//
// DispIntf:  IWMPDownloadManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D}
// *********************************************************************//
template<class T>
class IWMPDownloadManagerDispT : public TAutoDriver<IWMPDownloadManager>
{
public:
  IWMPDownloadManagerDispT(){}

  IWMPDownloadManagerDispT(IWMPDownloadManager *pintf)
  {
    TAutoDriver<IWMPDownloadManager>::Bind(pintf, false);
  }

  IWMPDownloadManagerDispT(IWMPDownloadManagerPtr pintf)
  {
    TAutoDriver<IWMPDownloadManager>::Bind(pintf, true);
  }

  IWMPDownloadManagerDispT& operator=(IWMPDownloadManager *pintf)
  {
    TAutoDriver<IWMPDownloadManager>::Bind(pintf, false);
    return *this;
  }

  IWMPDownloadManagerDispT& operator=(IWMPDownloadManagerPtr pintf)
  {
    TAutoDriver<IWMPDownloadManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall getDownloadCollection(long lCollectionId/*[in]*/, 
                                                   Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadCollection* __fastcall getDownloadCollection(long lCollectionId/*[in]*/);
  HRESULT         __fastcall createDownloadCollection(Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadCollection* __fastcall createDownloadCollection(void);

};
typedef IWMPDownloadManagerDispT<IWMPDownloadManager> IWMPDownloadManagerDisp;

typedef TComInterface<IWMPDownloadCollection>  TCOMIWMPDownloadCollection;

// *********************************************************************//
// DispIntf:  IWMPDownloadCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A319C7F-85F9-436C-B88E-82FD88000E1C}
// *********************************************************************//
template<class T>
class IWMPDownloadCollectionDispT : public TAutoDriver<IWMPDownloadCollection>
{
public:
  IWMPDownloadCollectionDispT(){}

  IWMPDownloadCollectionDispT(IWMPDownloadCollection *pintf)
  {
    TAutoDriver<IWMPDownloadCollection>::Bind(pintf, false);
  }

  IWMPDownloadCollectionDispT(IWMPDownloadCollectionPtr pintf)
  {
    TAutoDriver<IWMPDownloadCollection>::Bind(pintf, true);
  }

  IWMPDownloadCollectionDispT& operator=(IWMPDownloadCollection *pintf)
  {
    TAutoDriver<IWMPDownloadCollection>::Bind(pintf, false);
    return *this;
  }

  IWMPDownloadCollectionDispT& operator=(IWMPDownloadCollectionPtr pintf)
  {
    TAutoDriver<IWMPDownloadCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ID(long* plId/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_count(long* plCount/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall Item(long lItem/*[in]*/, 
                                  Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadItem2* __fastcall Item(long lItem/*[in]*/);
  HRESULT         __fastcall startDownload(BSTR bstrSourceURL/*[in]*/, BSTR bstrType/*[in]*/, 
                                           Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadItem2* __fastcall startDownload(BSTR bstrSourceURL/*[in]*/, 
                                                          BSTR bstrType/*[in]*/);
  HRESULT         __fastcall removeItem(long lItem/*[in]*/);
  HRESULT         __fastcall clear();

  __property   long            ID = {read = get_ID};
  __property   long            count = {read = get_count};
};
typedef IWMPDownloadCollectionDispT<IWMPDownloadCollection> IWMPDownloadCollectionDisp;

typedef TComInterface<IWMPDownloadItem>  TCOMIWMPDownloadItem;

// *********************************************************************//
// DispIntf:  IWMPDownloadItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9470E8E-3F6B-46A9-A0A9-452815C34297}
// *********************************************************************//
template<class T>
class IWMPDownloadItemDispT : public TAutoDriver<IWMPDownloadItem>
{
public:
  IWMPDownloadItemDispT(){}

  IWMPDownloadItemDispT(IWMPDownloadItem *pintf)
  {
    TAutoDriver<IWMPDownloadItem>::Bind(pintf, false);
  }

  IWMPDownloadItemDispT(IWMPDownloadItemPtr pintf)
  {
    TAutoDriver<IWMPDownloadItem>::Bind(pintf, true);
  }

  IWMPDownloadItemDispT& operator=(IWMPDownloadItem *pintf)
  {
    TAutoDriver<IWMPDownloadItem>::Bind(pintf, false);
    return *this;
  }

  IWMPDownloadItemDispT& operator=(IWMPDownloadItemPtr pintf)
  {
    TAutoDriver<IWMPDownloadItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_sourceURL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_sourceURL(void);
  HRESULT         __fastcall get_size(long* plSize/*[out,retval]*/);
  long            __fastcall get_size(void);
  HRESULT         __fastcall get_type(BSTR* pbstrType/*[out,retval]*/);
  BSTR            __fastcall get_type(void);
  HRESULT         __fastcall get_progress(long* plProgress/*[out,retval]*/);
  long            __fastcall get_progress(void);
  HRESULT         __fastcall get_downloadState(Wmplib_tlb::WMPSubscriptionDownloadState* pwmpsdls/*[out,retval]*/);
  Wmplib_tlb::WMPSubscriptionDownloadState __fastcall get_downloadState(void);
  HRESULT         __fastcall pause();
  HRESULT         __fastcall resume();
  HRESULT         __fastcall cancel();

  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   long            size = {read = get_size};
  __property   BSTR            type = {read = get_type};
  __property   long            progress = {read = get_progress};
  __property   Wmplib_tlb::WMPSubscriptionDownloadState downloadState = {read = get_downloadState};
};
typedef IWMPDownloadItemDispT<IWMPDownloadItem> IWMPDownloadItemDisp;

typedef TComInterface<IWMPDownloadItem2>  TCOMIWMPDownloadItem2;

// *********************************************************************//
// DispIntf:  IWMPDownloadItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9FBB3336-6DA3-479D-B8FF-67D46E20A987}
// *********************************************************************//
template<class T>
class IWMPDownloadItem2DispT : public TAutoDriver<IWMPDownloadItem2>
{
public:
  IWMPDownloadItem2DispT(){}

  IWMPDownloadItem2DispT(IWMPDownloadItem2 *pintf)
  {
    TAutoDriver<IWMPDownloadItem2>::Bind(pintf, false);
  }

  IWMPDownloadItem2DispT(IWMPDownloadItem2Ptr pintf)
  {
    TAutoDriver<IWMPDownloadItem2>::Bind(pintf, true);
  }

  IWMPDownloadItem2DispT& operator=(IWMPDownloadItem2 *pintf)
  {
    TAutoDriver<IWMPDownloadItem2>::Bind(pintf, false);
    return *this;
  }

  IWMPDownloadItem2DispT& operator=(IWMPDownloadItem2Ptr pintf)
  {
    TAutoDriver<IWMPDownloadItem2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/);
  BSTR            __fastcall getItemInfo(BSTR bstrItemName/*[in]*/);
  HRESULT         __fastcall get_sourceURL(BSTR* pbstrURL/*[out,retval]*/);
  BSTR            __fastcall get_sourceURL(void);
  HRESULT         __fastcall get_size(long* plSize/*[out,retval]*/);
  long            __fastcall get_size(void);
  HRESULT         __fastcall get_type(BSTR* pbstrType/*[out,retval]*/);
  BSTR            __fastcall get_type(void);
  HRESULT         __fastcall get_progress(long* plProgress/*[out,retval]*/);
  long            __fastcall get_progress(void);
  HRESULT         __fastcall get_downloadState(Wmplib_tlb::WMPSubscriptionDownloadState* pwmpsdls/*[out,retval]*/);
  Wmplib_tlb::WMPSubscriptionDownloadState __fastcall get_downloadState(void);
  HRESULT         __fastcall pause();
  HRESULT         __fastcall resume();
  HRESULT         __fastcall cancel();


  __property   BSTR            sourceURL = {read = get_sourceURL};
  __property   long            size = {read = get_size};
  __property   BSTR            type = {read = get_type};
  __property   long            progress = {read = get_progress};
  __property   Wmplib_tlb::WMPSubscriptionDownloadState downloadState = {read = get_downloadState};
};
typedef IWMPDownloadItem2DispT<IWMPDownloadItem2> IWMPDownloadItem2Disp;

typedef TComInterface<IWMPSubscriptionServicePlayMedia>  TCOMIWMPSubscriptionServicePlayMedia;

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServicePlayMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F0248C1-62B3-42D7-B927-029119E6AD14}
// *********************************************************************//
template<class T>
class IWMPSubscriptionServicePlayMediaDispT : public TAutoDriver<IWMPSubscriptionServicePlayMedia>
{
public:
  IWMPSubscriptionServicePlayMediaDispT(){}

  IWMPSubscriptionServicePlayMediaDispT(IWMPSubscriptionServicePlayMedia *pintf)
  {
    TAutoDriver<IWMPSubscriptionServicePlayMedia>::Bind(pintf, false);
  }

  IWMPSubscriptionServicePlayMediaDispT(IWMPSubscriptionServicePlayMediaPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServicePlayMedia>::Bind(pintf, true);
  }

  IWMPSubscriptionServicePlayMediaDispT& operator=(IWMPSubscriptionServicePlayMedia *pintf)
  {
    TAutoDriver<IWMPSubscriptionServicePlayMedia>::Bind(pintf, false);
    return *this;
  }

  IWMPSubscriptionServicePlayMediaDispT& operator=(IWMPSubscriptionServicePlayMediaPtr pintf)
  {
    TAutoDriver<IWMPSubscriptionServicePlayMedia>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall playMedia(BSTR bstrURL/*[in]*/);
  HRESULT         __fastcall NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, BSTR bstrTaskPane/*[in]*/
                                                 , BSTR bstrParams/*[in]*/);
  HRESULT         __fastcall set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/);
  HRESULT         __fastcall get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/);
  BSTR            __fastcall get_SelectedTaskPane(void);
  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);


  __property   BSTR            SelectedTaskPane = {read = get_SelectedTaskPane, write = set_SelectedTaskPane};

  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPSubscriptionServicePlayMediaDispT<IWMPSubscriptionServicePlayMedia> IWMPSubscriptionServicePlayMediaDisp;

typedef TComInterface<IWMPDiscoExternal>  TCOMIWMPDiscoExternal;

// *********************************************************************//
// DispIntf:  IWMPDiscoExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A915CEA2-72DF-41E1-A576-EF0BAE5E5169}
// *********************************************************************//
template<class T>
class IWMPDiscoExternalDispT : public TAutoDriver<IWMPDiscoExternal>
{
public:
  IWMPDiscoExternalDispT(){}

  IWMPDiscoExternalDispT(IWMPDiscoExternal *pintf)
  {
    TAutoDriver<IWMPDiscoExternal>::Bind(pintf, false);
  }

  IWMPDiscoExternalDispT(IWMPDiscoExternalPtr pintf)
  {
    TAutoDriver<IWMPDiscoExternal>::Bind(pintf, true);
  }

  IWMPDiscoExternalDispT& operator=(IWMPDiscoExternal *pintf)
  {
    TAutoDriver<IWMPDiscoExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPDiscoExternalDispT& operator=(IWMPDiscoExternalPtr pintf)
  {
    TAutoDriver<IWMPDiscoExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_OnLoginChange(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall get_userLoggedIn(VARIANT_BOOL* pvbLoggedIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_userLoggedIn(void);
  HRESULT         __fastcall attemptLogin();
  HRESULT         __fastcall get_accountType(BSTR* pbstrAcctType/*[out,retval]*/);
  BSTR            __fastcall get_accountType(void);
  HRESULT         __fastcall set_OnViewChange(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall changeView(BSTR bstrLibraryLocationType/*[in]*/, 
                                        BSTR bstrLibraryLocationID/*[in]*/, BSTR bstrFilter/*[in]*/
                                        , BSTR bstrViewParams/*[in]*/);
  HRESULT         __fastcall changeViewOnlineList(BSTR bstrLibraryLocationType/*[in]*/, 
                                                  BSTR bstrLibraryLocationID/*[in]*/, 
                                                  BSTR bstrParams/*[in]*/, 
                                                  BSTR bstrFriendlyName/*[in]*/, 
                                                  BSTR bstrListType/*[in]*/, 
                                                  BSTR bstrViewMode/*[in]*/);
  HRESULT         __fastcall get_libraryLocationType(BSTR* pbstrLibraryLocationType/*[out,retval]*/);
  BSTR            __fastcall get_libraryLocationType(void);
  HRESULT         __fastcall get_libraryLocationID(BSTR* pbstrLibraryLocationID/*[out,retval]*/);
  BSTR            __fastcall get_libraryLocationID(void);
  HRESULT         __fastcall get_selectedItemType(BSTR* pbstrSelectedItemType/*[out,retval]*/);
  BSTR            __fastcall get_selectedItemType(void);
  HRESULT         __fastcall get_selectedItemID(BSTR* pbstrLibraryLocationID/*[out,retval]*/);
  BSTR            __fastcall get_selectedItemID(void);
  HRESULT         __fastcall get_filter(BSTR* pbstrFilter/*[out,retval]*/);
  BSTR            __fastcall get_filter(void);
  HRESULT         __fastcall get_task(BSTR* pbstrTask/*[out,retval]*/);
  BSTR            __fastcall get_task(void);
  HRESULT         __fastcall get_viewParameters(BSTR* pbstrViewParameters/*[out,retval]*/);
  BSTR            __fastcall get_viewParameters(void);
  HRESULT         __fastcall cancelNavigate();
  HRESULT         __fastcall showPopup(long lPopupIndex/*[in]*/, BSTR bstrParameters/*[in]*/);
  HRESULT         __fastcall addToBasket(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/);
  HRESULT         __fastcall get_basketTitle(BSTR* bstrParams/*[out,retval]*/);
  BSTR            __fastcall get_basketTitle(void);
  HRESULT         __fastcall play(BSTR bstrLibraryLocationType/*[in]*/, 
                                  BSTR bstrLibraryLocationIDs/*[in]*/);
  HRESULT         __fastcall download(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/);
  HRESULT         __fastcall buy(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/);
  HRESULT         __fastcall saveCurrentViewToLibrary(BSTR bstrFriendlyListType/*[in]*/, 
                                                      VARIANT_BOOL fDynamic/*[in]*/);
  HRESULT         __fastcall authenticate(long lAuthenticationIndex/*[in]*/);
  HRESULT         __fastcall sendMessage(BSTR bstrMsg/*[in]*/, BSTR bstrParam/*[in]*/);
  HRESULT         __fastcall set_OnSendMessageComplete(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall set_ignoreIEHistory(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall get_pluginRunning(VARIANT_BOOL* pfPluginRunning/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_pluginRunning(void);
  HRESULT         __fastcall get_templateBeingDisplayedInLocalLibrary(VARIANT_BOOL* pfTemplateDisplayed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_templateBeingDisplayedInLocalLibrary(void);
  HRESULT         __fastcall set_OnChangeViewError(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall set_OnChangeViewOnlineListError(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall get_DownloadManager(Wmplib_tlb::IWMPDownloadManager** ppDownloadMgr/*[out,retval]*/);
  Wmplib_tlb::IWMPDownloadManagerPtr __fastcall get_DownloadManager(void);
  HRESULT         __fastcall NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, BSTR bstrTaskPane/*[in]*/
                                                 , BSTR bstrParams/*[in]*/);
  HRESULT         __fastcall set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/);
  HRESULT         __fastcall get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/);
  BSTR            __fastcall get_SelectedTaskPane(void);
  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);

  __property   LPDISPATCH      OnLoginChange = {write = set_OnLoginChange};
  __property   VARIANT_BOOL    userLoggedIn = {read = get_userLoggedIn};
  __property   BSTR            accountType = {read = get_accountType};
  __property   LPDISPATCH      OnViewChange = {write = set_OnViewChange};
  __property   BSTR            libraryLocationType = {read = get_libraryLocationType};
  __property   BSTR            libraryLocationID = {read = get_libraryLocationID};
  __property   BSTR            selectedItemType = {read = get_selectedItemType};
  __property   BSTR            selectedItemID = {read = get_selectedItemID};
  __property   BSTR            filter = {read = get_filter};
  __property   BSTR            task = {read = get_task};
  __property   BSTR            viewParameters = {read = get_viewParameters};
  __property   BSTR            basketTitle = {read = get_basketTitle};
  __property   LPDISPATCH      OnSendMessageComplete = {write = set_OnSendMessageComplete};
  __property   VARIANT_BOOL    ignoreIEHistory = {write = set_ignoreIEHistory};
  __property   VARIANT_BOOL    pluginRunning = {read = get_pluginRunning};
  __property   VARIANT_BOOL    templateBeingDisplayedInLocalLibrary = {read = get_templateBeingDisplayedInLocalLibrary};
  __property   LPDISPATCH      OnChangeViewError = {write = set_OnChangeViewError};
  __property   LPDISPATCH      OnChangeViewOnlineListError = {write = set_OnChangeViewOnlineListError};

  __property   Wmplib_tlb::IWMPDownloadManagerPtr DownloadManager = {read = get_DownloadManager};

  __property   BSTR            SelectedTaskPane = {read = get_SelectedTaskPane, write = set_SelectedTaskPane};

  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPDiscoExternalDispT<IWMPDiscoExternal> IWMPDiscoExternalDisp;

typedef TComInterface<IWMPCDDVDWizardExternal>  TCOMIWMPCDDVDWizardExternal;

// *********************************************************************//
// DispIntf:  IWMPCDDVDWizardExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D7EF888-1D3C-484A-A906-9F49D99BB344}
// *********************************************************************//
template<class T>
class IWMPCDDVDWizardExternalDispT : public TAutoDriver<IWMPCDDVDWizardExternal>
{
public:
  IWMPCDDVDWizardExternalDispT(){}

  IWMPCDDVDWizardExternalDispT(IWMPCDDVDWizardExternal *pintf)
  {
    TAutoDriver<IWMPCDDVDWizardExternal>::Bind(pintf, false);
  }

  IWMPCDDVDWizardExternalDispT(IWMPCDDVDWizardExternalPtr pintf)
  {
    TAutoDriver<IWMPCDDVDWizardExternal>::Bind(pintf, true);
  }

  IWMPCDDVDWizardExternalDispT& operator=(IWMPCDDVDWizardExternal *pintf)
  {
    TAutoDriver<IWMPCDDVDWizardExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPCDDVDWizardExternalDispT& operator=(IWMPCDDVDWizardExternalPtr pintf)
  {
    TAutoDriver<IWMPCDDVDWizardExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall WriteNames(BSTR bstrTOC/*[in]*/, BSTR bstrMetadata/*[in]*/);
  HRESULT         __fastcall ReturnToMainTask();
  HRESULT         __fastcall WriteNamesEx(Wmplib_tlb::WMP_WRITENAMESEX_TYPE type/*[in]*/, 
                                          BSTR bstrTypeId/*[in]*/, BSTR bstrMetadata/*[in]*/, 
                                          VARIANT_BOOL fRenameRegroupFiles/*[in]*/);
  HRESULT         __fastcall GetMDQByRequestID(BSTR bstrRequestID/*[in]*/, 
                                               BSTR* pbstrMDQ/*[out,retval]*/);
  BSTR            __fastcall GetMDQByRequestID(BSTR bstrRequestID/*[in]*/);
  HRESULT         __fastcall EditMetadata();
  HRESULT         __fastcall IsMetadataAvailableForEdit(VARIANT_BOOL* pbIsAvailable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsMetadataAvailableForEdit(void);
  HRESULT         __fastcall BuyCD(BSTR bstrTitle/*[in]*/, BSTR bstrArtist/*[in]*/, 
                                   BSTR bstrAlbum/*[in]*/, BSTR bstrUFID/*[in]*/, 
                                   BSTR bstrWMID/*[in]*/);
  HRESULT         __fastcall get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorMedium(void);
  HRESULT         __fastcall get_appColorDark(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorDark(void);
  HRESULT         __fastcall get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHighlight(void);
  HRESULT         __fastcall get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonShadow(void);
  HRESULT         __fastcall get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorButtonHoverFace(void);
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);


  __property   BSTR            appColorMedium = {read = get_appColorMedium};
  __property   BSTR            appColorDark = {read = get_appColorDark};
  __property   BSTR            appColorButtonHighlight = {read = get_appColorButtonHighlight};
  __property   BSTR            appColorButtonShadow = {read = get_appColorButtonShadow};
  __property   BSTR            appColorButtonHoverFace = {read = get_appColorButtonHoverFace};

  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPCDDVDWizardExternalDispT<IWMPCDDVDWizardExternal> IWMPCDDVDWizardExternalDisp;

typedef TComInterface<IWMPBaseExternal>  TCOMIWMPBaseExternal;

// *********************************************************************//
// DispIntf:  IWMPBaseExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F81B2A59-02BC-4003-8B2F-C124AF66FC66}
// *********************************************************************//
template<class T>
class IWMPBaseExternalDispT : public TAutoDriver<IWMPBaseExternal>
{
public:
  IWMPBaseExternalDispT(){}

  IWMPBaseExternalDispT(IWMPBaseExternal *pintf)
  {
    TAutoDriver<IWMPBaseExternal>::Bind(pintf, false);
  }

  IWMPBaseExternalDispT(IWMPBaseExternalPtr pintf)
  {
    TAutoDriver<IWMPBaseExternal>::Bind(pintf, true);
  }

  IWMPBaseExternalDispT& operator=(IWMPBaseExternal *pintf)
  {
    TAutoDriver<IWMPBaseExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPBaseExternalDispT& operator=(IWMPBaseExternalPtr pintf)
  {
    TAutoDriver<IWMPBaseExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);


  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPBaseExternalDispT<IWMPBaseExternal> IWMPBaseExternalDisp;

typedef TComInterface<IWMPOfflineExternal>  TCOMIWMPOfflineExternal;

// *********************************************************************//
// DispIntf:  IWMPOfflineExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3148E685-B243-423D-8341-8480D6EFF674}
// *********************************************************************//
template<class T>
class IWMPOfflineExternalDispT : public TAutoDriver<IWMPOfflineExternal>
{
public:
  IWMPOfflineExternalDispT(){}

  IWMPOfflineExternalDispT(IWMPOfflineExternal *pintf)
  {
    TAutoDriver<IWMPOfflineExternal>::Bind(pintf, false);
  }

  IWMPOfflineExternalDispT(IWMPOfflineExternalPtr pintf)
  {
    TAutoDriver<IWMPOfflineExternal>::Bind(pintf, true);
  }

  IWMPOfflineExternalDispT& operator=(IWMPOfflineExternal *pintf)
  {
    TAutoDriver<IWMPOfflineExternal>::Bind(pintf, false);
    return *this;
  }

  IWMPOfflineExternalDispT& operator=(IWMPOfflineExternalPtr pintf)
  {
    TAutoDriver<IWMPOfflineExternal>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall forceOnline();
  HRESULT         __fastcall get_version(BSTR* pBSTR/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_appColorLight(BSTR* pbstrColor/*[out,retval]*/);
  BSTR            __fastcall get_appColorLight(void);
  HRESULT         __fastcall set_OnColorChange(LPDISPATCH Param1/*[in]*/);


  __property   BSTR            version = {read = get_version};
  __property   BSTR            appColorLight = {read = get_appColorLight};
  __property   LPDISPATCH      OnColorChange = {write = set_OnColorChange};
};
typedef IWMPOfflineExternalDispT<IWMPOfflineExternal> IWMPOfflineExternalDisp;

typedef TComInterface<IWMPRemoteUPnPService>  TCOMIWMPRemoteUPnPService;

// *********************************************************************//
// DispIntf:  IWMPRemoteUPnPService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17E5DC63-E296-4EDE-B9CC-CF57D18ED10E}
// *********************************************************************//
template<class T>
class IWMPRemoteUPnPServiceDispT : public TAutoDriver<IWMPRemoteUPnPService>
{
public:
  IWMPRemoteUPnPServiceDispT(){}

  IWMPRemoteUPnPServiceDispT(IWMPRemoteUPnPService *pintf)
  {
    TAutoDriver<IWMPRemoteUPnPService>::Bind(pintf, false);
  }

  IWMPRemoteUPnPServiceDispT(IWMPRemoteUPnPServicePtr pintf)
  {
    TAutoDriver<IWMPRemoteUPnPService>::Bind(pintf, true);
  }

  IWMPRemoteUPnPServiceDispT& operator=(IWMPRemoteUPnPService *pintf)
  {
    TAutoDriver<IWMPRemoteUPnPService>::Bind(pintf, false);
    return *this;
  }

  IWMPRemoteUPnPServiceDispT& operator=(IWMPRemoteUPnPServicePtr pintf)
  {
    TAutoDriver<IWMPRemoteUPnPService>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall RegisterEvent(BSTR bstrVariableName/*[in]*/, 
                                           LPDISPATCH pdispJScriptCode/*[in]*/);
  HRESULT         __fastcall UnregisterEvent(BSTR bstrVariableName/*[in]*/);
  HRESULT         __fastcall ID(BSTR* pbstrID/*[out,retval]*/);
  BSTR            __fastcall ID(void);
  HRESULT         __fastcall InvokeAction(BSTR bstrActionName/*[in]*/, 
                                          LPDISPATCH pdispInArgs/*[in]*/, 
                                          LPDISPATCH pdispOutArgs/*[in]*/, 
                                          LPDISPATCH pdispRetVals/*[in]*/);
  HRESULT         __fastcall LastTransportStatus(long* plValue/*[out,retval]*/);
  long            __fastcall LastTransportStatus(void);
  HRESULT         __fastcall QueryStateVariable(BSTR bstrVariableName/*[in]*/, 
                                                VARIANT* pvarValue/*[out,retval]*/);
  VARIANT         __fastcall QueryStateVariable(BSTR bstrVariableName/*[in]*/);
  HRESULT         __fastcall ServiceTypeIdentifier(BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall ServiceTypeIdentifier(void);

};
typedef IWMPRemoteUPnPServiceDispT<IWMPRemoteUPnPService> IWMPRemoteUPnPServiceDisp;

typedef TComInterface<IWMPRemoteUPnPDevice>  TCOMIWMPRemoteUPnPDevice;

// *********************************************************************//
// DispIntf:  IWMPRemoteUPnPDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76F13F00-6E17-4D98-BE2D-D2A84CFF5BFD}
// *********************************************************************//
template<class T>
class IWMPRemoteUPnPDeviceDispT : public TAutoDriver<IWMPRemoteUPnPDevice>
{
public:
  IWMPRemoteUPnPDeviceDispT(){}

  IWMPRemoteUPnPDeviceDispT(IWMPRemoteUPnPDevice *pintf)
  {
    TAutoDriver<IWMPRemoteUPnPDevice>::Bind(pintf, false);
  }

  IWMPRemoteUPnPDeviceDispT(IWMPRemoteUPnPDevicePtr pintf)
  {
    TAutoDriver<IWMPRemoteUPnPDevice>::Bind(pintf, true);
  }

  IWMPRemoteUPnPDeviceDispT& operator=(IWMPRemoteUPnPDevice *pintf)
  {
    TAutoDriver<IWMPRemoteUPnPDevice>::Bind(pintf, false);
    return *this;
  }

  IWMPRemoteUPnPDeviceDispT& operator=(IWMPRemoteUPnPDevicePtr pintf)
  {
    TAutoDriver<IWMPRemoteUPnPDevice>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall friendlyName(BSTR* pbstrService/*[out,retval]*/);
  BSTR            __fastcall friendlyName(void);
  HRESULT         __fastcall FindService(BSTR bstrService/*[in]*/, 
                                         LPDISPATCH* ppdispService/*[out,retval]*/);
  LPDISPATCH      __fastcall FindService(BSTR bstrService/*[in]*/);
  HRESULT         __fastcall getDevice(LPUNKNOWN* ppDevice);

};
typedef IWMPRemoteUPnPDeviceDispT<IWMPRemoteUPnPDevice> IWMPRemoteUPnPDeviceDisp;

typedef TComInterface<IWMPRemoteDeviceController>  TCOMIWMPRemoteDeviceController;

// *********************************************************************//
// DispIntf:  IWMPRemoteDeviceController
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {968F36CA-CB43-4F6A-A03B-66A9C05A93EE}
// *********************************************************************//
template<class T>
class IWMPRemoteDeviceControllerDispT : public TAutoDriver<IWMPRemoteDeviceController>
{
public:
  IWMPRemoteDeviceControllerDispT(){}

  IWMPRemoteDeviceControllerDispT(IWMPRemoteDeviceController *pintf)
  {
    TAutoDriver<IWMPRemoteDeviceController>::Bind(pintf, false);
  }

  IWMPRemoteDeviceControllerDispT(IWMPRemoteDeviceControllerPtr pintf)
  {
    TAutoDriver<IWMPRemoteDeviceController>::Bind(pintf, true);
  }

  IWMPRemoteDeviceControllerDispT& operator=(IWMPRemoteDeviceController *pintf)
  {
    TAutoDriver<IWMPRemoteDeviceController>::Bind(pintf, false);
    return *this;
  }

  IWMPRemoteDeviceControllerDispT& operator=(IWMPRemoteDeviceControllerPtr pintf)
  {
    TAutoDriver<IWMPRemoteDeviceController>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall RegisterDeviceSwitch(LPDISPATCH pdispJScriptFunction/*[in]*/);
  HRESULT         __fastcall SyncDeviceList();
  HRESULT         __fastcall get_numberDevices(long* plNumberDevices/*[out,retval]*/);
  long            __fastcall get_numberDevices(void);
  HRESULT         __fastcall getDevice(long lIndex/*[in]*/, LPDISPATCH* ppDevice/*[out,retval]*/);
  LPDISPATCH      __fastcall getDevice(long lIndex/*[in]*/);
  HRESULT         __fastcall SwitchUIToMatchDevice(LPDISPATCH pdispDevice/*[in]*/);

  __property   long            numberDevices = {read = get_numberDevices};
};
typedef IWMPRemoteDeviceControllerDispT<IWMPRemoteDeviceController> IWMPRemoteDeviceControllerDisp;

typedef TComInterface<IUPnPService_IWMPUPnPAVTransportDual>  TCOMIUPnPService_IWMPUPnPAVTransportDual;

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPAVTransportDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EA1DE14-E288-4958-A23C-942634A27EB5}
// *********************************************************************//
template<class T>
class IUPnPService_IWMPUPnPAVTransportDualDispT : public TAutoDriver<IUPnPService_IWMPUPnPAVTransportDual>
{
public:
  IUPnPService_IWMPUPnPAVTransportDualDispT(){}

  IUPnPService_IWMPUPnPAVTransportDualDispT(IUPnPService_IWMPUPnPAVTransportDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPAVTransportDual>::Bind(pintf, false);
  }

  IUPnPService_IWMPUPnPAVTransportDualDispT(IUPnPService_IWMPUPnPAVTransportDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPAVTransportDual>::Bind(pintf, true);
  }

  IUPnPService_IWMPUPnPAVTransportDualDispT& operator=(IUPnPService_IWMPUPnPAVTransportDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPAVTransportDual>::Bind(pintf, false);
    return *this;
  }

  IUPnPService_IWMPUPnPAVTransportDualDispT& operator=(IUPnPService_IWMPUPnPAVTransportDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPAVTransportDual>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_TransportState(BSTR* pTransportState/*[out,retval]*/);
  BSTR            __fastcall get_TransportState(void);
  HRESULT         __fastcall get_TransportStatus(BSTR* pTransportStatus/*[out,retval]*/);
  BSTR            __fastcall get_TransportStatus(void);
  HRESULT         __fastcall get_PlaybackStorageMedium(BSTR* pPlaybackStorageMedium/*[out,retval]*/);
  BSTR            __fastcall get_PlaybackStorageMedium(void);
  HRESULT         __fastcall get_RecordStorageMedium(BSTR* pRecordStorageMedium/*[out,retval]*/);
  BSTR            __fastcall get_RecordStorageMedium(void);
  HRESULT         __fastcall get_PossiblePlaybackStorageMedia(BSTR* pPossiblePlaybackStorageMedia/*[out,retval]*/);
  BSTR            __fastcall get_PossiblePlaybackStorageMedia(void);
  HRESULT         __fastcall get_PossibleRecordStorageMedia(BSTR* pPossibleRecordStorageMedia/*[out,retval]*/);
  BSTR            __fastcall get_PossibleRecordStorageMedia(void);
  HRESULT         __fastcall get_CurrentPlayMode(BSTR* pCurrentPlayMode/*[out,retval]*/);
  BSTR            __fastcall get_CurrentPlayMode(void);
  HRESULT         __fastcall get_TransportPlaySpeed(BSTR* pTransportPlaySpeed/*[out,retval]*/);
  BSTR            __fastcall get_TransportPlaySpeed(void);
  HRESULT         __fastcall get_RecordMediumWriteStatus(BSTR* pRecordMediumWriteStatus/*[out,retval]*/);
  BSTR            __fastcall get_RecordMediumWriteStatus(void);
  HRESULT         __fastcall get_CurrentRecordQualityMode(BSTR* pCurrentRecordQualityMode/*[out,retval]*/);
  BSTR            __fastcall get_CurrentRecordQualityMode(void);
  HRESULT         __fastcall get_PossibleRecordQualityModes(BSTR* pPossibleRecordQualityModes/*[out,retval]*/);
  BSTR            __fastcall get_PossibleRecordQualityModes(void);
  HRESULT         __fastcall get_NumberOfTracks(unsigned_long* pNumberOfTracks/*[out,retval]*/);
  unsigned_long   __fastcall get_NumberOfTracks(void);
  HRESULT         __fastcall get_CurrentTrack(unsigned_long* pCurrentTrack/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentTrack(void);
  HRESULT         __fastcall get_CurrentTrackDuration(BSTR* pCurrentTrackDuration/*[out,retval]*/);
  BSTR            __fastcall get_CurrentTrackDuration(void);
  HRESULT         __fastcall get_CurrentMediaDuration(BSTR* pCurrentMediaDuration/*[out,retval]*/);
  BSTR            __fastcall get_CurrentMediaDuration(void);
  HRESULT         __fastcall get_CurrentTrackMetaData(BSTR* pCurrentTrackMetaData/*[out,retval]*/);
  BSTR            __fastcall get_CurrentTrackMetaData(void);
  HRESULT         __fastcall get_CurrentTrackURI(BSTR* pCurrentTrackURI/*[out,retval]*/);
  BSTR            __fastcall get_CurrentTrackURI(void);
  HRESULT         __fastcall get_AVTransportURI(BSTR* pAVTransportURI/*[out,retval]*/);
  BSTR            __fastcall get_AVTransportURI(void);
  HRESULT         __fastcall get_AVTransportURIMetaData(BSTR* pAVTransportURIMetaData/*[out,retval]*/);
  BSTR            __fastcall get_AVTransportURIMetaData(void);
  HRESULT         __fastcall get_NextAVTransportURI(BSTR* pNextAVTransportURI/*[out,retval]*/);
  BSTR            __fastcall get_NextAVTransportURI(void);
  HRESULT         __fastcall get_NextAVTransportURIMetaData(BSTR* pNextAVTransportURIMetaData/*[out,retval]*/);
  BSTR            __fastcall get_NextAVTransportURIMetaData(void);
  HRESULT         __fastcall get_RelativeTimePosition(BSTR* pRelativeTimePosition/*[out,retval]*/);
  BSTR            __fastcall get_RelativeTimePosition(void);
  HRESULT         __fastcall get_AbsoluteTimePosition(BSTR* pAbsoluteTimePosition/*[out,retval]*/);
  BSTR            __fastcall get_AbsoluteTimePosition(void);
  HRESULT         __fastcall get_RelativeCounterPosition(long* pRelativeCounterPosition/*[out,retval]*/);
  long            __fastcall get_RelativeCounterPosition(void);
  HRESULT         __fastcall get_AbsoluteCounterPosition(long* pAbsoluteCounterPosition/*[out,retval]*/);
  long            __fastcall get_AbsoluteCounterPosition(void);
  HRESULT         __fastcall get_CurrentTransportActions(BSTR* pCurrentTransportActions/*[out,retval]*/);
  BSTR            __fastcall get_CurrentTransportActions(void);
  HRESULT         __fastcall get_LastChange(BSTR* pLastChange/*[out,retval]*/);
  BSTR            __fastcall get_LastChange(void);
  HRESULT         __fastcall get_A_ARG_TYPE_SeekMode(BSTR* pA_ARG_TYPE_SeekMode/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_SeekMode(void);
  HRESULT         __fastcall get_A_ARG_TYPE_SeekTarget(BSTR* pA_ARG_TYPE_SeekTarget/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_SeekTarget(void);
  HRESULT         __fastcall get_A_ARG_TYPE_InstanceID(unsigned_long* pA_ARG_TYPE_InstanceID/*[out,retval]*/);
  unsigned_long   __fastcall get_A_ARG_TYPE_InstanceID(void);
  HRESULT         __fastcall SetAVTransportURI(unsigned_long InstanceID/*[in]*/, 
                                               BSTR CurrentURI/*[in]*/, 
                                               BSTR CurrentURIMetaData/*[in]*/);
  HRESULT         __fastcall SetNextAVTransportURI(unsigned_long InstanceID/*[in]*/, 
                                                   BSTR NextURI/*[in]*/, 
                                                   BSTR NextURIMetaData/*[in]*/);
  HRESULT         __fastcall GetMediaInfo(unsigned_long InstanceID/*[in]*/, 
                                          unsigned_long* pNrTracks/*[in,out]*/, 
                                          BSTR* pMediaDuration/*[in,out]*/, 
                                          BSTR* pCurrentURI/*[in,out]*/, 
                                          BSTR* pCurrentURIMetaData/*[in,out]*/, 
                                          BSTR* pNextURI/*[in,out]*/, 
                                          BSTR* pNextURIMetaData/*[in,out]*/, 
                                          BSTR* pPlayMedium/*[in,out]*/, 
                                          BSTR* pRecordMedium/*[in,out]*/, 
                                          BSTR* pWriteStatus/*[in,out]*/);
  HRESULT         __fastcall GetTransportInfo(unsigned_long InstanceID/*[in]*/, 
                                              BSTR* pCurrentTransportState/*[in,out]*/, 
                                              BSTR* pCurrentTransportStatus/*[in,out]*/, 
                                              BSTR* pCurrentSpeed/*[in,out]*/);
  HRESULT         __fastcall GetPositionInfo(unsigned_long InstanceID/*[in]*/, 
                                             unsigned_long* pTrack/*[in,out]*/, 
                                             BSTR* pTrackDuration/*[in,out]*/, 
                                             BSTR* pTrackMetaData/*[in,out]*/, 
                                             BSTR* pTrackURI/*[in,out]*/, BSTR* pRelTime/*[in,out]*/
                                             , BSTR* pAbsTime/*[in,out]*/, 
                                             long* pRelCount/*[in,out]*/, 
                                             long* pAbsCount/*[in,out]*/);
  HRESULT         __fastcall GetDeviceCapabilities(unsigned_long InstanceID/*[in]*/, 
                                                   BSTR* pPlayMedia/*[in,out]*/, 
                                                   BSTR* pRecMedia/*[in,out]*/, 
                                                   BSTR* pRecQualityModes/*[in,out]*/);
  HRESULT         __fastcall GetTransportSettings(unsigned_long InstanceID/*[in]*/, 
                                                  BSTR* pPlayMode/*[in,out]*/, 
                                                  BSTR* pRecQualityMode/*[in,out]*/);
  HRESULT         __fastcall stop(unsigned_long InstanceID/*[in]*/);
  HRESULT         __fastcall play(unsigned_long InstanceID/*[in]*/, BSTR Speed/*[in]*/);
  HRESULT         __fastcall pause(unsigned_long InstanceID/*[in]*/);
  HRESULT         __fastcall Record(unsigned_long InstanceID/*[in]*/);
  HRESULT         __fastcall Seek(unsigned_long InstanceID/*[in]*/, BSTR Unit/*[in]*/, 
                                  BSTR Target/*[in]*/);
  HRESULT         __fastcall next(unsigned_long InstanceID/*[in]*/);
  HRESULT         __fastcall previous(unsigned_long InstanceID/*[in]*/);
  HRESULT         __fastcall SetPlayMode(unsigned_long InstanceID/*[in]*/, BSTR NewPlayMode/*[in]*/);
  HRESULT         __fastcall SetRecordQualityMode(unsigned_long InstanceID/*[in]*/, 
                                                  BSTR NewRecordQualityMode/*[in]*/);
  HRESULT         __fastcall GetCurrentTransportActions(unsigned_long InstanceID/*[in]*/, 
                                                        BSTR* pActions/*[in,out]*/);

  __property   BSTR            TransportState = {read = get_TransportState};
  __property   BSTR            TransportStatus = {read = get_TransportStatus};
  __property   BSTR            PlaybackStorageMedium = {read = get_PlaybackStorageMedium};
  __property   BSTR            RecordStorageMedium = {read = get_RecordStorageMedium};
  __property   BSTR            PossiblePlaybackStorageMedia = {read = get_PossiblePlaybackStorageMedia};
  __property   BSTR            PossibleRecordStorageMedia = {read = get_PossibleRecordStorageMedia};
  __property   BSTR            CurrentPlayMode = {read = get_CurrentPlayMode};
  __property   BSTR            TransportPlaySpeed = {read = get_TransportPlaySpeed};
  __property   BSTR            RecordMediumWriteStatus = {read = get_RecordMediumWriteStatus};
  __property   BSTR            CurrentRecordQualityMode = {read = get_CurrentRecordQualityMode};
  __property   BSTR            PossibleRecordQualityModes = {read = get_PossibleRecordQualityModes};
  __property   unsigned_long   NumberOfTracks = {read = get_NumberOfTracks};
  __property   unsigned_long   CurrentTrack = {read = get_CurrentTrack};
  __property   BSTR            CurrentTrackDuration = {read = get_CurrentTrackDuration};
  __property   BSTR            CurrentMediaDuration = {read = get_CurrentMediaDuration};
  __property   BSTR            CurrentTrackMetaData = {read = get_CurrentTrackMetaData};
  __property   BSTR            CurrentTrackURI = {read = get_CurrentTrackURI};
  __property   BSTR            AVTransportURI = {read = get_AVTransportURI};
  __property   BSTR            AVTransportURIMetaData = {read = get_AVTransportURIMetaData};
  __property   BSTR            NextAVTransportURI = {read = get_NextAVTransportURI};
  __property   BSTR            NextAVTransportURIMetaData = {read = get_NextAVTransportURIMetaData};
  __property   BSTR            RelativeTimePosition = {read = get_RelativeTimePosition};
  __property   BSTR            AbsoluteTimePosition = {read = get_AbsoluteTimePosition};
  __property   long            RelativeCounterPosition = {read = get_RelativeCounterPosition};
  __property   long            AbsoluteCounterPosition = {read = get_AbsoluteCounterPosition};
  __property   BSTR            CurrentTransportActions = {read = get_CurrentTransportActions};
  __property   BSTR            LastChange = {read = get_LastChange};
  __property   BSTR            A_ARG_TYPE_SeekMode = {read = get_A_ARG_TYPE_SeekMode};
  __property   BSTR            A_ARG_TYPE_SeekTarget = {read = get_A_ARG_TYPE_SeekTarget};
  __property   unsigned_long   A_ARG_TYPE_InstanceID = {read = get_A_ARG_TYPE_InstanceID};
};
typedef IUPnPService_IWMPUPnPAVTransportDualDispT<IUPnPService_IWMPUPnPAVTransportDual> IUPnPService_IWMPUPnPAVTransportDualDisp;

typedef TComInterface<IUPnPService_IWMPUPnPBinaryControlDual>  TCOMIUPnPService_IWMPUPnPBinaryControlDual;

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPBinaryControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7CAD1D24-EDED-47FA-A1D8-4628FBE5638C}
// *********************************************************************//
template<class T>
class IUPnPService_IWMPUPnPBinaryControlDualDispT : public TAutoDriver<IUPnPService_IWMPUPnPBinaryControlDual>
{
public:
  IUPnPService_IWMPUPnPBinaryControlDualDispT(){}

  IUPnPService_IWMPUPnPBinaryControlDualDispT(IUPnPService_IWMPUPnPBinaryControlDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPBinaryControlDual>::Bind(pintf, false);
  }

  IUPnPService_IWMPUPnPBinaryControlDualDispT(IUPnPService_IWMPUPnPBinaryControlDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPBinaryControlDual>::Bind(pintf, true);
  }

  IUPnPService_IWMPUPnPBinaryControlDualDispT& operator=(IUPnPService_IWMPUPnPBinaryControlDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPBinaryControlDual>::Bind(pintf, false);
    return *this;
  }

  IUPnPService_IWMPUPnPBinaryControlDualDispT& operator=(IUPnPService_IWMPUPnPBinaryControlDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPBinaryControlDual>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_CurrentState(BSTR* pCurrentState/*[out,retval]*/);
  BSTR            __fastcall get_CurrentState(void);
  HRESULT         __fastcall GetCurrentState(BSTR* pcurrState/*[out,retval]*/);
  BSTR            __fastcall GetCurrentState(void);
  HRESULT         __fastcall SetCurrentState(BSTR NewState/*[in]*/);
  HRESULT         __fastcall SetOn();
  HRESULT         __fastcall SetOff();

  __property   BSTR            CurrentState = {read = get_CurrentState};
};
typedef IUPnPService_IWMPUPnPBinaryControlDualDispT<IUPnPService_IWMPUPnPBinaryControlDual> IUPnPService_IWMPUPnPBinaryControlDualDisp;

typedef TComInterface<IUPnPService_IWMPUPnPVariableControlDual>  TCOMIUPnPService_IWMPUPnPVariableControlDual;

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPVariableControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A09862E-47B1-4D17-94EA-2BDE3014DD42}
// *********************************************************************//
template<class T>
class IUPnPService_IWMPUPnPVariableControlDualDispT : public TAutoDriver<IUPnPService_IWMPUPnPVariableControlDual>
{
public:
  IUPnPService_IWMPUPnPVariableControlDualDispT(){}

  IUPnPService_IWMPUPnPVariableControlDualDispT(IUPnPService_IWMPUPnPVariableControlDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPVariableControlDual>::Bind(pintf, false);
  }

  IUPnPService_IWMPUPnPVariableControlDualDispT(IUPnPService_IWMPUPnPVariableControlDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPVariableControlDual>::Bind(pintf, true);
  }

  IUPnPService_IWMPUPnPVariableControlDualDispT& operator=(IUPnPService_IWMPUPnPVariableControlDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPVariableControlDual>::Bind(pintf, false);
    return *this;
  }

  IUPnPService_IWMPUPnPVariableControlDualDispT& operator=(IUPnPService_IWMPUPnPVariableControlDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPVariableControlDual>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_CurrentPercent(float* pCurrentPercent/*[out,retval]*/);
  float           __fastcall get_CurrentPercent(void);
  HRESULT         __fastcall get_CurrentValue(float* pCurrentValue/*[out,retval]*/);
  float           __fastcall get_CurrentValue(void);
  HRESULT         __fastcall get_UnitOfMeasure(BSTR* pUnitOfMeasure/*[out,retval]*/);
  BSTR            __fastcall get_UnitOfMeasure(void);
  HRESULT         __fastcall get_MinValue(float* pMinValue/*[out,retval]*/);
  float           __fastcall get_MinValue(void);
  HRESULT         __fastcall get_MaxValue(float* pMaxValue/*[out,retval]*/);
  float           __fastcall get_MaxValue(void);
  HRESULT         __fastcall get_NumberOfSteps(unsigned_long* pNumberOfSteps/*[out,retval]*/);
  unsigned_long   __fastcall get_NumberOfSteps(void);
  HRESULT         __fastcall GetCurrentPercent(float* pcurPercent/*[in,out]*/);
  HRESULT         __fastcall GetCurrentValue(float* pcurValue/*[in,out]*/);
  HRESULT         __fastcall GetUnitOfMeasure(BSTR* pUnitOfMeasure/*[in,out]*/);
  HRESULT         __fastcall GetMinValue(float* pMinValue/*[in,out]*/);
  HRESULT         __fastcall GetMaxValue(float* pMaxValue/*[in,out]*/);
  HRESULT         __fastcall GetNumberOfSteps(unsigned_long* pNumberOfSteps/*[in,out]*/);
  HRESULT         __fastcall SetCurrentPercent(float newCurrentPercent/*[in]*/);
  HRESULT         __fastcall SetCurrentValue(float newCurrentValue/*[in]*/);

  __property   float           CurrentPercent = {read = get_CurrentPercent};
  __property   float           CurrentValue = {read = get_CurrentValue};
  __property   BSTR            UnitOfMeasure = {read = get_UnitOfMeasure};
  __property   float           MinValue = {read = get_MinValue};
  __property   float           MaxValue = {read = get_MaxValue};
  __property   unsigned_long   NumberOfSteps = {read = get_NumberOfSteps};
};
typedef IUPnPService_IWMPUPnPVariableControlDualDispT<IUPnPService_IWMPUPnPVariableControlDual> IUPnPService_IWMPUPnPVariableControlDualDisp;

typedef TComInterface<IUPnPService_IWMPUPnPConnectionManagerDual>  TCOMIUPnPService_IWMPUPnPConnectionManagerDual;

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPConnectionManagerDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AF41667-542C-42EA-BF53-DC101168C503}
// *********************************************************************//
template<class T>
class IUPnPService_IWMPUPnPConnectionManagerDualDispT : public TAutoDriver<IUPnPService_IWMPUPnPConnectionManagerDual>
{
public:
  IUPnPService_IWMPUPnPConnectionManagerDualDispT(){}

  IUPnPService_IWMPUPnPConnectionManagerDualDispT(IUPnPService_IWMPUPnPConnectionManagerDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPConnectionManagerDual>::Bind(pintf, false);
  }

  IUPnPService_IWMPUPnPConnectionManagerDualDispT(IUPnPService_IWMPUPnPConnectionManagerDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPConnectionManagerDual>::Bind(pintf, true);
  }

  IUPnPService_IWMPUPnPConnectionManagerDualDispT& operator=(IUPnPService_IWMPUPnPConnectionManagerDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPConnectionManagerDual>::Bind(pintf, false);
    return *this;
  }

  IUPnPService_IWMPUPnPConnectionManagerDualDispT& operator=(IUPnPService_IWMPUPnPConnectionManagerDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPConnectionManagerDual>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SourceProtocolInfo(BSTR* pSourceProtocolInfo/*[out,retval]*/);
  BSTR            __fastcall get_SourceProtocolInfo(void);
  HRESULT         __fastcall get_SinkProtocolInfo(BSTR* pSinkProtocolInfo/*[out,retval]*/);
  BSTR            __fastcall get_SinkProtocolInfo(void);
  HRESULT         __fastcall get_CurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[out,retval]*/);
  BSTR            __fastcall get_CurrentConnectionIDs(void);
  HRESULT         __fastcall get_A_ARG_TYPE_ConnectionStatus(BSTR* pA_ARG_TYPE_ConnectionStatus/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_ConnectionStatus(void);
  HRESULT         __fastcall get_A_ARG_TYPE_ConnectionManager(BSTR* pA_ARG_TYPE_ConnectionManager/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_ConnectionManager(void);
  HRESULT         __fastcall get_A_ARG_TYPE_Direction(BSTR* pA_ARG_TYPE_Direction/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_Direction(void);
  HRESULT         __fastcall get_A_ARG_TYPE_ProtocolInfo(BSTR* pA_ARG_TYPE_ProtocolInfo/*[out,retval]*/);
  BSTR            __fastcall get_A_ARG_TYPE_ProtocolInfo(void);
  HRESULT         __fastcall get_A_ARG_TYPE_ConnectionID(long* pA_ARG_TYPE_ConnectionID/*[out,retval]*/);
  long            __fastcall get_A_ARG_TYPE_ConnectionID(void);
  HRESULT         __fastcall get_A_ARG_TYPE_AVTransportID(long* pA_ARG_TYPE_AVTransportID/*[out,retval]*/);
  long            __fastcall get_A_ARG_TYPE_AVTransportID(void);
  HRESULT         __fastcall get_A_ARG_TYPE_RcsID(long* pA_ARG_TYPE_RcsID/*[out,retval]*/);
  long            __fastcall get_A_ARG_TYPE_RcsID(void);
  HRESULT         __fastcall GetProtocolInfo(BSTR* pSourceProtocol/*[in,out]*/, 
                                             BSTR* pSinkProtocol/*[in,out]*/);
  HRESULT         __fastcall PrepareForConnection(BSTR remoteProtocolInfo/*[in]*/, 
                                                  BSTR peerConnectionManager/*[in]*/, 
                                                  long peerConnectionID/*[in]*/, 
                                                  BSTR direction/*[in]*/, 
                                                  long* pConnectionID/*[in,out]*/, 
                                                  long* pAVTransportID/*[in,out]*/, 
                                                  long* pResID/*[in,out]*/);
  HRESULT         __fastcall ConnectionComplete(long connectionID/*[in]*/);
  HRESULT         __fastcall GetCurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[in,out]*/);
  HRESULT         __fastcall GetCurrentConnectionInfo(long connectionID/*[in]*/, 
                                                      long* pResID/*[in,out]*/, 
                                                      long* pAVTransportID/*[in,out]*/, 
                                                      BSTR* pProtocolInfo/*[in,out]*/, 
                                                      BSTR* pPeerConnectionManager/*[in,out]*/, 
                                                      long* pPeerConnectionID/*[in,out]*/, 
                                                      BSTR* pDirection/*[in,out]*/, 
                                                      BSTR* pStatus/*[in,out]*/);

  __property   BSTR            SourceProtocolInfo = {read = get_SourceProtocolInfo};
  __property   BSTR            SinkProtocolInfo = {read = get_SinkProtocolInfo};
  __property   BSTR            CurrentConnectionIDs = {read = get_CurrentConnectionIDs};
  __property   BSTR            A_ARG_TYPE_ConnectionStatus = {read = get_A_ARG_TYPE_ConnectionStatus};
  __property   BSTR            A_ARG_TYPE_ConnectionManager = {read = get_A_ARG_TYPE_ConnectionManager};
  __property   BSTR            A_ARG_TYPE_Direction = {read = get_A_ARG_TYPE_Direction};
  __property   BSTR            A_ARG_TYPE_ProtocolInfo = {read = get_A_ARG_TYPE_ProtocolInfo};
  __property   long            A_ARG_TYPE_ConnectionID = {read = get_A_ARG_TYPE_ConnectionID};
  __property   long            A_ARG_TYPE_AVTransportID = {read = get_A_ARG_TYPE_AVTransportID};
  __property   long            A_ARG_TYPE_RcsID = {read = get_A_ARG_TYPE_RcsID};
};
typedef IUPnPService_IWMPUPnPConnectionManagerDualDispT<IUPnPService_IWMPUPnPConnectionManagerDual> IUPnPService_IWMPUPnPConnectionManagerDualDisp;

typedef TComInterface<IUPnPService_IWMPUPnPSkinRetrieverDual>  TCOMIUPnPService_IWMPUPnPSkinRetrieverDual;

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPSkinRetrieverDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC743628-971D-4C1E-B019-50543EFE2BAD}
// *********************************************************************//
template<class T>
class IUPnPService_IWMPUPnPSkinRetrieverDualDispT : public TAutoDriver<IUPnPService_IWMPUPnPSkinRetrieverDual>
{
public:
  IUPnPService_IWMPUPnPSkinRetrieverDualDispT(){}

  IUPnPService_IWMPUPnPSkinRetrieverDualDispT(IUPnPService_IWMPUPnPSkinRetrieverDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPSkinRetrieverDual>::Bind(pintf, false);
  }

  IUPnPService_IWMPUPnPSkinRetrieverDualDispT(IUPnPService_IWMPUPnPSkinRetrieverDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPSkinRetrieverDual>::Bind(pintf, true);
  }

  IUPnPService_IWMPUPnPSkinRetrieverDualDispT& operator=(IUPnPService_IWMPUPnPSkinRetrieverDual *pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPSkinRetrieverDual>::Bind(pintf, false);
    return *this;
  }

  IUPnPService_IWMPUPnPSkinRetrieverDualDispT& operator=(IUPnPService_IWMPUPnPSkinRetrieverDualPtr pintf)
  {
    TAutoDriver<IUPnPService_IWMPUPnPSkinRetrieverDual>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SkinURL(BSTR* pSkinURL/*[out,retval]*/);
  BSTR            __fastcall get_SkinURL(void);
  HRESULT         __fastcall GetSkinURL(BSTR* ppbstrSkinURL/*[in,out]*/);

  __property   BSTR            SkinURL = {read = get_SkinURL};
};
typedef IUPnPService_IWMPUPnPSkinRetrieverDualDispT<IUPnPService_IWMPUPnPSkinRetrieverDual> IUPnPService_IWMPUPnPSkinRetrieverDualDisp;

// *********************************************************************//
// DispIntf:  IWMPPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5F0F4F1-130C-11D3-B14E-00C04F79FAA6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistDispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistDispT<T>::get_name(void)
{
  BSTR pbstrName;
  this->get_name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::set_name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_attributeCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeCount"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistDispT<T>::get_attributeCount(void)
{
  long plCount;
  this->get_attributeCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_attributeName(long lIndex/*[in]*/, 
                                        BSTR* pbstrAttributeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeName"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrAttributeName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistDispT<T>::get_attributeName(long lIndex/*[in]*/)
{
  BSTR pbstrAttributeName;
  this->get_attributeName(lIndex, (BSTR*)&pbstrAttributeName);
  return pbstrAttributeName;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_Item(long lIndex, Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppIWMPMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPPlaylistDispT<T>::get_Item(long lIndex)
{
  Wmplib_tlb::IWMPMedia* ppIWMPMedia;
  this->get_Item(lIndex, (Wmplib_tlb::IWMPMedia**)&ppIWMPMedia);
  return ppIWMPMedia;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::getItemInfo(BSTR bstrName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistDispT<T>::getItemInfo(BSTR bstrName/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfo(bstrName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::setItemInfo(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setItemInfo"), DISPID(204));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/, 
                                      VARIANT_BOOL* pvbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isIdentical"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pIWMPPlaylist /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistDispT<T>::get_isIdentical(Wmplib_tlb::IWMPPlaylist* pIWMPPlaylist/*[in]*/)
{
  VARIANT_BOOL pvbool;
  this->get_isIdentical(pIWMPPlaylist, (VARIANT_BOOL*)&pvbool);
  return pvbool;
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::clear()
{
  _TDispID _dispid(*this, OLETEXT("clear"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::insertItem(long lIndex/*[in]*/, Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertItem"), DISPID(206));
  TAutoArgs<2> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::appendItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendItem"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::removeItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeItem"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistDispT<T>::moveItem(long lIndexOld, long lIndexNew)
{
  _TDispID _dispid(*this, OLETEXT("moveItem"), DISPID(209));
  TAutoArgs<2> _args;
  _args[1] = lIndexOld /*[VT_I4:0]*/;
  _args[2] = lIndexNew /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94D55E95-3FAC-11D3-B155-00C04F79FAA6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                   VARIANT_BOOL* pvbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isIdentical"), DISPID(763));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMediaDispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  VARIANT_BOOL pvbool;
  this->get_isIdentical(pIWMPMedia, (VARIANT_BOOL*)&pvbool);
  return pvbool;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceURL"), DISPID(751));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::get_sourceURL(void)
{
  BSTR pbstrSourceURL;
  this->get_sourceURL((BSTR*)&pbstrSourceURL);
  return pbstrSourceURL;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::get_name(void)
{
  BSTR pbstrName;
  this->get_name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::set_name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_imageSourceWidth(long* pWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceWidth"), DISPID(752));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaDispT<T>::get_imageSourceWidth(void)
{
  long pWidth;
  this->get_imageSourceWidth((long*)&pWidth);
  return pWidth;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_imageSourceHeight(long* pHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceHeight"), DISPID(753));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaDispT<T>::get_imageSourceHeight(void)
{
  long pHeight;
  this->get_imageSourceHeight((long*)&pHeight);
  return pHeight;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_markerCount(long* pMarkerCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("markerCount"), DISPID(754));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMarkerCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaDispT<T>::get_markerCount(void)
{
  long pMarkerCount;
  this->get_markerCount((long*)&pMarkerCount);
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::getMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerTime"), DISPID(755));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pMarkerTime /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IWMPMediaDispT<T>::getMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  this->getMarkerTime(MarkerNum, (double*)&pMarkerTime);
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::getMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerName"), DISPID(756));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrMarkerName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::getMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName;
  this->getMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName);
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_duration(double* pDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("duration"), DISPID(757));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDuration /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPMediaDispT<T>::get_duration(void)
{
  double pDuration;
  this->get_duration((double*)&pDuration);
  return pDuration;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_durationString(BSTR* pbstrDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("durationString"), DISPID(758));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDuration /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::get_durationString(void)
{
  BSTR pbstrDuration;
  this->get_durationString((BSTR*)&pbstrDuration);
  return pbstrDuration;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::get_attributeCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeCount"), DISPID(759));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaDispT<T>::get_attributeCount(void)
{
  long plCount;
  this->get_attributeCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::getAttributeName(long lIndex/*[in]*/, BSTR* pbstrItemName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeName"), DISPID(760));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrItemName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::getAttributeName(long lIndex/*[in]*/)
{
  BSTR pbstrItemName;
  this->getAttributeName(lIndex, (BSTR*)&pbstrItemName);
  return pbstrItemName;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(761));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setItemInfo"), DISPID(762));
  TAutoArgs<2> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  _args[2] = bstrVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfoByAtom"), DISPID(765));
  TAutoArgs<1> _args;
  _args[1] = lAtom /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMediaDispT<T>::getItemInfoByAtom(long lAtom/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfoByAtom(lAtom, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                              VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isMemberOf"), DISPID(766));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pPlaylist /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsMemberOf /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMediaDispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/)
{
  VARIANT_BOOL pvarfIsMemberOf;
  this->isMemberOf(pPlaylist, (VARIANT_BOOL*)&pvarfIsMemberOf);
  return pvarfIsMemberOf;
}

template <class T> HRESULT __fastcall
IWMPMediaDispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                  VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isReadOnlyItem"), DISPID(767));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarfIsReadOnly /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMediaDispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/)
{
  VARIANT_BOOL pvarfIsReadOnly;
  this->isReadOnlyItem(bstrItemName, (VARIANT_BOOL*)&pvarfIsReadOnly);
  return pvarfIsReadOnly;
}

// *********************************************************************//
// DispIntf:  IWMPMediaCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8363BC22-B4B4-4B19-989D-1CD765749DD1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::add(BSTR bstrURL/*[in]*/, 
                                 Wmplib_tlb::IWMPMedia** ppItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("add"), DISPID(452));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPMediaCollectionDispT<T>::add(BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppItem;
  this->add(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppItem);
  return ppItem;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getAll(Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAll"), DISPID(453));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getAll(void)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getAll((Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getByName(BSTR bstrName/*[in]*/, 
                                       Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByName"), DISPID(454));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getByName(BSTR bstrName/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByName(bstrName, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getByGenre(BSTR bstrGenre/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByGenre"), DISPID(455));
  TAutoArgs<1> _args;
  _args[1] = bstrGenre /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getByGenre(BSTR bstrGenre/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByGenre(bstrGenre, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getByAuthor(BSTR bstrAuthor/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAuthor"), DISPID(456));
  TAutoArgs<1> _args;
  _args[1] = bstrAuthor /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getByAuthor(BSTR bstrAuthor/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAuthor(bstrAuthor, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getByAlbum(BSTR bstrAlbum/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAlbum"), DISPID(457));
  TAutoArgs<1> _args;
  _args[1] = bstrAlbum /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getByAlbum(BSTR bstrAlbum/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAlbum(bstrAlbum, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/, 
                                            Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAttribute"), DISPID(458));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollectionDispT<T>::getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAttribute(bstrAttribute, bstrValue, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::remove(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                    VARIANT_BOOL varfDeleteFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove"), DISPID(459));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  _args[2] = varfDeleteFile /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/, 
                                                          Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeStringCollection"), DISPID(461));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrMediaType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPStringCollection**)ppStringCollection /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPStringCollection* __fastcall
IWMPMediaCollectionDispT<T>::getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                          BSTR bstrMediaType/*[in]*/)
{
  Wmplib_tlb::IWMPStringCollection* ppStringCollection;
  this->getAttributeStringCollection(bstrAttribute, bstrMediaType, (Wmplib_tlb::IWMPStringCollection**)&ppStringCollection);
  return ppStringCollection;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::getMediaAtom(BSTR bstrItemName/*[in]*/, long* plAtom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMediaAtom"), DISPID(470));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plAtom /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaCollectionDispT<T>::getMediaAtom(BSTR bstrItemName/*[in]*/)
{
  long plAtom;
  this->getMediaAtom(bstrItemName, (long*)&plAtom);
  return plAtom;
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::setDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                        VARIANT_BOOL varfIsDeleted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setDeleted"), DISPID(471));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaCollectionDispT<T>::isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                       VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isDeleted"), DISPID(472));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsDeleted /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMediaCollectionDispT<T>::isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/)
{
  VARIANT_BOOL pvarfIsDeleted;
  this->isDeleted(pItem, (VARIANT_BOOL*)&pvarfIsDeleted);
  return pvarfIsDeleted;
}

// *********************************************************************//
// DispIntf:  IWMPStringCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A976298-8C0D-11D3-B389-00C04F68574B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPStringCollectionDispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPStringCollectionDispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPStringCollectionDispT<T>::Item(long lIndex/*[in]*/, BSTR* pbstrString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(402));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPStringCollectionDispT<T>::Item(long lIndex/*[in]*/)
{
  BSTR pbstrString;
  this->Item(lIndex, (BSTR*)&pbstrString);
  return pbstrString;
}

// *********************************************************************//
// DispIntf:  _WMPOCXEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {6BF52A51-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
template <class T> void __fastcall
_WMPOCXEventsDispT<T>::OpenStateChange(long NewState/*[in]*/)
{
  _TDispID _dispid(/* OpenStateChange */ DISPID(5001));
  TAutoArgs<1> _args;
  _args[1] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlayStateChange(long NewState/*[in]*/)
{
  _TDispID _dispid(/* PlayStateChange */ DISPID(5101));
  TAutoArgs<1> _args;
  _args[1] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::AudioLanguageChange(long LangID/*[in]*/)
{
  _TDispID _dispid(/* AudioLanguageChange */ DISPID(5102));
  TAutoArgs<1> _args;
  _args[1] = LangID /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::StatusChange()
{
  _TDispID _dispid(/* StatusChange */ DISPID(5002));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
{
  _TDispID _dispid(/* ScriptCommand */ DISPID(5301));
  TAutoArgs<2> _args;
  _args[1] = scType /*[VT_BSTR:0]*/;
  _args[2] = Param /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::NewStream()
{
  _TDispID _dispid(/* NewStream */ DISPID(5403));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::Disconnect(long Result/*[in]*/)
{
  _TDispID _dispid(/* Disconnect */ DISPID(5401));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::Buffering(VARIANT_BOOL Start/*[in]*/)
{
  _TDispID _dispid(/* Buffering */ DISPID(5402));
  TAutoArgs<1> _args;
  _args[1] = Start /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::Error()
{
  _TDispID _dispid(/* Error */ DISPID(5501));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                               BSTR Description/*[in]*/)
{
  _TDispID _dispid(/* Warning */ DISPID(5601));
  TAutoArgs<3> _args;
  _args[1] = WarningType /*[VT_I4:0]*/;
  _args[2] = Param /*[VT_I4:0]*/;
  _args[3] = Description /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::EndOfStream(long Result/*[in]*/)
{
  _TDispID _dispid(/* EndOfStream */ DISPID(5201));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
{
  _TDispID _dispid(/* PositionChange */ DISPID(5202));
  TAutoArgs<2> _args;
  _args[1] = oldPosition /*[VT_R8:0]*/;
  _args[2] = newPosition /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MarkerHit(long MarkerNum/*[in]*/)
{
  _TDispID _dispid(/* MarkerHit */ DISPID(5203));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DurationUnitChange(long NewDurationUnit/*[in]*/)
{
  _TDispID _dispid(/* DurationUnitChange */ DISPID(5204));
  TAutoArgs<1> _args;
  _args[1] = NewDurationUnit /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromMediaChange(long CdromNum/*[in]*/)
{
  _TDispID _dispid(/* CdromMediaChange */ DISPID(5701));
  TAutoArgs<1> _args;
  _args[1] = CdromNum /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                      Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
{
  _TDispID _dispid(/* PlaylistChange */ DISPID(5801));
  TAutoArgs<2> _args;
  _args[1] = Playlist /*[VT_DISPATCH:0]*/;
  _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
{
  _TDispID _dispid(/* CurrentPlaylistChange */ DISPID(5804));
  TAutoArgs<1> _args;
  _args[1] = (int)change /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/)
{
  _TDispID _dispid(/* CurrentPlaylistItemAvailable */ DISPID(5805));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaChange(LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* MediaChange */ DISPID(5802));
  TAutoArgs<1> _args;
  _args[1] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/)
{
  _TDispID _dispid(/* CurrentMediaItemAvailable */ DISPID(5803));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* CurrentItemChange */ DISPID(5806));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionChange()
{
  _TDispID _dispid(/* MediaCollectionChange */ DISPID(5807));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                           BSTR bstrAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringAdded */ DISPID(5808));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                             BSTR bstrAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringRemoved */ DISPID(5809));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                             BSTR bstrOldAttribVal/*[in]*/, 
                                                             BSTR bstrNewAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringChanged */ DISPID(5820));
  TAutoArgs<3> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrOldAttribVal /*[VT_BSTR:0]*/;
  _args[3] = bstrNewAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlaylistCollectionChange()
{
  _TDispID _dispid(/* PlaylistCollectionChange */ DISPID(5810));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistAdded */ DISPID(5811));
  TAutoArgs<1> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistRemoved */ DISPID(5812));
  TAutoArgs<1> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                              VARIANT_BOOL varfIsDeleted/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistSetAsDeleted */ DISPID(5818));
  TAutoArgs<2> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/)
{
  _TDispID _dispid(/* ModeChange */ DISPID(5819));
  TAutoArgs<2> _args;
  _args[1] = ModeName /*[VT_BSTR:0]*/;
  _args[2] = NewValue /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaError(LPDISPATCH pMediaObject/*[in]*/)
{
  _TDispID _dispid(/* MediaError */ DISPID(5821));
  TAutoArgs<1> _args;
  _args[1] = pMediaObject /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/)
{
  _TDispID _dispid(/* OpenPlaylistSwitch */ DISPID(5823));
  TAutoArgs<1> _args;
  _args[1] = pItem /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DomainChange(BSTR strDomain/*[in]*/)
{
  _TDispID _dispid(/* DomainChange */ DISPID(5822));
  TAutoArgs<1> _args;
  _args[1] = strDomain /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::SwitchedToPlayerApplication()
{
  _TDispID _dispid(/* SwitchedToPlayerApplication */ DISPID(6501));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::SwitchedToControl()
{
  _TDispID _dispid(/* SwitchedToControl */ DISPID(6502));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlayerDockedStateChange()
{
  _TDispID _dispid(/* PlayerDockedStateChange */ DISPID(6503));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::PlayerReconnect()
{
  _TDispID _dispid(/* PlayerReconnect */ DISPID(6504));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::_Click(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                              long fY/*[in]*/)
{
  _TDispID _dispid(/* Click */ DISPID(6505));
  TAutoArgs<4> _args;
  _args[1] = nButton /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  _args[3] = fX /*[VT_I4:0]*/;
  _args[4] = fY /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DoubleClick(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/
                                   , long fY/*[in]*/)
{
  _TDispID _dispid(/* DoubleClick */ DISPID(6506));
  TAutoArgs<4> _args;
  _args[1] = nButton /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  _args[3] = fX /*[VT_I4:0]*/;
  _args[4] = fY /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::KeyDown(short nKeyCode/*[in]*/, short nShiftState/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(6507));
  TAutoArgs<2> _args;
  _args[1] = nKeyCode /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::KeyPress(short nKeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(6508));
  TAutoArgs<1> _args;
  _args[1] = nKeyAscii /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::KeyUp(short nKeyCode/*[in]*/, short nShiftState/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(6509));
  TAutoArgs<2> _args;
  _args[1] = nKeyCode /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MouseDown(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                                 long fY/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(6510));
  TAutoArgs<4> _args;
  _args[1] = nButton /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  _args[3] = fX /*[VT_I4:0]*/;
  _args[4] = fY /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MouseMove(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                                 long fY/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(6511));
  TAutoArgs<4> _args;
  _args[1] = nButton /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  _args[3] = fX /*[VT_I4:0]*/;
  _args[4] = fY /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MouseUp(short nButton/*[in]*/, short nShiftState/*[in]*/, long fX/*[in]*/, 
                               long fY/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(6512));
  TAutoArgs<4> _args;
  _args[1] = nButton /*[VT_I2:0]*/;
  _args[2] = nShiftState /*[VT_I2:0]*/;
  _args[3] = fX /*[VT_I4:0]*/;
  _args[4] = fY /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/)
{
  _TDispID _dispid(/* DeviceConnect */ DISPID(6513));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/)
{
  _TDispID _dispid(/* DeviceDisconnect */ DISPID(6514));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                          Wmplib_tlb::WMPDeviceStatus NewStatus/*[in]*/)
{
  _TDispID _dispid(/* DeviceStatusChange */ DISPID(6515));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)NewStatus /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                             Wmplib_tlb::WMPSyncState NewState/*[in]*/)
{
  _TDispID _dispid(/* DeviceSyncStateChange */ DISPID(6516));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)NewState /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                       LPDISPATCH pMedia/*[in]*/)
{
  _TDispID _dispid(/* DeviceSyncError */ DISPID(6517));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  _args[2] = pMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice/*[in]*/, 
                                                 HRESULT hrResult/*[in]*/)
{
  _TDispID _dispid(/* CreatePartnershipComplete */ DISPID(6518));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPSyncDevice*)pDevice /*[VT_USERDEFINED:1]*/;
  _args[2] = hrResult /*[VT_HRESULT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                           Wmplib_tlb::WMPRipState wmprs/*[in]*/)
{
  _TDispID _dispid(/* CdromRipStateChange */ DISPID(6519));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromRip*)pCdromRip /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)wmprs /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip/*[in]*/, 
                                          LPDISPATCH pMedia/*[in]*/)
{
  _TDispID _dispid(/* CdromRipMediaError */ DISPID(6520));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromRip*)pCdromRip /*[VT_USERDEFINED:1]*/;
  _args[2] = pMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                            Wmplib_tlb::WMPBurnState wmpbs/*[in]*/)
{
  _TDispID _dispid(/* CdromBurnStateChange */ DISPID(6521));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)wmpbs /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                           LPDISPATCH pMedia/*[in]*/)
{
  _TDispID _dispid(/* CdromBurnMediaError */ DISPID(6522));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
  _args[2] = pMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn/*[in]*/, 
                                      HRESULT hrError/*[in]*/)
{
  _TDispID _dispid(/* CdromBurnError */ DISPID(6523));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPCdromBurn*)pCdromBurn /*[VT_USERDEFINED:1]*/;
  _args[2] = hrError /*[VT_HRESULT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/)
{
  _TDispID _dispid(/* LibraryConnect */ DISPID(6524));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPLibrary*)pLibrary /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary/*[in]*/)
{
  _TDispID _dispid(/* LibraryDisconnect */ DISPID(6525));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Wmplib_tlb::IWMPLibrary*)pLibrary /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss/*[in]*/)
{
  _TDispID _dispid(/* FolderScanStateChange */ DISPID(6526));
  TAutoArgs<1> _args;
  _args[1] = (int)wmpfss /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                              Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                              , long lCollectionIndex/*[in]*/)
{
  _TDispID _dispid(/* StringCollectionChange */ DISPID(5824));
  TAutoArgs<3> _args;
  _args[1] = pdispStringCollection /*[VT_DISPATCH:0]*/;
  _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
  _args[3] = lCollectionIndex /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionMediaAdded */ DISPID(5825));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPOCXEventsDispT<T>::MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionMediaRemoved */ DISPID(5826));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPCore
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D84CCA99-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCoreDispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPCoreDispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPCoreDispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPCoreDispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPCoreDispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPCoreDispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPCoreDispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPCoreDispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCoreDispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPCoreDispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPCoreDispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPCoreDispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPCoreDispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPCoreDispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPCoreDispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPCoreDispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCoreDispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// DispIntf:  IWMPCore2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC17E5B7-7561-4C18-BB90-17D485775659}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dvd"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDVD**)ppDVD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDVDPtr __fastcall
IWMPCore2DispT<T>::get_dvd(void)
{
  Wmplib_tlb::IWMPDVDPtr ppDVD;
  this->get_dvd(&ppDVD);
  return ppDVD;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore2DispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPCore2DispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPCore2DispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPCore2DispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPCore2DispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPCore2DispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPCore2DispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPCore2DispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore2DispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPCore2DispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPCore2DispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPCore2DispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPCore2DispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPCore2DispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPCore2DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPCore2DispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore2DispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// SmartIntf: TCOMIWMPCore3
// Interface: IWMPCore3
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPCore3T<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                               Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  return (*this)->newPlaylist(bstrName, bstrURL, ppPlaylist);
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
TCOMIWMPCore3T<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  OLECHECK(this->newPlaylist(bstrName/*[in]*/, bstrURL/*[in]*/, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist));
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
TCOMIWMPCore3T<T>::newMedia(BSTR bstrURL/*[in]*/, Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  return (*this)->newMedia(bstrURL, ppMedia);
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
TCOMIWMPCore3T<T>::newMedia(BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppMedia;
  OLECHECK(this->newMedia(bstrURL/*[in]*/, (Wmplib_tlb::IWMPMedia**)&ppMedia));
  return ppMedia;
}

// *********************************************************************//
// DispIntf:  IWMPCore3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7587C667-628F-499F-88E7-6A6F4E888464}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                               Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("newPlaylist"), DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPCore3DispT<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  this->newPlaylist(bstrName, bstrURL, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::newMedia(BSTR bstrURL/*[in]*/, Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("newMedia"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPCore3DispT<T>::newMedia(BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppMedia;
  this->newMedia(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dvd"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDVD**)ppDVD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDVDPtr __fastcall
IWMPCore3DispT<T>::get_dvd(void)
{
  Wmplib_tlb::IWMPDVDPtr ppDVD;
  this->get_dvd(&ppDVD);
  return ppDVD;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore3DispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPCore3DispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPCore3DispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPCore3DispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPCore3DispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPCore3DispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPCore3DispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPCore3DispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore3DispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPCore3DispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPCore3DispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPCore3DispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPCore3DispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPCore3DispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPCore3DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPCore3DispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCore3DispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// SmartIntf: TCOMIWMPPlayer4
// Interface: IWMPPlayer4
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_enabled(pbEnabled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_enabled((VARIANT_BOOL*)&pbEnabled));
  return pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  return (*this)->get_fullScreen(pbFullScreen);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_fullScreen(VARIANT_BOOL pbFullScreen)
{
  return (*this)->set_fullScreen(pbFullScreen);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/)
{
  return (*this)->get_enableContextMenu(pbEnableContextMenu);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_enableContextMenu(void)
{
  VARIANT_BOOL pbEnableContextMenu;
  OLECHECK(this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu));
  return pbEnableContextMenu;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu)
{
  return (*this)->set_enableContextMenu(pbEnableContextMenu);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_uiMode(BSTR pbstrMode/*[in]*/)
{
  return (*this)->set_uiMode(pbstrMode);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_uiMode(BSTR* pbstrMode/*[out,retval]*/)
{
  return (*this)->get_uiMode(pbstrMode);
}

template <class T> BSTR __fastcall
TCOMIWMPPlayer4T<T>::get_uiMode(void)
{
  BSTR pbstrMode = 0;
  OLECHECK(this->get_uiMode((BSTR*)&pbstrMode));
  return pbstrMode;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_stretchToFit(pbEnabled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled));
  return pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_stretchToFit(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_windowlessVideo(pbEnabled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_windowlessVideo(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled));
  return pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_windowlessVideo(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_isRemote(VARIANT_BOOL* pvarfIsRemote/*[out,retval]*/)
{
  return (*this)->get_isRemote(pvarfIsRemote);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlayer4T<T>::get_isRemote(void)
{
  VARIANT_BOOL pvarfIsRemote;
  OLECHECK(this->get_isRemote((VARIANT_BOOL*)&pvarfIsRemote));
  return pvarfIsRemote;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::get_playerApplication(Wmplib_tlb::IWMPPlayerApplication** ppIWMPPlayerApplication/*[out,retval]*/)
{
  return (*this)->get_playerApplication(ppIWMPPlayerApplication);
}

template <class T> Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall
TCOMIWMPPlayer4T<T>::get_playerApplication(void)
{
  Wmplib_tlb::IWMPPlayerApplicationPtr ppIWMPPlayerApplication;
  OLECHECK(this->get_playerApplication((Wmplib_tlb::IWMPPlayerApplicationPtr*)&ppIWMPPlayerApplication));
  return ppIWMPPlayerApplication;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlayer4T<T>::openPlayer(BSTR bstrURL/*[in]*/)
{
  return (*this)->openPlayer(bstrURL);
}

// *********************************************************************//
// DispIntf:  IWMPPlayer4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C497D62-8919-413C-82DB-E935FB3EC584}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_enableContextMenu(void)
{
  VARIANT_BOOL pbEnableContextMenu;
  this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu);
  return pbEnableContextMenu;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pbEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_uiMode(BSTR pbstrMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pbstrMode /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_uiMode(BSTR* pbstrMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer4DispT<T>::get_uiMode(void)
{
  BSTR pbstrMode;
  this->get_uiMode((BSTR*)&pbstrMode);
  return pbstrMode;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_windowlessVideo(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_isRemote(VARIANT_BOOL* pvarfIsRemote/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isRemote"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfIsRemote /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_isRemote(void)
{
  VARIANT_BOOL pvarfIsRemote;
  this->get_isRemote((VARIANT_BOOL*)&pvarfIsRemote);
  return pvarfIsRemote;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_playerApplication(Wmplib_tlb::IWMPPlayerApplication** ppIWMPPlayerApplication/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playerApplication"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlayerApplication**)ppIWMPPlayerApplication /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlayerApplicationPtr __fastcall
IWMPPlayer4DispT<T>::get_playerApplication(void)
{
  Wmplib_tlb::IWMPPlayerApplicationPtr ppIWMPPlayerApplication;
  this->get_playerApplication(&ppIWMPPlayerApplication);
  return ppIWMPPlayerApplication;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::openPlayer(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("openPlayer"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/, 
                                 Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("newPlaylist"), DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPPlayer4DispT<T>::newPlaylist(BSTR bstrName/*[in]*/, BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  this->newPlaylist(bstrName, bstrURL, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::newMedia(BSTR bstrURL/*[in]*/, Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("newMedia"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPPlayer4DispT<T>::newMedia(BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppMedia;
  this->newMedia(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dvd"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDVD**)ppDVD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDVDPtr __fastcall
IWMPPlayer4DispT<T>::get_dvd(void)
{
  Wmplib_tlb::IWMPDVDPtr ppDVD;
  this->get_dvd(&ppDVD);
  return ppDVD;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer4DispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPPlayer4DispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPPlayer4DispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPPlayer4DispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPPlayer4DispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPPlayer4DispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPPlayer4DispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPPlayer4DispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer4DispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPPlayer4DispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPPlayer4DispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPPlayer4DispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPPlayer4DispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer4DispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPPlayer4DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPPlayer4DispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer4DispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// DispIntf:  IWMPPlayer3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54062B68-052A-4C25-A39F-8B63346511D4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_enableContextMenu(void)
{
  VARIANT_BOOL pbEnableContextMenu;
  this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu);
  return pbEnableContextMenu;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pbEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_uiMode(BSTR pbstrMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pbstrMode /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_uiMode(BSTR* pbstrMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer3DispT<T>::get_uiMode(void)
{
  BSTR pbstrMode;
  this->get_uiMode((BSTR*)&pbstrMode);
  return pbstrMode;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_windowlessVideo(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_dvd(Wmplib_tlb::IWMPDVD** ppDVD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dvd"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDVD**)ppDVD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDVDPtr __fastcall
IWMPPlayer3DispT<T>::get_dvd(void)
{
  Wmplib_tlb::IWMPDVDPtr ppDVD;
  this->get_dvd(&ppDVD);
  return ppDVD;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer3DispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPPlayer3DispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPPlayer3DispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPPlayer3DispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPPlayer3DispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPPlayer3DispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPPlayer3DispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPPlayer3DispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer3DispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPPlayer3DispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPPlayer3DispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPPlayer3DispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPPlayer3DispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer3DispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPPlayer3DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPPlayer3DispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer3DispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// DispIntf:  IWMPControls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74C09E02-F828-11D2-A74B-00A0C905F36E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, 
                                      VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPControlsDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::play()
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(51));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::stop()
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(52));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(53));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::fastForward()
{
  _TDispID _dispid(*this, OLETEXT("fastForward"), DISPID(54));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::fastReverse()
{
  _TDispID _dispid(*this, OLETEXT("fastReverse"), DISPID(55));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::get_currentPosition(double* pdCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdCurrentPosition /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPControlsDispT<T>::get_currentPosition(void)
{
  double pdCurrentPosition;
  this->get_currentPosition((double*)&pdCurrentPosition);
  return pdCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::set_currentPosition(double pdCurrentPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pdCurrentPosition /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPositionString"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCurrentPosition /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControlsDispT<T>::get_currentPositionString(void)
{
  BSTR pbstrCurrentPosition;
  this->get_currentPositionString((BSTR*)&pbstrCurrentPosition);
  return pbstrCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(58));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::previous()
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(59));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppIWMPMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPControlsDispT<T>::get_currentItem(void)
{
  Wmplib_tlb::IWMPMediaPtr ppIWMPMedia;
  this->get_currentItem(&ppIWMPMedia);
  return ppIWMPMedia;
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::get_currentMarker(long* plMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMarker /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControlsDispT<T>::get_currentMarker(void)
{
  long plMarker;
  this->get_currentMarker((long*)&plMarker);
  return plMarker;
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::set_currentMarker(long plMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = plMarker /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControlsDispT<T>::playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playItem"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9104D1AB-80C9-4FED-ABF0-2E6417A6DF14}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, 
                                      VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_autoStart(VARIANT_BOOL* pfAutoStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("autoStart"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAutoStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::get_autoStart(void)
{
  VARIANT_BOOL pfAutoStart;
  this->get_autoStart((VARIANT_BOOL*)&pfAutoStart);
  return pfAutoStart;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_autoStart(VARIANT_BOOL pfAutoStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("autoStart"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pfAutoStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_baseURL(BSTR* pbstrBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSettingsDispT<T>::get_baseURL(void)
{
  BSTR pbstrBaseURL;
  this->get_baseURL((BSTR*)&pbstrBaseURL);
  return pbstrBaseURL;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_baseURL(BSTR pbstrBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pbstrBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_defaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("defaultFrame"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefaultFrame /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSettingsDispT<T>::get_defaultFrame(void)
{
  BSTR pbstrDefaultFrame;
  this->get_defaultFrame((BSTR*)&pbstrDefaultFrame);
  return pbstrDefaultFrame;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_defaultFrame(BSTR pbstrDefaultFrame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("defaultFrame"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pbstrDefaultFrame /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_invokeURLs(VARIANT_BOOL* pfInvokeURLs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("invokeURLs"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfInvokeURLs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::get_invokeURLs(void)
{
  VARIANT_BOOL pfInvokeURLs;
  this->get_invokeURLs((VARIANT_BOOL*)&pfInvokeURLs);
  return pfInvokeURLs;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_invokeURLs(VARIANT_BOOL pfInvokeURLs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("invokeURLs"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pfInvokeURLs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_mute(VARIANT_BOOL* pfMute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfMute /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::get_mute(void)
{
  VARIANT_BOOL pfMute;
  this->get_mute((VARIANT_BOOL*)&pfMute);
  return pfMute;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_mute(VARIANT_BOOL pfMute/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfMute /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_playCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playCount"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettingsDispT<T>::get_playCount(void)
{
  long plCount;
  this->get_playCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_playCount(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playCount"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_rate(double* pdRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdRate /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPSettingsDispT<T>::get_rate(void)
{
  double pdRate;
  this->get_rate((double*)&pdRate);
  return pdRate;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_rate(double pdRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pdRate /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_balance(long* plBalance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("balance"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBalance /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettingsDispT<T>::get_balance(void)
{
  long plBalance;
  this->get_balance((long*)&plBalance);
  return plBalance;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_balance(long plBalance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("balance"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = plBalance /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_volume(long* plVolume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVolume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettingsDispT<T>::get_volume(void)
{
  long plVolume;
  this->get_volume((long*)&plVolume);
  return plVolume;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_volume(long plVolume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = plVolume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::getMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL* pvarfMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMode"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = bstrMode /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarfMode /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::getMode(BSTR bstrMode/*[in]*/)
{
  VARIANT_BOOL pvarfMode;
  this->getMode(bstrMode, (VARIANT_BOOL*)&pvarfMode);
  return pvarfMode;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::setMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL varfMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setMode"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = bstrMode /*[VT_BSTR:0]*/;
  _args[2] = varfMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::get_enableErrorDialogs(VARIANT_BOOL* pfEnableErrorDialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableErrorDialogs"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableErrorDialogs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettingsDispT<T>::get_enableErrorDialogs(void)
{
  VARIANT_BOOL pfEnableErrorDialogs;
  this->get_enableErrorDialogs((VARIANT_BOOL*)&pfEnableErrorDialogs);
  return pfEnableErrorDialogs;
}

template <class T> HRESULT __fastcall
IWMPSettingsDispT<T>::set_enableErrorDialogs(VARIANT_BOOL pfEnableErrorDialogs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableErrorDialogs"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pfEnableErrorDialogs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPPlaylistCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10A13217-23A7-439B-B1C0-D847C79B7774}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::newPlaylist(BSTR bstrName/*[in]*/, 
                                            Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("newPlaylist"), DISPID(552));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPPlaylistCollectionDispT<T>::newPlaylist(BSTR bstrName/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppItem;
  this->newPlaylist(bstrName, (Wmplib_tlb::IWMPPlaylist**)&ppItem);
  return ppItem;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::getAll(Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAll"), DISPID(553));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistArray**)ppPlaylistArray /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistArray* __fastcall
IWMPPlaylistCollectionDispT<T>::getAll(void)
{
  Wmplib_tlb::IWMPPlaylistArray* ppPlaylistArray;
  this->getAll((Wmplib_tlb::IWMPPlaylistArray**)&ppPlaylistArray);
  return ppPlaylistArray;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::getByName(BSTR bstrName/*[in]*/, 
                                          Wmplib_tlb::IWMPPlaylistArray** ppPlaylistArray/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByName"), DISPID(554));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistArray**)ppPlaylistArray /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistArray* __fastcall
IWMPPlaylistCollectionDispT<T>::getByName(BSTR bstrName/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylistArray* ppPlaylistArray;
  this->getByName(bstrName, (Wmplib_tlb::IWMPPlaylistArray**)&ppPlaylistArray);
  return ppPlaylistArray;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::remove(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove"), DISPID(556));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::setDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                           VARIANT_BOOL varfIsDeleted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setDeleted"), DISPID(560));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pItem /*[VT_USERDEFINED:1]*/;
  _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                          VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isDeleted"), DISPID(561));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsDeleted /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCollectionDispT<T>::isDeleted(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/)
{
  VARIANT_BOOL pvarfIsDeleted;
  this->isDeleted(pItem, (VARIANT_BOOL*)&pvarfIsDeleted);
  return pvarfIsDeleted;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCollectionDispT<T>::importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/, 
                                               Wmplib_tlb::IWMPPlaylist** ppImportedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("importPlaylist"), DISPID(562));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppImportedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPPlaylistCollectionDispT<T>::importPlaylist(Wmplib_tlb::IWMPPlaylist* pItem/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppImportedItem;
  this->importPlaylist(pItem, (Wmplib_tlb::IWMPPlaylist**)&ppImportedItem);
  return ppImportedItem;
}

// *********************************************************************//
// DispIntf:  IWMPPlaylistArray
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {679409C0-99F7-11D3-9FB7-00105AA620BB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlaylistArrayDispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistArrayDispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPPlaylistArrayDispT<T>::Item(long lIndex/*[in]*/, 
                                Wmplib_tlb::IWMPPlaylist** ppItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPPlaylistArrayDispT<T>::Item(long lIndex/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppItem;
  this->Item(lIndex, (Wmplib_tlb::IWMPPlaylist**)&ppItem);
  return ppItem;
}

// *********************************************************************//
// DispIntf:  IWMPNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_bandWidth(long* plBandwidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bandWidth"), DISPID(801));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBandwidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_bandWidth(void)
{
  long plBandwidth;
  this->get_bandWidth((long*)&plBandwidth);
  return plBandwidth;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_recoveredPackets(long* plRecoveredPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("recoveredPackets"), DISPID(802));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plRecoveredPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_recoveredPackets(void)
{
  long plRecoveredPackets;
  this->get_recoveredPackets((long*)&plRecoveredPackets);
  return plRecoveredPackets;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_sourceProtocol(BSTR* pbstrSourceProtocol/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceProtocol"), DISPID(803));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceProtocol /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNetworkDispT<T>::get_sourceProtocol(void)
{
  BSTR pbstrSourceProtocol;
  this->get_sourceProtocol((BSTR*)&pbstrSourceProtocol);
  return pbstrSourceProtocol;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_receivedPackets(long* plReceivedPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("receivedPackets"), DISPID(804));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plReceivedPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_receivedPackets(void)
{
  long plReceivedPackets;
  this->get_receivedPackets((long*)&plReceivedPackets);
  return plReceivedPackets;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_lostPackets(long* plLostPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lostPackets"), DISPID(805));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLostPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_lostPackets(void)
{
  long plLostPackets;
  this->get_lostPackets((long*)&plLostPackets);
  return plLostPackets;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_receptionQuality(long* plReceptionQuality/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("receptionQuality"), DISPID(806));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plReceptionQuality /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_receptionQuality(void)
{
  long plReceptionQuality;
  this->get_receptionQuality((long*)&plReceptionQuality);
  return plReceptionQuality;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_bufferingCount(long* plBufferingCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bufferingCount"), DISPID(807));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBufferingCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_bufferingCount(void)
{
  long plBufferingCount;
  this->get_bufferingCount((long*)&plBufferingCount);
  return plBufferingCount;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_bufferingProgress(long* plBufferingProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bufferingProgress"), DISPID(808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBufferingProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_bufferingProgress(void)
{
  long plBufferingProgress;
  this->get_bufferingProgress((long*)&plBufferingProgress);
  return plBufferingProgress;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_bufferingTime(long* plBufferingTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bufferingTime"), DISPID(809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBufferingTime /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_bufferingTime(void)
{
  long plBufferingTime;
  this->get_bufferingTime((long*)&plBufferingTime);
  return plBufferingTime;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::set_bufferingTime(long plBufferingTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("bufferingTime"), DISPID(809));
  TAutoArgs<1> _args;
  _args[1] = plBufferingTime /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_frameRate(long* plFrameRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("frameRate"), DISPID(810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plFrameRate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_frameRate(void)
{
  long plFrameRate;
  this->get_frameRate((long*)&plFrameRate);
  return plFrameRate;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_maxBitRate(long* plBitRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxBitRate"), DISPID(811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBitRate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_maxBitRate(void)
{
  long plBitRate;
  this->get_maxBitRate((long*)&plBitRate);
  return plBitRate;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_bitRate(long* plBitRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bitRate"), DISPID(812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBitRate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_bitRate(void)
{
  long plBitRate;
  this->get_bitRate((long*)&plBitRate);
  return plBitRate;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::getProxySettings(BSTR bstrProtocol/*[in]*/, 
                                      long* plProxySetting/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProxySettings"), DISPID(813));
  TAutoArgs<1> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plProxySetting /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::getProxySettings(BSTR bstrProtocol/*[in]*/)
{
  long plProxySetting;
  this->getProxySettings(bstrProtocol, (long*)&plProxySetting);
  return plProxySetting;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::setProxySettings(BSTR bstrProtocol/*[in]*/, long lProxySetting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProxySettings"), DISPID(814));
  TAutoArgs<2> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  _args[2] = lProxySetting /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::getProxyName(BSTR bstrProtocol/*[in]*/, BSTR* pbstrProxyName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProxyName"), DISPID(815));
  TAutoArgs<1> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrProxyName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNetworkDispT<T>::getProxyName(BSTR bstrProtocol/*[in]*/)
{
  BSTR pbstrProxyName;
  this->getProxyName(bstrProtocol, (BSTR*)&pbstrProxyName);
  return pbstrProxyName;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::setProxyName(BSTR bstrProtocol/*[in]*/, BSTR bstrProxyName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProxyName"), DISPID(816));
  TAutoArgs<2> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  _args[2] = bstrProxyName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::getProxyPort(BSTR bstrProtocol/*[in]*/, long* lProxyPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProxyPort"), DISPID(817));
  TAutoArgs<1> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(lProxyPort /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::getProxyPort(BSTR bstrProtocol/*[in]*/)
{
  long lProxyPort;
  this->getProxyPort(bstrProtocol, (long*)&lProxyPort);
  return lProxyPort;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::setProxyPort(BSTR bstrProtocol/*[in]*/, long lProxyPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProxyPort"), DISPID(818));
  TAutoArgs<2> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  _args[2] = lProxyPort /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::getProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                           BSTR* pbstrExceptionList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProxyExceptionList"), DISPID(819));
  TAutoArgs<1> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrExceptionList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNetworkDispT<T>::getProxyExceptionList(BSTR bstrProtocol/*[in]*/)
{
  BSTR pbstrExceptionList;
  this->getProxyExceptionList(bstrProtocol, (BSTR*)&pbstrExceptionList);
  return pbstrExceptionList;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::setProxyExceptionList(BSTR bstrProtocol/*[in]*/, 
                                           BSTR pbstrExceptionList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProxyExceptionList"), DISPID(820));
  TAutoArgs<2> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  _args[2] = pbstrExceptionList /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                            VARIANT_BOOL* pfBypassForLocal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProxyBypassForLocal"), DISPID(821));
  TAutoArgs<1> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pfBypassForLocal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNetworkDispT<T>::getProxyBypassForLocal(BSTR bstrProtocol/*[in]*/)
{
  VARIANT_BOOL pfBypassForLocal;
  this->getProxyBypassForLocal(bstrProtocol, (VARIANT_BOOL*)&pfBypassForLocal);
  return pfBypassForLocal;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::setProxyBypassForLocal(BSTR bstrProtocol/*[in]*/, 
                                            VARIANT_BOOL fBypassForLocal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProxyBypassForLocal"), DISPID(822));
  TAutoArgs<2> _args;
  _args[1] = bstrProtocol /*[VT_BSTR:0]*/;
  _args[2] = fBypassForLocal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_maxBandwidth(long* lMaxBandwidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxBandwidth"), DISPID(823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lMaxBandwidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_maxBandwidth(void)
{
  long lMaxBandwidth;
  this->get_maxBandwidth((long*)&lMaxBandwidth);
  return lMaxBandwidth;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::set_maxBandwidth(long lMaxBandwidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxBandwidth"), DISPID(823));
  TAutoArgs<1> _args;
  _args[1] = lMaxBandwidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_downloadProgress(long* plDownloadProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downloadProgress"), DISPID(824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plDownloadProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_downloadProgress(void)
{
  long plDownloadProgress;
  this->get_downloadProgress((long*)&plDownloadProgress);
  return plDownloadProgress;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_encodedFrameRate(long* plFrameRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("encodedFrameRate"), DISPID(825));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plFrameRate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_encodedFrameRate(void)
{
  long plFrameRate;
  this->get_encodedFrameRate((long*)&plFrameRate);
  return plFrameRate;
}

template <class T> HRESULT __fastcall
IWMPNetworkDispT<T>::get_framesSkipped(long* plFrames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("framesSkipped"), DISPID(826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plFrames /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNetworkDispT<T>::get_framesSkipped(void)
{
  long plFrames;
  this->get_framesSkipped((long*)&plFrames);
  return plFrames;
}

// *********************************************************************//
// DispIntf:  IWMPCdromCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE4C8FE2-34B2-11D3-A3BF-006097C9B344}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCdromCollectionDispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPCdromCollectionDispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPCdromCollectionDispT<T>::Item(long lIndex/*[in]*/, 
                                  Wmplib_tlb::IWMPCdrom** ppItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(302));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdrom**)ppItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdrom* __fastcall
IWMPCdromCollectionDispT<T>::Item(long lIndex/*[in]*/)
{
  Wmplib_tlb::IWMPCdrom* ppItem;
  this->Item(lIndex, (Wmplib_tlb::IWMPCdrom**)&ppItem);
  return ppItem;
}

template <class T> HRESULT __fastcall
IWMPCdromCollectionDispT<T>::getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/, 
                                                 Wmplib_tlb::IWMPCdrom** ppCdrom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByDriveSpecifier"), DISPID(303));
  TAutoArgs<1> _args;
  _args[1] = bstrDriveSpecifier /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdrom**)ppCdrom /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdrom* __fastcall
IWMPCdromCollectionDispT<T>::getByDriveSpecifier(BSTR bstrDriveSpecifier/*[in]*/)
{
  Wmplib_tlb::IWMPCdrom* ppCdrom;
  this->getByDriveSpecifier(bstrDriveSpecifier, (Wmplib_tlb::IWMPCdrom**)&ppCdrom);
  return ppCdrom;
}

// *********************************************************************//
// DispIntf:  IWMPCdrom
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFAB6E98-8730-11D3-B388-00C04F68574B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCdromDispT<T>::get_driveSpecifier(BSTR* pbstrDrive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("driveSpecifier"), DISPID(251));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDrive /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCdromDispT<T>::get_driveSpecifier(void)
{
  BSTR pbstrDrive;
  this->get_driveSpecifier((BSTR*)&pbstrDrive);
  return pbstrDrive;
}

template <class T> HRESULT __fastcall
IWMPCdromDispT<T>::get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playlist"), DISPID(252));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPCdromDispT<T>::get_Playlist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
  this->get_Playlist(&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPCdromDispT<T>::eject()
{
  _TDispID _dispid(*this, OLETEXT("eject"), DISPID(253));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPClosedCaption
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4F2DF574-C588-11D3-9ED0-00C04FB6E937}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::get_SAMIStyle(BSTR* pbstrSAMIStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(951));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMIStyle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaptionDispT<T>::get_SAMIStyle(void)
{
  BSTR pbstrSAMIStyle;
  this->get_SAMIStyle((BSTR*)&pbstrSAMIStyle);
  return pbstrSAMIStyle;
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::set_SAMIStyle(BSTR pbstrSAMIStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(951));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMIStyle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::get_SAMILang(BSTR* pbstrSAMILang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(952));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMILang /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaptionDispT<T>::get_SAMILang(void)
{
  BSTR pbstrSAMILang;
  this->get_SAMILang((BSTR*)&pbstrSAMILang);
  return pbstrSAMILang;
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::set_SAMILang(BSTR pbstrSAMILang/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(952));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMILang /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::get_SAMIFileName(BSTR* pbstrSAMIFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(953));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMIFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaptionDispT<T>::get_SAMIFileName(void)
{
  BSTR pbstrSAMIFileName;
  this->get_SAMIFileName((BSTR*)&pbstrSAMIFileName);
  return pbstrSAMIFileName;
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::set_SAMIFileName(BSTR pbstrSAMIFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(953));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMIFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::get_captioningId(BSTR* pbstrCaptioningID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("captioningId"), DISPID(954));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaptioningID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaptionDispT<T>::get_captioningId(void)
{
  BSTR pbstrCaptioningID;
  this->get_captioningId((BSTR*)&pbstrCaptioningID);
  return pbstrCaptioningID;
}

template <class T> HRESULT __fastcall
IWMPClosedCaptionDispT<T>::set_captioningId(BSTR pbstrCaptioningID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("captioningId"), DISPID(954));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaptioningID /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPError
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A12DCF7D-14AB-4C1B-A8CD-63909F06025B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPErrorDispT<T>::clearErrorQueue()
{
  _TDispID _dispid(*this, OLETEXT("clearErrorQueue"), DISPID(851));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPErrorDispT<T>::get_errorCount(long* plNumErrors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorCount"), DISPID(852));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plNumErrors /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorDispT<T>::get_errorCount(void)
{
  long plNumErrors;
  this->get_errorCount((long*)&plNumErrors);
  return plNumErrors;
}

template <class T> HRESULT __fastcall
IWMPErrorDispT<T>::get_Item(long dwIndex/*[in]*/, 
                            Wmplib_tlb::IWMPErrorItem** ppErrorItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(853));
  TAutoArgs<1> _args;
  _args[1] = dwIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPErrorItem**)ppErrorItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorItem* __fastcall
IWMPErrorDispT<T>::get_Item(long dwIndex/*[in]*/)
{
  Wmplib_tlb::IWMPErrorItem* ppErrorItem;
  this->get_Item(dwIndex, (Wmplib_tlb::IWMPErrorItem**)&ppErrorItem);
  return ppErrorItem;
}

template <class T> HRESULT __fastcall
IWMPErrorDispT<T>::webHelp()
{
  _TDispID _dispid(*this, OLETEXT("webHelp"), DISPID(854));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPErrorItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3614C646-3B3B-4DE7-A81E-930E3F2127B3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPErrorItemDispT<T>::get_errorCode(long* phr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorCode"), DISPID(901));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorItemDispT<T>::get_errorCode(void)
{
  long phr;
  this->get_errorCode((long*)&phr);
  return phr;
}

template <class T> HRESULT __fastcall
IWMPErrorItemDispT<T>::get_errorDescription(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorDescription"), DISPID(902));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPErrorItemDispT<T>::get_errorDescription(void)
{
  BSTR pbstrDescription;
  this->get_errorDescription((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
IWMPErrorItemDispT<T>::get_errorContext(VARIANT* pvarContext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorContext"), DISPID(903));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarContext /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPErrorItemDispT<T>::get_errorContext(void)
{
  VARIANT pvarContext;
  this->get_errorContext((VARIANT*)&pvarContext);
  return pvarContext;
}

template <class T> HRESULT __fastcall
IWMPErrorItemDispT<T>::get_remedy(long* plRemedy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("remedy"), DISPID(904));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plRemedy /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorItemDispT<T>::get_remedy(void)
{
  long plRemedy;
  this->get_remedy((long*)&plRemedy);
  return plRemedy;
}

template <class T> HRESULT __fastcall
IWMPErrorItemDispT<T>::get_customUrl(BSTR* pbstrCustomUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("customUrl"), DISPID(905));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCustomUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPErrorItemDispT<T>::get_customUrl(void)
{
  BSTR pbstrCustomUrl;
  this->get_customUrl((BSTR*)&pbstrCustomUrl);
  return pbstrCustomUrl;
}

// *********************************************************************//
// DispIntf:  IWMPDVD
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8DA61686-4668-4A5C-AE5D-803193293DBE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPDVDDispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::get_domain(BSTR* strDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("domain"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDVDDispT<T>::get_domain(void)
{
  BSTR strDomain;
  this->get_domain((BSTR*)&strDomain);
  return strDomain;
}

template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::topMenu()
{
  _TDispID _dispid(*this, OLETEXT("topMenu"), DISPID(1003));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::titleMenu()
{
  _TDispID _dispid(*this, OLETEXT("titleMenu"), DISPID(1004));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::back()
{
  _TDispID _dispid(*this, OLETEXT("back"), DISPID(1005));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDVDDispT<T>::resume()
{
  _TDispID _dispid(*this, OLETEXT("resume"), DISPID(1006));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPPlayerApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40897764-CEAB-47BE-AD4A-8E28537F9BBF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlayerApplicationDispT<T>::switchToPlayerApplication()
{
  _TDispID _dispid(*this, OLETEXT("switchToPlayerApplication"), DISPID(1101));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayerApplicationDispT<T>::switchToControl()
{
  _TDispID _dispid(*this, OLETEXT("switchToControl"), DISPID(1102));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayerApplicationDispT<T>::get_playerDocked(VARIANT_BOOL* pbPlayerDocked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playerDocked"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbPlayerDocked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerApplicationDispT<T>::get_playerDocked(void)
{
  VARIANT_BOOL pbPlayerDocked;
  this->get_playerDocked((VARIANT_BOOL*)&pbPlayerDocked);
  return pbPlayerDocked;
}

template <class T> HRESULT __fastcall
IWMPPlayerApplicationDispT<T>::get_hasDisplay(VARIANT_BOOL* pbHasDisplay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasDisplay"), DISPID(1104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbHasDisplay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerApplicationDispT<T>::get_hasDisplay(void)
{
  VARIANT_BOOL pbHasDisplay;
  this->get_hasDisplay((VARIANT_BOOL*)&pbHasDisplay);
  return pbHasDisplay;
}

// *********************************************************************//
// DispIntf:  IWMPPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0E6B01D1-D407-4C85-BF5F-1C01F6150280}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_enableContextMenu(void)
{
  VARIANT_BOOL pbEnableContextMenu;
  this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu);
  return pbEnableContextMenu;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pbEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_uiMode(BSTR pbstrMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pbstrMode /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_uiMode(BSTR* pbstrMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer2DispT<T>::get_uiMode(void)
{
  BSTR pbstrMode;
  this->get_uiMode((BSTR*)&pbstrMode);
  return pbstrMode;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_stretchToFit(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_stretchToFit((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_stretchToFit(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_windowlessVideo(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_windowlessVideo(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_windowlessVideo((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_windowlessVideo(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowlessVideo"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer2DispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPPlayer2DispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPPlayer2DispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPPlayer2DispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPPlayer2DispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPPlayer2DispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPPlayer2DispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPPlayer2DispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer2DispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPPlayer2DispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPPlayer2DispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPPlayer2DispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPPlayer2DispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayer2DispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPPlayer2DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPPlayer2DispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayer2DispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// DispIntf:  IWMPPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BF52A4F-394A-11D3-B153-00C04F79FAA6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerDispT<T>::get_enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerDispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_enableContextMenu(VARIANT_BOOL* pbEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerDispT<T>::get_enableContextMenu(void)
{
  VARIANT_BOOL pbEnableContextMenu;
  this->get_enableContextMenu((VARIANT_BOOL*)&pbEnableContextMenu);
  return pbEnableContextMenu;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_enableContextMenu(VARIANT_BOOL pbEnableContextMenu)
{
  _TDispID _dispid(*this, OLETEXT("enableContextMenu"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pbEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_uiMode(BSTR pbstrMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pbstrMode /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_uiMode(BSTR* pbstrMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uiMode"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayerDispT<T>::get_uiMode(void)
{
  BSTR pbstrMode;
  this->get_uiMode((BSTR*)&pbstrMode);
  return pbstrMode;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayerDispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_URL(BSTR pbstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_openState(Wmplib_tlb::WMPOpenState* pwmpos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPOpenState __fastcall
IWMPPlayerDispT<T>::get_openState(void)
{
  Wmplib_tlb::WMPOpenState pwmpos;
  this->get_openState((Wmplib_tlb::WMPOpenState*)&pwmpos);
  return pwmpos;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_playState(Wmplib_tlb::WMPPlayState* pwmpps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpps /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPPlayState __fastcall
IWMPPlayerDispT<T>::get_playState(void)
{
  Wmplib_tlb::WMPPlayState pwmpps;
  this->get_playState((Wmplib_tlb::WMPPlayState*)&pwmpps);
  return pwmpps;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_controls(Wmplib_tlb::IWMPControls** ppControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("controls"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPControls**)ppControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPControlsPtr __fastcall
IWMPPlayerDispT<T>::get_controls(void)
{
  Wmplib_tlb::IWMPControlsPtr ppControl;
  this->get_controls(&ppControl);
  return ppControl;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_settings(Wmplib_tlb::IWMPSettings** ppSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPSettings**)ppSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPSettingsPtr __fastcall
IWMPPlayerDispT<T>::get_settings(void)
{
  Wmplib_tlb::IWMPSettingsPtr ppSettings;
  this->get_settings(&ppSettings);
  return ppSettings;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_currentMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPPlayerDispT<T>::get_currentMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_currentMedia(&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_currentMedia(Wmplib_tlb::IWMPMediaPtr ppMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMedia"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_mediaCollection(Wmplib_tlb::IWMPMediaCollection** ppMediaCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaCollection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMediaCollection**)ppMediaCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaCollectionPtr __fastcall
IWMPPlayerDispT<T>::get_mediaCollection(void)
{
  Wmplib_tlb::IWMPMediaCollectionPtr ppMediaCollection;
  this->get_mediaCollection(&ppMediaCollection);
  return ppMediaCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_playlistCollection(Wmplib_tlb::IWMPPlaylistCollection** ppPlaylistCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistCollection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylistCollection**)ppPlaylistCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistCollectionPtr __fastcall
IWMPPlayerDispT<T>::get_playlistCollection(void)
{
  Wmplib_tlb::IWMPPlaylistCollectionPtr ppPlaylistCollection;
  this->get_playlistCollection(&ppPlaylistCollection);
  return ppPlaylistCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_versionInfo(BSTR* pbstrVersionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("versionInfo"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrVersionInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayerDispT<T>::get_versionInfo(void)
{
  BSTR pbstrVersionInfo;
  this->get_versionInfo((BSTR*)&pbstrVersionInfo);
  return pbstrVersionInfo;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::launchURL(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("launchURL"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_network(Wmplib_tlb::IWMPNetwork** ppQNI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("network"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPNetwork**)ppQNI /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPNetworkPtr __fastcall
IWMPPlayerDispT<T>::get_network(void)
{
  Wmplib_tlb::IWMPNetworkPtr ppQNI;
  this->get_network(&ppQNI);
  return ppQNI;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_currentPlaylist(Wmplib_tlb::IWMPPlaylist** ppPL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPL /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPPlayerDispT<T>::get_currentPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPL;
  this->get_currentPlaylist(&ppPL);
  return ppPL;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::set_currentPlaylist(Wmplib_tlb::IWMPPlaylistPtr ppPL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPlaylist"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPL /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_cdromCollection(Wmplib_tlb::IWMPCdromCollection** ppCdromCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cdromCollection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPCdromCollection**)ppCdromCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPCdromCollectionPtr __fastcall
IWMPPlayerDispT<T>::get_cdromCollection(void)
{
  Wmplib_tlb::IWMPCdromCollectionPtr ppCdromCollection;
  this->get_cdromCollection(&ppCdromCollection);
  return ppCdromCollection;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_closedCaption(Wmplib_tlb::IWMPClosedCaption** ppClosedCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("closedCaption"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPClosedCaption**)ppClosedCaption /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPClosedCaptionPtr __fastcall
IWMPPlayerDispT<T>::get_closedCaption(void)
{
  Wmplib_tlb::IWMPClosedCaptionPtr ppClosedCaption;
  this->get_closedCaption(&ppClosedCaption);
  return ppClosedCaption;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_isOnline(VARIANT_BOOL* pfOnline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isOnline"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOnline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlayerDispT<T>::get_isOnline(void)
{
  VARIANT_BOOL pfOnline;
  this->get_isOnline((VARIANT_BOOL*)&pfOnline);
  return pfOnline;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_Error(Wmplib_tlb::IWMPError** ppError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPError**)ppError /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorPtr __fastcall
IWMPPlayerDispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorPtr ppError;
  this->get_Error(&ppError);
  return ppError;
}

template <class T> HRESULT __fastcall
IWMPPlayerDispT<T>::get_status(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlayerDispT<T>::get_status(void)
{
  BSTR pbstrStatus;
  this->get_status((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

// *********************************************************************//
// DispIntf:  IWMPErrorItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F75CCEC0-C67C-475C-931E-8719870BEE7D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_condition(long* plCondition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("condition"), DISPID(906));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCondition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorItem2DispT<T>::get_condition(void)
{
  long plCondition;
  this->get_condition((long*)&plCondition);
  return plCondition;
}

template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_errorCode(long* phr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorCode"), DISPID(901));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorItem2DispT<T>::get_errorCode(void)
{
  long phr;
  this->get_errorCode((long*)&phr);
  return phr;
}

template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_errorDescription(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorDescription"), DISPID(902));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPErrorItem2DispT<T>::get_errorDescription(void)
{
  BSTR pbstrDescription;
  this->get_errorDescription((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_errorContext(VARIANT* pvarContext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorContext"), DISPID(903));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarContext /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPErrorItem2DispT<T>::get_errorContext(void)
{
  VARIANT pvarContext;
  this->get_errorContext((VARIANT*)&pvarContext);
  return pvarContext;
}

template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_remedy(long* plRemedy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("remedy"), DISPID(904));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plRemedy /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPErrorItem2DispT<T>::get_remedy(void)
{
  long plRemedy;
  this->get_remedy((long*)&plRemedy);
  return plRemedy;
}

template <class T> HRESULT __fastcall
IWMPErrorItem2DispT<T>::get_customUrl(BSTR* pbstrCustomUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("customUrl"), DISPID(905));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCustomUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPErrorItem2DispT<T>::get_customUrl(void)
{
  BSTR pbstrCustomUrl;
  this->get_customUrl((BSTR*)&pbstrCustomUrl);
  return pbstrCustomUrl;
}

// *********************************************************************//
// DispIntf:  IWMPControls2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F030D25-0890-480F-9775-1F7E40AB5B8E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::step(long lStep/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("step"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = lStep /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, 
                                       VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPControls2DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::play()
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(51));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::stop()
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(52));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(53));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::fastForward()
{
  _TDispID _dispid(*this, OLETEXT("fastForward"), DISPID(54));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::fastReverse()
{
  _TDispID _dispid(*this, OLETEXT("fastReverse"), DISPID(55));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::get_currentPosition(double* pdCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdCurrentPosition /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPControls2DispT<T>::get_currentPosition(void)
{
  double pdCurrentPosition;
  this->get_currentPosition((double*)&pdCurrentPosition);
  return pdCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::set_currentPosition(double pdCurrentPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pdCurrentPosition /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPositionString"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCurrentPosition /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControls2DispT<T>::get_currentPositionString(void)
{
  BSTR pbstrCurrentPosition;
  this->get_currentPositionString((BSTR*)&pbstrCurrentPosition);
  return pbstrCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(58));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::previous()
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(59));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppIWMPMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPControls2DispT<T>::get_currentItem(void)
{
  Wmplib_tlb::IWMPMediaPtr ppIWMPMedia;
  this->get_currentItem(&ppIWMPMedia);
  return ppIWMPMedia;
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::get_currentMarker(long* plMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMarker /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls2DispT<T>::get_currentMarker(void)
{
  long plMarker;
  this->get_currentMarker((long*)&plMarker);
  return plMarker;
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::set_currentMarker(long plMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = plMarker /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls2DispT<T>::playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playItem"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPMedia2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB7C88BB-143E-4EA4-ACC3-E4350B2106C3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_Error(Wmplib_tlb::IWMPErrorItem** ppIWMPErrorItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(768));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPErrorItem**)ppIWMPErrorItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorItemPtr __fastcall
IWMPMedia2DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorItemPtr ppIWMPErrorItem;
  this->get_Error(&ppIWMPErrorItem);
  return ppIWMPErrorItem;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                    VARIANT_BOOL* pvbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isIdentical"), DISPID(763));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia2DispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  VARIANT_BOOL pvbool;
  this->get_isIdentical(pIWMPMedia, (VARIANT_BOOL*)&pvbool);
  return pvbool;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceURL"), DISPID(751));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::get_sourceURL(void)
{
  BSTR pbstrSourceURL;
  this->get_sourceURL((BSTR*)&pbstrSourceURL);
  return pbstrSourceURL;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::get_name(void)
{
  BSTR pbstrName;
  this->get_name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::set_name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_imageSourceWidth(long* pWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceWidth"), DISPID(752));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia2DispT<T>::get_imageSourceWidth(void)
{
  long pWidth;
  this->get_imageSourceWidth((long*)&pWidth);
  return pWidth;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_imageSourceHeight(long* pHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceHeight"), DISPID(753));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia2DispT<T>::get_imageSourceHeight(void)
{
  long pHeight;
  this->get_imageSourceHeight((long*)&pHeight);
  return pHeight;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_markerCount(long* pMarkerCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("markerCount"), DISPID(754));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMarkerCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia2DispT<T>::get_markerCount(void)
{
  long pMarkerCount;
  this->get_markerCount((long*)&pMarkerCount);
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::getMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerTime"), DISPID(755));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pMarkerTime /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IWMPMedia2DispT<T>::getMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  this->getMarkerTime(MarkerNum, (double*)&pMarkerTime);
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::getMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerName"), DISPID(756));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrMarkerName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::getMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName;
  this->getMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName);
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_duration(double* pDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("duration"), DISPID(757));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDuration /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPMedia2DispT<T>::get_duration(void)
{
  double pDuration;
  this->get_duration((double*)&pDuration);
  return pDuration;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_durationString(BSTR* pbstrDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("durationString"), DISPID(758));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDuration /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::get_durationString(void)
{
  BSTR pbstrDuration;
  this->get_durationString((BSTR*)&pbstrDuration);
  return pbstrDuration;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::get_attributeCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeCount"), DISPID(759));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia2DispT<T>::get_attributeCount(void)
{
  long plCount;
  this->get_attributeCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::getAttributeName(long lIndex/*[in]*/, BSTR* pbstrItemName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeName"), DISPID(760));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrItemName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::getAttributeName(long lIndex/*[in]*/)
{
  BSTR pbstrItemName;
  this->getAttributeName(lIndex, (BSTR*)&pbstrItemName);
  return pbstrItemName;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(761));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setItemInfo"), DISPID(762));
  TAutoArgs<2> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  _args[2] = bstrVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfoByAtom"), DISPID(765));
  TAutoArgs<1> _args;
  _args[1] = lAtom /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia2DispT<T>::getItemInfoByAtom(long lAtom/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfoByAtom(lAtom, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                               VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isMemberOf"), DISPID(766));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pPlaylist /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsMemberOf /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia2DispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/)
{
  VARIANT_BOOL pvarfIsMemberOf;
  this->isMemberOf(pPlaylist, (VARIANT_BOOL*)&pvarfIsMemberOf);
  return pvarfIsMemberOf;
}

template <class T> HRESULT __fastcall
IWMPMedia2DispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                   VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isReadOnlyItem"), DISPID(767));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarfIsReadOnly /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia2DispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/)
{
  VARIANT_BOOL pvarfIsReadOnly;
  this->isReadOnlyItem(bstrItemName, (VARIANT_BOOL*)&pvarfIsReadOnly);
  return pvarfIsReadOnly;
}

// *********************************************************************//
// DispIntf:  IWMPMedia3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F118EFC7-F03A-4FB4-99C9-1C02A5C1065B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getAttributeCountByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                            long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeCountByType"), DISPID(769));
  TAutoArgs<2> _args;
  _args[1] = bstrType /*[VT_BSTR:0]*/;
  _args[2] = bstrLanguage /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia3DispT<T>::getAttributeCountByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/)
{
  long plCount;
  this->getAttributeCountByType(bstrType, bstrLanguage, (long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getItemInfoByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                      long lIndex/*[in]*/, VARIANT* pvarValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfoByType"), DISPID(770));
  TAutoArgs<3> _args;
  _args[1] = bstrType /*[VT_BSTR:0]*/;
  _args[2] = bstrLanguage /*[VT_BSTR:0]*/;
  _args[3] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPMedia3DispT<T>::getItemInfoByType(BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                      long lIndex/*[in]*/)
{
  VARIANT pvarValue;
  this->getItemInfoByType(bstrType, bstrLanguage, lIndex, (VARIANT*)&pvarValue);
  return pvarValue;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_Error(Wmplib_tlb::IWMPErrorItem** ppIWMPErrorItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(768));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPErrorItem**)ppIWMPErrorItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPErrorItemPtr __fastcall
IWMPMedia3DispT<T>::get_Error(void)
{
  Wmplib_tlb::IWMPErrorItemPtr ppIWMPErrorItem;
  this->get_Error(&ppIWMPErrorItem);
  return ppIWMPErrorItem;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/, 
                                    VARIANT_BOOL* pvbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isIdentical"), DISPID(763));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia3DispT<T>::get_isIdentical(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  VARIANT_BOOL pvbool;
  this->get_isIdentical(pIWMPMedia, (VARIANT_BOOL*)&pvbool);
  return pvbool;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_sourceURL(BSTR* pbstrSourceURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceURL"), DISPID(751));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::get_sourceURL(void)
{
  BSTR pbstrSourceURL;
  this->get_sourceURL((BSTR*)&pbstrSourceURL);
  return pbstrSourceURL;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::get_name(void)
{
  BSTR pbstrName;
  this->get_name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::set_name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(764));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_imageSourceWidth(long* pWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceWidth"), DISPID(752));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia3DispT<T>::get_imageSourceWidth(void)
{
  long pWidth;
  this->get_imageSourceWidth((long*)&pWidth);
  return pWidth;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_imageSourceHeight(long* pHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSourceHeight"), DISPID(753));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia3DispT<T>::get_imageSourceHeight(void)
{
  long pHeight;
  this->get_imageSourceHeight((long*)&pHeight);
  return pHeight;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_markerCount(long* pMarkerCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("markerCount"), DISPID(754));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMarkerCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia3DispT<T>::get_markerCount(void)
{
  long pMarkerCount;
  this->get_markerCount((long*)&pMarkerCount);
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerTime"), DISPID(755));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pMarkerTime /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IWMPMedia3DispT<T>::getMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  this->getMarkerTime(MarkerNum, (double*)&pMarkerTime);
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMarkerName"), DISPID(756));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrMarkerName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::getMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName;
  this->getMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName);
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_duration(double* pDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("duration"), DISPID(757));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDuration /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPMedia3DispT<T>::get_duration(void)
{
  double pDuration;
  this->get_duration((double*)&pDuration);
  return pDuration;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_durationString(BSTR* pbstrDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("durationString"), DISPID(758));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDuration /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::get_durationString(void)
{
  BSTR pbstrDuration;
  this->get_durationString((BSTR*)&pbstrDuration);
  return pbstrDuration;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::get_attributeCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeCount"), DISPID(759));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMedia3DispT<T>::get_attributeCount(void)
{
  long plCount;
  this->get_attributeCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getAttributeName(long lIndex/*[in]*/, BSTR* pbstrItemName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeName"), DISPID(760));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrItemName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::getAttributeName(long lIndex/*[in]*/)
{
  BSTR pbstrItemName;
  this->getAttributeName(lIndex, (BSTR*)&pbstrItemName);
  return pbstrItemName;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(761));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::setItemInfo(BSTR bstrItemName/*[in]*/, BSTR bstrVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setItemInfo"), DISPID(762));
  TAutoArgs<2> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  _args[2] = bstrVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::getItemInfoByAtom(long lAtom/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfoByAtom"), DISPID(765));
  TAutoArgs<1> _args;
  _args[1] = lAtom /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMedia3DispT<T>::getItemInfoByAtom(long lAtom/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfoByAtom(lAtom, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/, 
                               VARIANT_BOOL* pvarfIsMemberOf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isMemberOf"), DISPID(766));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pPlaylist /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsMemberOf /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia3DispT<T>::isMemberOf(Wmplib_tlb::IWMPPlaylist* pPlaylist/*[in]*/)
{
  VARIANT_BOOL pvarfIsMemberOf;
  this->isMemberOf(pPlaylist, (VARIANT_BOOL*)&pvarfIsMemberOf);
  return pvarfIsMemberOf;
}

template <class T> HRESULT __fastcall
IWMPMedia3DispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/, 
                                   VARIANT_BOOL* pvarfIsReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isReadOnlyItem"), DISPID(767));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarfIsReadOnly /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMedia3DispT<T>::isReadOnlyItem(BSTR bstrItemName/*[in]*/)
{
  VARIANT_BOOL pvarfIsReadOnly;
  this->isReadOnlyItem(bstrItemName, (VARIANT_BOOL*)&pvarfIsReadOnly);
  return pvarfIsReadOnly;
}

// *********************************************************************//
// DispIntf:  IWMPMetadataPicture
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C29BBE0-F87D-4C45-AA28-A70F0230FFA9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMetadataPictureDispT<T>::get_mimeType(BSTR* pbstrMimeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mimeType"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMimeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataPictureDispT<T>::get_mimeType(void)
{
  BSTR pbstrMimeType;
  this->get_mimeType((BSTR*)&pbstrMimeType);
  return pbstrMimeType;
}

template <class T> HRESULT __fastcall
IWMPMetadataPictureDispT<T>::get_pictureType(BSTR* pbstrPictureType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("pictureType"), DISPID(1052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrPictureType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataPictureDispT<T>::get_pictureType(void)
{
  BSTR pbstrPictureType;
  this->get_pictureType((BSTR*)&pbstrPictureType);
  return pbstrPictureType;
}

template <class T> HRESULT __fastcall
IWMPMetadataPictureDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataPictureDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
IWMPMetadataPictureDispT<T>::get_URL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataPictureDispT<T>::get_URL(void)
{
  BSTR pbstrURL;
  this->get_URL((BSTR*)&pbstrURL);
  return pbstrURL;
}

// *********************************************************************//
// DispIntf:  IWMPMetadataText
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {769A72DB-13D2-45E2-9C48-53CA9D5B7450}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMetadataTextDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataTextDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
IWMPMetadataTextDispT<T>::get_text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(1055));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPMetadataTextDispT<T>::get_text(void)
{
  BSTR pbstrText;
  this->get_text((BSTR*)&pbstrText);
  return pbstrText;
}

// *********************************************************************//
// DispIntf:  IWMPSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_defaultAudioLanguage(long* plLangID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("defaultAudioLanguage"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLangID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettings2DispT<T>::get_defaultAudioLanguage(void)
{
  long plLangID;
  this->get_defaultAudioLanguage((long*)&plLangID);
  return plLangID;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_mediaAccessRights(BSTR* pbstrRights/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaAccessRights"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrRights /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSettings2DispT<T>::get_mediaAccessRights(void)
{
  BSTR pbstrRights;
  this->get_mediaAccessRights((BSTR*)&pbstrRights);
  return pbstrRights;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/, 
                                                VARIANT_BOOL* pvbAccepted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("requestMediaAccessRights"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = bstrDesiredAccess /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvbAccepted /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::requestMediaAccessRights(BSTR bstrDesiredAccess/*[in]*/)
{
  VARIANT_BOOL pvbAccepted;
  this->requestMediaAccessRights(bstrDesiredAccess, (VARIANT_BOOL*)&pvbAccepted);
  return pvbAccepted;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, 
                                       VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_autoStart(VARIANT_BOOL* pfAutoStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("autoStart"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAutoStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::get_autoStart(void)
{
  VARIANT_BOOL pfAutoStart;
  this->get_autoStart((VARIANT_BOOL*)&pfAutoStart);
  return pfAutoStart;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_autoStart(VARIANT_BOOL pfAutoStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("autoStart"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pfAutoStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_baseURL(BSTR* pbstrBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSettings2DispT<T>::get_baseURL(void)
{
  BSTR pbstrBaseURL;
  this->get_baseURL((BSTR*)&pbstrBaseURL);
  return pbstrBaseURL;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_baseURL(BSTR pbstrBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pbstrBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_defaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("defaultFrame"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefaultFrame /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSettings2DispT<T>::get_defaultFrame(void)
{
  BSTR pbstrDefaultFrame;
  this->get_defaultFrame((BSTR*)&pbstrDefaultFrame);
  return pbstrDefaultFrame;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_defaultFrame(BSTR pbstrDefaultFrame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("defaultFrame"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pbstrDefaultFrame /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_invokeURLs(VARIANT_BOOL* pfInvokeURLs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("invokeURLs"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfInvokeURLs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::get_invokeURLs(void)
{
  VARIANT_BOOL pfInvokeURLs;
  this->get_invokeURLs((VARIANT_BOOL*)&pfInvokeURLs);
  return pfInvokeURLs;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_invokeURLs(VARIANT_BOOL pfInvokeURLs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("invokeURLs"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pfInvokeURLs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_mute(VARIANT_BOOL* pfMute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfMute /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::get_mute(void)
{
  VARIANT_BOOL pfMute;
  this->get_mute((VARIANT_BOOL*)&pfMute);
  return pfMute;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_mute(VARIANT_BOOL pfMute/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfMute /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_playCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playCount"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettings2DispT<T>::get_playCount(void)
{
  long plCount;
  this->get_playCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_playCount(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playCount"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_rate(double* pdRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdRate /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPSettings2DispT<T>::get_rate(void)
{
  double pdRate;
  this->get_rate((double*)&pdRate);
  return pdRate;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_rate(double pdRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pdRate /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_balance(long* plBalance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("balance"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plBalance /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettings2DispT<T>::get_balance(void)
{
  long plBalance;
  this->get_balance((long*)&plBalance);
  return plBalance;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_balance(long plBalance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("balance"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = plBalance /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_volume(long* plVolume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVolume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSettings2DispT<T>::get_volume(void)
{
  long plVolume;
  this->get_volume((long*)&plVolume);
  return plVolume;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_volume(long plVolume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = plVolume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::getMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL* pvarfMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMode"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = bstrMode /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarfMode /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::getMode(BSTR bstrMode/*[in]*/)
{
  VARIANT_BOOL pvarfMode;
  this->getMode(bstrMode, (VARIANT_BOOL*)&pvarfMode);
  return pvarfMode;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::setMode(BSTR bstrMode/*[in]*/, VARIANT_BOOL varfMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setMode"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = bstrMode /*[VT_BSTR:0]*/;
  _args[2] = varfMode /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::get_enableErrorDialogs(VARIANT_BOOL* pfEnableErrorDialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableErrorDialogs"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableErrorDialogs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSettings2DispT<T>::get_enableErrorDialogs(void)
{
  VARIANT_BOOL pfEnableErrorDialogs;
  this->get_enableErrorDialogs((VARIANT_BOOL*)&pfEnableErrorDialogs);
  return pfEnableErrorDialogs;
}

template <class T> HRESULT __fastcall
IWMPSettings2DispT<T>::set_enableErrorDialogs(VARIANT_BOOL pfEnableErrorDialogs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableErrorDialogs"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pfEnableErrorDialogs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPControls3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1D1110E-D545-476A-9A78-AC3E4CB1E6BD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_audioLanguageCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("audioLanguageCount"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls3DispT<T>::get_audioLanguageCount(void)
{
  long plCount;
  this->get_audioLanguageCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::getAudioLanguageID(long lIndex/*[in]*/, long* plLangID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAudioLanguageID"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(plLangID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls3DispT<T>::getAudioLanguageID(long lIndex/*[in]*/)
{
  long plLangID;
  this->getAudioLanguageID(lIndex, (long*)&plLangID);
  return plLangID;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::getAudioLanguageDescription(long lIndex/*[in]*/, 
                                                   BSTR* pbstrLangDesc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAudioLanguageDescription"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrLangDesc /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControls3DispT<T>::getAudioLanguageDescription(long lIndex/*[in]*/)
{
  BSTR pbstrLangDesc;
  this->getAudioLanguageDescription(lIndex, (BSTR*)&pbstrLangDesc);
  return pbstrLangDesc;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentAudioLanguage(long* plLangID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentAudioLanguage"), DISPID(68));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLangID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls3DispT<T>::get_currentAudioLanguage(void)
{
  long plLangID;
  this->get_currentAudioLanguage((long*)&plLangID);
  return plLangID;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentAudioLanguage(long plLangID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentAudioLanguage"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = plLangID /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentAudioLanguageIndex(long* plIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentAudioLanguageIndex"), DISPID(69));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls3DispT<T>::get_currentAudioLanguageIndex(void)
{
  long plIndex;
  this->get_currentAudioLanguageIndex((long*)&plIndex);
  return plIndex;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentAudioLanguageIndex(long plIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentAudioLanguageIndex"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = plIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::getLanguageName(long lLangID/*[in]*/, BSTR* pbstrLangName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLanguageName"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = lLangID /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrLangName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControls3DispT<T>::getLanguageName(long lLangID/*[in]*/)
{
  BSTR pbstrLangName;
  this->getLanguageName(lLangID, (BSTR*)&pbstrLangName);
  return pbstrLangName;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentPositionTimecode(BSTR* bstrTimecode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPositionTimecode"), DISPID(71));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTimecode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControls3DispT<T>::get_currentPositionTimecode(void)
{
  BSTR bstrTimecode;
  this->get_currentPositionTimecode((BSTR*)&bstrTimecode);
  return bstrTimecode;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentPositionTimecode(BSTR bstrTimecode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPositionTimecode"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = bstrTimecode /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::step(long lStep/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("step"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = lStep /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/, 
                                       VARIANT_BOOL* pIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isAvailable"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIsAvailable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPControls3DispT<T>::get_isAvailable(BSTR bstrItem/*[in]*/)
{
  VARIANT_BOOL pIsAvailable;
  this->get_isAvailable(bstrItem, (VARIANT_BOOL*)&pIsAvailable);
  return pIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::play()
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(51));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::stop()
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(52));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(53));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::fastForward()
{
  _TDispID _dispid(*this, OLETEXT("fastForward"), DISPID(54));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::fastReverse()
{
  _TDispID _dispid(*this, OLETEXT("fastReverse"), DISPID(55));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentPosition(double* pdCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdCurrentPosition /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWMPControls3DispT<T>::get_currentPosition(void)
{
  double pdCurrentPosition;
  this->get_currentPosition((double*)&pdCurrentPosition);
  return pdCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentPosition(double pdCurrentPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPosition"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pdCurrentPosition /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentPositionString(BSTR* pbstrCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPositionString"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCurrentPosition /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPControls3DispT<T>::get_currentPositionString(void)
{
  BSTR pbstrCurrentPosition;
  this->get_currentPositionString((BSTR*)&pbstrCurrentPosition);
  return pbstrCurrentPosition;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(58));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::previous()
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(59));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentItem(Wmplib_tlb::IWMPMedia** ppIWMPMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppIWMPMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPControls3DispT<T>::get_currentItem(void)
{
  Wmplib_tlb::IWMPMediaPtr ppIWMPMedia;
  this->get_currentItem(&ppIWMPMedia);
  return ppIWMPMedia;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentItem(Wmplib_tlb::IWMPMediaPtr ppIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)ppIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::get_currentMarker(long* plMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMarker /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPControls3DispT<T>::get_currentMarker(void)
{
  long plMarker;
  this->get_currentMarker((long*)&plMarker);
  return plMarker;
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::set_currentMarker(long plMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentMarker"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = plMarker /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPControls3DispT<T>::playItem(Wmplib_tlb::IWMPMedia* pIWMPMedia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playItem"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pIWMPMedia /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPClosedCaption2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {350BA78B-6BC8-4113-A5F5-312056934EB6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_SAMILangCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILangCount"), DISPID(955));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPClosedCaption2DispT<T>::get_SAMILangCount(void)
{
  long plCount;
  this->get_SAMILangCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::getSAMILangName(long nIndex/*[in]*/, BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSAMILangName"), DISPID(956));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::getSAMILangName(long nIndex/*[in]*/)
{
  BSTR pbstrName;
  this->getSAMILangName(nIndex, (BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::getSAMILangID(long nIndex/*[in]*/, long* plLangID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSAMILangID"), DISPID(957));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(plLangID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPClosedCaption2DispT<T>::getSAMILangID(long nIndex/*[in]*/)
{
  long plLangID;
  this->getSAMILangID(nIndex, (long*)&plLangID);
  return plLangID;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIStyleCount(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyleCount"), DISPID(958));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIStyleCount(void)
{
  long plCount;
  this->get_SAMIStyleCount((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::getSAMIStyleName(long nIndex/*[in]*/, BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSAMIStyleName"), DISPID(959));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::getSAMIStyleName(long nIndex/*[in]*/)
{
  BSTR pbstrName;
  this->getSAMIStyleName(nIndex, (BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIStyle(BSTR* pbstrSAMIStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(951));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMIStyle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIStyle(void)
{
  BSTR pbstrSAMIStyle;
  this->get_SAMIStyle((BSTR*)&pbstrSAMIStyle);
  return pbstrSAMIStyle;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::set_SAMIStyle(BSTR pbstrSAMIStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(951));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMIStyle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_SAMILang(BSTR* pbstrSAMILang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(952));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMILang /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::get_SAMILang(void)
{
  BSTR pbstrSAMILang;
  this->get_SAMILang((BSTR*)&pbstrSAMILang);
  return pbstrSAMILang;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::set_SAMILang(BSTR pbstrSAMILang/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(952));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMILang /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIFileName(BSTR* pbstrSAMIFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(953));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSAMIFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::get_SAMIFileName(void)
{
  BSTR pbstrSAMIFileName;
  this->get_SAMIFileName((BSTR*)&pbstrSAMIFileName);
  return pbstrSAMIFileName;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::set_SAMIFileName(BSTR pbstrSAMIFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(953));
  TAutoArgs<1> _args;
  _args[1] = pbstrSAMIFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::get_captioningId(BSTR* pbstrCaptioningID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("captioningId"), DISPID(954));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaptioningID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPClosedCaption2DispT<T>::get_captioningId(void)
{
  BSTR pbstrCaptioningID;
  this->get_captioningId((BSTR*)&pbstrCaptioningID);
  return pbstrCaptioningID;
}

template <class T> HRESULT __fastcall
IWMPClosedCaption2DispT<T>::set_captioningId(BSTR pbstrCaptioningID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("captioningId"), DISPID(954));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaptioningID /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPMediaCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BA957F5-FD8C-4791-B82D-F840401EE474}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::createQuery(Wmplib_tlb::IWMPQuery** ppQuery/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createQuery"), DISPID(1401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPQuery**)ppQuery /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPQuery* __fastcall
IWMPMediaCollection2DispT<T>::createQuery(void)
{
  Wmplib_tlb::IWMPQuery* ppQuery;
  this->createQuery((Wmplib_tlb::IWMPQuery**)&ppQuery);
  return ppQuery;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                 BSTR bstrMediaType/*[in]*/, 
                                                 BSTR bstrSortAttribute/*[in]*/, 
                                                 VARIANT_BOOL fSortAscending/*[in]*/, 
                                                 Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getPlaylistByQuery"), DISPID(1402));
  TAutoArgs<4> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPQuery*)pQuery /*[VT_USERDEFINED:1]*/;
  _args[2] = bstrMediaType /*[VT_BSTR:0]*/;
  _args[3] = bstrSortAttribute /*[VT_BSTR:0]*/;
  _args[4] = fSortAscending /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getPlaylistByQuery(Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                 BSTR bstrMediaType/*[in]*/, 
                                                 BSTR bstrSortAttribute/*[in]*/, 
                                                 VARIANT_BOOL fSortAscending/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  this->getPlaylistByQuery(pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                         Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                         BSTR bstrMediaType/*[in]*/, 
                                                         BSTR bstrSortAttribute/*[in]*/, 
                                                         VARIANT_BOOL fSortAscending/*[in]*/, 
                                                         Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStringCollectionByQuery"), DISPID(1403));
  TAutoArgs<5> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Wmplib_tlb::IWMPQuery*)pQuery /*[VT_USERDEFINED:1]*/;
  _args[3] = bstrMediaType /*[VT_BSTR:0]*/;
  _args[4] = bstrSortAttribute /*[VT_BSTR:0]*/;
  _args[5] = fSortAscending /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPStringCollection**)ppStringCollection /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPStringCollection* __fastcall
IWMPMediaCollection2DispT<T>::getStringCollectionByQuery(BSTR bstrAttribute/*[in]*/, 
                                                         Wmplib_tlb::IWMPQuery* pQuery/*[in]*/, 
                                                         BSTR bstrMediaType/*[in]*/, 
                                                         BSTR bstrSortAttribute/*[in]*/, 
                                                         VARIANT_BOOL fSortAscending/*[in]*/)
{
  Wmplib_tlb::IWMPStringCollection* ppStringCollection;
  this->getStringCollectionByQuery(bstrAttribute, pQuery, bstrMediaType, bstrSortAttribute, 
                                   fSortAscending, (Wmplib_tlb::IWMPStringCollection**)&ppStringCollection);
  return ppStringCollection;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                         BSTR bstrValue/*[in]*/, 
                                                         BSTR bstrMediaType/*[in]*/, 
                                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAttributeAndMediaType"), DISPID(1404));
  TAutoArgs<3> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  _args[3] = bstrMediaType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByAttributeAndMediaType(BSTR bstrAttribute/*[in]*/, 
                                                         BSTR bstrValue/*[in]*/, 
                                                         BSTR bstrMediaType/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAttributeAndMediaType(bstrAttribute, bstrValue, bstrMediaType, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::add(BSTR bstrURL/*[in]*/, 
                                  Wmplib_tlb::IWMPMedia** ppItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("add"), DISPID(452));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPMediaCollection2DispT<T>::add(BSTR bstrURL/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppItem;
  this->add(bstrURL, (Wmplib_tlb::IWMPMedia**)&ppItem);
  return ppItem;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getAll(Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAll"), DISPID(453));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getAll(void)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getAll((Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByName(BSTR bstrName/*[in]*/, 
                                        Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByName"), DISPID(454));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByName(BSTR bstrName/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByName(bstrName, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByGenre(BSTR bstrGenre/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByGenre"), DISPID(455));
  TAutoArgs<1> _args;
  _args[1] = bstrGenre /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByGenre(BSTR bstrGenre/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByGenre(bstrGenre, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByAuthor(BSTR bstrAuthor/*[in]*/, 
                                          Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAuthor"), DISPID(456));
  TAutoArgs<1> _args;
  _args[1] = bstrAuthor /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByAuthor(BSTR bstrAuthor/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAuthor(bstrAuthor, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByAlbum(BSTR bstrAlbum/*[in]*/, 
                                         Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAlbum"), DISPID(457));
  TAutoArgs<1> _args;
  _args[1] = bstrAlbum /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByAlbum(BSTR bstrAlbum/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAlbum(bstrAlbum, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/, 
                                             Wmplib_tlb::IWMPPlaylist** ppMediaItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getByAttribute"), DISPID(458));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppMediaItems /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPMediaCollection2DispT<T>::getByAttribute(BSTR bstrAttribute/*[in]*/, BSTR bstrValue/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppMediaItems;
  this->getByAttribute(bstrAttribute, bstrValue, (Wmplib_tlb::IWMPPlaylist**)&ppMediaItems);
  return ppMediaItems;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::remove(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                     VARIANT_BOOL varfDeleteFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove"), DISPID(459));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  _args[2] = varfDeleteFile /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                           BSTR bstrMediaType/*[in]*/, 
                                                           Wmplib_tlb::IWMPStringCollection** ppStringCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeStringCollection"), DISPID(461));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrMediaType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPStringCollection**)ppStringCollection /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPStringCollection* __fastcall
IWMPMediaCollection2DispT<T>::getAttributeStringCollection(BSTR bstrAttribute/*[in]*/, 
                                                           BSTR bstrMediaType/*[in]*/)
{
  Wmplib_tlb::IWMPStringCollection* ppStringCollection;
  this->getAttributeStringCollection(bstrAttribute, bstrMediaType, (Wmplib_tlb::IWMPStringCollection**)&ppStringCollection);
  return ppStringCollection;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::getMediaAtom(BSTR bstrItemName/*[in]*/, long* plAtom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMediaAtom"), DISPID(470));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plAtom /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPMediaCollection2DispT<T>::getMediaAtom(BSTR bstrItemName/*[in]*/)
{
  long plAtom;
  this->getMediaAtom(bstrItemName, (long*)&plAtom);
  return plAtom;
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::setDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                         VARIANT_BOOL varfIsDeleted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setDeleted"), DISPID(471));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMediaCollection2DispT<T>::isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/, 
                                        VARIANT_BOOL* pvarfIsDeleted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isDeleted"), DISPID(472));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPMedia*)pItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvarfIsDeleted /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPMediaCollection2DispT<T>::isDeleted(Wmplib_tlb::IWMPMedia* pItem/*[in]*/)
{
  VARIANT_BOOL pvarfIsDeleted;
  this->isDeleted(pItem, (VARIANT_BOOL*)&pvarfIsDeleted);
  return pvarfIsDeleted;
}

// *********************************************************************//
// DispIntf:  IWMPStringCollection2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46AD648D-53F1-4A74-92E2-2A1B68D63FD4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/
                                           , VARIANT_BOOL* pvbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isIdentical"), DISPID(1451));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPStringCollection2*)pIWMPStringCollection2 /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pvbool /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPStringCollection2DispT<T>::isIdentical(Wmplib_tlb::IWMPStringCollection2* pIWMPStringCollection2/*[in]*/)
{
  VARIANT_BOOL pvbool;
  this->isIdentical(pIWMPStringCollection2, (VARIANT_BOOL*)&pvbool);
  return pvbool;
}

template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::getItemInfo(long lCollectionIndex/*[in]*/, BSTR bstrItemName/*[in]*/
                                           , BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(1452));
  TAutoArgs<2> _args;
  _args[1] = lCollectionIndex /*[VT_I4:0]*/;
  _args[2] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPStringCollection2DispT<T>::getItemInfo(long lCollectionIndex/*[in]*/, BSTR bstrItemName/*[in]*/)
{
  BSTR pbstrValue;
  this->getItemInfo(lCollectionIndex, bstrItemName, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::getAttributeCountByType(long lCollectionIndex/*[in]*/, 
                                                       BSTR bstrType/*[in]*/, 
                                                       BSTR bstrLanguage/*[in]*/, 
                                                       long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeCountByType"), DISPID(1453));
  TAutoArgs<3> _args;
  _args[1] = lCollectionIndex /*[VT_I4:0]*/;
  _args[2] = bstrType /*[VT_BSTR:0]*/;
  _args[3] = bstrLanguage /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPStringCollection2DispT<T>::getAttributeCountByType(long lCollectionIndex/*[in]*/, 
                                                       BSTR bstrType/*[in]*/, 
                                                       BSTR bstrLanguage/*[in]*/)
{
  long plCount;
  this->getAttributeCountByType(lCollectionIndex, bstrType, bstrLanguage, (long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::getItemInfoByType(long lCollectionIndex/*[in]*/, 
                                                 BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                                 long lAttributeIndex/*[in]*/, 
                                                 VARIANT* pvarValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfoByType"), DISPID(1454));
  TAutoArgs<4> _args;
  _args[1] = lCollectionIndex /*[VT_I4:0]*/;
  _args[2] = bstrType /*[VT_BSTR:0]*/;
  _args[3] = bstrLanguage /*[VT_BSTR:0]*/;
  _args[4] = lAttributeIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPStringCollection2DispT<T>::getItemInfoByType(long lCollectionIndex/*[in]*/, 
                                                 BSTR bstrType/*[in]*/, BSTR bstrLanguage/*[in]*/, 
                                                 long lAttributeIndex/*[in]*/)
{
  VARIANT pvarValue;
  this->getItemInfoByType(lCollectionIndex, bstrType, bstrLanguage, lAttributeIndex, (VARIANT*)&pvarValue);
  return pvarValue;
}

template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPStringCollection2DispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPStringCollection2DispT<T>::Item(long lIndex/*[in]*/, BSTR* pbstrString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(402));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPStringCollection2DispT<T>::Item(long lIndex/*[in]*/)
{
  BSTR pbstrString;
  this->Item(lIndex, (BSTR*)&pbstrString);
  return pbstrString;
}

// *********************************************************************//
// DispIntf:  IWMPQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A00918F3-A6B0-4BFB-9189-FD834C7BC5A5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPQueryDispT<T>::addCondition(BSTR bstrAttribute/*[in]*/, BSTR bstrOperator/*[in]*/, 
                                BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addCondition"), DISPID(1351));
  TAutoArgs<3> _args;
  _args[1] = bstrAttribute /*[VT_BSTR:0]*/;
  _args[2] = bstrOperator /*[VT_BSTR:0]*/;
  _args[3] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPQueryDispT<T>::beginNextGroup()
{
  _TDispID _dispid(*this, OLETEXT("beginNextGroup"), DISPID(1352));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPPlaylistCtrl
// Interface: IWMPPlaylistCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_Playlist(Wmplib_tlb::IWMPPlaylist** ppdispPlaylist/*[out,retval]*/)
{
  return (*this)->get_Playlist(ppdispPlaylist);
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_Playlist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist;
  OLECHECK(this->get_Playlist((Wmplib_tlb::IWMPPlaylistPtr*)&ppdispPlaylist));
  return ppdispPlaylist;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/)
{
  return (*this)->set_Playlist((IWMPPlaylist*)ppdispPlaylist);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylist* ppdispPlaylist/*[in]*/)
{
  return (*this)->set_Playlist(ppdispPlaylist);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columns(BSTR* pbstrColumns/*[out,retval]*/)
{
  return (*this)->get_columns(pbstrColumns);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columns(void)
{
  BSTR pbstrColumns = 0;
  OLECHECK(this->get_columns((BSTR*)&pbstrColumns));
  return pbstrColumns;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_columns(BSTR pbstrColumns/*[in]*/)
{
  return (*this)->set_columns(pbstrColumns);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_columnCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnCount(void)
{
  long pVal;
  OLECHECK(this->get_columnCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnOrder(BSTR* pbstrColumnOrder/*[out,retval]*/)
{
  return (*this)->get_columnOrder(pbstrColumnOrder);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnOrder(void)
{
  BSTR pbstrColumnOrder = 0;
  OLECHECK(this->get_columnOrder((BSTR*)&pbstrColumnOrder));
  return pbstrColumnOrder;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_columnOrder(BSTR pbstrColumnOrder/*[in]*/)
{
  return (*this)->set_columnOrder(pbstrColumnOrder);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_columnsVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_columnsVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_columnsVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_columnsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_columnsVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_dropDownVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_dropDownVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_dropDownVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_playlistItemsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_playlistItemsVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_playlistItemsVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_playlistItemsVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_playlistItemsVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_checkboxesVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_checkboxesVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_checkboxesVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_checkboxesVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_checkboxesVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_backgroundColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_backgroundColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_foregroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_foregroundColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_foregroundColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_foregroundColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_disabledItemColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_disabledItemColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_disabledItemColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_disabledItemColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_disabledItemColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_disabledItemColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlayingColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_itemPlayingColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlayingColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_itemPlayingColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemPlayingColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_itemPlayingColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlayingBackgroundColor(BSTR* pbstrBackgroundColor/*[out,retval]*/)
{
  return (*this)->get_itemPlayingBackgroundColor(pbstrBackgroundColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlayingBackgroundColor(void)
{
  BSTR pbstrBackgroundColor = 0;
  OLECHECK(this->get_itemPlayingBackgroundColor((BSTR*)&pbstrBackgroundColor));
  return pbstrBackgroundColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/)
{
  return (*this)->set_itemPlayingBackgroundColor(pbstrBackgroundColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundImage(BSTR* pbstrImage/*[out,retval]*/)
{
  return (*this)->get_backgroundImage(pbstrImage);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundImage(void)
{
  BSTR pbstrImage = 0;
  OLECHECK(this->get_backgroundImage((BSTR*)&pbstrImage));
  return pbstrImage;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_backgroundImage(BSTR pbstrImage/*[in]*/)
{
  return (*this)->set_backgroundImage(pbstrImage);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_allowItemEditing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_allowItemEditing(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_allowItemEditing(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_allowItemEditing((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_allowItemEditing(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_allowColumnSorting(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_allowColumnSorting(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_allowColumnSorting(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_allowColumnSorting((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_allowColumnSorting(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownList(BSTR* pbstrList/*[out,retval]*/)
{
  return (*this)->get_dropDownList(pbstrList);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownList(void)
{
  BSTR pbstrList = 0;
  OLECHECK(this->get_dropDownList((BSTR*)&pbstrList));
  return pbstrList;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_dropDownList(BSTR pbstrList/*[in]*/)
{
  return (*this)->set_dropDownList(pbstrList);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownToolTip(BSTR* pbstrToolTip/*[out,retval]*/)
{
  return (*this)->get_dropDownToolTip(pbstrToolTip);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownToolTip(void)
{
  BSTR pbstrToolTip = 0;
  OLECHECK(this->get_dropDownToolTip((BSTR*)&pbstrToolTip));
  return pbstrToolTip;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/)
{
  return (*this)->set_dropDownToolTip(pbstrToolTip);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_copying(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_copying(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_copying(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_copying((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_copying(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_copying(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::copy(void)
{
  return (*this)->copy();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::abortCopy(void)
{
  return (*this)->abortCopy();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::deleteSelected(void)
{
  return (*this)->deleteSelected();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::deleteSelectedFromLibrary(void)
{
  return (*this)->deleteSelectedFromLibrary();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::moveSelectedUp(void)
{
  return (*this)->moveSelectedUp();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::moveSelectedDown(void)
{
  return (*this)->moveSelectedDown();
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/)
{
  return (*this)->addSelectedToPlaylist(pdispPlaylist);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextSelectedItem(long nStartIndex/*[in]*/, 
                                              long* pnSelected/*[out,retval]*/)
{
  return (*this)->getNextSelectedItem(nStartIndex, pnSelected);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextSelectedItem(long nStartIndex/*[in]*/)
{
  long pnSelected;
  OLECHECK(this->getNextSelectedItem(nStartIndex/*[in]*/, (long*)&pnSelected));
  return pnSelected;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextCheckedItem(long nStartIndex/*[in]*/, 
                                             long* pnChecked/*[out,retval]*/)
{
  return (*this)->getNextCheckedItem(nStartIndex, pnChecked);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextCheckedItem(long nStartIndex/*[in]*/)
{
  long pnChecked;
  OLECHECK(this->getNextCheckedItem(nStartIndex/*[in]*/, (long*)&pnChecked));
  return pnChecked;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setSelectedState(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  return (*this)->setSelectedState(nIndex, vbSelected);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setCheckedState(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/)
{
  return (*this)->setCheckedState(nIndex, vbChecked);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::sortColumn(long nIndex/*[in]*/)
{
  return (*this)->sortColumn(nIndex);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/)
{
  return (*this)->setColumnResizeMode(nIndex, newMode);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/)
{
  return (*this)->setColumnWidth(nIndex, nWidth);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemErrorColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_itemErrorColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemErrorColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_itemErrorColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemErrorColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_itemErrorColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemCount(long* pnItemCount/*[out,retval]*/)
{
  return (*this)->get_itemCount(pnItemCount);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemCount(void)
{
  long pnItemCount;
  OLECHECK(this->get_itemCount((long*)&pnItemCount));
  return pnItemCount;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemMedia(long nIndex/*[in]*/, 
                                        Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  return (*this)->get_itemMedia(nIndex, ppMedia);
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemMedia(long nIndex/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppMedia;
  OLECHECK(this->get_itemMedia(nIndex/*[in]*/, (Wmplib_tlb::IWMPMedia**)&ppMedia));
  return ppMedia;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlaylist(long nIndex/*[in]*/, 
                                           Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  return (*this)->get_itemPlaylist(nIndex, ppPlaylist);
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemPlaylist(long nIndex/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  OLECHECK(this->get_itemPlaylist(nIndex/*[in]*/, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist));
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextSelectedItem2(long nStartIndex/*[in]*/, 
                                               long* pnSelected/*[out,retval]*/)
{
  return (*this)->getNextSelectedItem2(nStartIndex, pnSelected);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextSelectedItem2(long nStartIndex/*[in]*/)
{
  long pnSelected;
  OLECHECK(this->getNextSelectedItem2(nStartIndex/*[in]*/, (long*)&pnSelected));
  return pnSelected;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextCheckedItem2(long nStartIndex/*[in]*/, 
                                              long* pnChecked/*[out,retval]*/)
{
  return (*this)->getNextCheckedItem2(nStartIndex, pnChecked);
}

template <class T> long __fastcall
TCOMIWMPPlaylistCtrlT<T>::getNextCheckedItem2(long nStartIndex/*[in]*/)
{
  long pnChecked;
  OLECHECK(this->getNextCheckedItem2(nStartIndex/*[in]*/, (long*)&pnChecked));
  return pnChecked;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setSelectedState2(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  return (*this)->setSelectedState2(nIndex, vbSelected);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::setCheckedState2(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/)
{
  return (*this)->setCheckedState2(nIndex, vbChecked);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_leftStatus(BSTR* pbstrStatus/*[out,retval]*/)
{
  return (*this)->get_leftStatus(pbstrStatus);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_leftStatus(void)
{
  BSTR pbstrStatus = 0;
  OLECHECK(this->get_leftStatus((BSTR*)&pbstrStatus));
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_leftStatus(BSTR pbstrStatus/*[in]*/)
{
  return (*this)->set_leftStatus(pbstrStatus);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_rightStatus(BSTR* pbstrStatus/*[out,retval]*/)
{
  return (*this)->get_rightStatus(pbstrStatus);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_rightStatus(void)
{
  BSTR pbstrStatus = 0;
  OLECHECK(this->get_rightStatus((BSTR*)&pbstrStatus));
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_rightStatus(BSTR pbstrStatus/*[in]*/)
{
  return (*this)->set_rightStatus(pbstrStatus);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_editButtonVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_editButtonVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_editButtonVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_editButtonVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_editButtonVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownImage(BSTR* pbstrImage/*[out,retval]*/)
{
  return (*this)->get_dropDownImage(pbstrImage);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownImage(void)
{
  BSTR pbstrImage = 0;
  OLECHECK(this->get_dropDownImage((BSTR*)&pbstrImage));
  return pbstrImage;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_dropDownImage(BSTR pbstrImage/*[in]*/)
{
  return (*this)->set_dropDownImage(pbstrImage);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownBackgroundImage(BSTR* pbstrImage/*[out,retval]*/)
{
  return (*this)->get_dropDownBackgroundImage(pbstrImage);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_dropDownBackgroundImage(void)
{
  BSTR pbstrImage = 0;
  OLECHECK(this->get_dropDownBackgroundImage((BSTR*)&pbstrImage));
  return pbstrImage;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/)
{
  return (*this)->set_dropDownBackgroundImage(pbstrImage);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_hueShift(float* pVal/*[out,retval]*/)
{
  return (*this)->get_hueShift(pVal);
}

template <class T> float __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_hueShift(void)
{
  float pVal;
  OLECHECK(this->get_hueShift((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_hueShift(float pVal/*[in]*/)
{
  return (*this)->set_hueShift(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_saturation(float* pVal/*[out,retval]*/)
{
  return (*this)->get_saturation(pVal);
}

template <class T> float __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_saturation(void)
{
  float pVal;
  OLECHECK(this->get_saturation((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_saturation(float pVal/*[in]*/)
{
  return (*this)->set_saturation(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_statusColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_statusColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_statusColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_statusColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_statusColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_statusColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_toolbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_toolbarVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_toolbarVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_toolbarVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_toolbarVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_itemSelectedColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_itemSelectedColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemSelectedColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_itemSelectedColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/)
{
  return (*this)->get_itemSelectedFocusLostColor(pbstrFocusLostColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedFocusLostColor(void)
{
  BSTR pbstrFocusLostColor = 0;
  OLECHECK(this->get_itemSelectedFocusLostColor((BSTR*)&pbstrFocusLostColor));
  return pbstrFocusLostColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/)
{
  return (*this)->set_itemSelectedFocusLostColor(pbstrFocusLostColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedBackgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_itemSelectedBackgroundColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedBackgroundColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_itemSelectedBackgroundColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_itemSelectedBackgroundColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedBackgroundFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/)
{
  return (*this)->get_itemSelectedBackgroundFocusLostColor(pbstrFocusLostColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_itemSelectedBackgroundFocusLostColor(void)
{
  BSTR pbstrFocusLostColor = 0;
  OLECHECK(this->get_itemSelectedBackgroundFocusLostColor((BSTR*)&pbstrFocusLostColor));
  return pbstrFocusLostColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/)
{
  return (*this)->set_itemSelectedBackgroundFocusLostColor(pbstrFocusLostColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundSplitColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_backgroundSplitColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_backgroundSplitColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_backgroundSplitColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_backgroundSplitColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_backgroundSplitColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_statusTextColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_statusTextColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPPlaylistCtrlT<T>::get_statusTextColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_statusTextColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPPlaylistCtrlT<T>::set_statusTextColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_statusTextColor(pbstrColor);
}

// *********************************************************************//
// DispIntf:  IWMPPlaylistCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_Playlist(Wmplib_tlb::IWMPPlaylist** ppdispPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playlist"), DISPID(5601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppdispPlaylist /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPPlaylistCtrlDispT<T>::get_Playlist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist;
  this->get_Playlist(&ppdispPlaylist);
  return ppdispPlaylist;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppdispPlaylist/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playlist"), DISPID(5601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppdispPlaylist /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_columns(BSTR* pbstrColumns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columns"), DISPID(5602));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColumns /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_columns(void)
{
  BSTR pbstrColumns;
  this->get_columns((BSTR*)&pbstrColumns);
  return pbstrColumns;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_columns(BSTR pbstrColumns/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columns"), DISPID(5602));
  TAutoArgs<1> _args;
  _args[1] = pbstrColumns /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnCount"), DISPID(5603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnCount(void)
{
  long pVal;
  this->get_columnCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnOrder(BSTR* pbstrColumnOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnOrder"), DISPID(5604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColumnOrder /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnOrder(void)
{
  BSTR pbstrColumnOrder;
  this->get_columnOrder((BSTR*)&pbstrColumnOrder);
  return pbstrColumnOrder;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_columnOrder(BSTR pbstrColumnOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnOrder"), DISPID(5604));
  TAutoArgs<1> _args;
  _args[1] = pbstrColumnOrder /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnsVisible"), DISPID(5605));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_columnsVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_columnsVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_columnsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnsVisible"), DISPID(5605));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownVisible"), DISPID(5607));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_dropDownVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownVisible"), DISPID(5607));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_playlistItemsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistItemsVisible"), DISPID(5608));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_playlistItemsVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_playlistItemsVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_playlistItemsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistItemsVisible"), DISPID(5608));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_checkboxesVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("checkboxesVisible"), DISPID(5609));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_checkboxesVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_checkboxesVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_checkboxesVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("checkboxesVisible"), DISPID(5609));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5612));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pbstrColor;
  this->get_backgroundColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_backgroundColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5612));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_foregroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5613));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pbstrColor;
  this->get_foregroundColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_foregroundColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5613));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_disabledItemColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledItemColor"), DISPID(5614));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_disabledItemColor(void)
{
  BSTR pbstrColor;
  this->get_disabledItemColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_disabledItemColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledItemColor"), DISPID(5614));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlayingColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingColor"), DISPID(5615));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlayingColor(void)
{
  BSTR pbstrColor;
  this->get_itemPlayingColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemPlayingColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingColor"), DISPID(5615));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlayingBackgroundColor(BSTR* pbstrBackgroundColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingBackgroundColor"), DISPID(5616));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBackgroundColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlayingBackgroundColor(void)
{
  BSTR pbstrBackgroundColor;
  this->get_itemPlayingBackgroundColor((BSTR*)&pbstrBackgroundColor);
  return pbstrBackgroundColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemPlayingBackgroundColor(BSTR pbstrBackgroundColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingBackgroundColor"), DISPID(5616));
  TAutoArgs<1> _args;
  _args[1] = pbstrBackgroundColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundImage(BSTR* pbstrImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(5617));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrImage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundImage(void)
{
  BSTR pbstrImage;
  this->get_backgroundImage((BSTR*)&pbstrImage);
  return pbstrImage;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_backgroundImage(BSTR pbstrImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(5617));
  TAutoArgs<1> _args;
  _args[1] = pbstrImage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_allowItemEditing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowItemEditing"), DISPID(5618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_allowItemEditing(void)
{
  VARIANT_BOOL pVal;
  this->get_allowItemEditing((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_allowItemEditing(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowItemEditing"), DISPID(5618));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_allowColumnSorting(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowColumnSorting"), DISPID(5619));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_allowColumnSorting(void)
{
  VARIANT_BOOL pVal;
  this->get_allowColumnSorting((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_allowColumnSorting(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowColumnSorting"), DISPID(5619));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownList(BSTR* pbstrList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownList"), DISPID(5620));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrList /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownList(void)
{
  BSTR pbstrList;
  this->get_dropDownList((BSTR*)&pbstrList);
  return pbstrList;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_dropDownList(BSTR pbstrList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownList"), DISPID(5620));
  TAutoArgs<1> _args;
  _args[1] = pbstrList /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownToolTip(BSTR* pbstrToolTip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownToolTip"), DISPID(5621));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownToolTip(void)
{
  BSTR pbstrToolTip;
  this->get_dropDownToolTip((BSTR*)&pbstrToolTip);
  return pbstrToolTip;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_dropDownToolTip(BSTR pbstrToolTip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownToolTip"), DISPID(5621));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_copying(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("copying"), DISPID(5622));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_copying(void)
{
  VARIANT_BOOL pVal;
  this->get_copying((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_copying(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("copying"), DISPID(5622));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::copy()
{
  _TDispID _dispid(*this, OLETEXT("copy"), DISPID(5623));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::abortCopy()
{
  _TDispID _dispid(*this, OLETEXT("abortCopy"), DISPID(5624));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::deleteSelected()
{
  _TDispID _dispid(*this, OLETEXT("deleteSelected"), DISPID(5625));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::deleteSelectedFromLibrary()
{
  _TDispID _dispid(*this, OLETEXT("deleteSelectedFromLibrary"), DISPID(5626));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::moveSelectedUp()
{
  _TDispID _dispid(*this, OLETEXT("moveSelectedUp"), DISPID(5628));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::moveSelectedDown()
{
  _TDispID _dispid(*this, OLETEXT("moveSelectedDown"), DISPID(5629));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::addSelectedToPlaylist(Wmplib_tlb::IWMPPlaylist* pdispPlaylist/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addSelectedToPlaylist"), DISPID(5630));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)pdispPlaylist /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::getNextSelectedItem(long nStartIndex/*[in]*/, 
                                              long* pnSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNextSelectedItem"), DISPID(5631));
  TAutoArgs<1> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnSelected /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::getNextSelectedItem(long nStartIndex/*[in]*/)
{
  long pnSelected;
  this->getNextSelectedItem(nStartIndex, (long*)&pnSelected);
  return pnSelected;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::getNextCheckedItem(long nStartIndex/*[in]*/, 
                                             long* pnChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNextCheckedItem"), DISPID(5632));
  TAutoArgs<1> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnChecked /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::getNextCheckedItem(long nStartIndex/*[in]*/)
{
  long pnChecked;
  this->getNextCheckedItem(nStartIndex, (long*)&pnChecked);
  return pnChecked;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setSelectedState(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setSelectedState"), DISPID(5633));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = vbSelected /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setCheckedState(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setCheckedState"), DISPID(5634));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = vbChecked /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::sortColumn(long nIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sortColumn"), DISPID(5635));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setColumnResizeMode(long nIndex/*[in]*/, BSTR newMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setColumnResizeMode"), DISPID(5636));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = newMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setColumnWidth(long nIndex/*[in]*/, long nWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setColumnWidth"), DISPID(5637));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = nWidth /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemErrorColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemErrorColor"), DISPID(5642));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemErrorColor(void)
{
  BSTR pbstrColor;
  this->get_itemErrorColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemErrorColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemErrorColor"), DISPID(5642));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemCount(long* pnItemCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemCount"), DISPID(5643));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnItemCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemCount(void)
{
  long pnItemCount;
  this->get_itemCount((long*)&pnItemCount);
  return pnItemCount;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemMedia(long nIndex/*[in]*/, 
                                        Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemMedia"), DISPID(5644));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMedia* __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemMedia(long nIndex/*[in]*/)
{
  Wmplib_tlb::IWMPMedia* ppMedia;
  this->get_itemMedia(nIndex, (Wmplib_tlb::IWMPMedia**)&ppMedia);
  return ppMedia;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlaylist(long nIndex/*[in]*/, 
                                           Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlaylist"), DISPID(5645));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylist* __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemPlaylist(long nIndex/*[in]*/)
{
  Wmplib_tlb::IWMPPlaylist* ppPlaylist;
  this->get_itemPlaylist(nIndex, (Wmplib_tlb::IWMPPlaylist**)&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::getNextSelectedItem2(long nStartIndex/*[in]*/, 
                                               long* pnSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNextSelectedItem2"), DISPID(5646));
  TAutoArgs<1> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnSelected /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::getNextSelectedItem2(long nStartIndex/*[in]*/)
{
  long pnSelected;
  this->getNextSelectedItem2(nStartIndex, (long*)&pnSelected);
  return pnSelected;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::getNextCheckedItem2(long nStartIndex/*[in]*/, 
                                              long* pnChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNextCheckedItem2"), DISPID(5647));
  TAutoArgs<1> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnChecked /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlDispT<T>::getNextCheckedItem2(long nStartIndex/*[in]*/)
{
  long pnChecked;
  this->getNextCheckedItem2(nStartIndex, (long*)&pnChecked);
  return pnChecked;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setSelectedState2(long nIndex/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setSelectedState2"), DISPID(5648));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = vbSelected /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::setCheckedState2(long nIndex/*[in]*/, VARIANT_BOOL vbChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setCheckedState2"), DISPID(5649));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  _args[2] = vbChecked /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_leftStatus(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("leftStatus"), DISPID(5650));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_leftStatus(void)
{
  BSTR pbstrStatus;
  this->get_leftStatus((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_leftStatus(BSTR pbstrStatus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("leftStatus"), DISPID(5650));
  TAutoArgs<1> _args;
  _args[1] = pbstrStatus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_rightStatus(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rightStatus"), DISPID(5651));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_rightStatus(void)
{
  BSTR pbstrStatus;
  this->get_rightStatus((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_rightStatus(BSTR pbstrStatus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("rightStatus"), DISPID(5651));
  TAutoArgs<1> _args;
  _args[1] = pbstrStatus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_editButtonVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("editButtonVisible"), DISPID(5652));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_editButtonVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_editButtonVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_editButtonVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("editButtonVisible"), DISPID(5652));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownImage(BSTR* pbstrImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownImage"), DISPID(5653));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrImage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownImage(void)
{
  BSTR pbstrImage;
  this->get_dropDownImage((BSTR*)&pbstrImage);
  return pbstrImage;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_dropDownImage(BSTR pbstrImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownImage"), DISPID(5653));
  TAutoArgs<1> _args;
  _args[1] = pbstrImage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownBackgroundImage(BSTR* pbstrImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownBackgroundImage"), DISPID(5654));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrImage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_dropDownBackgroundImage(void)
{
  BSTR pbstrImage;
  this->get_dropDownBackgroundImage((BSTR*)&pbstrImage);
  return pbstrImage;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_dropDownBackgroundImage(BSTR pbstrImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownBackgroundImage"), DISPID(5654));
  TAutoArgs<1> _args;
  _args[1] = pbstrImage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_hueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hueShift"), DISPID(5655));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPPlaylistCtrlDispT<T>::get_hueShift(void)
{
  float pVal;
  this->get_hueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_hueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hueShift"), DISPID(5655));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_saturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5656));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPPlaylistCtrlDispT<T>::get_saturation(void)
{
  float pVal;
  this->get_saturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_saturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5656));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_statusColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusColor"), DISPID(5658));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_statusColor(void)
{
  BSTR pbstrColor;
  this->get_statusColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_statusColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusColor"), DISPID(5658));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_toolbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolbarVisible"), DISPID(5660));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPPlaylistCtrlDispT<T>::get_toolbarVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_toolbarVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_toolbarVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolbarVisible"), DISPID(5660));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedColor"), DISPID(5662));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedColor(void)
{
  BSTR pbstrColor;
  this->get_itemSelectedColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemSelectedColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedColor"), DISPID(5662));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedFocusLostColor"), DISPID(5663));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFocusLostColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedFocusLostColor(void)
{
  BSTR pbstrFocusLostColor;
  this->get_itemSelectedFocusLostColor((BSTR*)&pbstrFocusLostColor);
  return pbstrFocusLostColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemSelectedFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedFocusLostColor"), DISPID(5663));
  TAutoArgs<1> _args;
  _args[1] = pbstrFocusLostColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedBackgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedBackgroundColor"), DISPID(5664));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedBackgroundColor(void)
{
  BSTR pbstrColor;
  this->get_itemSelectedBackgroundColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemSelectedBackgroundColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedBackgroundColor"), DISPID(5664));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedBackgroundFocusLostColor(BSTR* pbstrFocusLostColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedBackgroundFocusLostColor"), DISPID(5665));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFocusLostColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_itemSelectedBackgroundFocusLostColor(void)
{
  BSTR pbstrFocusLostColor;
  this->get_itemSelectedBackgroundFocusLostColor((BSTR*)&pbstrFocusLostColor);
  return pbstrFocusLostColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_itemSelectedBackgroundFocusLostColor(BSTR pbstrFocusLostColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemSelectedBackgroundFocusLostColor"), DISPID(5665));
  TAutoArgs<1> _args;
  _args[1] = pbstrFocusLostColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundSplitColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundSplitColor"), DISPID(5666));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_backgroundSplitColor(void)
{
  BSTR pbstrColor;
  this->get_backgroundSplitColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_backgroundSplitColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundSplitColor"), DISPID(5666));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::get_statusTextColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusTextColor"), DISPID(5667));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlDispT<T>::get_statusTextColor(void)
{
  BSTR pbstrColor;
  this->get_statusTextColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlDispT<T>::set_statusTextColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusTextColor"), DISPID(5667));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IAppDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E41C88DD-2364-4FF7-A0F5-CA9859AF783F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_titlebarVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("titlebarVisible"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_titlebarVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_titlebarVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_titlebarVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("titlebarVisible"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_titlebarAutoHide(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("titlebarAutoHide"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_titlebarAutoHide(void)
{
  VARIANT_BOOL pVal;
  this->get_titlebarAutoHide((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_titlebarAutoHide(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("titlebarAutoHide"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_currentTask(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentTask"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAppDispatchDispT<T>::get_currentTask(void)
{
  BSTR pVal;
  this->get_currentTask((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_currentTask(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentTask"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_settingsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsVisible"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_settingsVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_settingsVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_settingsVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsVisible"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_playlistVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistVisible"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_playlistVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_playlistVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_playlistVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistVisible"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::gotoSkinMode()
{
  _TDispID _dispid(*this, OLETEXT("gotoSkinMode"), DISPID(105));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::navigatePrevious()
{
  _TDispID _dispid(*this, OLETEXT("navigatePrevious"), DISPID(125));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::navigateNext()
{
  _TDispID _dispid(*this, OLETEXT("navigateNext"), DISPID(126));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::goFullScreen()
{
  _TDispID _dispid(*this, OLETEXT("goFullScreen"), DISPID(142));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_fullScreenEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenEnabled"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_fullScreenEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_fullScreenEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_serviceLoginVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("serviceLoginVisible"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_serviceLoginVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_serviceLoginVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_serviceLoginSignedIn(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("serviceLoginSignedIn"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_serviceLoginSignedIn(void)
{
  VARIANT_BOOL pVal;
  this->get_serviceLoginSignedIn((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::serviceLogin()
{
  _TDispID _dispid(*this, OLETEXT("serviceLogin"), DISPID(134));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::serviceLogout()
{
  _TDispID _dispid(*this, OLETEXT("serviceLogout"), DISPID(135));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_serviceGetInfo(BSTR bstrItem/*[in]*/, VARIANT* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("serviceGetInfo"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = bstrItem /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAppDispatchDispT<T>::get_serviceGetInfo(BSTR bstrItem/*[in]*/)
{
  VARIANT pValue;
  this->get_serviceGetInfo(bstrItem, (VARIANT*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_navigatePreviousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigatePreviousEnabled"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_navigatePreviousEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_navigatePreviousEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_navigateNextEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateNextEnabled"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_navigateNextEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_navigateNextEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::navigateToAddress(BSTR address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateToAddress"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = address /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_glassEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("glassEnabled"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_glassEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_glassEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("inVistaPlus"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_inVistaPlus(void)
{
  VARIANT_BOOL pVal;
  this->get_inVistaPlus((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::adjustLeft(long nDistance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("adjustLeft"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = nDistance /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_taskbarVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("taskbarVisible"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_taskbarVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_taskbarVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_taskbarVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("taskbarVisible"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_DPI(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPI"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAppDispatchDispT<T>::get_DPI(void)
{
  long pVal;
  this->get_DPI((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousEnabled"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_previousEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_previousEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_playLibraryItemEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playLibraryItemEnabled"), DISPID(139));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_playLibraryItemEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_playLibraryItemEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::previous()
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(115));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_titlebarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("titlebarCurrentlyVisible"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_titlebarCurrentlyVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_titlebarCurrentlyVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_menubarCurrentlyVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("menubarCurrentlyVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_menubarCurrentlyVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_menubarCurrentlyVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_bgPluginRunning(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bgPluginRunning"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_bgPluginRunning(void)
{
  VARIANT_BOOL pVal;
  this->get_bgPluginRunning((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::configurePlugins(long nType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("configurePlugins"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = nType /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getTimeString"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = dTime /*[VT_R8:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IAppDispatchDispT<T>::getTimeString(double dTime/*[in]*/)
{
  BSTR pVal;
  this->getTimeString(dTime, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_maximized(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maximized"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IAppDispatchDispT<T>::get_maximized(void)
{
  VARIANT_BOOL pVal;
  this->get_maximized((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_top(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAppDispatchDispT<T>::get_top(void)
{
  long pVal;
  this->get_top((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_top(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_left(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAppDispatchDispT<T>::get_left(void)
{
  long pVal;
  this->get_left((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_left(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_width(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAppDispatchDispT<T>::get_width(void)
{
  long pVal;
  this->get_width((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_width(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_height(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAppDispatchDispT<T>::get_height(void)
{
  long pVal;
  this->get_height((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_height(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::setWindowPos(long lTop/*[in]*/, long lLeft/*[in]*/, long lWidth/*[in]*/, 
                                   long lHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setWindowPos"), DISPID(121));
  TAutoArgs<4> _args;
  _args[1] = lTop /*[VT_I4:0]*/;
  _args[2] = lLeft /*[VT_I4:0]*/;
  _args[3] = lWidth /*[VT_I4:0]*/;
  _args[4] = lHeight /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::logData(BSTR ID/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("logData"), DISPID(122));
  TAutoArgs<2> _args;
  _args[1] = ID /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_powerPersonality(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("powerPersonality"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAppDispatchDispT<T>::get_powerPersonality(void)
{
  BSTR pVal;
  this->get_powerPersonality((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::navigateNamespace(BSTR address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateNamespace"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = address /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::get_exclusiveService(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exclusiveService"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAppDispatchDispT<T>::get_exclusiveService(void)
{
  BSTR pVal;
  this->get_exclusiveService((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAppDispatchDispT<T>::set_windowText(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowText"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPSafeBrowser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF870383-83AB-4EA9-BE48-56FA4251AF10}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_URL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(8400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSafeBrowserDispT<T>::get_URL(void)
{
  BSTR pVal;
  this->get_URL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::set_URL(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(8400));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_status(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(8401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSafeBrowserDispT<T>::get_status(void)
{
  long pVal;
  this->get_status((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_pendingDownloads(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("pendingDownloads"), DISPID(8402));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSafeBrowserDispT<T>::get_pendingDownloads(void)
{
  long pVal;
  this->get_pendingDownloads((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::showSAMIText(BSTR samiText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showSAMIText"), DISPID(8403));
  TAutoArgs<1> _args;
  _args[1] = samiText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::showLyrics(BSTR lyrics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showLyrics"), DISPID(8404));
  TAutoArgs<1> _args;
  _args[1] = lyrics /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::loadSpecialPage(BSTR pageName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadSpecialPage"), DISPID(8405));
  TAutoArgs<1> _args;
  _args[1] = pageName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::goBack()
{
  _TDispID _dispid(*this, OLETEXT("goBack"), DISPID(8406));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::goForward()
{
  _TDispID _dispid(*this, OLETEXT("goForward"), DISPID(8407));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::stop()
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(8408));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::refresh()
{
  _TDispID _dispid(*this, OLETEXT("refresh"), DISPID(8409));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_baseURL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(8410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSafeBrowserDispT<T>::get_baseURL(void)
{
  BSTR pVal;
  this->get_baseURL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_fullURL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullURL"), DISPID(8414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSafeBrowserDispT<T>::get_fullURL(void)
{
  BSTR pVal;
  this->get_fullURL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_secureLock(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("secureLock"), DISPID(8411));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPSafeBrowserDispT<T>::get_secureLock(void)
{
  long pVal;
  this->get_secureLock((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::get_busy(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("busy"), DISPID(8412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSafeBrowserDispT<T>::get_busy(void)
{
  VARIANT_BOOL pVal;
  this->get_busy((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSafeBrowserDispT<T>::showCert()
{
  _TDispID _dispid(*this, OLETEXT("showCert"), DISPID(8413));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPObjectExtendedProps
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21D077C1-4BAA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_elementType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("elementType"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_elementType(void)
{
  BSTR pVal;
  this->get_elementType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_left(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_left(void)
{
  long pVal;
  this->get_left((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_left(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_top(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_top(void)
{
  long pVal;
  this->get_top((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_top(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_right(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_right(void)
{
  long pVal;
  this->get_right((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_right(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_bottom(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_bottom(void)
{
  long pVal;
  this->get_bottom((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_bottom(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_width(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_width(void)
{
  long pVal;
  this->get_width((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_width(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_height(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_height(void)
{
  long pVal;
  this->get_height((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_height(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_zIndex(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_zIndex(void)
{
  long pVal;
  this->get_zIndex((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_zIndex(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_clippingImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_clippingImage(void)
{
  BSTR pVal;
  this->get_clippingImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_clippingImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_clippingColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_clippingColor(void)
{
  BSTR pVal;
  this->get_clippingColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_clippingColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_visible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPObjectExtendedPropsDispT<T>::get_visible(void)
{
  VARIANT_BOOL pVal;
  this->get_visible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_visible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPObjectExtendedPropsDispT<T>::get_enabled(void)
{
  VARIANT_BOOL pVal;
  this->get_enabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_enabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPObjectExtendedPropsDispT<T>::get_tabStop(void)
{
  VARIANT_BOOL pVal;
  this->get_tabStop((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_tabStop(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPObjectExtendedPropsDispT<T>::get_passThrough(void)
{
  VARIANT_BOOL pVal;
  this->get_passThrough((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_passThrough(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_horizontalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_horizontalAlignment(void)
{
  BSTR pVal;
  this->get_horizontalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_horizontalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_verticalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_verticalAlignment(void)
{
  BSTR pVal;
  this->get_verticalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_verticalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveTo"), DISPID(2015));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("slideTo"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, 
                                            long newWidth/*[in]*/, long newHeight/*[in]*/, 
                                            long moveTime/*[in]*/, VARIANT_BOOL fSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveSizeTo"), DISPID(2026));
  TAutoArgs<6> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = newWidth /*[VT_I4:0]*/;
  _args[4] = newHeight /*[VT_I4:0]*/;
  _args[5] = moveTime /*[VT_I4:0]*/;
  _args[6] = fSlide /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_alphaBlend(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPObjectExtendedPropsDispT<T>::get_alphaBlend(void)
{
  long pVal;
  this->get_alphaBlend((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_alphaBlend(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlendTo"), DISPID(2017));
  TAutoArgs<2> _args;
  _args[1] = newVal /*[VT_I4:0]*/;
  _args[2] = alphaTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accName(BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accName(void)
{
  BSTR pszName;
  this->get_accName((BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_accName(BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accDescription(BSTR* pszDesc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszDesc /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accDescription(void)
{
  BSTR pszDesc;
  this->get_accDescription((BSTR*)&pszDesc);
  return pszDesc;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_accDescription(BSTR pszDesc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = pszDesc /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_accKeyboardShortcut(void)
{
  BSTR pszShortcut;
  this->get_accKeyboardShortcut((BSTR*)&pszShortcut);
  return pszShortcut;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = pszShortcut /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPObjectExtendedPropsDispT<T>::get_resizeImages(void)
{
  VARIANT_BOOL pVal;
  this->get_resizeImages((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_resizeImages(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszMargins /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPObjectExtendedPropsDispT<T>::get_nineGridMargins(void)
{
  BSTR pszMargins;
  this->get_nineGridMargins((BSTR*)&pszMargins);
  return pszMargins;
}

template <class T> HRESULT __fastcall
IWMPObjectExtendedPropsDispT<T>::set_nineGridMargins(BSTR pszMargins/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<1> _args;
  _args[1] = pszMargins /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPLayoutSubView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {72F486B1-0D43-11D3-BD3F-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(2300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(2300));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(2301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(2301));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(2302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImage(void)
{
  BSTR pVal;
  this->get_backgroundImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_backgroundImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(2302));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundTiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundTiled"), DISPID(2303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundTiled(void)
{
  VARIANT_BOOL pVal;
  this->get_backgroundTiled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_backgroundTiled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundTiled"), DISPID(2303));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImageHueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageHueShift"), DISPID(2304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImageHueShift(void)
{
  float pVal;
  this->get_backgroundImageHueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_backgroundImageHueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageHueShift"), DISPID(2304));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImageSaturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageSaturation"), DISPID(2305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSubViewDispT<T>::get_backgroundImageSaturation(void)
{
  float pVal;
  this->get_backgroundImageSaturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_backgroundImageSaturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageSaturation"), DISPID(2305));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_resizeBackgroundImage(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeBackgroundImage"), DISPID(2306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_resizeBackgroundImage(void)
{
  VARIANT_BOOL pVal;
  this->get_resizeBackgroundImage((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_resizeBackgroundImage(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeBackgroundImage"), DISPID(2306));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_elementType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("elementType"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_elementType(void)
{
  BSTR pVal;
  this->get_elementType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_left(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_left(void)
{
  long pVal;
  this->get_left((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_left(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_top(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_top(void)
{
  long pVal;
  this->get_top((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_top(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_right(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_right(void)
{
  long pVal;
  this->get_right((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_right(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_bottom(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_bottom(void)
{
  long pVal;
  this->get_bottom((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_bottom(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_width(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_width(void)
{
  long pVal;
  this->get_width((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_width(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_height(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_height(void)
{
  long pVal;
  this->get_height((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_height(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_zIndex(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_zIndex(void)
{
  long pVal;
  this->get_zIndex((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_zIndex(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_clippingImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_clippingImage(void)
{
  BSTR pVal;
  this->get_clippingImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_clippingImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_clippingColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_clippingColor(void)
{
  BSTR pVal;
  this->get_clippingColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_clippingColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_visible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_visible(void)
{
  VARIANT_BOOL pVal;
  this->get_visible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_visible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_enabled(void)
{
  VARIANT_BOOL pVal;
  this->get_enabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_enabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_tabStop(void)
{
  VARIANT_BOOL pVal;
  this->get_tabStop((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_tabStop(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_passThrough(void)
{
  VARIANT_BOOL pVal;
  this->get_passThrough((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_passThrough(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_horizontalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_horizontalAlignment(void)
{
  BSTR pVal;
  this->get_horizontalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_horizontalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_verticalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_verticalAlignment(void)
{
  BSTR pVal;
  this->get_verticalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_verticalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveTo"), DISPID(2015));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("slideTo"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, long newWidth/*[in]*/, 
                                      long newHeight/*[in]*/, long moveTime/*[in]*/, 
                                      VARIANT_BOOL fSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveSizeTo"), DISPID(2026));
  TAutoArgs<6> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = newWidth /*[VT_I4:0]*/;
  _args[4] = newHeight /*[VT_I4:0]*/;
  _args[5] = moveTime /*[VT_I4:0]*/;
  _args[6] = fSlide /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_alphaBlend(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSubViewDispT<T>::get_alphaBlend(void)
{
  long pVal;
  this->get_alphaBlend((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_alphaBlend(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlendTo"), DISPID(2017));
  TAutoArgs<2> _args;
  _args[1] = newVal /*[VT_I4:0]*/;
  _args[2] = alphaTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_accName(BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_accName(void)
{
  BSTR pszName;
  this->get_accName((BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_accName(BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_accDescription(BSTR* pszDesc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszDesc /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_accDescription(void)
{
  BSTR pszDesc;
  this->get_accDescription((BSTR*)&pszDesc);
  return pszDesc;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_accDescription(BSTR pszDesc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = pszDesc /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_accKeyboardShortcut(void)
{
  BSTR pszShortcut;
  this->get_accKeyboardShortcut((BSTR*)&pszShortcut);
  return pszShortcut;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = pszShortcut /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSubViewDispT<T>::get_resizeImages(void)
{
  VARIANT_BOOL pVal;
  this->get_resizeImages((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_resizeImages(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszMargins /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSubViewDispT<T>::get_nineGridMargins(void)
{
  BSTR pszMargins;
  this->get_nineGridMargins((BSTR*)&pszMargins);
  return pszMargins;
}

template <class T> HRESULT __fastcall
IWMPLayoutSubViewDispT<T>::set_nineGridMargins(BSTR pszMargins/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<1> _args;
  _args[1] = pszMargins /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPLayoutView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {172E905D-80D9-4C2F-B7CE-2CCB771787A2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_title(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(2307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_title(void)
{
  BSTR pVal;
  this->get_title((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_title(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(2307));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_category(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("category"), DISPID(2308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_category(void)
{
  BSTR pVal;
  this->get_category((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_category(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("category"), DISPID(2308));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_focusObjectID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("focusObjectID"), DISPID(2309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_focusObjectID(void)
{
  BSTR pVal;
  this->get_focusObjectID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_focusObjectID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("focusObjectID"), DISPID(2309));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_titleBar(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("titleBar"), DISPID(2311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_titleBar(void)
{
  VARIANT_BOOL pVal;
  this->get_titleBar((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_resizable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizable"), DISPID(2312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_resizable(void)
{
  VARIANT_BOOL pVal;
  this->get_resizable((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_timerInterval(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("timerInterval"), DISPID(2313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_timerInterval(void)
{
  long pVal;
  this->get_timerInterval((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_timerInterval(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("timerInterval"), DISPID(2313));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_minWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minWidth"), DISPID(2314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_minWidth(void)
{
  long pVal;
  this->get_minWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_minWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minWidth"), DISPID(2314));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_maxWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxWidth"), DISPID(2315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_maxWidth(void)
{
  long pVal;
  this->get_maxWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_maxWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxWidth"), DISPID(2315));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_minHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minHeight"), DISPID(2316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_minHeight(void)
{
  long pVal;
  this->get_minHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_minHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minHeight"), DISPID(2316));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_maxHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxHeight"), DISPID(2317));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_maxHeight(void)
{
  long pVal;
  this->get_maxHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_maxHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxHeight"), DISPID(2317));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::close()
{
  _TDispID _dispid(*this, OLETEXT("close"), DISPID(2318));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::minimize()
{
  _TDispID _dispid(*this, OLETEXT("minimize"), DISPID(2319));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::maximize()
{
  _TDispID _dispid(*this, OLETEXT("maximize"), DISPID(2320));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::restore()
{
  _TDispID _dispid(*this, OLETEXT("restore"), DISPID(2321));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::size(BSTR bstrDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("size"), DISPID(2322));
  TAutoArgs<1> _args;
  _args[1] = bstrDirection /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::returnToMediaCenter()
{
  _TDispID _dispid(*this, OLETEXT("returnToMediaCenter"), DISPID(2323));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::updateWindow()
{
  _TDispID _dispid(*this, OLETEXT("updateWindow"), DISPID(2324));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(2300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(2300));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(2301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(2301));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(2302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImage(void)
{
  BSTR pVal;
  this->get_backgroundImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_backgroundImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(2302));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_backgroundTiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundTiled"), DISPID(2303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_backgroundTiled(void)
{
  VARIANT_BOOL pVal;
  this->get_backgroundTiled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_backgroundTiled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundTiled"), DISPID(2303));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImageHueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageHueShift"), DISPID(2304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImageHueShift(void)
{
  float pVal;
  this->get_backgroundImageHueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_backgroundImageHueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageHueShift"), DISPID(2304));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImageSaturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageSaturation"), DISPID(2305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutViewDispT<T>::get_backgroundImageSaturation(void)
{
  float pVal;
  this->get_backgroundImageSaturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_backgroundImageSaturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImageSaturation"), DISPID(2305));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_resizeBackgroundImage(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeBackgroundImage"), DISPID(2306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_resizeBackgroundImage(void)
{
  VARIANT_BOOL pVal;
  this->get_resizeBackgroundImage((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_resizeBackgroundImage(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeBackgroundImage"), DISPID(2306));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_elementType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("elementType"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_elementType(void)
{
  BSTR pVal;
  this->get_elementType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_left(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_left(void)
{
  long pVal;
  this->get_left((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_left(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("left"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_top(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_top(void)
{
  long pVal;
  this->get_top((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_top(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("top"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_right(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_right(void)
{
  long pVal;
  this->get_right((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_right(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(2022));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_bottom(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_bottom(void)
{
  long pVal;
  this->get_bottom((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_bottom(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("bottom"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_width(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_width(void)
{
  long pVal;
  this->get_width((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_width(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_height(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_height(void)
{
  long pVal;
  this->get_height((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_height(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_zIndex(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_zIndex(void)
{
  long pVal;
  this->get_zIndex((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_zIndex(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("zIndex"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_clippingImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_clippingImage(void)
{
  BSTR pVal;
  this->get_clippingImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_clippingImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingImage"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_clippingColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_clippingColor(void)
{
  BSTR pVal;
  this->get_clippingColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_clippingColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clippingColor"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_visible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_visible(void)
{
  VARIANT_BOOL pVal;
  this->get_visible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_visible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("visible"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_enabled(void)
{
  VARIANT_BOOL pVal;
  this->get_enabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_enabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_tabStop(void)
{
  VARIANT_BOOL pVal;
  this->get_tabStop((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_tabStop(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_passThrough(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_passThrough(void)
{
  VARIANT_BOOL pVal;
  this->get_passThrough((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_passThrough(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("passThrough"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_horizontalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_horizontalAlignment(void)
{
  BSTR pVal;
  this->get_horizontalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_horizontalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalAlignment"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_verticalAlignment(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_verticalAlignment(void)
{
  BSTR pVal;
  this->get_verticalAlignment((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_verticalAlignment(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("verticalAlignment"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::moveTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveTo"), DISPID(2015));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::slideTo(long newX/*[in]*/, long newY/*[in]*/, long moveTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("slideTo"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = moveTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::moveSizeTo(long newX/*[in]*/, long newY/*[in]*/, long newWidth/*[in]*/, 
                                   long newHeight/*[in]*/, long moveTime/*[in]*/, 
                                   VARIANT_BOOL fSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moveSizeTo"), DISPID(2026));
  TAutoArgs<6> _args;
  _args[1] = newX /*[VT_I4:0]*/;
  _args[2] = newY /*[VT_I4:0]*/;
  _args[3] = newWidth /*[VT_I4:0]*/;
  _args[4] = newHeight /*[VT_I4:0]*/;
  _args[5] = moveTime /*[VT_I4:0]*/;
  _args[6] = fSlide /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_alphaBlend(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutViewDispT<T>::get_alphaBlend(void)
{
  long pVal;
  this->get_alphaBlend((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_alphaBlend(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlend"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::alphaBlendTo(long newVal/*[in]*/, long alphaTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("alphaBlendTo"), DISPID(2017));
  TAutoArgs<2> _args;
  _args[1] = newVal /*[VT_I4:0]*/;
  _args[2] = alphaTime /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_accName(BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_accName(void)
{
  BSTR pszName;
  this->get_accName((BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_accName(BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_accDescription(BSTR* pszDesc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszDesc /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_accDescription(void)
{
  BSTR pszDesc;
  this->get_accDescription((BSTR*)&pszDesc);
  return pszDesc;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_accDescription(BSTR pszDesc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = pszDesc /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_accKeyboardShortcut(void)
{
  BSTR pszShortcut;
  this->get_accKeyboardShortcut((BSTR*)&pszShortcut);
  return pszShortcut;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = pszShortcut /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_resizeImages(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutViewDispT<T>::get_resizeImages(void)
{
  VARIANT_BOOL pVal;
  this->get_resizeImages((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_resizeImages(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resizeImages"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::get_nineGridMargins(BSTR* pszMargins/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszMargins /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutViewDispT<T>::get_nineGridMargins(void)
{
  BSTR pszMargins;
  this->get_nineGridMargins((BSTR*)&pszMargins);
  return pszMargins;
}

template <class T> HRESULT __fastcall
IWMPLayoutViewDispT<T>::set_nineGridMargins(BSTR pszMargins/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nineGridMargins"), DISPID(2025));
  TAutoArgs<1> _args;
  _args[1] = pszMargins /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPEventObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_srcElement(LPDISPATCH* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("srcElement"), DISPID(2200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPEventObjectDispT<T>::get_srcElement(void)
{
  LPDISPATCH p;
  this->get_srcElement((LPDISPATCH*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_altKey(VARIANT_BOOL* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("altKey"), DISPID(2201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEventObjectDispT<T>::get_altKey(void)
{
  VARIANT_BOOL p;
  this->get_altKey((VARIANT_BOOL*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_ctrlKey(VARIANT_BOOL* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ctrlKey"), DISPID(2202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEventObjectDispT<T>::get_ctrlKey(void)
{
  VARIANT_BOOL p;
  this->get_ctrlKey((VARIANT_BOOL*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_shiftKey(VARIANT_BOOL* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shiftKey"), DISPID(2203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEventObjectDispT<T>::get_shiftKey(void)
{
  VARIANT_BOOL p;
  this->get_shiftKey((VARIANT_BOOL*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_fromElement(LPDISPATCH* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fromElement"), DISPID(2204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPEventObjectDispT<T>::get_fromElement(void)
{
  LPDISPATCH p;
  this->get_fromElement((LPDISPATCH*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_toElement(LPDISPATCH* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toElement"), DISPID(2205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPEventObjectDispT<T>::get_toElement(void)
{
  LPDISPATCH p;
  this->get_toElement((LPDISPATCH*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::set_keyCode(long p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keyCode"), DISPID(2206));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_keyCode(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keyCode"), DISPID(2206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_keyCode(void)
{
  long p;
  this->get_keyCode((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_button(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("button"), DISPID(2207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_button(void)
{
  long p;
  this->get_button((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_x(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(2208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_x(void)
{
  long p;
  this->get_x((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_y(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(2209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_y(void)
{
  long p;
  this->get_y((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_clientX(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientX"), DISPID(2210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_clientX(void)
{
  long p;
  this->get_clientX((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_clientY(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientY"), DISPID(2211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_clientY(void)
{
  long p;
  this->get_clientY((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_offsetX(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("offsetX"), DISPID(2212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_offsetX(void)
{
  long p;
  this->get_offsetX((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_offsetY(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("offsetY"), DISPID(2213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_offsetY(void)
{
  long p;
  this->get_offsetY((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_screenX(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("screenX"), DISPID(2214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_screenX(void)
{
  long p;
  this->get_screenX((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_screenY(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("screenY"), DISPID(2215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_screenY(void)
{
  long p;
  this->get_screenY((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_screenWidth(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("screenWidth"), DISPID(2216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_screenWidth(void)
{
  long p;
  this->get_screenWidth((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEventObjectDispT<T>::get_screenHeight(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("screenHeight"), DISPID(2217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEventObjectDispT<T>::get_screenHeight(void)
{
  long p;
  this->get_screenHeight((long*)&p);
  return p;
}

// *********************************************************************//
// DispIntf:  IWMPTheme
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6FCAE13D-E492-4584-9C21-D2C052A2A33A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_title(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(2500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::get_title(void)
{
  BSTR pVal;
  this->get_title((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_version(float* pfVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(2501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVersion /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPThemeDispT<T>::get_version(void)
{
  float pfVersion;
  this->get_version((float*)&pfVersion);
  return pfVersion;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_authorVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("authorVersion"), DISPID(2502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::get_authorVersion(void)
{
  BSTR pVal;
  this->get_authorVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_author(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("author"), DISPID(2503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::get_author(void)
{
  BSTR pVal;
  this->get_author((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_copyright(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("copyright"), DISPID(2504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::get_copyright(void)
{
  BSTR pVal;
  this->get_copyright((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::get_currentViewID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentViewID"), DISPID(2505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::get_currentViewID(void)
{
  BSTR pVal;
  this->get_currentViewID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::set_currentViewID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentViewID"), DISPID(2505));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::showErrorDialog()
{
  _TDispID _dispid(*this, OLETEXT("showErrorDialog"), DISPID(2506));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::logString(BSTR stringVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("logString"), DISPID(2507));
  TAutoArgs<1> _args;
  _args[1] = stringVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::openView(BSTR viewID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("openView"), DISPID(2508));
  TAutoArgs<1> _args;
  _args[1] = viewID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::openViewRelative(BSTR viewID/*[in]*/, long x, long y)
{
  _TDispID _dispid(*this, OLETEXT("openViewRelative"), DISPID(2515));
  TAutoArgs<3> _args;
  _args[1] = viewID /*[VT_BSTR:0]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::closeView(BSTR viewID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("closeView"), DISPID(2509));
  TAutoArgs<1> _args;
  _args[1] = viewID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/, 
                              BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openDialog"), DISPID(2510));
  TAutoArgs<2> _args;
  _args[1] = dialogType /*[VT_BSTR:0]*/;
  _args[2] = parameters /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::openDialog(BSTR dialogType/*[in]*/, BSTR parameters/*[in]*/)
{
  BSTR pVal;
  this->openDialog(dialogType, parameters, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::loadString(BSTR bstrString/*[in]*/, BSTR* pbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadString"), DISPID(2511));
  TAutoArgs<1> _args;
  _args[1] = bstrString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrReturn /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::loadString(BSTR bstrString/*[in]*/)
{
  BSTR pbstrReturn;
  this->loadString(bstrString, (BSTR*)&pbstrReturn);
  return pbstrReturn;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::loadPreference(BSTR bstrName/*[in]*/, BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadPreference"), DISPID(2512));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPThemeDispT<T>::loadPreference(BSTR bstrName/*[in]*/)
{
  BSTR pbstrValue;
  this->loadPreference(bstrName, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::savePreference(BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("savePreference"), DISPID(2513));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPThemeDispT<T>::playSound(BSTR bstrFilename)
{
  _TDispID _dispid(*this, OLETEXT("playSound"), DISPID(2514));
  TAutoArgs<1> _args;
  _args[1] = bstrFilename /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPLayoutSettingsDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_effectType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectType"), DISPID(2800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_effectType(void)
{
  BSTR pVal;
  this->get_effectType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_effectType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectType"), DISPID(2800));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_effectPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectPreset"), DISPID(2801));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_effectPreset(void)
{
  long pVal;
  this->get_effectPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_effectPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectPreset"), DISPID(2801));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsView"), DISPID(2802));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsView(void)
{
  BSTR pVal;
  this->get_settingsView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_settingsView(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsView"), DISPID(2802));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoZoom(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoZoom"), DISPID(2803));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoZoom(void)
{
  long pVal;
  this->get_videoZoom((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_videoZoom(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoZoom"), DISPID(2803));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoShrinkToFit(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoShrinkToFit"), DISPID(2804));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoShrinkToFit(void)
{
  VARIANT_BOOL pVal;
  this->get_videoShrinkToFit((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_videoShrinkToFit(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoShrinkToFit"), DISPID(2804));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoStretchToFit"), DISPID(2805));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_videoStretchToFit(void)
{
  VARIANT_BOOL pVal;
  this->get_videoStretchToFit((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_videoStretchToFit(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("videoStretchToFit"), DISPID(2805));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userVideoStretchToFit(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userVideoStretchToFit"), DISPID(2868));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userVideoStretchToFit(void)
{
  VARIANT_BOOL pVal;
  this->get_userVideoStretchToFit((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_userVideoStretchToFit(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("userVideoStretchToFit"), DISPID(2868));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showCaptions(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showCaptions"), DISPID(2807));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showCaptions(void)
{
  VARIANT_BOOL pVal;
  this->get_showCaptions((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showCaptions(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showCaptions"), DISPID(2807));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showTitles(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showTitles"), DISPID(2808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showTitles(void)
{
  VARIANT_BOOL pVal;
  this->get_showTitles((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showTitles(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showTitles"), DISPID(2808));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showEffects(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showEffects"), DISPID(2809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showEffects(void)
{
  VARIANT_BOOL pVal;
  this->get_showEffects((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showEffects(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showEffects"), DISPID(2809));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showFullScreenPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showFullScreenPlaylist"), DISPID(2811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showFullScreenPlaylist(void)
{
  VARIANT_BOOL pVal;
  this->get_showFullScreenPlaylist((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showFullScreenPlaylist(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showFullScreenPlaylist"), DISPID(2811));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_contrastMode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("contrastMode"), DISPID(2813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_contrastMode(void)
{
  BSTR pVal;
  this->get_contrastMode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::getNamedString(BSTR bstrName/*[in]*/, 
                                                   BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNamedString"), DISPID(2810));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::getNamedString(BSTR bstrName/*[in]*/)
{
  BSTR pbstrVal;
  this->getNamedString(bstrName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::getDurationStringFromSeconds(long lDurationVal/*[in]*/, 
                                                                 BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDurationStringFromSeconds"), DISPID(2815));
  TAutoArgs<1> _args;
  _args[1] = lDurationVal /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::getDurationStringFromSeconds(long lDurationVal/*[in]*/)
{
  BSTR pbstrVal;
  this->getDurationStringFromSeconds(lDurationVal, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_displayView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayView"), DISPID(2816));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_displayView(void)
{
  BSTR pVal;
  this->get_displayView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_displayView(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayView"), DISPID(2816));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataView"), DISPID(2817));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataView(void)
{
  BSTR pVal;
  this->get_metadataView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_metadataView(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataView"), DISPID(2817));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showSettings(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showSettings"), DISPID(2818));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showSettings(void)
{
  VARIANT_BOOL pVal;
  this->get_showSettings((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showSettings(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showSettings"), DISPID(2818));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showResizeBars(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showResizeBars"), DISPID(2819));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showResizeBars(void)
{
  VARIANT_BOOL pVal;
  this->get_showResizeBars((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showResizeBars(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showResizeBars"), DISPID(2819));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showPlaylist(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showPlaylist"), DISPID(2820));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showPlaylist(void)
{
  VARIANT_BOOL pVal;
  this->get_showPlaylist((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showPlaylist(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showPlaylist"), DISPID(2820));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showMetadata(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showMetadata"), DISPID(2821));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_showMetadata(void)
{
  VARIANT_BOOL pVal;
  this->get_showMetadata((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_showMetadata(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showMetadata"), DISPID(2821));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsWidth"), DISPID(2822));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsWidth(void)
{
  long pVal;
  this->get_settingsWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_settingsWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsWidth"), DISPID(2822));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsHeight"), DISPID(2823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsHeight(void)
{
  long pVal;
  this->get_settingsHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_settingsHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsHeight"), DISPID(2823));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_playlistWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistWidth"), DISPID(2824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_playlistWidth(void)
{
  long pVal;
  this->get_playlistWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_playlistWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistWidth"), DISPID(2824));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_playlistHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistHeight"), DISPID(2825));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_playlistHeight(void)
{
  long pVal;
  this->get_playlistHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_playlistHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlistHeight"), DISPID(2825));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataWidth"), DISPID(2826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataWidth(void)
{
  long pVal;
  this->get_metadataWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_metadataWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataWidth"), DISPID(2826));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataHeight"), DISPID(2827));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataHeight(void)
{
  long pVal;
  this->get_metadataHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_metadataHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataHeight"), DISPID(2827));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenAvailable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenAvailable"), DISPID(2828));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenAvailable(void)
{
  VARIANT_BOOL pVal;
  this->get_fullScreenAvailable((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_fullScreenAvailable(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenAvailable"), DISPID(2828));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenRequest(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenRequest"), DISPID(2829));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenRequest(void)
{
  VARIANT_BOOL pVal;
  this->get_fullScreenRequest((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_fullScreenRequest(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenRequest"), DISPID(2829));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_quickHide(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("quickHide"), DISPID(2830));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_quickHide(void)
{
  VARIANT_BOOL pVal;
  this->get_quickHide((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_quickHide(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("quickHide"), DISPID(2830));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_displayPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayPreset"), DISPID(2831));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_displayPreset(void)
{
  long pVal;
  this->get_displayPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_displayPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayPreset"), DISPID(2831));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsPreset"), DISPID(2832));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_settingsPreset(void)
{
  long pVal;
  this->get_settingsPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_settingsPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settingsPreset"), DISPID(2832));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataPreset"), DISPID(2833));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_metadataPreset(void)
{
  long pVal;
  this->get_metadataPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_metadataPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("metadataPreset"), DISPID(2833));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userDisplayView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userDisplayView"), DISPID(2834));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userDisplayView(void)
{
  BSTR pVal;
  this->get_userDisplayView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPDisplayView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPDisplayView"), DISPID(2835));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPDisplayView(void)
{
  BSTR pVal;
  this->get_userWMPDisplayView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userDisplayPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userDisplayPreset"), DISPID(2836));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userDisplayPreset(void)
{
  long pVal;
  this->get_userDisplayPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPDisplayPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPDisplayPreset"), DISPID(2837));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPDisplayPreset(void)
{
  long pVal;
  this->get_userWMPDisplayPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_dynamicRangeControl(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dynamicRangeControl"), DISPID(2838));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_dynamicRangeControl(void)
{
  long pVal;
  this->get_dynamicRangeControl((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_dynamicRangeControl(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dynamicRangeControl"), DISPID(2838));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_slowRate(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("slowRate"), DISPID(2839));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_slowRate(void)
{
  float pVal;
  this->get_slowRate((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_slowRate(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("slowRate"), DISPID(2839));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fastRate(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fastRate"), DISPID(2840));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fastRate(void)
{
  float pVal;
  this->get_fastRate((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_fastRate(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fastRate"), DISPID(2840));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_buttonHueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("buttonHueShift"), DISPID(2841));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_buttonHueShift(void)
{
  float pVal;
  this->get_buttonHueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_buttonHueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("buttonHueShift"), DISPID(2841));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_buttonSaturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("buttonSaturation"), DISPID(2842));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_buttonSaturation(void)
{
  float pVal;
  this->get_buttonSaturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_buttonSaturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("buttonSaturation"), DISPID(2842));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_backHueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backHueShift"), DISPID(2843));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_backHueShift(void)
{
  float pVal;
  this->get_backHueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_backHueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backHueShift"), DISPID(2843));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_backSaturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backSaturation"), DISPID(2844));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_backSaturation(void)
{
  float pVal;
  this->get_backSaturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_backSaturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backSaturation"), DISPID(2844));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_vizRequest(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("vizRequest"), DISPID(2845));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_vizRequest(void)
{
  long pVal;
  this->get_vizRequest((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_vizRequest(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("vizRequest"), DISPID(2845));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorLight(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(2847));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorLight(void)
{
  BSTR pVal;
  this->get_appColorLight((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorMedium(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(2848));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorMedium(void)
{
  BSTR pVal;
  this->get_appColorMedium((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorDark(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(2849));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorDark(void)
{
  BSTR pVal;
  this->get_appColorDark((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonHighlight(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolbarButtonHighlight"), DISPID(2856));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonHighlight(void)
{
  BSTR pVal;
  this->get_toolbarButtonHighlight((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonShadow(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolbarButtonShadow"), DISPID(2857));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonShadow(void)
{
  BSTR pVal;
  this->get_toolbarButtonShadow((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonFace(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolbarButtonFace"), DISPID(2858));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_toolbarButtonFace(void)
{
  BSTR pVal;
  this->get_toolbarButtonFace((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemPlayingColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingColor"), DISPID(2850));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemPlayingColor(void)
{
  BSTR pVal;
  this->get_itemPlayingColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemPlayingBackgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemPlayingBackgroundColor"), DISPID(2851));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemPlayingBackgroundColor(void)
{
  BSTR pVal;
  this->get_itemPlayingBackgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemErrorColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemErrorColor"), DISPID(2852));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_itemErrorColor(void)
{
  BSTR pVal;
  this->get_itemErrorColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorLimited(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLimited"), DISPID(2853));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorLimited(void)
{
  VARIANT_BOOL pVal;
  this->get_appColorLimited((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorBlackBackground(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorBlackBackground"), DISPID(2854));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorBlackBackground(void)
{
  VARIANT_BOOL pVal;
  this->get_appColorBlackBackground((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_appColorBlackBackground(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorBlackBackground"), DISPID(2854));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorVideoBorder(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorVideoBorder"), DISPID(2855));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorVideoBorder(void)
{
  BSTR pVal;
  this->get_appColorVideoBorder((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_appColorVideoBorder(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorVideoBorder"), DISPID(2855));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux1(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux1"), DISPID(2869));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux1(void)
{
  BSTR pVal;
  this->get_appColorAux1((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux2(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux2"), DISPID(2870));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux2(void)
{
  BSTR pVal;
  this->get_appColorAux2((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux3(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux3"), DISPID(2871));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux3(void)
{
  BSTR pVal;
  this->get_appColorAux3((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux4(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux4"), DISPID(2872));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux4(void)
{
  BSTR pVal;
  this->get_appColorAux4((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux5(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux5"), DISPID(2873));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux5(void)
{
  BSTR pVal;
  this->get_appColorAux5((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux6(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux6"), DISPID(2874));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux6(void)
{
  BSTR pVal;
  this->get_appColorAux6((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux7(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux7"), DISPID(2875));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux7(void)
{
  BSTR pVal;
  this->get_appColorAux7((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux8(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux8"), DISPID(2876));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux8(void)
{
  BSTR pVal;
  this->get_appColorAux8((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux9(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux9"), DISPID(2877));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux9(void)
{
  BSTR pVal;
  this->get_appColorAux9((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux10(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux10"), DISPID(2878));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux10(void)
{
  BSTR pVal;
  this->get_appColorAux10((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux11(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux11"), DISPID(2879));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux11(void)
{
  BSTR pVal;
  this->get_appColorAux11((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux12(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux12"), DISPID(2880));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux12(void)
{
  BSTR pVal;
  this->get_appColorAux12((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux13(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux13"), DISPID(2881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux13(void)
{
  BSTR pVal;
  this->get_appColorAux13((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux14(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux14"), DISPID(2882));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux14(void)
{
  BSTR pVal;
  this->get_appColorAux14((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux15(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorAux15"), DISPID(2883));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_appColorAux15(void)
{
  BSTR pVal;
  this->get_appColorAux15((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_status(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(2884));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_status(void)
{
  BSTR pVal;
  this->get_status((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_status(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(2884));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPSettingsView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPSettingsView"), DISPID(2859));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPSettingsView(void)
{
  BSTR pVal;
  this->get_userWMPSettingsView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPSettingsPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPSettingsPreset"), DISPID(2860));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPSettingsPreset(void)
{
  long pVal;
  this->get_userWMPSettingsPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPShowSettings(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPShowSettings"), DISPID(2861));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPShowSettings(void)
{
  VARIANT_BOOL pVal;
  this->get_userWMPShowSettings((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPMetadataView(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPMetadataView"), DISPID(2862));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPMetadataView(void)
{
  BSTR pVal;
  this->get_userWMPMetadataView((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPMetadataPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPMetadataPreset"), DISPID(2863));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPMetadataPreset(void)
{
  long pVal;
  this->get_userWMPMetadataPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPShowMetadata(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userWMPShowMetadata"), DISPID(2864));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_userWMPShowMetadata(void)
{
  VARIANT_BOOL pVal;
  this->get_userWMPShowMetadata((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_captionsHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("captionsHeight"), DISPID(2865));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_captionsHeight(void)
{
  long pVal;
  this->get_captionsHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_captionsHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("captionsHeight"), DISPID(2865));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_snapToVideo(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("snapToVideo"), DISPID(2866));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_snapToVideo(void)
{
  VARIANT_BOOL pVal;
  this->get_snapToVideo((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_snapToVideo(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("snapToVideo"), DISPID(2866));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_pinFullScreenControls(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("pinFullScreenControls"), DISPID(2867));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_pinFullScreenControls(void)
{
  VARIANT_BOOL pVal;
  this->get_pinFullScreenControls((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_pinFullScreenControls(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("pinFullScreenControls"), DISPID(2867));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::SetLockFullScreen(VARIANT_BOOL locked, BSTR Val)
{
  _TDispID _dispid(*this, OLETEXT("SetLockFullScreen"), DISPID(2885));
  TAutoArgs<2> _args;
  _args[1] = locked /*[VT_BOOL:0]*/;
  _args[2] = Val /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenLocked(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreenLocked"), DISPID(2886));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_fullScreenLocked(void)
{
  VARIANT_BOOL pVal;
  this->get_fullScreenLocked((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_isMultiMon(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isMultiMon"), DISPID(2887));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_isMultiMon(void)
{
  VARIANT_BOOL pVal;
  this->get_isMultiMon((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_exclusiveHueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exclusiveHueShift"), DISPID(2888));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_exclusiveHueShift(void)
{
  float pVal;
  this->get_exclusiveHueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_exclusiveHueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("exclusiveHueShift"), DISPID(2888));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_exclusiveSaturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exclusiveSaturation"), DISPID(2889));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_exclusiveSaturation(void)
{
  float pVal;
  this->get_exclusiveSaturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_exclusiveSaturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("exclusiveSaturation"), DISPID(2889));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorIsActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("themeBkgColorIsActive"), DISPID(2892));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorIsActive(void)
{
  VARIANT_BOOL pVal;
  this->get_themeBkgColorIsActive((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::set_themeBkgColorIsActive(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("themeBkgColorIsActive"), DISPID(2892));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorActive(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("themeBkgColorActive"), DISPID(2890));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorActive(void)
{
  BSTR pVal;
  this->get_themeBkgColorActive((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorInactive(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("themeBkgColorInactive"), DISPID(2891));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLayoutSettingsDispatchDispT<T>::get_themeBkgColorInactive(void)
{
  BSTR pVal;
  this->get_themeBkgColorInactive((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IWMPBrandDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98BB02D4-ED74-43CC-AD6A-45888F2E0DCC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_fullServiceName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullServiceName"), DISPID(3040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_fullServiceName(void)
{
  BSTR pVal;
  this->get_fullServiceName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_friendlyName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("friendlyName"), DISPID(3000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_friendlyName(void)
{
  BSTR pVal;
  this->get_friendlyName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_guideButtonText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("guideButtonText"), DISPID(3001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_guideButtonText(void)
{
  BSTR pVal;
  this->get_guideButtonText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_guideButtonTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("guideButtonTip"), DISPID(3002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_guideButtonTip(void)
{
  BSTR pVal;
  this->get_guideButtonTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_guideMenuText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("guideMenuText"), DISPID(3003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_guideMenuText(void)
{
  BSTR pVal;
  this->get_guideMenuText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_guideAccText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("guideAccText"), DISPID(3004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_guideAccText(void)
{
  BSTR pVal;
  this->get_guideAccText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_task1ButtonText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task1ButtonText"), DISPID(3005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_task1ButtonText(void)
{
  BSTR pVal;
  this->get_task1ButtonText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_task1ButtonTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task1ButtonTip"), DISPID(3006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_task1ButtonTip(void)
{
  BSTR pVal;
  this->get_task1ButtonTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_task1MenuText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task1MenuText"), DISPID(3007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_task1MenuText(void)
{
  BSTR pVal;
  this->get_task1MenuText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_task1AccText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task1AccText"), DISPID(3008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_task1AccText(void)
{
  BSTR pVal;
  this->get_task1AccText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_guideUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("guideUrl"), DISPID(3017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_guideUrl(void)
{
  BSTR pVal;
  this->get_guideUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_task1Url(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task1Url"), DISPID(3018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_task1Url(void)
{
  BSTR pVal;
  this->get_task1Url((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_imageLargeUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageLargeUrl"), DISPID(3021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_imageLargeUrl(void)
{
  BSTR pVal;
  this->get_imageLargeUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_imageSmallUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageSmallUrl"), DISPID(3022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_imageSmallUrl(void)
{
  BSTR pVal;
  this->get_imageSmallUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_imageMenuUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("imageMenuUrl"), DISPID(3023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_imageMenuUrl(void)
{
  BSTR pVal;
  this->get_imageMenuUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_infoCenterUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("infoCenterUrl"), DISPID(3024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_infoCenterUrl(void)
{
  BSTR pVal;
  this->get_infoCenterUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_albumInfoUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("albumInfoUrl"), DISPID(3025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_albumInfoUrl(void)
{
  BSTR pVal;
  this->get_albumInfoUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_buyCDUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("buyCDUrl"), DISPID(3026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_buyCDUrl(void)
{
  BSTR pVal;
  this->get_buyCDUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_htmlViewUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewUrl"), DISPID(3027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_htmlViewUrl(void)
{
  BSTR pVal;
  this->get_htmlViewUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_navigateUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateUrl"), DISPID(3028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_navigateUrl(void)
{
  BSTR pVal;
  this->get_navigateUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_cookieUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cookieUrl"), DISPID(3029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_cookieUrl(void)
{
  BSTR pVal;
  this->get_cookieUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_downloadStatusUrl(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downloadStatusUrl"), DISPID(3030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_downloadStatusUrl(void)
{
  BSTR pVal;
  this->get_downloadStatusUrl((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_colorPlayer(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("colorPlayer"), DISPID(3031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_colorPlayer(void)
{
  BSTR pVal;
  this->get_colorPlayer((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_colorPlayerText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("colorPlayerText"), DISPID(3032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_colorPlayerText(void)
{
  BSTR pVal;
  this->get_colorPlayerText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_navigateDispid(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateDispid"), DISPID(3035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPBrandDispatchDispT<T>::get_navigateDispid(void)
{
  long pVal;
  this->get_navigateDispid((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_navigateParams(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigateParams"), DISPID(3036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_navigateParams(void)
{
  BSTR pVal;
  this->get_navigateParams((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_navigatePane(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("navigatePane"), DISPID(3037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_navigatePane(void)
{
  BSTR pVal;
  this->get_navigatePane((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_selectedPane(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedPane"), DISPID(3038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::get_selectedPane(void)
{
  BSTR pVal;
  this->get_selectedPane((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::set_selectedPane(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedPane"), DISPID(3038));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::setNavigateProps(BSTR bstrPane/*[in]*/, long lDispid/*[in]*/, 
                                            BSTR bstrParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setNavigateProps"), DISPID(3041));
  TAutoArgs<3> _args;
  _args[1] = bstrPane /*[VT_BSTR:0]*/;
  _args[2] = lDispid /*[VT_I4:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/, 
                                          BSTR* pbstrResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getMediaParams"), DISPID(3042));
  TAutoArgs<2> _args;
  _args[1] = pObject /*[VT_UNKNOWN:0]*/;
  _args[2] = bstrURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrResult /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBrandDispatchDispT<T>::getMediaParams(LPUNKNOWN pObject/*[in]*/, BSTR bstrURL/*[in]*/)
{
  BSTR pbstrResult;
  this->getMediaParams(pObject, bstrURL, (BSTR*)&pbstrResult);
  return pbstrResult;
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::set_selectedTask(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedTask"), DISPID(3039));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPBrandDispatchDispT<T>::get_contentPartnerSelected(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("contentPartnerSelected"), DISPID(3043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPBrandDispatchDispT<T>::get_contentPartnerSelected(void)
{
  VARIANT_BOOL pVal;
  this->get_contentPartnerSelected((VARIANT_BOOL*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IWMPNowPlayingHelperDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {504F112E-77CC-4E3C-A073-5371B31D9B36}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewFriendlyName(BSTR bstrView/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("viewFriendlyName"), DISPID(2901));
  TAutoArgs<1> _args;
  _args[1] = bstrView /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewFriendlyName(BSTR bstrView/*[in]*/)
{
  BSTR pVal;
  this->get_viewFriendlyName(bstrView, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewPresetCount(BSTR bstrView/*[in]*/, 
                                                          long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("viewPresetCount"), DISPID(2902));
  TAutoArgs<1> _args;
  _args[1] = bstrView /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewPresetCount(BSTR bstrView/*[in]*/)
{
  long pVal;
  this->get_viewPresetCount(bstrView, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewPresetName(BSTR bstrView/*[in]*/, 
                                                         long nPresetIndex/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("viewPresetName"), DISPID(2903));
  TAutoArgs<2> _args;
  _args[1] = bstrView /*[VT_BSTR:0]*/;
  _args[2] = nPresetIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_viewPresetName(BSTR bstrView/*[in]*/, 
                                                         long nPresetIndex/*[in]*/)
{
  BSTR pVal;
  this->get_viewPresetName(bstrView, nPresetIndex, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_effectFriendlyName(BSTR bstrEffect/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectFriendlyName"), DISPID(2904));
  TAutoArgs<1> _args;
  _args[1] = bstrEffect /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_effectFriendlyName(BSTR bstrEffect/*[in]*/)
{
  BSTR pVal;
  this->get_effectFriendlyName(bstrEffect, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_effectPresetName(BSTR bstrEffect/*[in]*/, 
                                                           long nPresetIndex/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectPresetName"), DISPID(2905));
  TAutoArgs<2> _args;
  _args[1] = bstrEffect /*[VT_BSTR:0]*/;
  _args[2] = nPresetIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_effectPresetName(BSTR bstrEffect/*[in]*/, 
                                                           long nPresetIndex/*[in]*/)
{
  BSTR pVal;
  this->get_effectPresetName(bstrEffect, nPresetIndex, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/, 
                                                         BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveDisplayView"), DISPID(2909));
  TAutoArgs<1> _args;
  _args[1] = fSafe /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::resolveDisplayView(VARIANT_BOOL fSafe/*[in]*/)
{
  BSTR pbstrVal;
  this->resolveDisplayView(fSafe, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::isValidDisplayView(BSTR bstrView/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isValidDisplayView"), DISPID(2910));
  TAutoArgs<1> _args;
  _args[1] = bstrView /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::isValidDisplayView(BSTR bstrView/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->isValidDisplayView(bstrView, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getSkinFile(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSkinFile"), DISPID(2911));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getSkinFile(void)
{
  BSTR pVal;
  this->getSkinFile((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_captionsAvailable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("captionsAvailable"), DISPID(2912));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_captionsAvailable(void)
{
  VARIANT_BOOL pVal;
  this->get_captionsAvailable((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkAvailable(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("linkAvailable"), DISPID(2913));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkAvailable(void)
{
  long pVal;
  this->get_linkAvailable((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkRequest(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("linkRequest"), DISPID(2914));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkRequest(void)
{
  long pVal;
  this->get_linkRequest((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_linkRequest(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("linkRequest"), DISPID(2914));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkRequestParams(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("linkRequestParams"), DISPID(2915));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_linkRequestParams(void)
{
  BSTR pVal;
  this->get_linkRequestParams((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_linkRequestParams(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("linkRequestParams"), DISPID(2915));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/, 
                                                      long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getCurrentArtID"), DISPID(2917));
  TAutoArgs<1> _args;
  _args[1] = fLargeArt /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getCurrentArtID(VARIANT_BOOL fLargeArt/*[in]*/)
{
  long pVal;
  this->getCurrentArtID(fLargeArt, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getTimeString(double dTime/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getTimeString"), DISPID(2918));
  TAutoArgs<1> _args;
  _args[1] = dTime /*[VT_R8:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getTimeString(double dTime/*[in]*/)
{
  BSTR pVal;
  this->getTimeString(dTime, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getCurrentScriptCommand(BSTR bstrType/*[in]*/, 
                                                              BSTR* pbstrCommand/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getCurrentScriptCommand"), DISPID(2919));
  TAutoArgs<1> _args;
  _args[1] = bstrType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrCommand /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getCurrentScriptCommand(BSTR bstrType/*[in]*/)
{
  BSTR pbstrCommand;
  this->getCurrentScriptCommand(bstrType, (BSTR*)&pbstrCommand);
  return pbstrCommand;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::calcLayout(long lWidth/*[in]*/, long lHeight/*[in]*/, 
                                                 VARIANT_BOOL vbCaptions/*[in]*/, 
                                                 VARIANT_BOOL vbBanner/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("calcLayout"), DISPID(2920));
  TAutoArgs<4> _args;
  _args[1] = lWidth /*[VT_I4:0]*/;
  _args[2] = lHeight /*[VT_I4:0]*/;
  _args[3] = vbCaptions /*[VT_BOOL:0]*/;
  _args[4] = vbBanner /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getLayoutSize(long nProp/*[in]*/, 
                                                    long* plValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLayoutSize"), DISPID(2921));
  TAutoArgs<1> _args;
  _args[1] = nProp /*[VT_I4:0]*/;
  return OutRetValSetterPtr(plValue /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getLayoutSize(long nProp/*[in]*/)
{
  long plValue;
  this->getLayoutSize(nProp, (long*)&plValue);
  return plValue;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/, 
                                                      LPDISPATCH* ppRootPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getRootPlaylist"), DISPID(2922));
  TAutoArgs<1> _args;
  _args[1] = pPlaylist /*[VT_DISPATCH:0]*/;
  return OutRetValSetterPtr(ppRootPlaylist /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getRootPlaylist(LPDISPATCH pPlaylist/*[in]*/)
{
  LPDISPATCH ppRootPlaylist;
  this->getRootPlaylist(pPlaylist, (LPDISPATCH*)&ppRootPlaylist);
  return ppRootPlaylist;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getHTMLViewURL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getHTMLViewURL"), DISPID(2923));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getHTMLViewURL(void)
{
  BSTR pVal;
  this->getHTMLViewURL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_canSendLink(VARIANT_BOOL* pCanSendLink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("canSendLink"), DISPID(2924));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanSendLink /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_canSendLink(void)
{
  VARIANT_BOOL pCanSendLink;
  this->get_canSendLink((VARIANT_BOOL*)&pCanSendLink);
  return pCanSendLink;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::sendLink(double dblStartTime/*[in]*/, 
                                               double dblEndTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sendLink"), DISPID(2925));
  TAutoArgs<2> _args;
  _args[1] = dblStartTime /*[VT_R8:0]*/;
  _args[2] = dblEndTime /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_editObj(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("editObj"), DISPID(2926));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_editObj(void)
{
  LPUNKNOWN ppVal;
  this->get_editObj((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_editObj(LPUNKNOWN ppVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("editObj"), DISPID(2926));
  TAutoArgs<1> _args;
  _args[1] = ppVal /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusString(BSTR bstrStatusId/*[in]*/, 
                                                      BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStatusString"), DISPID(2927));
  TAutoArgs<1> _args;
  _args[1] = bstrStatusId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusString(BSTR bstrStatusId/*[in]*/)
{
  BSTR pbstrStatus;
  this->getStatusString(bstrStatusId, (BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusPct(BSTR bstrStatusId/*[in]*/, 
                                                   long* pvResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStatusPct"), DISPID(2939));
  TAutoArgs<1> _args;
  _args[1] = bstrStatusId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvResult /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusPct(BSTR bstrStatusId/*[in]*/)
{
  long pvResult;
  this->getStatusPct(bstrStatusId, (long*)&pvResult);
  return pvResult;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusResult(BSTR bstrStatusId/*[in]*/, 
                                                      long* pvResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStatusResult"), DISPID(2940));
  TAutoArgs<1> _args;
  _args[1] = bstrStatusId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvResult /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusResult(BSTR bstrStatusId/*[in]*/)
{
  long pvResult;
  this->getStatusResult(bstrStatusId, (long*)&pvResult);
  return pvResult;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusIcon(BSTR bstrStatusId/*[in]*/, 
                                                    long* pvResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStatusIcon"), DISPID(2941));
  TAutoArgs<1> _args;
  _args[1] = bstrStatusId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvResult /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusIcon(BSTR bstrStatusId/*[in]*/)
{
  long pvResult;
  this->getStatusIcon(bstrStatusId, (long*)&pvResult);
  return pvResult;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusIdList(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getStatusIdList"), DISPID(2942));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::getStatusIdList(void)
{
  BSTR pbstrStatus;
  this->getStatusIdList((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_notificationString(BSTR* pbstrNotificationString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notificationString"), DISPID(2928));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNotificationString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_notificationString(void)
{
  BSTR pbstrNotificationString;
  this->get_notificationString((BSTR*)&pbstrNotificationString);
  return pbstrNotificationString;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewBaseURL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewBaseURL"), DISPID(2930));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewBaseURL(void)
{
  BSTR pVal;
  this->get_htmlViewBaseURL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_htmlViewBaseURL(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewBaseURL"), DISPID(2930));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewFullURL(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewFullURL"), DISPID(2933));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewFullURL(void)
{
  BSTR pVal;
  this->get_htmlViewFullURL((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_htmlViewFullURL(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewFullURL"), DISPID(2933));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewSecureLock(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewSecureLock"), DISPID(2929));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewSecureLock(void)
{
  long pVal;
  this->get_htmlViewSecureLock((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_htmlViewSecureLock(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewSecureLock"), DISPID(2929));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewBusy(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewBusy"), DISPID(2931));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewBusy(void)
{
  VARIANT_BOOL pVal;
  this->get_htmlViewBusy((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_htmlViewBusy(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewBusy"), DISPID(2931));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewShowCert(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewShowCert"), DISPID(2932));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_htmlViewShowCert(void)
{
  VARIANT_BOOL pVal;
  this->get_htmlViewShowCert((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_htmlViewShowCert(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("htmlViewShowCert"), DISPID(2932));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_previousEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousEnabled"), DISPID(2934));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_previousEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_previousEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_previousEnabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousEnabled"), DISPID(2934));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_doPreviousNow(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doPreviousNow"), DISPID(2935));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_doPreviousNow(void)
{
  VARIANT_BOOL pVal;
  this->get_doPreviousNow((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_doPreviousNow(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("doPreviousNow"), DISPID(2935));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_DPI(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPI"), DISPID(2936));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_DPI(void)
{
  long pVal;
  this->get_DPI((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::clearColors()
{
  _TDispID _dispid(*this, OLETEXT("clearColors"), DISPID(2937));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_lastMessage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastMessage"), DISPID(2938));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_lastMessage(void)
{
  BSTR pVal;
  this->get_lastMessage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::set_lastMessage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastMessage"), DISPID(2938));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_inVistaPlus(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("inVistaPlus"), DISPID(2943));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_inVistaPlus(void)
{
  VARIANT_BOOL pVal;
  this->get_inVistaPlus((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_isBidi(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isBidi"), DISPID(2944));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPNowPlayingHelperDispatchDispT<T>::get_isBidi(void)
{
  VARIANT_BOOL pVal;
  this->get_isBidi((VARIANT_BOOL*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IWMPNowDoingDispatch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::buyContent()
{
  _TDispID _dispid(*this, OLETEXT("buyContent"), DISPID(3217));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::hideBasket()
{
  _TDispID _dispid(*this, OLETEXT("hideBasket"), DISPID(3218));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_DPI(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPI"), DISPID(3219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_DPI(void)
{
  long pVal;
  this->get_DPI((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_mode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mode"), DISPID(3200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_mode(void)
{
  BSTR pVal;
  this->get_mode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::set_burn_selectedDrive(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_selectedDrive"), DISPID(3206));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_selectedDrive(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_selectedDrive"), DISPID(3206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_selectedDrive(void)
{
  long pVal;
  this->get_burn_selectedDrive((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_selectedDevice(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_selectedDevice"), DISPID(3214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_selectedDevice(void)
{
  long pVal;
  this->get_sync_selectedDevice((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::set_sync_selectedDevice(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_selectedDevice"), DISPID(3214));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_numDiscsSpanned(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_numDiscsSpanned"), DISPID(3208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_numDiscsSpanned(void)
{
  long pVal;
  this->get_burn_numDiscsSpanned((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_editPlaylist(LPDISPATCH* ppEditPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("editPlaylist"), DISPID(3221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppEditPlaylist /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPNowDoingDispatchDispT<T>::get_editPlaylist(void)
{
  LPDISPATCH ppEditPlaylist;
  this->get_editPlaylist((LPDISPATCH*)&ppEditPlaylist);
  return ppEditPlaylist;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_mediaType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_mediaType"), DISPID(3201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_mediaType(void)
{
  BSTR pVal;
  this->get_burn_mediaType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_contentType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_contentType"), DISPID(3202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_contentType(void)
{
  BSTR pVal;
  this->get_burn_contentType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_freeSpace(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_freeSpace"), DISPID(3203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_freeSpace(void)
{
  long pVal;
  this->get_burn_freeSpace((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_totalSpace(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_totalSpace"), DISPID(3204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_totalSpace(void)
{
  long pVal;
  this->get_burn_totalSpace((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_driveName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_driveName"), DISPID(3205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_driveName(void)
{
  BSTR pVal;
  this->get_burn_driveName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_numDevices(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_numDevices"), DISPID(3207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_numDevices(void)
{
  long pVal;
  this->get_burn_numDevices((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_spaceToUse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("burn_spaceToUse"), DISPID(3209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_burn_spaceToUse(void)
{
  long pVal;
  this->get_burn_spaceToUse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_spaceToUse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_spaceToUse"), DISPID(3210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_spaceToUse(void)
{
  long pVal;
  this->get_sync_spaceToUse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_spaceUsed(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_spaceUsed"), DISPID(3211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_spaceUsed(void)
{
  long pVal;
  this->get_sync_spaceUsed((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_totalSpace(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_totalSpace"), DISPID(3212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_totalSpace(void)
{
  long pVal;
  this->get_sync_totalSpace((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_deviceName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_deviceName"), DISPID(3213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_deviceName(void)
{
  BSTR pVal;
  this->get_sync_deviceName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_numDevices(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_numDevices"), DISPID(3215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_numDevices(void)
{
  long pVal;
  this->get_sync_numDevices((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_oemName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sync_oemName"), DISPID(3216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::get_sync_oemName(void)
{
  BSTR pVal;
  this->get_sync_oemName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::logData(BSTR ID/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("logData"), DISPID(3220));
  TAutoArgs<2> _args;
  _args[1] = ID /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPNowDoingDispatchDispT<T>::formatTime(long value/*[in]*/, BSTR* pbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatTime"), DISPID(3222));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrReturn /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPNowDoingDispatchDispT<T>::formatTime(long value/*[in]*/)
{
  BSTR pbstrReturn;
  this->formatTime(value, (BSTR*)&pbstrReturn);
  return pbstrReturn;
}

// *********************************************************************//
// DispIntf:  IWMPButtonCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {BB17FFF7-1692-4555-918A-6AF7BFACEDD2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPButtonCtrlEventsDispT<T>::onclick()
{
  _TDispID _dispid(/* onclick */ DISPID(5120));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPButtonCtrl
// Interface: IWMPButtonCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_image(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_image(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_image((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_image(BSTR pVal/*[in]*/)
{
  return (*this)->set_image(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_hoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_downImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_downImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_downImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_downImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_disabledImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_hoverDownImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverDownImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_hoverDownImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverDownImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_hoverDownImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverDownImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_tiled(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPButtonCtrlT<T>::get_tiled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_tiled((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_tiled(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_tiled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_transparencyColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_transparencyColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_transparencyColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_down(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_down(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPButtonCtrlT<T>::get_down(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_down((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_down(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_down(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_sticky(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPButtonCtrlT<T>::get_sticky(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_sticky((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_sticky(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_sticky(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_upToolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_upToolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_upToolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_upToolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_upToolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_upToolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_downToolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_downToolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_downToolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_downToolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_downToolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_downToolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPButtonCtrlT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPButtonCtrlT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

// *********************************************************************//
// DispIntf:  IWMPButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {87291B50-0C8E-11D3-BB2A-00A0C93CA73A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_image(void)
{
  BSTR pVal;
  this->get_image((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_image(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_hoverImage(void)
{
  BSTR pVal;
  this->get_hoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_downImage(void)
{
  BSTR pVal;
  this->get_downImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_disabledImage(void)
{
  BSTR pVal;
  this->get_disabledImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_hoverDownImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverDownImage"), DISPID(5106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_hoverDownImage(void)
{
  BSTR pVal;
  this->get_hoverDownImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_hoverDownImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverDownImage"), DISPID(5106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tiled"), DISPID(5107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPButtonCtrlDispT<T>::get_tiled(void)
{
  VARIANT_BOOL pVal;
  this->get_tiled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_tiled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tiled"), DISPID(5107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_down(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("down"), DISPID(5109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPButtonCtrlDispT<T>::get_down(void)
{
  VARIANT_BOOL pVal;
  this->get_down((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_down(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("down"), DISPID(5109));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sticky"), DISPID(5110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPButtonCtrlDispT<T>::get_sticky(void)
{
  VARIANT_BOOL pVal;
  this->get_sticky((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_sticky(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sticky"), DISPID(5110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_upToolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("upToolTip"), DISPID(5112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_upToolTip(void)
{
  BSTR pVal;
  this->get_upToolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_upToolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("upToolTip"), DISPID(5112));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_downToolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downToolTip"), DISPID(5113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_downToolTip(void)
{
  BSTR pVal;
  this->get_downToolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_downToolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("downToolTip"), DISPID(5113));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPButtonCtrlDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPButtonCtrlDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5114));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPListBoxCtrl
// Interface: IWMPListBoxCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_selectedItem(long* pnPos/*[out,retval]*/)
{
  return (*this)->get_selectedItem(pnPos);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::get_selectedItem(void)
{
  long pnPos;
  OLECHECK(this->get_selectedItem((long*)&pnPos));
  return pnPos;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_selectedItem(long pnPos/*[in]*/)
{
  return (*this)->set_selectedItem(pnPos);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_sorted(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_sorted(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPListBoxCtrlT<T>::get_sorted(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_sorted((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_sorted(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_sorted(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_multiselect(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_multiselect(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPListBoxCtrlT<T>::get_multiselect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_multiselect((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_multiselect(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_multiselect(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_readOnly(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPListBoxCtrlT<T>::get_readOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_readOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_readOnly(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_readOnly(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPListBoxCtrlT<T>::get_foregroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPListBoxCtrlT<T>::get_backgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_fontSize(pVal);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontSize(void)
{
  long pVal;
  OLECHECK(this->get_fontSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_fontSize(long pVal/*[in]*/)
{
  return (*this)->set_fontSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontFace(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPListBoxCtrlT<T>::get_fontFace(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontFace((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontFace(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_itemCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_itemCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::get_itemCount(void)
{
  long pVal;
  OLECHECK(this->get_itemCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_firstVisibleItem(long* pVal/*[out,retval]*/)
{
  return (*this)->get_firstVisibleItem(pVal);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::get_firstVisibleItem(void)
{
  long pVal;
  OLECHECK(this->get_firstVisibleItem((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_firstVisibleItem(long pVal/*[in]*/)
{
  return (*this)->set_firstVisibleItem(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_popUp(VARIANT_BOOL Param1/*[in]*/)
{
  return (*this)->set_popUp(Param1);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_focusItem(long* pVal/*[out,retval]*/)
{
  return (*this)->get_focusItem(pVal);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::get_focusItem(void)
{
  long pVal;
  OLECHECK(this->get_focusItem((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_focusItem(long pVal/*[in]*/)
{
  return (*this)->set_focusItem(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::get_border(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_border(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPListBoxCtrlT<T>::get_border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_border((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::set_border(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_border(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::getItem(long nPos/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->getItem(nPos, pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPListBoxCtrlT<T>::getItem(long nPos/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->getItem(nPos/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/)
{
  return (*this)->insertItem(nPos, newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::appendItem(BSTR newVal/*[in]*/)
{
  return (*this)->appendItem(newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/)
{
  return (*this)->replaceItem(nPos, newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::deleteItem(long nPos/*[in]*/)
{
  return (*this)->deleteItem(nPos);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::deleteAll(void)
{
  return (*this)->deleteAll();
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/, 
                                  long* pnPos/*[out,retval]*/)
{
  return (*this)->findItem(nStartIndex, newVal, pnPos);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/)
{
  long pnPos;
  OLECHECK(this->findItem(nStartIndex/*[in]*/, newVal/*[in]*/, (long*)&pnPos));
  return pnPos;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::getNextSelectedItem(long nStartIndex/*[in]*/, 
                                             long* pnSelected/*[out,retval]*/)
{
  return (*this)->getNextSelectedItem(nStartIndex, pnSelected);
}

template <class T> long __fastcall
TCOMIWMPListBoxCtrlT<T>::getNextSelectedItem(long nStartIndex/*[in]*/)
{
  long pnSelected;
  OLECHECK(this->getNextSelectedItem(nStartIndex/*[in]*/, (long*)&pnSelected));
  return pnSelected;
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::setSelectedState(long nPos/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  return (*this)->setSelectedState(nPos, vbSelected);
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::show(void)
{
  return (*this)->show();
}

template <class T> HRESULT __fastcall
TCOMIWMPListBoxCtrlT<T>::dismiss(void)
{
  return (*this)->dismiss();
}

// *********************************************************************//
// DispIntf:  IWMPListBoxCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC1880CE-83B9-43A7-A066-C44CE8C82583}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_selectedItem(long* pnPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedItem"), DISPID(6108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPos /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::get_selectedItem(void)
{
  long pnPos;
  this->get_selectedItem((long*)&pnPos);
  return pnPos;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_selectedItem(long pnPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedItem"), DISPID(6108));
  TAutoArgs<1> _args;
  _args[1] = pnPos /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_sorted(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sorted"), DISPID(6100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPListBoxCtrlDispT<T>::get_sorted(void)
{
  VARIANT_BOOL pVal;
  this->get_sorted((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_sorted(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sorted"), DISPID(6100));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_multiselect(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("multiselect"), DISPID(6101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPListBoxCtrlDispT<T>::get_multiselect(void)
{
  VARIANT_BOOL pVal;
  this->get_multiselect((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_multiselect(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("multiselect"), DISPID(6101));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readOnly"), DISPID(6102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPListBoxCtrlDispT<T>::get_readOnly(void)
{
  VARIANT_BOOL pVal;
  this->get_readOnly((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_readOnly(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("readOnly"), DISPID(6102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPListBoxCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pVal;
  this->get_foregroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPListBoxCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::get_fontSize(void)
{
  long pVal;
  this->get_fontSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_fontSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPListBoxCtrlDispT<T>::get_fontStyle(void)
{
  BSTR pVal;
  this->get_fontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPListBoxCtrlDispT<T>::get_fontFace(void)
{
  BSTR pVal;
  this->get_fontFace((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_itemCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemCount"), DISPID(6109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::get_itemCount(void)
{
  long pVal;
  this->get_itemCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_firstVisibleItem(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstVisibleItem"), DISPID(6110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::get_firstVisibleItem(void)
{
  long pVal;
  this->get_firstVisibleItem((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_firstVisibleItem(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstVisibleItem"), DISPID(6110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_popUp(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("popUp"), DISPID(6120));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_focusItem(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("focusItem"), DISPID(6121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::get_focusItem(void)
{
  long pVal;
  this->get_focusItem((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_focusItem(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("focusItem"), DISPID(6121));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::get_border(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("border"), DISPID(6125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPListBoxCtrlDispT<T>::get_border(void)
{
  VARIANT_BOOL pVal;
  this->get_border((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::set_border(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("border"), DISPID(6125));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::getItem(long nPos/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItem"), DISPID(6111));
  TAutoArgs<1> _args;
  _args[1] = nPos /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPListBoxCtrlDispT<T>::getItem(long nPos/*[in]*/)
{
  BSTR pVal;
  this->getItem(nPos, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::insertItem(long nPos/*[in]*/, BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertItem"), DISPID(6112));
  TAutoArgs<2> _args;
  _args[1] = nPos /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::appendItem(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendItem"), DISPID(6113));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::replaceItem(long nPos/*[in]*/, BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceItem"), DISPID(6114));
  TAutoArgs<2> _args;
  _args[1] = nPos /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::deleteItem(long nPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteItem"), DISPID(6115));
  TAutoArgs<1> _args;
  _args[1] = nPos /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::deleteAll()
{
  _TDispID _dispid(*this, OLETEXT("deleteAll"), DISPID(6116));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/, 
                                  long* pnPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("findItem"), DISPID(6117));
  TAutoArgs<2> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pnPos /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::findItem(long nStartIndex/*[in]*/, BSTR newVal/*[in]*/)
{
  long pnPos;
  this->findItem(nStartIndex, newVal, (long*)&pnPos);
  return pnPos;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::getNextSelectedItem(long nStartIndex/*[in]*/, 
                                             long* pnSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNextSelectedItem"), DISPID(6118));
  TAutoArgs<1> _args;
  _args[1] = nStartIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnSelected /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPListBoxCtrlDispT<T>::getNextSelectedItem(long nStartIndex/*[in]*/)
{
  long pnSelected;
  this->getNextSelectedItem(nStartIndex, (long*)&pnSelected);
  return pnSelected;
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::setSelectedState(long nPos/*[in]*/, VARIANT_BOOL vbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setSelectedState"), DISPID(6122));
  TAutoArgs<2> _args;
  _args[1] = nPos /*[VT_I4:0]*/;
  _args[2] = vbSelected /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::show()
{
  _TDispID _dispid(*this, OLETEXT("show"), DISPID(6123));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPListBoxCtrlDispT<T>::dismiss()
{
  _TDispID _dispid(*this, OLETEXT("dismiss"), DISPID(6124));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPListBoxItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPListBoxItemDispT<T>::set_value(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(6119));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPPlaylistCtrlColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {63D9D30F-AE4C-4678-8CA8-5720F4FE4419}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnName"), DISPID(5670));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnName(void)
{
  BSTR pVal;
  this->get_columnName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::set_columnName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnName"), DISPID(5670));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnID"), DISPID(5671));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnID(void)
{
  BSTR pVal;
  this->get_columnID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::set_columnID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnID"), DISPID(5671));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnResizeMode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnResizeMode"), DISPID(5672));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnResizeMode(void)
{
  BSTR pVal;
  this->get_columnResizeMode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::set_columnResizeMode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnResizeMode"), DISPID(5672));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnWidth"), DISPID(5673));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPPlaylistCtrlColumnDispT<T>::get_columnWidth(void)
{
  long pVal;
  this->get_columnWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPlaylistCtrlColumnDispT<T>::set_columnWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnWidth"), DISPID(5673));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSliderCtrlEventsDispT<T>::ondragbegin()
{
  _TDispID _dispid(/* ondragbegin */ DISPID(5430));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlEventsDispT<T>::ondragend()
{
  _TDispID _dispid(/* ondragend */ DISPID(5431));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlEventsDispT<T>::onpositionchange()
{
  _TDispID _dispid(/* onpositionchange */ DISPID(5432));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPSliderCtrl
// Interface: IWMPSliderCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_direction(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_direction(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_direction(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_direction((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_direction(BSTR pVal/*[in]*/)
{
  return (*this)->set_direction(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_slide(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_slide(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPSliderCtrlT<T>::get_slide(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_slide((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_slide(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_slide(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_tiled(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPSliderCtrlT<T>::get_tiled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_tiled((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_tiled(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_tiled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundEndColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundEndColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundEndColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundEndColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_foregroundEndColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundEndColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundEndColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundEndColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundEndColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundEndColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_backgroundEndColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundEndColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_disabledColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_disabledColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_disabledColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_transparencyColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_transparencyColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_transparencyColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_foregroundImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_backgroundImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundHoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundHoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_backgroundHoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundHoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_backgroundHoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundHoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_disabledImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_thumbImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_thumbImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_thumbImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_thumbImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbHoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_thumbHoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbHoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_thumbHoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_thumbHoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_thumbHoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbDownImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_thumbDownImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbDownImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_thumbDownImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_thumbDownImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_thumbDownImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbDisabledImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_thumbDisabledImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_thumbDisabledImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_thumbDisabledImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_thumbDisabledImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_thumbDisabledImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_min(float* pVal/*[out,retval]*/)
{
  return (*this)->get_min(pVal);
}

template <class T> float __fastcall
TCOMIWMPSliderCtrlT<T>::get_min(void)
{
  float pVal;
  OLECHECK(this->get_min((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_min(float pVal/*[in]*/)
{
  return (*this)->set_min(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_max(float* pVal/*[out,retval]*/)
{
  return (*this)->get_max(pVal);
}

template <class T> float __fastcall
TCOMIWMPSliderCtrlT<T>::get_max(void)
{
  float pVal;
  OLECHECK(this->get_max((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_max(float pVal/*[in]*/)
{
  return (*this)->set_max(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_value(float* pVal/*[out,retval]*/)
{
  return (*this)->get_value(pVal);
}

template <class T> float __fastcall
TCOMIWMPSliderCtrlT<T>::get_value(void)
{
  float pVal;
  OLECHECK(this->get_value((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_value(float pVal/*[in]*/)
{
  return (*this)->set_value(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_toolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_toolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_toolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_toolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_borderSize(int* pVal/*[out,retval]*/)
{
  return (*this)->get_borderSize(pVal);
}

template <class T> int __fastcall
TCOMIWMPSliderCtrlT<T>::get_borderSize(void)
{
  int pVal;
  OLECHECK(this->get_borderSize((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_borderSize(int pVal/*[in]*/)
{
  return (*this)->set_borderSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundHoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundHoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundHoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundHoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_foregroundHoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundHoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundProgress(float* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundProgress(pVal);
}

template <class T> float __fastcall
TCOMIWMPSliderCtrlT<T>::get_foregroundProgress(void)
{
  float pVal;
  OLECHECK(this->get_foregroundProgress((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_foregroundProgress(float pVal/*[in]*/)
{
  return (*this)->set_foregroundProgress(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::get_useForegroundProgress(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_useForegroundProgress(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPSliderCtrlT<T>::get_useForegroundProgress(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_useForegroundProgress((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPSliderCtrlT<T>::set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_useForegroundProgress(pVal);
}

// *********************************************************************//
// DispIntf:  IWMPSliderCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F2BF2C8F-405F-11D3-BB39-00A0C93CA73A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_direction(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("direction"), DISPID(5400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_direction(void)
{
  BSTR pVal;
  this->get_direction((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_direction(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("direction"), DISPID(5400));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_slide(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("slide"), DISPID(5402));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSliderCtrlDispT<T>::get_slide(void)
{
  VARIANT_BOOL pVal;
  this->get_slide((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_slide(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("slide"), DISPID(5402));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_tiled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tiled"), DISPID(5403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSliderCtrlDispT<T>::get_tiled(void)
{
  VARIANT_BOOL pVal;
  this->get_tiled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_tiled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tiled"), DISPID(5403));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5404));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pVal;
  this->get_foregroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5404));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundEndColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundEndColor"), DISPID(5405));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundEndColor(void)
{
  BSTR pVal;
  this->get_foregroundEndColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_foregroundEndColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundEndColor"), DISPID(5405));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5406));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundEndColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundEndColor"), DISPID(5407));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundEndColor(void)
{
  BSTR pVal;
  this->get_backgroundEndColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_backgroundEndColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundEndColor"), DISPID(5407));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_disabledColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledColor"), DISPID(5408));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_disabledColor(void)
{
  BSTR pVal;
  this->get_disabledColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_disabledColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledColor"), DISPID(5408));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5409));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5409));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundImage"), DISPID(5410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundImage(void)
{
  BSTR pVal;
  this->get_foregroundImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_foregroundImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundImage"), DISPID(5410));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(5411));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundImage(void)
{
  BSTR pVal;
  this->get_backgroundImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_backgroundImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundImage"), DISPID(5411));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundHoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundHoverImage"), DISPID(5412));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_backgroundHoverImage(void)
{
  BSTR pVal;
  this->get_backgroundHoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_backgroundHoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundHoverImage"), DISPID(5412));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5413));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_disabledImage(void)
{
  BSTR pVal;
  this->get_disabledImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5413));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_thumbImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbImage"), DISPID(5414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_thumbImage(void)
{
  BSTR pVal;
  this->get_thumbImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_thumbImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbImage"), DISPID(5414));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_thumbHoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbHoverImage"), DISPID(5415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_thumbHoverImage(void)
{
  BSTR pVal;
  this->get_thumbHoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_thumbHoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbHoverImage"), DISPID(5415));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_thumbDownImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbDownImage"), DISPID(5416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_thumbDownImage(void)
{
  BSTR pVal;
  this->get_thumbDownImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_thumbDownImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbDownImage"), DISPID(5416));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_thumbDisabledImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbDisabledImage"), DISPID(5417));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_thumbDisabledImage(void)
{
  BSTR pVal;
  this->get_thumbDisabledImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_thumbDisabledImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("thumbDisabledImage"), DISPID(5417));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_min(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("min"), DISPID(5418));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPSliderCtrlDispT<T>::get_min(void)
{
  float pVal;
  this->get_min((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_min(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("min"), DISPID(5418));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_max(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("max"), DISPID(5419));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPSliderCtrlDispT<T>::get_max(void)
{
  float pVal;
  this->get_max((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_max(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("max"), DISPID(5419));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_value(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5420));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPSliderCtrlDispT<T>::get_value(void)
{
  float pVal;
  this->get_value((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_value(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5420));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5421));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_toolTip(void)
{
  BSTR pVal;
  this->get_toolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5421));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5422));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5422));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_borderSize(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("borderSize"), DISPID(5423));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWMPSliderCtrlDispT<T>::get_borderSize(void)
{
  int pVal;
  this->get_borderSize((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_borderSize(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("borderSize"), DISPID(5423));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundHoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundHoverImage"), DISPID(5424));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundHoverImage(void)
{
  BSTR pVal;
  this->get_foregroundHoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_foregroundHoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundHoverImage"), DISPID(5424));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundProgress(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundProgress"), DISPID(5425));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPSliderCtrlDispT<T>::get_foregroundProgress(void)
{
  float pVal;
  this->get_foregroundProgress((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_foregroundProgress(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundProgress"), DISPID(5425));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::get_useForegroundProgress(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("useForegroundProgress"), DISPID(5426));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPSliderCtrlDispT<T>::get_useForegroundProgress(void)
{
  VARIANT_BOOL pVal;
  this->get_useForegroundProgress((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPSliderCtrlDispT<T>::set_useForegroundProgress(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("useForegroundProgress"), DISPID(5426));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPVideoCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {A85C0477-714C-4A06-B9F6-7C8CA38B45DC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPVideoCtrlEventsDispT<T>::onvideostart()
{
  _TDispID _dispid(/* onvideostart */ DISPID(5720));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlEventsDispT<T>::onvideoend()
{
  _TDispID _dispid(/* onvideoend */ DISPID(5721));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPVideoCtrl
// Interface: IWMPVideoCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_windowless(VARIANT_BOOL pbClipped/*[in]*/)
{
  return (*this)->set_windowless(pbClipped);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_windowless(VARIANT_BOOL* pbClipped/*[out,retval]*/)
{
  return (*this)->get_windowless(pbClipped);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPVideoCtrlT<T>::get_windowless(void)
{
  VARIANT_BOOL pbClipped;
  OLECHECK(this->get_windowless((VARIANT_BOOL*)&pbClipped));
  return pbClipped;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_cursor(BSTR pbstrCursor/*[in]*/)
{
  return (*this)->set_cursor(pbstrCursor);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_cursor(BSTR* pbstrCursor/*[out,retval]*/)
{
  return (*this)->get_cursor(pbstrCursor);
}

template <class T> BSTR __fastcall
TCOMIWMPVideoCtrlT<T>::get_cursor(void)
{
  BSTR pbstrCursor = 0;
  OLECHECK(this->get_cursor((BSTR*)&pbstrCursor));
  return pbstrCursor;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_backgroundColor(BSTR pbstrColor/*[in]*/)
{
  return (*this)->set_backgroundColor(pbstrColor);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pbstrColor);
}

template <class T> BSTR __fastcall
TCOMIWMPVideoCtrlT<T>::get_backgroundColor(void)
{
  BSTR pbstrColor = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pbstrColor));
  return pbstrColor;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/)
{
  return (*this)->set_maintainAspectRatio(pbMaintainAspectRatio);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_maintainAspectRatio(VARIANT_BOOL* pbMaintainAspectRatio/*[out,retval]*/)
{
  return (*this)->get_maintainAspectRatio(pbMaintainAspectRatio);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPVideoCtrlT<T>::get_maintainAspectRatio(void)
{
  VARIANT_BOOL pbMaintainAspectRatio;
  OLECHECK(this->get_maintainAspectRatio((VARIANT_BOOL*)&pbMaintainAspectRatio));
  return pbMaintainAspectRatio;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_toolTip(BSTR bstrToolTip/*[in]*/)
{
  return (*this)->set_toolTip(bstrToolTip);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_toolTip(BSTR* bstrToolTip/*[out,retval]*/)
{
  return (*this)->get_toolTip(bstrToolTip);
}

template <class T> BSTR __fastcall
TCOMIWMPVideoCtrlT<T>::get_toolTip(void)
{
  BSTR bstrToolTip = 0;
  OLECHECK(this->get_toolTip((BSTR*)&bstrToolTip));
  return bstrToolTip;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  return (*this)->get_fullScreen(pbFullScreen);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPVideoCtrlT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/)
{
  return (*this)->set_fullScreen(pbFullScreen);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/)
{
  return (*this)->set_shrinkToFit(pbShrinkToFit);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_shrinkToFit(VARIANT_BOOL* pbShrinkToFit/*[out,retval]*/)
{
  return (*this)->get_shrinkToFit(pbShrinkToFit);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPVideoCtrlT<T>::get_shrinkToFit(void)
{
  VARIANT_BOOL pbShrinkToFit;
  OLECHECK(this->get_shrinkToFit((VARIANT_BOOL*)&pbShrinkToFit));
  return pbShrinkToFit;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/)
{
  return (*this)->set_stretchToFit(pbStretchToFit);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_stretchToFit(VARIANT_BOOL* pbStretchToFit/*[out,retval]*/)
{
  return (*this)->get_stretchToFit(pbStretchToFit);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPVideoCtrlT<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbStretchToFit;
  OLECHECK(this->get_stretchToFit((VARIANT_BOOL*)&pbStretchToFit));
  return pbStretchToFit;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::set_zoom(long pzoom/*[in]*/)
{
  return (*this)->set_zoom(pzoom);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoCtrlT<T>::get_zoom(long* pzoom/*[out,retval]*/)
{
  return (*this)->get_zoom(pzoom);
}

template <class T> long __fastcall
TCOMIWMPVideoCtrlT<T>::get_zoom(void)
{
  long pzoom;
  OLECHECK(this->get_zoom((long*)&pzoom));
  return pzoom;
}

// *********************************************************************//
// DispIntf:  IWMPVideoCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61CECF10-FC3A-11D2-A1CD-005004602752}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_windowless(VARIANT_BOOL pbClipped/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowless"), DISPID(5700));
  TAutoArgs<1> _args;
  _args[1] = pbClipped /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_windowless(VARIANT_BOOL* pbClipped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowless"), DISPID(5700));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbClipped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPVideoCtrlDispT<T>::get_windowless(void)
{
  VARIANT_BOOL pbClipped;
  this->get_windowless((VARIANT_BOOL*)&pbClipped);
  return pbClipped;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_cursor(BSTR pbstrCursor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5701));
  TAutoArgs<1> _args;
  _args[1] = pbstrCursor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_cursor(BSTR* pbstrCursor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5701));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCursor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPVideoCtrlDispT<T>::get_cursor(void)
{
  BSTR pbstrCursor;
  this->get_cursor((BSTR*)&pbstrCursor);
  return pbstrCursor;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_backgroundColor(BSTR pbstrColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5702));
  TAutoArgs<1> _args;
  _args[1] = pbstrColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_backgroundColor(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5702));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPVideoCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pbstrColor;
  this->get_backgroundColor((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_maintainAspectRatio(VARIANT_BOOL pbMaintainAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maintainAspectRatio"), DISPID(5704));
  TAutoArgs<1> _args;
  _args[1] = pbMaintainAspectRatio /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_maintainAspectRatio(VARIANT_BOOL* pbMaintainAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maintainAspectRatio"), DISPID(5704));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbMaintainAspectRatio /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPVideoCtrlDispT<T>::get_maintainAspectRatio(void)
{
  VARIANT_BOOL pbMaintainAspectRatio;
  this->get_maintainAspectRatio((VARIANT_BOOL*)&pbMaintainAspectRatio);
  return pbMaintainAspectRatio;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_toolTip(BSTR bstrToolTip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5706));
  TAutoArgs<1> _args;
  _args[1] = bstrToolTip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_toolTip(BSTR* bstrToolTip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5706));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrToolTip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPVideoCtrlDispT<T>::get_toolTip(void)
{
  BSTR bstrToolTip;
  this->get_toolTip((BSTR*)&bstrToolTip);
  return bstrToolTip;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(5707));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPVideoCtrlDispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(5707));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_shrinkToFit(VARIANT_BOOL pbShrinkToFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shrinkToFit"), DISPID(5703));
  TAutoArgs<1> _args;
  _args[1] = pbShrinkToFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_shrinkToFit(VARIANT_BOOL* pbShrinkToFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shrinkToFit"), DISPID(5703));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbShrinkToFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPVideoCtrlDispT<T>::get_shrinkToFit(void)
{
  VARIANT_BOOL pbShrinkToFit;
  this->get_shrinkToFit((VARIANT_BOOL*)&pbShrinkToFit);
  return pbShrinkToFit;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_stretchToFit(VARIANT_BOOL pbStretchToFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(5708));
  TAutoArgs<1> _args;
  _args[1] = pbStretchToFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_stretchToFit(VARIANT_BOOL* pbStretchToFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stretchToFit"), DISPID(5708));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbStretchToFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPVideoCtrlDispT<T>::get_stretchToFit(void)
{
  VARIANT_BOOL pbStretchToFit;
  this->get_stretchToFit((VARIANT_BOOL*)&pbStretchToFit);
  return pbStretchToFit;
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::set_zoom(long pzoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("zoom"), DISPID(5709));
  TAutoArgs<1> _args;
  _args[1] = pzoom /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoCtrlDispT<T>::get_zoom(long* pzoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("zoom"), DISPID(5709));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pzoom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPVideoCtrlDispT<T>::get_zoom(void)
{
  long pzoom;
  this->get_zoom((long*)&pzoom);
  return pzoom;
}

// *********************************************************************//
// SmartIntf: TCOMIWMPEffectsCtrl
// Interface: IWMPEffectsCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_windowed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_windowed(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEffectsCtrlT<T>::get_windowed(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_windowed((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_windowed(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_windowed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_allowAll(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_allowAll(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEffectsCtrlT<T>::get_allowAll(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_allowAll((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_allowAll(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_allowAll(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_currentEffectType(BSTR pVal/*[in]*/)
{
  return (*this)->set_currentEffectType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectType(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_currentEffectType(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectType(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_currentEffectType((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_currentEffectTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_currentEffectTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::next(void)
{
  return (*this)->next();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::previous(void)
{
  return (*this)->previous();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::settings(void)
{
  return (*this)->settings();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffect(LPDISPATCH* p/*[out,retval]*/)
{
  return (*this)->get_currentEffect(p);
}

template <class T> LPDISPATCH __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffect(void)
{
  LPDISPATCH p;
  OLECHECK(this->get_currentEffect((LPDISPATCH*)&p));
  return p;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_currentEffect(LPDISPATCH p/*[in]*/)
{
  return (*this)->set_currentEffect(p);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::nextEffect(void)
{
  return (*this)->nextEffect();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::previousEffect(void)
{
  return (*this)->previousEffect();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::nextPreset(void)
{
  return (*this)->nextPreset();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::previousPreset(void)
{
  return (*this)->previousPreset();
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentPreset(long* pVal/*[out,retval]*/)
{
  return (*this)->get_currentPreset(pVal);
}

template <class T> long __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentPreset(void)
{
  long pVal;
  OLECHECK(this->get_currentPreset((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_currentPreset(long pVal/*[in]*/)
{
  return (*this)->set_currentPreset(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentPresetTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_currentPresetTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentPresetTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_currentPresetTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectPresetCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_currentEffectPresetCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPEffectsCtrlT<T>::get_currentEffectPresetCount(void)
{
  long pVal;
  OLECHECK(this->get_currentEffectPresetCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  return (*this)->get_fullScreen(pbFullScreen);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEffectsCtrlT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  OLECHECK(this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen));
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/)
{
  return (*this)->set_fullScreen(pbFullScreen);
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectCanGoFullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  return (*this)->get_effectCanGoFullScreen(pbFullScreen);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectCanGoFullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  OLECHECK(this->get_effectCanGoFullScreen((VARIANT_BOOL*)&pbFullScreen));
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectHasPropertyPage(VARIANT_BOOL* pbPropertyPage/*[out,retval]*/)
{
  return (*this)->get_effectHasPropertyPage(pbPropertyPage);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectHasPropertyPage(void)
{
  VARIANT_BOOL pbPropertyPage;
  OLECHECK(this->get_effectHasPropertyPage((VARIANT_BOOL*)&pbPropertyPage));
  return pbPropertyPage;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_effectCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectCount(void)
{
  long pVal;
  OLECHECK(this->get_effectCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectTitle(long index/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_effectTitle(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectTitle(long index/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_effectTitle(index/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectType(long index/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_effectType(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEffectsCtrlT<T>::get_effectType(long index/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_effectType(index/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IWMPEffectsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_windowed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowed"), DISPID(5500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEffectsCtrlDispT<T>::get_windowed(void)
{
  VARIANT_BOOL pVal;
  this->get_windowed((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_windowed(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("windowed"), DISPID(5500));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_allowAll(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowAll"), DISPID(5501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEffectsCtrlDispT<T>::get_allowAll(void)
{
  VARIANT_BOOL pVal;
  this->get_allowAll((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_allowAll(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowAll"), DISPID(5501));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_currentEffectType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffectType"), DISPID(5507));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffectType"), DISPID(5507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectType(void)
{
  BSTR pVal;
  this->get_currentEffectType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffectTitle"), DISPID(5506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectTitle(void)
{
  BSTR pVal;
  this->get_currentEffectTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(5502));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::previous()
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(5503));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::settings()
{
  _TDispID _dispid(*this, OLETEXT("settings"), DISPID(5504));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffect(LPDISPATCH* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffect"), DISPID(5505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffect(void)
{
  LPDISPATCH p;
  this->get_currentEffect((LPDISPATCH*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_currentEffect(LPDISPATCH p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffect"), DISPID(5505));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::nextEffect()
{
  _TDispID _dispid(*this, OLETEXT("nextEffect"), DISPID(5509));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::previousEffect()
{
  _TDispID _dispid(*this, OLETEXT("previousEffect"), DISPID(5510));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::nextPreset()
{
  _TDispID _dispid(*this, OLETEXT("nextPreset"), DISPID(5511));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::previousPreset()
{
  _TDispID _dispid(*this, OLETEXT("previousPreset"), DISPID(5512));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPreset"), DISPID(5513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEffectsCtrlDispT<T>::get_currentPreset(void)
{
  long pVal;
  this->get_currentPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_currentPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPreset"), DISPID(5513));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentPresetTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPresetTitle"), DISPID(5514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEffectsCtrlDispT<T>::get_currentPresetTitle(void)
{
  BSTR pVal;
  this->get_currentPresetTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectPresetCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentEffectPresetCount"), DISPID(5515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEffectsCtrlDispT<T>::get_currentEffectPresetCount(void)
{
  long pVal;
  this->get_currentEffectPresetCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_fullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(5516));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEffectsCtrlDispT<T>::get_fullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_fullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::set_fullScreen(VARIANT_BOOL pbFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullScreen"), DISPID(5516));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_effectCanGoFullScreen(VARIANT_BOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectCanGoFullScreen"), DISPID(5517));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEffectsCtrlDispT<T>::get_effectCanGoFullScreen(void)
{
  VARIANT_BOOL pbFullScreen;
  this->get_effectCanGoFullScreen((VARIANT_BOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_effectHasPropertyPage(VARIANT_BOOL* pbPropertyPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectHasPropertyPage"), DISPID(5518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbPropertyPage /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEffectsCtrlDispT<T>::get_effectHasPropertyPage(void)
{
  VARIANT_BOOL pbPropertyPage;
  this->get_effectHasPropertyPage((VARIANT_BOOL*)&pbPropertyPage);
  return pbPropertyPage;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_effectCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectCount"), DISPID(5520));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEffectsCtrlDispT<T>::get_effectCount(void)
{
  long pVal;
  this->get_effectCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_effectTitle(long index/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectTitle"), DISPID(5521));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEffectsCtrlDispT<T>::get_effectTitle(long index/*[in]*/)
{
  BSTR pVal;
  this->get_effectTitle(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEffectsCtrlDispT<T>::get_effectType(long index/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("effectType"), DISPID(5522));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEffectsCtrlDispT<T>::get_effectType(long index/*[in]*/)
{
  BSTR pVal;
  this->get_effectType(index, (BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIWMPEqualizerSettingsCtrl
// Interface: IWMPEqualizerSettingsCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_bypass(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_bypass(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_bypass(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_bypass((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_bypass(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_bypass(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel1(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel1(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel1(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel1((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel1(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel1(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel2(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel2(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel2(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel2((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel2(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel2(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel3(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel3(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel3(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel3((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel3(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel3(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel4(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel4(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel4(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel4((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel4(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel4(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel5(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel5(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel5(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel5((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel5(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel5(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel6(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel6(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel6(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel6((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel6(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel6(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel7(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel7(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel7(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel7((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel7(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel7(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel8(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel8(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel8(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel8((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel8(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel8(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel9(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel9(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel9(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel9((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel9(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel9(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel10(float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevel10(pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevel10(void)
{
  float pflLevel;
  OLECHECK(this->get_gainLevel10((float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevel10(float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevel10(pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevels(long iIndex/*[in]*/, 
                                                  float* pflLevel/*[out,retval]*/)
{
  return (*this)->get_gainLevels(iIndex, pflLevel);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_gainLevels(long iIndex/*[in]*/)
{
  float pflLevel;
  OLECHECK(this->get_gainLevels(iIndex/*[in]*/, (float*)&pflLevel));
  return pflLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/)
{
  return (*this)->set_gainLevels(iIndex, pflLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::reset(void)
{
  return (*this)->reset();
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_bands(long* pbands/*[out,retval]*/)
{
  return (*this)->get_bands(pbands);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_bands(void)
{
  long pbands;
  OLECHECK(this->get_bands((long*)&pbands));
  return pbands;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::nextPreset(void)
{
  return (*this)->nextPreset();
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::previousPreset(void)
{
  return (*this)->previousPreset();
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentPreset(long* pVal/*[out,retval]*/)
{
  return (*this)->get_currentPreset(pVal);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentPreset(void)
{
  long pVal;
  OLECHECK(this->get_currentPreset((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_currentPreset(long pVal/*[in]*/)
{
  return (*this)->set_currentPreset(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentPresetTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_currentPresetTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentPresetTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_currentPresetTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_presetCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_presetCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_presetCount(void)
{
  long pVal;
  OLECHECK(this->get_presetCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_enhancedAudio(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  return (*this)->get_enhancedAudio(pfVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_enhancedAudio(void)
{
  VARIANT_BOOL pfVal;
  OLECHECK(this->get_enhancedAudio((VARIANT_BOOL*)&pfVal));
  return pfVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/)
{
  return (*this)->set_enhancedAudio(pfVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_speakerSize(long* plVal/*[out,retval]*/)
{
  return (*this)->get_speakerSize(plVal);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_speakerSize(void)
{
  long plVal;
  OLECHECK(this->get_speakerSize((long*)&plVal));
  return plVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_speakerSize(long plVal/*[in]*/)
{
  return (*this)->set_speakerSize(plVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentSpeakerName(BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_currentSpeakerName(pbstrName);
}

template <class T> BSTR __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_currentSpeakerName(void)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_currentSpeakerName((BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_truBassLevel(long* plTruBassLevel/*[out,retval]*/)
{
  return (*this)->get_truBassLevel(plTruBassLevel);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_truBassLevel(void)
{
  long plTruBassLevel;
  OLECHECK(this->get_truBassLevel((long*)&plTruBassLevel));
  return plTruBassLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_truBassLevel(long plTruBassLevel/*[in]*/)
{
  return (*this)->set_truBassLevel(plTruBassLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_wowLevel(long* plWowLevel/*[out,retval]*/)
{
  return (*this)->get_wowLevel(plWowLevel);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_wowLevel(void)
{
  long plWowLevel;
  OLECHECK(this->get_wowLevel((long*)&plWowLevel));
  return plWowLevel;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_wowLevel(long plWowLevel/*[in]*/)
{
  return (*this)->set_wowLevel(plWowLevel);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_splineTension(float* pflSplineTension/*[out,retval]*/)
{
  return (*this)->get_splineTension(pflSplineTension);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_splineTension(void)
{
  float pflSplineTension;
  OLECHECK(this->get_splineTension((float*)&pflSplineTension));
  return pflSplineTension;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_splineTension(float pflSplineTension/*[in]*/)
{
  return (*this)->set_splineTension(pflSplineTension);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_enableSplineTension(VARIANT_BOOL* pfEnableSplineTension/*[out,retval]*/)
{
  return (*this)->get_enableSplineTension(pfEnableSplineTension);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_enableSplineTension(void)
{
  VARIANT_BOOL pfEnableSplineTension;
  OLECHECK(this->get_enableSplineTension((VARIANT_BOOL*)&pfEnableSplineTension));
  return pfEnableSplineTension;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/)
{
  return (*this)->set_enableSplineTension(pfEnableSplineTension);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_presetTitle(long iIndex/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_presetTitle(iIndex, pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_presetTitle(long iIndex/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_presetTitle(iIndex/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalization(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  return (*this)->get_normalization(pfVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalization(void)
{
  VARIANT_BOOL pfVal;
  OLECHECK(this->get_normalization((VARIANT_BOOL*)&pfVal));
  return pfVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_normalization(VARIANT_BOOL pfVal/*[in]*/)
{
  return (*this)->set_normalization(pfVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalizationAverage(float* pflAverage/*[out,retval]*/)
{
  return (*this)->get_normalizationAverage(pflAverage);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalizationAverage(void)
{
  float pflAverage;
  OLECHECK(this->get_normalizationAverage((float*)&pflAverage));
  return pflAverage;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalizationPeak(float* pflPeak/*[out,retval]*/)
{
  return (*this)->get_normalizationPeak(pflPeak);
}

template <class T> float __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_normalizationPeak(void)
{
  float pflPeak;
  OLECHECK(this->get_normalizationPeak((float*)&pflPeak));
  return pflPeak;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_crossFade(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  return (*this)->get_crossFade(pfVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_crossFade(void)
{
  VARIANT_BOOL pfVal;
  OLECHECK(this->get_crossFade((VARIANT_BOOL*)&pfVal));
  return pfVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_crossFade(VARIANT_BOOL pfVal/*[in]*/)
{
  return (*this)->set_crossFade(pfVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_crossFadeWindow(long* plWindow/*[out,retval]*/)
{
  return (*this)->get_crossFadeWindow(plWindow);
}

template <class T> long __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::get_crossFadeWindow(void)
{
  long plWindow;
  OLECHECK(this->get_crossFadeWindow((long*)&plWindow));
  return plWindow;
}

template <class T> HRESULT __fastcall
TCOMIWMPEqualizerSettingsCtrlT<T>::set_crossFadeWindow(long plWindow/*[in]*/)
{
  return (*this)->set_crossFadeWindow(plWindow);
}

// *********************************************************************//
// DispIntf:  IWMPEqualizerSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2BD3716F-A914-49FB-8655-996D5F495498}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_bypass(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bypass"), DISPID(5800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_bypass(void)
{
  VARIANT_BOOL pVal;
  this->get_bypass((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_bypass(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("bypass"), DISPID(5800));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel1(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel1"), DISPID(5804));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel1(void)
{
  float pflLevel;
  this->get_gainLevel1((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel1(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel1"), DISPID(5804));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel2(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel2"), DISPID(5805));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel2(void)
{
  float pflLevel;
  this->get_gainLevel2((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel2(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel2"), DISPID(5805));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel3(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel3"), DISPID(5806));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel3(void)
{
  float pflLevel;
  this->get_gainLevel3((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel3(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel3"), DISPID(5806));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel4(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel4"), DISPID(5807));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel4(void)
{
  float pflLevel;
  this->get_gainLevel4((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel4(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel4"), DISPID(5807));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel5(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel5"), DISPID(5808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel5(void)
{
  float pflLevel;
  this->get_gainLevel5((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel5(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel5"), DISPID(5808));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel6(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel6"), DISPID(5809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel6(void)
{
  float pflLevel;
  this->get_gainLevel6((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel6(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel6"), DISPID(5809));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel7(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel7"), DISPID(5810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel7(void)
{
  float pflLevel;
  this->get_gainLevel7((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel7(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel7"), DISPID(5810));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel8(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel8"), DISPID(5811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel8(void)
{
  float pflLevel;
  this->get_gainLevel8((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel8(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel8"), DISPID(5811));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel9(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel9"), DISPID(5812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel9(void)
{
  float pflLevel;
  this->get_gainLevel9((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel9(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel9"), DISPID(5812));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel10(float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel10"), DISPID(5813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevel10(void)
{
  float pflLevel;
  this->get_gainLevel10((float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevel10(float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevel10"), DISPID(5813));
  TAutoArgs<1> _args;
  _args[1] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevels(long iIndex/*[in]*/, 
                                                  float* pflLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevels"), DISPID(5815));
  TAutoArgs<1> _args;
  _args[1] = iIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pflLevel /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_gainLevels(long iIndex/*[in]*/)
{
  float pflLevel;
  this->get_gainLevels(iIndex, (float*)&pflLevel);
  return pflLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_gainLevels(long iIndex/*[in]*/, float pflLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gainLevels"), DISPID(5815));
  TAutoArgs<2> _args;
  _args[1] = iIndex /*[VT_I4:0]*/;
  _args[2] = pflLevel /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(5814));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_bands(long* pbands/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bands"), DISPID(5801));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbands /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_bands(void)
{
  long pbands;
  this->get_bands((long*)&pbands);
  return pbands;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::nextPreset()
{
  _TDispID _dispid(*this, OLETEXT("nextPreset"), DISPID(5816));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::previousPreset()
{
  _TDispID _dispid(*this, OLETEXT("previousPreset"), DISPID(5817));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentPreset(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPreset"), DISPID(5818));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentPreset(void)
{
  long pVal;
  this->get_currentPreset((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_currentPreset(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPreset"), DISPID(5818));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentPresetTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentPresetTitle"), DISPID(5819));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentPresetTitle(void)
{
  BSTR pVal;
  this->get_currentPresetTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_presetCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("presetCount"), DISPID(5820));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_presetCount(void)
{
  long pVal;
  this->get_presetCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_enhancedAudio(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enhancedAudio"), DISPID(5821));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_enhancedAudio(void)
{
  VARIANT_BOOL pfVal;
  this->get_enhancedAudio((VARIANT_BOOL*)&pfVal);
  return pfVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_enhancedAudio(VARIANT_BOOL pfVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enhancedAudio"), DISPID(5821));
  TAutoArgs<1> _args;
  _args[1] = pfVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_speakerSize(long* plVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("speakerSize"), DISPID(5822));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_speakerSize(void)
{
  long plVal;
  this->get_speakerSize((long*)&plVal);
  return plVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_speakerSize(long plVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("speakerSize"), DISPID(5822));
  TAutoArgs<1> _args;
  _args[1] = plVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentSpeakerName(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentSpeakerName"), DISPID(5823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_currentSpeakerName(void)
{
  BSTR pbstrName;
  this->get_currentSpeakerName((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_truBassLevel(long* plTruBassLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("truBassLevel"), DISPID(5824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plTruBassLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_truBassLevel(void)
{
  long plTruBassLevel;
  this->get_truBassLevel((long*)&plTruBassLevel);
  return plTruBassLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_truBassLevel(long plTruBassLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("truBassLevel"), DISPID(5824));
  TAutoArgs<1> _args;
  _args[1] = plTruBassLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_wowLevel(long* plWowLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("wowLevel"), DISPID(5825));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plWowLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_wowLevel(void)
{
  long plWowLevel;
  this->get_wowLevel((long*)&plWowLevel);
  return plWowLevel;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_wowLevel(long plWowLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("wowLevel"), DISPID(5825));
  TAutoArgs<1> _args;
  _args[1] = plWowLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_splineTension(float* pflSplineTension/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("splineTension"), DISPID(5827));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflSplineTension /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_splineTension(void)
{
  float pflSplineTension;
  this->get_splineTension((float*)&pflSplineTension);
  return pflSplineTension;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_splineTension(float pflSplineTension/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("splineTension"), DISPID(5827));
  TAutoArgs<1> _args;
  _args[1] = pflSplineTension /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_enableSplineTension(VARIANT_BOOL* pfEnableSplineTension/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableSplineTension"), DISPID(5826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSplineTension /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_enableSplineTension(void)
{
  VARIANT_BOOL pfEnableSplineTension;
  this->get_enableSplineTension((VARIANT_BOOL*)&pfEnableSplineTension);
  return pfEnableSplineTension;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_enableSplineTension(VARIANT_BOOL pfEnableSplineTension/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableSplineTension"), DISPID(5826));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSplineTension /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_presetTitle(long iIndex/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("presetTitle"), DISPID(5828));
  TAutoArgs<1> _args;
  _args[1] = iIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_presetTitle(long iIndex/*[in]*/)
{
  BSTR pVal;
  this->get_presetTitle(iIndex, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalization(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("normalization"), DISPID(5829));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalization(void)
{
  VARIANT_BOOL pfVal;
  this->get_normalization((VARIANT_BOOL*)&pfVal);
  return pfVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_normalization(VARIANT_BOOL pfVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("normalization"), DISPID(5829));
  TAutoArgs<1> _args;
  _args[1] = pfVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalizationAverage(float* pflAverage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("normalizationAverage"), DISPID(5830));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflAverage /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalizationAverage(void)
{
  float pflAverage;
  this->get_normalizationAverage((float*)&pflAverage);
  return pflAverage;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalizationPeak(float* pflPeak/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("normalizationPeak"), DISPID(5831));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflPeak /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_normalizationPeak(void)
{
  float pflPeak;
  this->get_normalizationPeak((float*)&pflPeak);
  return pflPeak;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_crossFade(VARIANT_BOOL* pfVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("crossFade"), DISPID(5832));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_crossFade(void)
{
  VARIANT_BOOL pfVal;
  this->get_crossFade((VARIANT_BOOL*)&pfVal);
  return pfVal;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_crossFade(VARIANT_BOOL pfVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("crossFade"), DISPID(5832));
  TAutoArgs<1> _args;
  _args[1] = pfVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_crossFadeWindow(long* plWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("crossFadeWindow"), DISPID(5833));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plWindow /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::get_crossFadeWindow(void)
{
  long plWindow;
  this->get_crossFadeWindow((long*)&plWindow);
  return plWindow;
}

template <class T> HRESULT __fastcall
IWMPEqualizerSettingsCtrlDispT<T>::set_crossFadeWindow(long plWindow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("crossFadeWindow"), DISPID(5833));
  TAutoArgs<1> _args;
  _args[1] = plWindow /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPVideoSettingsCtrl
// Interface: IWMPVideoSettingsCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_brightness(long* pVal/*[out,retval]*/)
{
  return (*this)->get_brightness(pVal);
}

template <class T> long __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_brightness(void)
{
  long pVal;
  OLECHECK(this->get_brightness((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::set_brightness(long pVal/*[in]*/)
{
  return (*this)->set_brightness(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_contrast(long* pVal/*[out,retval]*/)
{
  return (*this)->get_contrast(pVal);
}

template <class T> long __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_contrast(void)
{
  long pVal;
  OLECHECK(this->get_contrast((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::set_contrast(long pVal/*[in]*/)
{
  return (*this)->set_contrast(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_hue(long* pVal/*[out,retval]*/)
{
  return (*this)->get_hue(pVal);
}

template <class T> long __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_hue(void)
{
  long pVal;
  OLECHECK(this->get_hue((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::set_hue(long pVal/*[in]*/)
{
  return (*this)->set_hue(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_saturation(long* pVal/*[out,retval]*/)
{
  return (*this)->get_saturation(pVal);
}

template <class T> long __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::get_saturation(void)
{
  long pVal;
  OLECHECK(this->get_saturation((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::set_saturation(long pVal/*[in]*/)
{
  return (*this)->set_saturation(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPVideoSettingsCtrlT<T>::reset(void)
{
  return (*this)->reset();
}

// *********************************************************************//
// DispIntf:  IWMPVideoSettingsCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_brightness(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brightness"), DISPID(5900));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_brightness(void)
{
  long pVal;
  this->get_brightness((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::set_brightness(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brightness"), DISPID(5900));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_contrast(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("contrast"), DISPID(5901));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_contrast(void)
{
  long pVal;
  this->get_contrast((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::set_contrast(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("contrast"), DISPID(5901));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_hue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hue"), DISPID(5902));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_hue(void)
{
  long pVal;
  this->get_hue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::set_hue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hue"), DISPID(5902));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_saturation(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5903));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPVideoSettingsCtrlDispT<T>::get_saturation(void)
{
  long pVal;
  this->get_saturation((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::set_saturation(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5903));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPVideoSettingsCtrlDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(5904));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPLibraryTreeCtrl
// Interface: IWMPLibraryTreeCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_dropDownVisible(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_dropDownVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_dropDownVisible((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_dropDownVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_foregroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_backgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_fontSize(pVal);
}

template <class T> long __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontSize(void)
{
  long pVal;
  OLECHECK(this->get_fontSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_fontSize(long pVal/*[in]*/)
{
  return (*this)->set_fontSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontFace(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_fontFace(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontFace((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontFace(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_filter(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_filter(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_filter(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_filter((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_filter(BSTR pVal/*[in]*/)
{
  return (*this)->set_filter(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_expandState(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_expandState(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_expandState(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_expandState((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_expandState(BSTR pVal/*[in]*/)
{
  return (*this)->set_expandState(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  return (*this)->get_Playlist(ppPlaylist);
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_Playlist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
  OLECHECK(this->get_Playlist((Wmplib_tlb::IWMPPlaylistPtr*)&ppPlaylist));
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/)
{
  return (*this)->set_Playlist((IWMPPlaylist*)ppPlaylist);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylist* ppPlaylist/*[in]*/)
{
  return (*this)->set_Playlist(ppPlaylist);
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_selectedPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  return (*this)->get_selectedPlaylist(ppPlaylist);
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_selectedPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
  OLECHECK(this->get_selectedPlaylist((Wmplib_tlb::IWMPPlaylistPtr*)&ppPlaylist));
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_selectedMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  return (*this)->get_selectedMedia(ppMedia);
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
TCOMIWMPLibraryTreeCtrlT<T>::get_selectedMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  OLECHECK(this->get_selectedMedia((Wmplib_tlb::IWMPMediaPtr*)&ppMedia));
  return ppMedia;
}

// *********************************************************************//
// DispIntf:  IWMPLibraryTreeCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B738FCAE-F089-45DF-AED6-034B9E7DB632}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_dropDownVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownVisible"), DISPID(6401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_dropDownVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_dropDownVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_dropDownVisible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dropDownVisible"), DISPID(6401));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6402));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pVal;
  this->get_foregroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6402));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6403));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6404));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontSize(void)
{
  long pVal;
  this->get_fontSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_fontSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6404));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6405));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontStyle(void)
{
  BSTR pVal;
  this->get_fontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6405));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_fontFace(void)
{
  BSTR pVal;
  this->get_fontFace((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6406));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_filter(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("filter"), DISPID(6407));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_filter(void)
{
  BSTR pVal;
  this->get_filter((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_filter(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("filter"), DISPID(6407));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_expandState(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("expandState"), DISPID(6408));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_expandState(void)
{
  BSTR pVal;
  this->get_expandState((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_expandState(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("expandState"), DISPID(6408));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_Playlist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playlist"), DISPID(6409));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_Playlist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
  this->get_Playlist(&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::set_Playlist(Wmplib_tlb::IWMPPlaylistPtr ppPlaylist/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playlist"), DISPID(6409));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Wmplib_tlb::IWMPPlaylist*)ppPlaylist /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_selectedPlaylist(Wmplib_tlb::IWMPPlaylist** ppPlaylist/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedPlaylist"), DISPID(6410));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPPlaylist**)ppPlaylist /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPPlaylistPtr __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_selectedPlaylist(void)
{
  Wmplib_tlb::IWMPPlaylistPtr ppPlaylist;
  this->get_selectedPlaylist(&ppPlaylist);
  return ppPlaylist;
}

template <class T> HRESULT __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_selectedMedia(Wmplib_tlb::IWMPMedia** ppMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedMedia"), DISPID(6411));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPMedia**)ppMedia /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPMediaPtr __fastcall
IWMPLibraryTreeCtrlDispT<T>::get_selectedMedia(void)
{
  Wmplib_tlb::IWMPMediaPtr ppMedia;
  this->get_selectedMedia(&ppMedia);
  return ppMedia;
}

// *********************************************************************//
// SmartIntf: TCOMIWMPEditCtrl
// Interface: IWMPEditCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_value(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_value(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_value(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_value((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_value(BSTR pVal/*[in]*/)
{
  return (*this)->set_value(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_border(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_border(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEditCtrlT<T>::get_border(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_border((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_border(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_border(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_justification(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_justification(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_justification(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_justification((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_justification(BSTR pVal/*[in]*/)
{
  return (*this)->set_justification(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_editStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_editStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_editStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_editStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_editStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_editStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_wordWrap(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEditCtrlT<T>::get_wordWrap(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_wordWrap((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_wordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_wordWrap(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_readOnly(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPEditCtrlT<T>::get_readOnly(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_readOnly((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_readOnly(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_readOnly(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_foregroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_backgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_fontSize(pVal);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::get_fontSize(void)
{
  long pVal;
  OLECHECK(this->get_fontSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_fontSize(long pVal/*[in]*/)
{
  return (*this)->set_fontSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_fontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontFace(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::get_fontFace(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontFace((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontFace(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_textLimit(long* pVal/*[out,retval]*/)
{
  return (*this)->get_textLimit(pVal);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::get_textLimit(void)
{
  long pVal;
  OLECHECK(this->get_textLimit((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::set_textLimit(long pVal/*[in]*/)
{
  return (*this)->set_textLimit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::get_lineCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_lineCount(pVal);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::get_lineCount(void)
{
  long pVal;
  OLECHECK(this->get_lineCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::getLine(long nIndex/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->getLine(nIndex, pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPEditCtrlT<T>::getLine(long nIndex/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->getLine(nIndex/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::getSelectionStart(long* pnStart/*[out,retval]*/)
{
  return (*this)->getSelectionStart(pnStart);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::getSelectionStart(void)
{
  long pnStart;
  OLECHECK(this->getSelectionStart((long*)&pnStart));
  return pnStart;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::getSelectionEnd(long* pnEnd/*[out,retval]*/)
{
  return (*this)->getSelectionEnd(pnEnd);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::getSelectionEnd(void)
{
  long pnEnd;
  OLECHECK(this->getSelectionEnd((long*)&pnEnd));
  return pnEnd;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::setSelection(long nStart/*[in]*/, long nEnd/*[in]*/)
{
  return (*this)->setSelection(nStart, nEnd);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::replaceSelection(BSTR newVal/*[in]*/)
{
  return (*this)->replaceSelection(newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::getLineIndex(long nIndex/*[in]*/, long* pnPosition/*[out,retval]*/)
{
  return (*this)->getLineIndex(nIndex, pnPosition);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::getLineIndex(long nIndex/*[in]*/)
{
  long pnPosition;
  OLECHECK(this->getLineIndex(nIndex/*[in]*/, (long*)&pnPosition));
  return pnPosition;
}

template <class T> HRESULT __fastcall
TCOMIWMPEditCtrlT<T>::getLineFromChar(long nPosition/*[in]*/, long* pnLine/*[out,retval]*/)
{
  return (*this)->getLineFromChar(nPosition, pnLine);
}

template <class T> long __fastcall
TCOMIWMPEditCtrlT<T>::getLineFromChar(long nPosition/*[in]*/)
{
  long pnLine;
  OLECHECK(this->getLineFromChar(nPosition/*[in]*/, (long*)&pnLine));
  return pnLine;
}

// *********************************************************************//
// DispIntf:  IWMPEditCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70E1217C-C617-4CFD-BD8A-69CA2043E70B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_value(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_value(void)
{
  BSTR pVal;
  this->get_value((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_value(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_border(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("border"), DISPID(6000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEditCtrlDispT<T>::get_border(void)
{
  VARIANT_BOOL pVal;
  this->get_border((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_border(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("border"), DISPID(6000));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_justification(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("justification"), DISPID(6001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_justification(void)
{
  BSTR pVal;
  this->get_justification((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_justification(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("justification"), DISPID(6001));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_editStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("editStyle"), DISPID(6002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_editStyle(void)
{
  BSTR pVal;
  this->get_editStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_editStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("editStyle"), DISPID(6002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("wordWrap"), DISPID(6003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEditCtrlDispT<T>::get_wordWrap(void)
{
  VARIANT_BOOL pVal;
  this->get_wordWrap((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_wordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("wordWrap"), DISPID(6003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_readOnly(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readOnly"), DISPID(6004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPEditCtrlDispT<T>::get_readOnly(void)
{
  VARIANT_BOOL pVal;
  this->get_readOnly((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_readOnly(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("readOnly"), DISPID(6004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pVal;
  this->get_foregroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(6005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::get_fontSize(void)
{
  long pVal;
  this->get_fontSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_fontSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(6007));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_fontStyle(void)
{
  BSTR pVal;
  this->get_fontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(6008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::get_fontFace(void)
{
  BSTR pVal;
  this->get_fontFace((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(6009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_textLimit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("textLimit"), DISPID(6010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::get_textLimit(void)
{
  long pVal;
  this->get_textLimit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::set_textLimit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("textLimit"), DISPID(6010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::get_lineCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lineCount"), DISPID(6011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::get_lineCount(void)
{
  long pVal;
  this->get_lineCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::getLine(long nIndex/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLine"), DISPID(6012));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPEditCtrlDispT<T>::getLine(long nIndex/*[in]*/)
{
  BSTR pVal;
  this->getLine(nIndex, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::getSelectionStart(long* pnStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSelectionStart"), DISPID(6013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnStart /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::getSelectionStart(void)
{
  long pnStart;
  this->getSelectionStart((long*)&pnStart);
  return pnStart;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::getSelectionEnd(long* pnEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getSelectionEnd"), DISPID(6014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnEnd /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::getSelectionEnd(void)
{
  long pnEnd;
  this->getSelectionEnd((long*)&pnEnd);
  return pnEnd;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::setSelection(long nStart/*[in]*/, long nEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setSelection"), DISPID(6015));
  TAutoArgs<2> _args;
  _args[1] = nStart /*[VT_I4:0]*/;
  _args[2] = nEnd /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::replaceSelection(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceSelection"), DISPID(6016));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::getLineIndex(long nIndex/*[in]*/, long* pnPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLineIndex"), DISPID(6017));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnPosition /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::getLineIndex(long nIndex/*[in]*/)
{
  long pnPosition;
  this->getLineIndex(nIndex, (long*)&pnPosition);
  return pnPosition;
}

template <class T> HRESULT __fastcall
IWMPEditCtrlDispT<T>::getLineFromChar(long nPosition/*[in]*/, long* pnLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLineFromChar"), DISPID(6018));
  TAutoArgs<1> _args;
  _args[1] = nPosition /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pnLine /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPEditCtrlDispT<T>::getLineFromChar(long nPosition/*[in]*/)
{
  long pnLine;
  this->getLineFromChar(nPosition, (long*)&pnLine);
  return pnLine;
}

// *********************************************************************//
// DispIntf:  IWMPPluginUIHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D0AD945-289E-45C5-A9C6-F301F0152108}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPluginUIHostDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(6201));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::get_objectID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("objectID"), DISPID(6202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPPluginUIHostDispT<T>::get_objectID(void)
{
  BSTR pVal;
  this->get_objectID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::set_objectID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("objectID"), DISPID(6202));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::getProperty(BSTR bstrName/*[in]*/, VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProperty"), DISPID(6203));
  TAutoArgs<1> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPPluginUIHostDispT<T>::getProperty(BSTR bstrName/*[in]*/)
{
  VARIANT pVal;
  this->getProperty(bstrName, (VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPPluginUIHostDispT<T>::setProperty(BSTR bstrName/*[in]*/, VARIANT newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProperty"), DISPID(6204));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = newVal /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPMenuCtrl
// Interface: IWMPMenuCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::deleteAllItems(void)
{
  return (*this)->deleteAllItems();
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/)
{
  return (*this)->appendItem(nID, bstrItem);
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::appendSeparator(void)
{
  return (*this)->appendSeparator();
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  return (*this)->enableItem(nID, newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  return (*this)->checkItem(nID, newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  return (*this)->checkRadioItem(nID, newVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::get_showFlags(long* pVal/*[out,retval]*/)
{
  return (*this)->get_showFlags(pVal);
}

template <class T> long __fastcall
TCOMIWMPMenuCtrlT<T>::get_showFlags(void)
{
  long pVal;
  OLECHECK(this->get_showFlags((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::set_showFlags(long pVal/*[in]*/)
{
  return (*this)->set_showFlags(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::show(long* pnID/*[out,retval]*/)
{
  return (*this)->show(pnID);
}

template <class T> long __fastcall
TCOMIWMPMenuCtrlT<T>::show(void)
{
  long pnID;
  OLECHECK(this->show((long*)&pnID));
  return pnID;
}

template <class T> HRESULT __fastcall
TCOMIWMPMenuCtrlT<T>::showEx(long nID/*[in]*/)
{
  return (*this)->showEx(nID);
}

// *********************************************************************//
// DispIntf:  IWMPMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {158A7ADC-33DA-4039-A553-BDDBBE389F5C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::deleteAllItems()
{
  _TDispID _dispid(*this, OLETEXT("deleteAllItems"), DISPID(6301));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::appendItem(long nID/*[in]*/, BSTR bstrItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendItem"), DISPID(6302));
  TAutoArgs<2> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  _args[2] = bstrItem /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::appendSeparator()
{
  _TDispID _dispid(*this, OLETEXT("appendSeparator"), DISPID(6303));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::enableItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enableItem"), DISPID(6304));
  TAutoArgs<2> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::checkItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("checkItem"), DISPID(6305));
  TAutoArgs<2> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::checkRadioItem(long nID/*[in]*/, VARIANT_BOOL newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("checkRadioItem"), DISPID(6306));
  TAutoArgs<2> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  _args[2] = newVal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::get_showFlags(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showFlags"), DISPID(6307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPMenuCtrlDispT<T>::get_showFlags(void)
{
  long pVal;
  this->get_showFlags((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::set_showFlags(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showFlags"), DISPID(6307));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::show(long* pnID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("show"), DISPID(6308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPMenuCtrlDispT<T>::show(void)
{
  long pnID;
  this->show((long*)&pnID);
  return pnID;
}

template <class T> HRESULT __fastcall
IWMPMenuCtrlDispT<T>::showEx(long nID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showEx"), DISPID(6309));
  TAutoArgs<1> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPAutoMenuCtrl
// Interface: IWMPAutoMenuCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPAutoMenuCtrlT<T>::show(BSTR newVal/*[in]*/)
{
  return (*this)->show(newVal);
}

// *********************************************************************//
// DispIntf:  IWMPAutoMenuCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPAutoMenuCtrlDispT<T>::show(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("show"), DISPID(6501));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPRegionalButtonCtrl
// Interface: IWMPRegionalButtonCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_image(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_image(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_image((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_image(BSTR pVal/*[in]*/)
{
  return (*this)->set_image(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_downImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_downImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_downImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_downImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverDownImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverDownImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverDownImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverDownImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_hoverDownImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverDownImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverHoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverHoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hoverHoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverHoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_hoverHoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverHoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_disabledImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_mappingImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_mappingImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_mappingImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_mappingImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_mappingImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_mappingImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_transparencyColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_transparencyColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_transparencyColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_showBackground(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_showBackground(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_showBackground(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_showBackground((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_showBackground(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_showBackground(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_radio(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_radio(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_radio(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_radio((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_radio(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_radio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_buttonCount(long* nButtons/*[out,retval]*/)
{
  return (*this)->get_buttonCount(nButtons);
}

template <class T> long __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_buttonCount(void)
{
  long nButtons;
  OLECHECK(this->get_buttonCount((long*)&nButtons));
  return nButtons;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::createButton(LPDISPATCH* pButton/*[out,retval]*/)
{
  return (*this)->createButton(pButton);
}

template <class T> LPDISPATCH __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::createButton(void)
{
  LPDISPATCH pButton;
  OLECHECK(this->createButton((LPDISPATCH*)&pButton));
  return pButton;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::getButton(long nButton/*[in]*/, LPDISPATCH* pButton/*[out,retval]*/)
{
  return (*this)->getButton(nButton, pButton);
}

template <class T> LPDISPATCH __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::getButton(long nButton/*[in]*/)
{
  LPDISPATCH pButton;
  OLECHECK(this->getButton(nButton/*[in]*/, (LPDISPATCH*)&pButton));
  return pButton;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::_Click(long nButton/*[in]*/)
{
  return (*this)->_Click(nButton);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hueShift(float* pVal/*[out,retval]*/)
{
  return (*this)->get_hueShift(pVal);
}

template <class T> float __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_hueShift(void)
{
  float pVal;
  OLECHECK(this->get_hueShift((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_hueShift(float pVal/*[in]*/)
{
  return (*this)->set_hueShift(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_saturation(float* pVal/*[out,retval]*/)
{
  return (*this)->get_saturation(pVal);
}

template <class T> float __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::get_saturation(void)
{
  float pVal;
  OLECHECK(this->get_saturation((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonCtrlT<T>::set_saturation(float pVal/*[in]*/)
{
  return (*this)->set_saturation(pVal);
}

// *********************************************************************//
// DispIntf:  IWMPRegionalButtonCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B1-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_image(void)
{
  BSTR pVal;
  this->get_image((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_image(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5300));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverImage(void)
{
  BSTR pVal;
  this->get_hoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5301));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_downImage(void)
{
  BSTR pVal;
  this->get_downImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5302));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverDownImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverDownImage"), DISPID(5303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverDownImage(void)
{
  BSTR pVal;
  this->get_hoverDownImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_hoverDownImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverDownImage"), DISPID(5303));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverHoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverHoverImage"), DISPID(5317));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hoverHoverImage(void)
{
  BSTR pVal;
  this->get_hoverHoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_hoverHoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverHoverImage"), DISPID(5317));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_disabledImage(void)
{
  BSTR pVal;
  this->get_disabledImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5304));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_mappingImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mappingImage"), DISPID(5305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_mappingImage(void)
{
  BSTR pVal;
  this->get_mappingImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_mappingImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mappingImage"), DISPID(5305));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5306));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5308));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_showBackground(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showBackground"), DISPID(5309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_showBackground(void)
{
  VARIANT_BOOL pVal;
  this->get_showBackground((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_showBackground(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showBackground"), DISPID(5309));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_radio(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("radio"), DISPID(5310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_radio(void)
{
  VARIANT_BOOL pVal;
  this->get_radio((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_radio(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("radio"), DISPID(5310));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_buttonCount(long* nButtons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("buttonCount"), DISPID(5311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nButtons /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_buttonCount(void)
{
  long nButtons;
  this->get_buttonCount((long*)&nButtons);
  return nButtons;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::createButton(LPDISPATCH* pButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createButton"), DISPID(5312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pButton /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPRegionalButtonCtrlDispT<T>::createButton(void)
{
  LPDISPATCH pButton;
  this->createButton((LPDISPATCH*)&pButton);
  return pButton;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::getButton(long nButton/*[in]*/, LPDISPATCH* pButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getButton"), DISPID(5313));
  TAutoArgs<1> _args;
  _args[1] = nButton /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pButton /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPRegionalButtonCtrlDispT<T>::getButton(long nButton/*[in]*/)
{
  LPDISPATCH pButton;
  this->getButton(nButton, (LPDISPATCH*)&pButton);
  return pButton;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::_Click(long nButton/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(5314));
  TAutoArgs<1> _args;
  _args[1] = nButton /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hueShift(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hueShift"), DISPID(5315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_hueShift(void)
{
  float pVal;
  this->get_hueShift((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_hueShift(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hueShift"), DISPID(5315));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_saturation(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPRegionalButtonCtrlDispT<T>::get_saturation(void)
{
  float pVal;
  this->get_saturation((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonCtrlDispT<T>::set_saturation(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("saturation"), DISPID(5316));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPRegionalButtonEvents
// Flags:     (4096) Dispatchable
// GUID:      {50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onblur()
{
  _TDispID _dispid(/* onblur */ DISPID(5360));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onfocus()
{
  _TDispID _dispid(/* onfocus */ DISPID(5361));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onclick()
{
  _TDispID _dispid(/* onclick */ DISPID(5362));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::ondblclick()
{
  _TDispID _dispid(/* ondblclick */ DISPID(5363));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onmousedown()
{
  _TDispID _dispid(/* onmousedown */ DISPID(5364));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onmouseup()
{
  _TDispID _dispid(/* onmouseup */ DISPID(5365));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onmousemove()
{
  _TDispID _dispid(/* onmousemove */ DISPID(5366));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onmouseover()
{
  _TDispID _dispid(/* onmouseover */ DISPID(5367));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onmouseout()
{
  _TDispID _dispid(/* onmouseout */ DISPID(5368));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onkeypress()
{
  _TDispID _dispid(/* onkeypress */ DISPID(5369));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onkeydown()
{
  _TDispID _dispid(/* onkeydown */ DISPID(5370));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonEventsDispT<T>::onkeyup()
{
  _TDispID _dispid(/* onkeyup */ DISPID(5371));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPRegionalButton
// Interface: IWMPRegionalButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_upToolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_upToolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_upToolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_upToolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_upToolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_upToolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_downToolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_downToolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_downToolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_downToolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_downToolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_downToolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_mappingColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_mappingColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_mappingColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_mappingColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_mappingColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_mappingColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_enabled(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonT<T>::get_enabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_enabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_enabled(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_enabled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_sticky(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonT<T>::get_sticky(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_sticky((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_sticky(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_sticky(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_down(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_down(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonT<T>::get_down(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_down((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_down(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_down(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_index(long* pVal/*[out,retval]*/)
{
  return (*this)->get_index(pVal);
}

template <class T> long __fastcall
TCOMIWMPRegionalButtonT<T>::get_index(void)
{
  long pVal;
  OLECHECK(this->get_index((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_tabStop(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPRegionalButtonT<T>::get_tabStop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_tabStop((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_tabStop(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_tabStop(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::_Click(void)
{
  return (*this)->_Click();
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_accName(BSTR* pszName/*[out,retval]*/)
{
  return (*this)->get_accName(pszName);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_accName(void)
{
  BSTR pszName = 0;
  OLECHECK(this->get_accName((BSTR*)&pszName));
  return pszName;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_accName(BSTR pszName/*[in]*/)
{
  return (*this)->set_accName(pszName);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_accDescription(BSTR* pszDescription/*[out,retval]*/)
{
  return (*this)->get_accDescription(pszDescription);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_accDescription(void)
{
  BSTR pszDescription = 0;
  OLECHECK(this->get_accDescription((BSTR*)&pszDescription));
  return pszDescription;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_accDescription(BSTR pszDescription/*[in]*/)
{
  return (*this)->set_accDescription(pszDescription);
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/)
{
  return (*this)->get_accKeyboardShortcut(pszShortcut);
}

template <class T> BSTR __fastcall
TCOMIWMPRegionalButtonT<T>::get_accKeyboardShortcut(void)
{
  BSTR pszShortcut = 0;
  OLECHECK(this->get_accKeyboardShortcut((BSTR*)&pszShortcut));
  return pszShortcut;
}

template <class T> HRESULT __fastcall
TCOMIWMPRegionalButtonT<T>::set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/)
{
  return (*this)->set_accKeyboardShortcut(pszShortcut);
}

// *********************************************************************//
// DispIntf:  IWMPRegionalButton
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D507B2-2354-11D3-BD41-00C04F6EA5AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_upToolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("upToolTip"), DISPID(5330));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_upToolTip(void)
{
  BSTR pVal;
  this->get_upToolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_upToolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("upToolTip"), DISPID(5330));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_downToolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downToolTip"), DISPID(5331));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_downToolTip(void)
{
  BSTR pVal;
  this->get_downToolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_downToolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("downToolTip"), DISPID(5331));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_mappingColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mappingColor"), DISPID(5332));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_mappingColor(void)
{
  BSTR pVal;
  this->get_mappingColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_mappingColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mappingColor"), DISPID(5332));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_enabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(5333));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonDispT<T>::get_enabled(void)
{
  VARIANT_BOOL pVal;
  this->get_enabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_enabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enabled"), DISPID(5333));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_sticky(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sticky"), DISPID(5339));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonDispT<T>::get_sticky(void)
{
  VARIANT_BOOL pVal;
  this->get_sticky((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_sticky(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sticky"), DISPID(5339));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_down(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("down"), DISPID(5340));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonDispT<T>::get_down(void)
{
  VARIANT_BOOL pVal;
  this->get_down((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_down(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("down"), DISPID(5340));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_index(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("index"), DISPID(5341));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPRegionalButtonDispT<T>::get_index(void)
{
  long pVal;
  this->get_index((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_tabStop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(5342));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPRegionalButtonDispT<T>::get_tabStop(void)
{
  VARIANT_BOOL pVal;
  this->get_tabStop((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_tabStop(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tabStop"), DISPID(5342));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5343));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5343));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(5344));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_accName(BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(5345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_accName(void)
{
  BSTR pszName;
  this->get_accName((BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_accName(BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(5345));
  TAutoArgs<1> _args;
  _args[1] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_accDescription(BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(5346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_accDescription(void)
{
  BSTR pszDescription;
  this->get_accDescription((BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_accDescription(BSTR pszDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(5346));
  TAutoArgs<1> _args;
  _args[1] = pszDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::get_accKeyboardShortcut(BSTR* pszShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(5347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRegionalButtonDispT<T>::get_accKeyboardShortcut(void)
{
  BSTR pszShortcut;
  this->get_accKeyboardShortcut((BSTR*)&pszShortcut);
  return pszShortcut;
}

template <class T> HRESULT __fastcall
IWMPRegionalButtonDispT<T>::set_accKeyboardShortcut(BSTR pszShortcut/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(5347));
  TAutoArgs<1> _args;
  _args[1] = pszShortcut /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPCustomSliderCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {95F45AA4-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCustomSliderCtrlEventsDispT<T>::ondragbegin()
{
  _TDispID _dispid(/* ondragbegin */ DISPID(5020));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderCtrlEventsDispT<T>::ondragend()
{
  _TDispID _dispid(/* ondragend */ DISPID(5021));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderCtrlEventsDispT<T>::onpositionchange()
{
  _TDispID _dispid(/* onpositionchange */ DISPID(5022));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPCustomSlider
// Interface: IWMPCustomSlider
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_min(float* pVal/*[out,retval]*/)
{
  return (*this)->get_min(pVal);
}

template <class T> float __fastcall
TCOMIWMPCustomSliderT<T>::get_min(void)
{
  float pVal;
  OLECHECK(this->get_min((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_min(float pVal/*[in]*/)
{
  return (*this)->set_min(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_max(float* pVal/*[out,retval]*/)
{
  return (*this)->get_max(pVal);
}

template <class T> float __fastcall
TCOMIWMPCustomSliderT<T>::get_max(void)
{
  float pVal;
  OLECHECK(this->get_max((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_max(float pVal/*[in]*/)
{
  return (*this)->set_max(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_value(float* pVal/*[out,retval]*/)
{
  return (*this)->get_value(pVal);
}

template <class T> float __fastcall
TCOMIWMPCustomSliderT<T>::get_value(void)
{
  float pVal;
  OLECHECK(this->get_value((float*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_value(float pVal/*[in]*/)
{
  return (*this)->set_value(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_toolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_toolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_toolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_toolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_positionImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_positionImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_positionImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_positionImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_positionImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_positionImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_image(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_image(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_image((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_image(BSTR pVal/*[in]*/)
{
  return (*this)->set_image(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_hoverImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_disabledImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_downImage(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_downImage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_downImage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  return (*this)->set_downImage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_transparencyColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPCustomSliderT<T>::get_transparencyColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_transparencyColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPCustomSliderT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_transparencyColor(pVal);
}

// *********************************************************************//
// DispIntf:  IWMPCustomSlider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {95F45AA2-ED0A-11D2-BA67-0000F80855E6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_min(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("min"), DISPID(5005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPCustomSliderDispT<T>::get_min(void)
{
  float pVal;
  this->get_min((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_min(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("min"), DISPID(5005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_max(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("max"), DISPID(5006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPCustomSliderDispT<T>::get_max(void)
{
  float pVal;
  this->get_max((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_max(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("max"), DISPID(5006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_value(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWMPCustomSliderDispT<T>::get_value(void)
{
  float pVal;
  this->get_value((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_value(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_toolTip(void)
{
  BSTR pVal;
  this->get_toolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5011));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_positionImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("positionImage"), DISPID(5002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_positionImage(void)
{
  BSTR pVal;
  this->get_positionImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_positionImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("positionImage"), DISPID(5002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_image(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_image(void)
{
  BSTR pVal;
  this->get_image((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_image(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("image"), DISPID(5001));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_hoverImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_hoverImage(void)
{
  BSTR pVal;
  this->get_hoverImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_hoverImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverImage"), DISPID(5003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_disabledImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_disabledImage(void)
{
  BSTR pVal;
  this->get_disabledImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_disabledImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledImage"), DISPID(5004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_downImage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_downImage(void)
{
  BSTR pVal;
  this->get_downImage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_downImage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("downImage"), DISPID(5012));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::get_transparencyColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCustomSliderDispT<T>::get_transparencyColor(void)
{
  BSTR pVal;
  this->get_transparencyColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPCustomSliderDispT<T>::set_transparencyColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparencyColor"), DISPID(5008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWMPTextCtrl
// Interface: IWMPTextCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_backgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_backgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_backgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_backgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontFace(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_fontFace(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontFace((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontFace(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_fontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_fontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_fontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_fontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_fontSize(pVal);
}

template <class T> long __fastcall
TCOMIWMPTextCtrlT<T>::get_fontSize(void)
{
  long pVal;
  OLECHECK(this->get_fontSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_fontSize(long pVal/*[in]*/)
{
  return (*this)->set_fontSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_foregroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_foregroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_foregroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_foregroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverBackgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverBackgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverBackgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverBackgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_hoverBackgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverBackgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverForegroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverForegroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverForegroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverForegroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_hoverForegroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverForegroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverFontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_hoverFontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_hoverFontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_hoverFontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_hoverFontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_hoverFontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_value(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_value(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_value(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_value((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_value(BSTR pVal/*[in]*/)
{
  return (*this)->set_value(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_toolTip(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_toolTip(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_toolTip((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  return (*this)->set_toolTip(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledFontStyle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledFontStyle(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledFontStyle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledFontStyle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_disabledFontStyle(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledFontStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledForegroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledForegroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledForegroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledForegroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_disabledForegroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledForegroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledBackgroundColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_disabledBackgroundColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_disabledBackgroundColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_disabledBackgroundColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_disabledBackgroundColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_disabledBackgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_fontSmoothing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_fontSmoothing(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPTextCtrlT<T>::get_fontSmoothing(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_fontSmoothing((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_fontSmoothing(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_justification(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_justification(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_justification(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_justification((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_justification(BSTR pVal/*[in]*/)
{
  return (*this)->set_justification(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_wordWrap(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPTextCtrlT<T>::get_wordWrap(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_wordWrap((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_wordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_wordWrap(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_cursor(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_cursor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_cursor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  return (*this)->set_cursor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_scrolling(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_scrolling(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPTextCtrlT<T>::get_scrolling(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_scrolling((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_scrolling(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_scrolling(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingDirection(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_scrollingDirection(pVal);
}

template <class T> BSTR __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingDirection(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_scrollingDirection((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_scrollingDirection(BSTR pVal/*[in]*/)
{
  return (*this)->set_scrollingDirection(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingDelay(int* pVal/*[out,retval]*/)
{
  return (*this)->get_scrollingDelay(pVal);
}

template <class T> int __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingDelay(void)
{
  int pVal;
  OLECHECK(this->get_scrollingDelay((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_scrollingDelay(int pVal/*[in]*/)
{
  return (*this)->set_scrollingDelay(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingAmount(int* pVal/*[out,retval]*/)
{
  return (*this)->get_scrollingAmount(pVal);
}

template <class T> int __fastcall
TCOMIWMPTextCtrlT<T>::get_scrollingAmount(void)
{
  int pVal;
  OLECHECK(this->get_scrollingAmount((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_scrollingAmount(int pVal/*[in]*/)
{
  return (*this)->set_scrollingAmount(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_textWidth(int* pVal/*[out,retval]*/)
{
  return (*this)->get_textWidth(pVal);
}

template <class T> int __fastcall
TCOMIWMPTextCtrlT<T>::get_textWidth(void)
{
  int pVal;
  OLECHECK(this->get_textWidth((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::get_onGlass(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_onGlass(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIWMPTextCtrlT<T>::get_onGlass(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_onGlass((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWMPTextCtrlT<T>::set_onGlass(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_onGlass(pVal);
}

// *********************************************************************//
// DispIntf:  IWMPTextCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {237DAC8E-0E32-11D3-A2E2-00C04F79F88E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(5201));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_fontFace(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(5206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_fontFace(void)
{
  BSTR pVal;
  this->get_fontFace((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_fontFace(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontFace"), DISPID(5206));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_fontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(5207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_fontStyle(void)
{
  BSTR pVal;
  this->get_fontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_fontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontStyle"), DISPID(5207));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_fontSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(5208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPTextCtrlDispT<T>::get_fontSize(void)
{
  long pVal;
  this->get_fontSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_fontSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSize"), DISPID(5208));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_foregroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_foregroundColor(void)
{
  BSTR pVal;
  this->get_foregroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_foregroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("foregroundColor"), DISPID(5209));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_hoverBackgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverBackgroundColor"), DISPID(5210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_hoverBackgroundColor(void)
{
  BSTR pVal;
  this->get_hoverBackgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_hoverBackgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverBackgroundColor"), DISPID(5210));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_hoverForegroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverForegroundColor"), DISPID(5211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_hoverForegroundColor(void)
{
  BSTR pVal;
  this->get_hoverForegroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_hoverForegroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverForegroundColor"), DISPID(5211));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_hoverFontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverFontStyle"), DISPID(5212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_hoverFontStyle(void)
{
  BSTR pVal;
  this->get_hoverFontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_hoverFontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hoverFontStyle"), DISPID(5212));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_value(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_value(void)
{
  BSTR pVal;
  this->get_value((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_value(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(5213));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_toolTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_toolTip(void)
{
  BSTR pVal;
  this->get_toolTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_toolTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("toolTip"), DISPID(5214));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_disabledFontStyle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledFontStyle"), DISPID(5215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_disabledFontStyle(void)
{
  BSTR pVal;
  this->get_disabledFontStyle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_disabledFontStyle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledFontStyle"), DISPID(5215));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_disabledForegroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledForegroundColor"), DISPID(5216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_disabledForegroundColor(void)
{
  BSTR pVal;
  this->get_disabledForegroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_disabledForegroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledForegroundColor"), DISPID(5216));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_disabledBackgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledBackgroundColor"), DISPID(5217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_disabledBackgroundColor(void)
{
  BSTR pVal;
  this->get_disabledBackgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_disabledBackgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disabledBackgroundColor"), DISPID(5217));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_fontSmoothing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSmoothing"), DISPID(5221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPTextCtrlDispT<T>::get_fontSmoothing(void)
{
  VARIANT_BOOL pVal;
  this->get_fontSmoothing((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_fontSmoothing(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fontSmoothing"), DISPID(5221));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_justification(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("justification"), DISPID(5222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_justification(void)
{
  BSTR pVal;
  this->get_justification((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_justification(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("justification"), DISPID(5222));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_wordWrap(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("wordWrap"), DISPID(5223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPTextCtrlDispT<T>::get_wordWrap(void)
{
  VARIANT_BOOL pVal;
  this->get_wordWrap((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_wordWrap(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("wordWrap"), DISPID(5223));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_cursor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_cursor(void)
{
  BSTR pVal;
  this->get_cursor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_cursor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("cursor"), DISPID(5224));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_scrolling(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrolling"), DISPID(5225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPTextCtrlDispT<T>::get_scrolling(void)
{
  VARIANT_BOOL pVal;
  this->get_scrolling((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_scrolling(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrolling"), DISPID(5225));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_scrollingDirection(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingDirection"), DISPID(5226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPTextCtrlDispT<T>::get_scrollingDirection(void)
{
  BSTR pVal;
  this->get_scrollingDirection((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_scrollingDirection(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingDirection"), DISPID(5226));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_scrollingDelay(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingDelay"), DISPID(5227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWMPTextCtrlDispT<T>::get_scrollingDelay(void)
{
  int pVal;
  this->get_scrollingDelay((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_scrollingDelay(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingDelay"), DISPID(5227));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_scrollingAmount(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingAmount"), DISPID(5228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWMPTextCtrlDispT<T>::get_scrollingAmount(void)
{
  int pVal;
  this->get_scrollingAmount((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_scrollingAmount(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scrollingAmount"), DISPID(5228));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_textWidth(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("textWidth"), DISPID(5229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWMPTextCtrlDispT<T>::get_textWidth(void)
{
  int pVal;
  this->get_textWidth((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::get_onGlass(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("onGlass"), DISPID(5230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPTextCtrlDispT<T>::get_onGlass(void)
{
  VARIANT_BOOL pVal;
  this->get_onGlass((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWMPTextCtrlDispT<T>::set_onGlass(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onGlass"), DISPID(5230));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITaskCntrCtrl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {891EADB1-1C45-48B0-B704-49A888DA98C4}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITaskCntrCtrlDispT<T>::get_CurrentContainer(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentContainer"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ITaskCntrCtrlDispT<T>::get_CurrentContainer(void)
{
  LPUNKNOWN ppUnk;
  this->get_CurrentContainer((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
ITaskCntrCtrlDispT<T>::set_CurrentContainer(LPUNKNOWN ppUnk/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentContainer"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = ppUnk /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskCntrCtrlDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  _WMPCoreEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D84CCA96-CCE2-11D2-9ECC-0000F8085981}
// *********************************************************************//
template <class T> void __fastcall
_WMPCoreEventsDispT<T>::OpenStateChange(long NewState/*[in]*/)
{
  _TDispID _dispid(/* OpenStateChange */ DISPID(5001));
  TAutoArgs<1> _args;
  _args[1] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlayStateChange(long NewState/*[in]*/)
{
  _TDispID _dispid(/* PlayStateChange */ DISPID(5101));
  TAutoArgs<1> _args;
  _args[1] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::AudioLanguageChange(long LangID/*[in]*/)
{
  _TDispID _dispid(/* AudioLanguageChange */ DISPID(5102));
  TAutoArgs<1> _args;
  _args[1] = LangID /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::StatusChange()
{
  _TDispID _dispid(/* StatusChange */ DISPID(5002));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
{
  _TDispID _dispid(/* ScriptCommand */ DISPID(5301));
  TAutoArgs<2> _args;
  _args[1] = scType /*[VT_BSTR:0]*/;
  _args[2] = Param /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::NewStream()
{
  _TDispID _dispid(/* NewStream */ DISPID(5403));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::Disconnect(long Result/*[in]*/)
{
  _TDispID _dispid(/* Disconnect */ DISPID(5401));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::Buffering(VARIANT_BOOL Start/*[in]*/)
{
  _TDispID _dispid(/* Buffering */ DISPID(5402));
  TAutoArgs<1> _args;
  _args[1] = Start /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::Error()
{
  _TDispID _dispid(/* Error */ DISPID(5501));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                BSTR Description/*[in]*/)
{
  _TDispID _dispid(/* Warning */ DISPID(5601));
  TAutoArgs<3> _args;
  _args[1] = WarningType /*[VT_I4:0]*/;
  _args[2] = Param /*[VT_I4:0]*/;
  _args[3] = Description /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::EndOfStream(long Result/*[in]*/)
{
  _TDispID _dispid(/* EndOfStream */ DISPID(5201));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
{
  _TDispID _dispid(/* PositionChange */ DISPID(5202));
  TAutoArgs<2> _args;
  _args[1] = oldPosition /*[VT_R8:0]*/;
  _args[2] = newPosition /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MarkerHit(long MarkerNum/*[in]*/)
{
  _TDispID _dispid(/* MarkerHit */ DISPID(5203));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::DurationUnitChange(long NewDurationUnit/*[in]*/)
{
  _TDispID _dispid(/* DurationUnitChange */ DISPID(5204));
  TAutoArgs<1> _args;
  _args[1] = NewDurationUnit /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::CdromMediaChange(long CdromNum/*[in]*/)
{
  _TDispID _dispid(/* CdromMediaChange */ DISPID(5701));
  TAutoArgs<1> _args;
  _args[1] = CdromNum /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlaylistChange(LPDISPATCH Playlist/*[in]*/, 
                                       Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
{
  _TDispID _dispid(/* PlaylistChange */ DISPID(5801));
  TAutoArgs<2> _args;
  _args[1] = Playlist /*[VT_DISPATCH:0]*/;
  _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change/*[in]*/)
{
  _TDispID _dispid(/* CurrentPlaylistChange */ DISPID(5804));
  TAutoArgs<1> _args;
  _args[1] = (int)change /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::CurrentPlaylistItemAvailable(BSTR bstrItemName/*[in]*/)
{
  _TDispID _dispid(/* CurrentPlaylistItemAvailable */ DISPID(5805));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaChange(LPDISPATCH Item/*[in]*/)
{
  _TDispID _dispid(/* MediaChange */ DISPID(5802));
  TAutoArgs<1> _args;
  _args[1] = Item /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::CurrentMediaItemAvailable(BSTR bstrItemName/*[in]*/)
{
  _TDispID _dispid(/* CurrentMediaItemAvailable */ DISPID(5803));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::CurrentItemChange(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* CurrentItemChange */ DISPID(5806));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionChange()
{
  _TDispID _dispid(/* MediaCollectionChange */ DISPID(5807));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionAttributeStringAdded(BSTR bstrAttribName/*[in]*/, 
                                                            BSTR bstrAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringAdded */ DISPID(5808));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionAttributeStringRemoved(BSTR bstrAttribName/*[in]*/, 
                                                              BSTR bstrAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringRemoved */ DISPID(5809));
  TAutoArgs<2> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionAttributeStringChanged(BSTR bstrAttribName/*[in]*/, 
                                                              BSTR bstrOldAttribVal/*[in]*/, 
                                                              BSTR bstrNewAttribVal/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionAttributeStringChanged */ DISPID(5820));
  TAutoArgs<3> _args;
  _args[1] = bstrAttribName /*[VT_BSTR:0]*/;
  _args[2] = bstrOldAttribVal /*[VT_BSTR:0]*/;
  _args[3] = bstrNewAttribVal /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlaylistCollectionChange()
{
  _TDispID _dispid(/* PlaylistCollectionChange */ DISPID(5810));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistAdded */ DISPID(5811));
  TAutoArgs<1> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistRemoved */ DISPID(5812));
  TAutoArgs<1> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName/*[in]*/, 
                                                               VARIANT_BOOL varfIsDeleted/*[in]*/)
{
  _TDispID _dispid(/* PlaylistCollectionPlaylistSetAsDeleted */ DISPID(5818));
  TAutoArgs<2> _args;
  _args[1] = bstrPlaylistName /*[VT_BSTR:0]*/;
  _args[2] = varfIsDeleted /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::ModeChange(BSTR ModeName/*[in]*/, VARIANT_BOOL NewValue/*[in]*/)
{
  _TDispID _dispid(/* ModeChange */ DISPID(5819));
  TAutoArgs<2> _args;
  _args[1] = ModeName /*[VT_BSTR:0]*/;
  _args[2] = NewValue /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaError(LPDISPATCH pMediaObject/*[in]*/)
{
  _TDispID _dispid(/* MediaError */ DISPID(5821));
  TAutoArgs<1> _args;
  _args[1] = pMediaObject /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::OpenPlaylistSwitch(LPDISPATCH pItem/*[in]*/)
{
  _TDispID _dispid(/* OpenPlaylistSwitch */ DISPID(5823));
  TAutoArgs<1> _args;
  _args[1] = pItem /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::DomainChange(BSTR strDomain/*[in]*/)
{
  _TDispID _dispid(/* DomainChange */ DISPID(5822));
  TAutoArgs<1> _args;
  _args[1] = strDomain /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::StringCollectionChange(LPDISPATCH pdispStringCollection/*[in]*/, 
                                               Wmplib_tlb::WMPStringCollectionChangeEventType change/*[in]*/
                                               , long lCollectionIndex/*[in]*/)
{
  _TDispID _dispid(/* StringCollectionChange */ DISPID(5824));
  TAutoArgs<3> _args;
  _args[1] = pdispStringCollection /*[VT_DISPATCH:0]*/;
  _args[2] = (int)change /*[VT_USERDEFINED:0]*/;
  _args[3] = lCollectionIndex /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionMediaAdded(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionMediaAdded */ DISPID(5825));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_WMPCoreEventsDispT<T>::MediaCollectionMediaRemoved(LPDISPATCH pdispMedia/*[in]*/)
{
  _TDispID _dispid(/* MediaCollectionMediaRemoved */ DISPID(5826));
  TAutoArgs<1> _args;
  _args[1] = pdispMedia /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPGraphEventHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6B550945-018F-11D3-B14A-00C04F79FAA6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                      long lGraphState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyGraphStateChange"), DISPID(8151));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lGraphState /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::AsyncNotifyGraphStateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                           long lGraphState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsyncNotifyGraphStateChange"), DISPID(8173));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lGraphState /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyRateChange(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                double dRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyRateChange"), DISPID(8153));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = dRate /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyPlaybackEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                 BSTR bstrQueuedUrl, 
                                                 Wmplib_tlb::ULONG_PTR dwCurrentContext)
{
  _TDispID _dispid(*this, OLETEXT("NotifyPlaybackEnd"), DISPID(8157));
  TAutoArgs<3> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrQueuedUrl /*[VT_BSTR:0]*/;
  _args[3] = dwCurrentContext /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyStreamEnd(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyStreamEnd"), DISPID(8156));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                   BSTR bstrCommand/*[in]*/, BSTR bstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyScriptCommand"), DISPID(8158));
  TAutoArgs<3> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrCommand /*[VT_BSTR:0]*/;
  _args[3] = bstrParam /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyEarlyScriptCommand(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                        BSTR bstrCommand/*[in]*/, 
                                                        BSTR bstrParam/*[in]*/, double dTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyEarlyScriptCommand"), DISPID(8172));
  TAutoArgs<4> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrCommand /*[VT_BSTR:0]*/;
  _args[3] = bstrParam /*[VT_BSTR:0]*/;
  _args[4] = dTime /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyMarkerHit(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                               long lMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyMarkerHit"), DISPID(8159));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lMarker /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyGraphError(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                long lErrMajor/*[in]*/, long lErrMinor/*[in]*/, 
                                                long lCondition/*[in]*/, BSTR bstrInfo/*[in]*/, 
                                                LPUNKNOWN punkGraphData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyGraphError"), DISPID(8160));
  TAutoArgs<6> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lErrMajor /*[VT_I4:0]*/;
  _args[3] = lErrMinor /*[VT_I4:0]*/;
  _args[4] = lCondition /*[VT_I4:0]*/;
  _args[5] = bstrInfo /*[VT_BSTR:0]*/;
  _args[6] = punkGraphData /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyAcquireCredentials(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                        BSTR bstrRealm/*[in]*/, 
                                                        BSTR bstrSite/*[in]*/, 
                                                        BSTR bstrUser/*[in,out]*/, 
                                                        BSTR bstrPassword/*[in,out]*/, 
                                                        unsigned_long* pdwFlags/*[in,out]*/, 
                                                        VARIANT_BOOL* pfCancel/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyAcquireCredentials"), DISPID(8161));
  TAutoArgs<7> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrRealm /*[VT_BSTR:0]*/;
  _args[3] = bstrSite /*[VT_BSTR:0]*/;
  _args[4] = bstrUser /*[VT_BSTR:0]*/;
  _args[5] = bstrPassword /*[VT_BSTR:0]*/;
  _args[6] = pdwFlags /*[VT_UI4:1]*/;
  _args[7] = pfCancel /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyUntrustedLicense(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                      BSTR bstrURL/*[in]*/, 
                                                      VARIANT_BOOL* pfCancel/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyUntrustedLicense"), DISPID(8178));
  TAutoArgs<3> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrURL /*[VT_BSTR:0]*/;
  _args[3] = pfCancel /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyLicenseDialog(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                   BSTR bstrURL/*[in]*/, BSTR bstrContent/*[in]*/, 
                                                   unsigned_char* pPostData/*[in]*/, 
                                                   unsigned_long dwPostDataSize/*[in]*/, 
                                                   long lResult/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyLicenseDialog"), DISPID(8162));
  TAutoArgs<6> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = bstrURL /*[VT_BSTR:0]*/;
  _args[3] = bstrContent /*[VT_BSTR:0]*/;
  _args[4] = pPostData /*[VT_UI1:1]*/;
  _args[5] = dwPostDataSize /*[VT_UI4:0]*/;
  _args[6] = lResult /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNeedsIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                            , VARIANT_BOOL* pfResult/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNeedsIndividualization"), DISPID(8163));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = pfResult /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNewMetadata(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNewMetadata"), DISPID(8165));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNewMediaCaps(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNewMediaCaps"), DISPID(8166));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyDisconnect(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                long lResult/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyDisconnect"), DISPID(8167));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lResult /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifySave(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                          long fStarted/*[in]*/, long lResult/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifySave"), DISPID(8168));
  TAutoArgs<3> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = fStarted /*[VT_I4:0]*/;
  _args[3] = lResult /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyDelayClose(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                VARIANT_BOOL fDelay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyDelayClose"), DISPID(8169));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = fDelay /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyDVD(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                         long lEventCode/*[in]*/, long lParam1/*[in]*/, 
                                         long lParam2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyDVD"), DISPID(8170));
  TAutoArgs<4> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = lEventCode /*[VT_I4:0]*/;
  _args[3] = lParam1 /*[VT_I4:0]*/;
  _args[4] = lParam2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyRequestAppThreadAction(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                            , unsigned_long dwAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyRequestAppThreadAction"), DISPID(8171));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = dwAction /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyPrerollReady(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyPrerollReady"), DISPID(8174));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNewIcons(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNewIcons"), DISPID(8177));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyStepComplete(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyStepComplete"), DISPID(8179));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNewBitrate(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                unsigned_long dwBitrate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNewBitrate"), DISPID(8180));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = dwBitrate /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyGraphCreationPreRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                            , 
                                                            Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/
                                                            , 
                                                            Wmplib_tlb::ULONG_PTR punkCardeaEncConfig/*[in]*/
                                                            , 
                                                            Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/
                                                            , 
                                                            Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyGraphCreationPreRender"), DISPID(8181));
  TAutoArgs<5> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = punkFilterGraph /*[VT_UI4:0]*/;
  _args[3] = punkCardeaEncConfig /*[VT_UI4:0]*/;
  _args[4] = phrContinue /*[VT_UI4:0]*/;
  _args[5] = hEventToSet /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyGraphCreationPostRender(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                             , 
                                                             Wmplib_tlb::ULONG_PTR punkFilterGraph/*[in]*/
                                                             , 
                                                             Wmplib_tlb::ULONG_PTR phrContinue/*[in]*/
                                                             , 
                                                             Wmplib_tlb::ULONG_PTR hEventToSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyGraphCreationPostRender"), DISPID(8182));
  TAutoArgs<4> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = punkFilterGraph /*[VT_UI4:0]*/;
  _args[3] = phrContinue /*[VT_UI4:0]*/;
  _args[4] = hEventToSet /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyGraphUserEvent(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                    long EventCode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyGraphUserEvent"), DISPID(8186));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = EventCode /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyRevocation(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/, 
                                                VARIANT_BOOL* pfResult/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyRevocation"), DISPID(8183));
  TAutoArgs<2> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = pfResult /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNeedsWMGraphIndividualization(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/
                                                                   , 
                                                                   Wmplib_tlb::ULONG_PTR phWnd/*[in]*/
                                                                   , 
                                                                   Wmplib_tlb::ULONG_PTR hIndivEvent/*[in]*/
                                                                   , VARIANT_BOOL* pfCancel/*[out]*/
                                                                   , VARIANT_BOOL* pfResult/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNeedsWMGraphIndividualization"), DISPID(8184));
  TAutoArgs<5> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  _args[2] = phWnd /*[VT_UI4:0]*/;
  _args[3] = hIndivEvent /*[VT_UI4:0]*/;
  _args[4] = pfCancel /*[VT_BOOL:1]*/;
  _args[5] = pfResult /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPGraphEventHandlerDispT<T>::NotifyNeedsFullscreen(Wmplib_tlb::ULONG_PTR punkGraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyNeedsFullscreen"), DISPID(8185));
  TAutoArgs<1> _args;
  _args[1] = punkGraph /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IBattery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBatteryDispT<T>::get_presetCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("presetCount"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBatteryDispT<T>::get_presetCount(void)
{
  long pVal;
  this->get_presetCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBatteryDispT<T>::get_preset(long nIndex/*[in]*/, LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("preset"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ppDispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IBatteryDispT<T>::get_preset(long nIndex/*[in]*/)
{
  LPDISPATCH ppDispatch;
  this->get_preset(nIndex, (LPDISPATCH*)&ppDispatch);
  return ppDispatch;
}

// *********************************************************************//
// DispIntf:  IBatteryPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBatteryPresetDispT<T>::get_title(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBatteryPresetDispT<T>::get_title(void)
{
  BSTR pVal;
  this->get_title((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBatteryPresetDispT<T>::set_title(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IBatteryRandomPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F85E2D65-207D-48DB-84B1-915E1735DB17}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBatteryRandomPresetDispT<T>::get_title(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBatteryRandomPresetDispT<T>::get_title(void)
{
  BSTR pVal;
  this->get_title((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBatteryRandomPresetDispT<T>::set_title(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IBatterySavedPreset
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {876E7208-0172-4EBB-B08B-2E1D30DFE44C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBatterySavedPresetDispT<T>::get_title(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBatterySavedPresetDispT<T>::get_title(void)
{
  BSTR pVal;
  this->get_title((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBatterySavedPresetDispT<T>::set_title(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IBarsEffect
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33E9291A-F6A9-11D2-9435-00A0C92A2F2D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_displayMode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayMode"), DISPID(8000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_displayMode(void)
{
  long pVal;
  this->get_displayMode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_displayMode(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("displayMode"), DISPID(8000));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_showPeaks(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("showPeaks"), DISPID(8001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IBarsEffectDispT<T>::get_showPeaks(void)
{
  VARIANT_BOOL pVal;
  this->get_showPeaks((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_showPeaks(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showPeaks"), DISPID(8001));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_peakHangTime(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakHangTime"), DISPID(8002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_peakHangTime(void)
{
  long pVal;
  this->get_peakHangTime((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_peakHangTime(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakHangTime"), DISPID(8002));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_peakFallbackAcceleration(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakFallbackAcceleration"), DISPID(8003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IBarsEffectDispT<T>::get_peakFallbackAcceleration(void)
{
  float pVal;
  this->get_peakFallbackAcceleration((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_peakFallbackAcceleration(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakFallbackAcceleration"), DISPID(8003));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_peakFallbackSpeed(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakFallbackSpeed"), DISPID(8004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IBarsEffectDispT<T>::get_peakFallbackSpeed(void)
{
  float pVal;
  this->get_peakFallbackSpeed((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_peakFallbackSpeed(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakFallbackSpeed"), DISPID(8004));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_levelFallbackAcceleration(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelFallbackAcceleration"), DISPID(8005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IBarsEffectDispT<T>::get_levelFallbackAcceleration(void)
{
  float pVal;
  this->get_levelFallbackAcceleration((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_levelFallbackAcceleration(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelFallbackAcceleration"), DISPID(8005));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_levelFallbackSpeed(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelFallbackSpeed"), DISPID(8006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IBarsEffectDispT<T>::get_levelFallbackSpeed(void)
{
  float pVal;
  this->get_levelFallbackSpeed((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_levelFallbackSpeed(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelFallbackSpeed"), DISPID(8006));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_backgroundColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(8007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBarsEffectDispT<T>::get_backgroundColor(void)
{
  BSTR pVal;
  this->get_backgroundColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_backgroundColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("backgroundColor"), DISPID(8007));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_levelColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelColor"), DISPID(8008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBarsEffectDispT<T>::get_levelColor(void)
{
  BSTR pVal;
  this->get_levelColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_levelColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelColor"), DISPID(8008));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_peakColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakColor"), DISPID(8009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBarsEffectDispT<T>::get_peakColor(void)
{
  BSTR pVal;
  this->get_peakColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_peakColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("peakColor"), DISPID(8009));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_horizontalSpacing(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalSpacing"), DISPID(8010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_horizontalSpacing(void)
{
  long pVal;
  this->get_horizontalSpacing((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_horizontalSpacing(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("horizontalSpacing"), DISPID(8010));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_levelWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelWidth"), DISPID(8012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_levelWidth(void)
{
  long pVal;
  this->get_levelWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_levelWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelWidth"), DISPID(8012));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_levelScale(float* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelScale"), DISPID(8013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IBarsEffectDispT<T>::get_levelScale(void)
{
  float pVal;
  this->get_levelScale((float*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_levelScale(float pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("levelScale"), DISPID(8013));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_fadeRate(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fadeRate"), DISPID(8014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_fadeRate(void)
{
  long pVal;
  this->get_fadeRate((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_fadeRate(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fadeRate"), DISPID(8014));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_fadeMode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fadeMode"), DISPID(8015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBarsEffectDispT<T>::get_fadeMode(void)
{
  long pVal;
  this->get_fadeMode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_fadeMode(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fadeMode"), DISPID(8015));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::get_transparent(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparent"), DISPID(8016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IBarsEffectDispT<T>::get_transparent(void)
{
  VARIANT_BOOL pVal;
  this->get_transparent((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBarsEffectDispT<T>::set_transparent(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transparent"), DISPID(8016));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPExternalColors
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D10CCDFF-472D-498C-B5FE-3630E5405E0A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPExternalColorsDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPExternalColorsDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServiceLimited
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54DF358E-CF38-4010-99F1-F44B0E9000E5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, 
                                                            BSTR bstrTaskPane/*[in]*/, 
                                                            BSTR bstrParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigateTaskPaneURL"), DISPID(10026));
  TAutoArgs<3> _args;
  _args[1] = bstrKeyName /*[VT_BSTR:0]*/;
  _args[2] = bstrTaskPane /*[VT_BSTR:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<1> _args;
  _args[1] = bstrTaskPane /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTaskPane /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_SelectedTaskPane(void)
{
  BSTR bstrTaskPane;
  this->get_SelectedTaskPane((BSTR*)&bstrTaskPane);
  return bstrTaskPane;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceLimitedDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServiceExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E922378-EE70-4CEB-BBAB-CE7CE4A04816}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_DownloadManager(Wmplib_tlb::IWMPDownloadManager** ppDownloadMgr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadManager"), DISPID(10009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadManager**)ppDownloadMgr /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadManagerPtr __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_DownloadManager(void)
{
  Wmplib_tlb::IWMPDownloadManagerPtr ppDownloadMgr;
  this->get_DownloadManager(&ppDownloadMgr);
  return ppDownloadMgr;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, 
                                                             BSTR bstrTaskPane/*[in]*/, 
                                                             BSTR bstrParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigateTaskPaneURL"), DISPID(10026));
  TAutoArgs<3> _args;
  _args[1] = bstrKeyName /*[VT_BSTR:0]*/;
  _args[2] = bstrTaskPane /*[VT_BSTR:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<1> _args;
  _args[1] = bstrTaskPane /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTaskPane /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_SelectedTaskPane(void)
{
  BSTR bstrTaskPane;
  this->get_SelectedTaskPane((BSTR*)&bstrTaskPane);
  return bstrTaskPane;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServiceExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServiceExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPDownloadManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDownloadManagerDispT<T>::getDownloadCollection(long lCollectionId/*[in]*/, 
                                                   Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDownloadCollection"), DISPID(1151));
  TAutoArgs<1> _args;
  _args[1] = lCollectionId /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadCollection**)ppCollection /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadCollection* __fastcall
IWMPDownloadManagerDispT<T>::getDownloadCollection(long lCollectionId/*[in]*/)
{
  Wmplib_tlb::IWMPDownloadCollection* ppCollection;
  this->getDownloadCollection(lCollectionId, (Wmplib_tlb::IWMPDownloadCollection**)&ppCollection);
  return ppCollection;
}

template <class T> HRESULT __fastcall
IWMPDownloadManagerDispT<T>::createDownloadCollection(Wmplib_tlb::IWMPDownloadCollection** ppCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createDownloadCollection"), DISPID(1152));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadCollection**)ppCollection /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadCollection* __fastcall
IWMPDownloadManagerDispT<T>::createDownloadCollection(void)
{
  Wmplib_tlb::IWMPDownloadCollection* ppCollection;
  this->createDownloadCollection((Wmplib_tlb::IWMPDownloadCollection**)&ppCollection);
  return ppCollection;
}

// *********************************************************************//
// DispIntf:  IWMPDownloadCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A319C7F-85F9-436C-B88E-82FD88000E1C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::get_ID(long* plId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plId /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadCollectionDispT<T>::get_ID(void)
{
  long plId;
  this->get_ID((long*)&plId);
  return plId;
}

template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::get_count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(1202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadCollectionDispT<T>::get_count(void)
{
  long plCount;
  this->get_count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::Item(long lItem/*[in]*/, 
                                     Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(1203));
  TAutoArgs<1> _args;
  _args[1] = lItem /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadItem2**)ppDownload /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadItem2* __fastcall
IWMPDownloadCollectionDispT<T>::Item(long lItem/*[in]*/)
{
  Wmplib_tlb::IWMPDownloadItem2* ppDownload;
  this->Item(lItem, (Wmplib_tlb::IWMPDownloadItem2**)&ppDownload);
  return ppDownload;
}

template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::startDownload(BSTR bstrSourceURL/*[in]*/, BSTR bstrType/*[in]*/, 
                                              Wmplib_tlb::IWMPDownloadItem2** ppDownload/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("startDownload"), DISPID(1204));
  TAutoArgs<2> _args;
  _args[1] = bstrSourceURL /*[VT_BSTR:0]*/;
  _args[2] = bstrType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadItem2**)ppDownload /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadItem2* __fastcall
IWMPDownloadCollectionDispT<T>::startDownload(BSTR bstrSourceURL/*[in]*/, BSTR bstrType/*[in]*/)
{
  Wmplib_tlb::IWMPDownloadItem2* ppDownload;
  this->startDownload(bstrSourceURL, bstrType, (Wmplib_tlb::IWMPDownloadItem2**)&ppDownload);
  return ppDownload;
}

template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::removeItem(long lItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeItem"), DISPID(1205));
  TAutoArgs<1> _args;
  _args[1] = lItem /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDownloadCollectionDispT<T>::clear()
{
  _TDispID _dispid(*this, OLETEXT("clear"), DISPID(1206));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPDownloadItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9470E8E-3F6B-46A9-A0A9-452815C34297}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::get_sourceURL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceURL"), DISPID(1251));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDownloadItemDispT<T>::get_sourceURL(void)
{
  BSTR pbstrURL;
  this->get_sourceURL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::get_size(long* plSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("size"), DISPID(1252));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadItemDispT<T>::get_size(void)
{
  long plSize;
  this->get_size((long*)&plSize);
  return plSize;
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::get_type(BSTR* pbstrType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(1253));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDownloadItemDispT<T>::get_type(void)
{
  BSTR pbstrType;
  this->get_type((BSTR*)&pbstrType);
  return pbstrType;
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::get_progress(long* plProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("progress"), DISPID(1254));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadItemDispT<T>::get_progress(void)
{
  long plProgress;
  this->get_progress((long*)&plProgress);
  return plProgress;
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::get_downloadState(Wmplib_tlb::WMPSubscriptionDownloadState* pwmpsdls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downloadState"), DISPID(1255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpsdls /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPSubscriptionDownloadState __fastcall
IWMPDownloadItemDispT<T>::get_downloadState(void)
{
  Wmplib_tlb::WMPSubscriptionDownloadState pwmpsdls;
  this->get_downloadState((Wmplib_tlb::WMPSubscriptionDownloadState*)&pwmpsdls);
  return pwmpsdls;
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(1256));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::resume()
{
  _TDispID _dispid(*this, OLETEXT("resume"), DISPID(1257));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDownloadItemDispT<T>::cancel()
{
  _TDispID _dispid(*this, OLETEXT("cancel"), DISPID(1258));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPDownloadItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9FBB3336-6DA3-479D-B8FF-67D46E20A987}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/, BSTR* pbstrVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getItemInfo"), DISPID(1301));
  TAutoArgs<1> _args;
  _args[1] = bstrItemName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDownloadItem2DispT<T>::getItemInfo(BSTR bstrItemName/*[in]*/)
{
  BSTR pbstrVal;
  this->getItemInfo(bstrItemName, (BSTR*)&pbstrVal);
  return pbstrVal;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::get_sourceURL(BSTR* pbstrURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sourceURL"), DISPID(1251));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDownloadItem2DispT<T>::get_sourceURL(void)
{
  BSTR pbstrURL;
  this->get_sourceURL((BSTR*)&pbstrURL);
  return pbstrURL;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::get_size(long* plSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("size"), DISPID(1252));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadItem2DispT<T>::get_size(void)
{
  long plSize;
  this->get_size((long*)&plSize);
  return plSize;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::get_type(BSTR* pbstrType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(1253));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDownloadItem2DispT<T>::get_type(void)
{
  BSTR pbstrType;
  this->get_type((BSTR*)&pbstrType);
  return pbstrType;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::get_progress(long* plProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("progress"), DISPID(1254));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPDownloadItem2DispT<T>::get_progress(void)
{
  long plProgress;
  this->get_progress((long*)&plProgress);
  return plProgress;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::get_downloadState(Wmplib_tlb::WMPSubscriptionDownloadState* pwmpsdls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("downloadState"), DISPID(1255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwmpsdls /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::WMPSubscriptionDownloadState __fastcall
IWMPDownloadItem2DispT<T>::get_downloadState(void)
{
  Wmplib_tlb::WMPSubscriptionDownloadState pwmpsdls;
  this->get_downloadState((Wmplib_tlb::WMPSubscriptionDownloadState*)&pwmpsdls);
  return pwmpsdls;
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(1256));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::resume()
{
  _TDispID _dispid(*this, OLETEXT("resume"), DISPID(1257));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDownloadItem2DispT<T>::cancel()
{
  _TDispID _dispid(*this, OLETEXT("cancel"), DISPID(1258));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IWMPSubscriptionServicePlayMedia
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F0248C1-62B3-42D7-B927-029119E6AD14}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::playMedia(BSTR bstrURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playMedia"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = bstrURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, 
                                                              BSTR bstrTaskPane/*[in]*/, 
                                                              BSTR bstrParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigateTaskPaneURL"), DISPID(10026));
  TAutoArgs<3> _args;
  _args[1] = bstrKeyName /*[VT_BSTR:0]*/;
  _args[2] = bstrTaskPane /*[VT_BSTR:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<1> _args;
  _args[1] = bstrTaskPane /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTaskPane /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_SelectedTaskPane(void)
{
  BSTR bstrTaskPane;
  this->get_SelectedTaskPane((BSTR*)&bstrTaskPane);
  return bstrTaskPane;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPSubscriptionServicePlayMediaDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPDiscoExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A915CEA2-72DF-41E1-A576-EF0BAE5E5169}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnLoginChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLoginChange"), DISPID(10028));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_userLoggedIn(VARIANT_BOOL* pvbLoggedIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("userLoggedIn"), DISPID(10029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvbLoggedIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPDiscoExternalDispT<T>::get_userLoggedIn(void)
{
  VARIANT_BOOL pvbLoggedIn;
  this->get_userLoggedIn((VARIANT_BOOL*)&pvbLoggedIn);
  return pvbLoggedIn;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::attemptLogin()
{
  _TDispID _dispid(*this, OLETEXT("attemptLogin"), DISPID(10030));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_accountType(BSTR* pbstrAcctType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accountType"), DISPID(10031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrAcctType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_accountType(void)
{
  BSTR pbstrAcctType;
  this->get_accountType((BSTR*)&pbstrAcctType);
  return pbstrAcctType;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnViewChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnViewChange"), DISPID(10032));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::changeView(BSTR bstrLibraryLocationType/*[in]*/, 
                                      BSTR bstrLibraryLocationID/*[in]*/, BSTR bstrFilter/*[in]*/, 
                                      BSTR bstrViewParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("changeView"), DISPID(10033));
  TAutoArgs<4> _args;
  _args[1] = bstrLibraryLocationType /*[VT_BSTR:0]*/;
  _args[2] = bstrLibraryLocationID /*[VT_BSTR:0]*/;
  _args[3] = bstrFilter /*[VT_BSTR:0]*/;
  _args[4] = bstrViewParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::changeViewOnlineList(BSTR bstrLibraryLocationType/*[in]*/, 
                                                BSTR bstrLibraryLocationID/*[in]*/, 
                                                BSTR bstrParams/*[in]*/, 
                                                BSTR bstrFriendlyName/*[in]*/, 
                                                BSTR bstrListType/*[in]*/, BSTR bstrViewMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("changeViewOnlineList"), DISPID(10034));
  TAutoArgs<6> _args;
  _args[1] = bstrLibraryLocationType /*[VT_BSTR:0]*/;
  _args[2] = bstrLibraryLocationID /*[VT_BSTR:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  _args[4] = bstrFriendlyName /*[VT_BSTR:0]*/;
  _args[5] = bstrListType /*[VT_BSTR:0]*/;
  _args[6] = bstrViewMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_libraryLocationType(BSTR* pbstrLibraryLocationType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("libraryLocationType"), DISPID(10035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLibraryLocationType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_libraryLocationType(void)
{
  BSTR pbstrLibraryLocationType;
  this->get_libraryLocationType((BSTR*)&pbstrLibraryLocationType);
  return pbstrLibraryLocationType;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_libraryLocationID(BSTR* pbstrLibraryLocationID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("libraryLocationID"), DISPID(10036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLibraryLocationID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_libraryLocationID(void)
{
  BSTR pbstrLibraryLocationID;
  this->get_libraryLocationID((BSTR*)&pbstrLibraryLocationID);
  return pbstrLibraryLocationID;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_selectedItemType(BSTR* pbstrSelectedItemType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedItemType"), DISPID(10037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSelectedItemType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_selectedItemType(void)
{
  BSTR pbstrSelectedItemType;
  this->get_selectedItemType((BSTR*)&pbstrSelectedItemType);
  return pbstrSelectedItemType;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_selectedItemID(BSTR* pbstrLibraryLocationID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectedItemID"), DISPID(10038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLibraryLocationID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_selectedItemID(void)
{
  BSTR pbstrLibraryLocationID;
  this->get_selectedItemID((BSTR*)&pbstrLibraryLocationID);
  return pbstrLibraryLocationID;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_filter(BSTR* pbstrFilter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("filter"), DISPID(10039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_filter(void)
{
  BSTR pbstrFilter;
  this->get_filter((BSTR*)&pbstrFilter);
  return pbstrFilter;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_task(BSTR* pbstrTask/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("task"), DISPID(10040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTask /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_task(void)
{
  BSTR pbstrTask;
  this->get_task((BSTR*)&pbstrTask);
  return pbstrTask;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_viewParameters(BSTR* pbstrViewParameters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("viewParameters"), DISPID(10041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewParameters /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_viewParameters(void)
{
  BSTR pbstrViewParameters;
  this->get_viewParameters((BSTR*)&pbstrViewParameters);
  return pbstrViewParameters;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::cancelNavigate()
{
  _TDispID _dispid(*this, OLETEXT("cancelNavigate"), DISPID(10042));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::showPopup(long lPopupIndex/*[in]*/, BSTR bstrParameters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("showPopup"), DISPID(10043));
  TAutoArgs<2> _args;
  _args[1] = lPopupIndex /*[VT_I4:0]*/;
  _args[2] = bstrParameters /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::addToBasket(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addToBasket"), DISPID(10044));
  TAutoArgs<2> _args;
  _args[1] = bstrViewType /*[VT_BSTR:0]*/;
  _args[2] = bstrViewIDs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_basketTitle(BSTR* bstrParams/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("basketTitle"), DISPID(10045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrParams /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_basketTitle(void)
{
  BSTR bstrParams;
  this->get_basketTitle((BSTR*)&bstrParams);
  return bstrParams;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::play(BSTR bstrLibraryLocationType/*[in]*/, 
                                BSTR bstrLibraryLocationIDs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(10046));
  TAutoArgs<2> _args;
  _args[1] = bstrLibraryLocationType /*[VT_BSTR:0]*/;
  _args[2] = bstrLibraryLocationIDs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::download(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("download"), DISPID(10047));
  TAutoArgs<2> _args;
  _args[1] = bstrViewType /*[VT_BSTR:0]*/;
  _args[2] = bstrViewIDs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::buy(BSTR bstrViewType/*[in]*/, BSTR bstrViewIDs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("buy"), DISPID(10048));
  TAutoArgs<2> _args;
  _args[1] = bstrViewType /*[VT_BSTR:0]*/;
  _args[2] = bstrViewIDs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::saveCurrentViewToLibrary(BSTR bstrFriendlyListType/*[in]*/, 
                                                    VARIANT_BOOL fDynamic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("saveCurrentViewToLibrary"), DISPID(10049));
  TAutoArgs<2> _args;
  _args[1] = bstrFriendlyListType /*[VT_BSTR:0]*/;
  _args[2] = fDynamic /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::authenticate(long lAuthenticationIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("authenticate"), DISPID(10050));
  TAutoArgs<1> _args;
  _args[1] = lAuthenticationIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::sendMessage(BSTR bstrMsg/*[in]*/, BSTR bstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sendMessage"), DISPID(10051));
  TAutoArgs<2> _args;
  _args[1] = bstrMsg /*[VT_BSTR:0]*/;
  _args[2] = bstrParam /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnSendMessageComplete(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSendMessageComplete"), DISPID(10052));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_ignoreIEHistory(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ignoreIEHistory"), DISPID(10053));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_pluginRunning(VARIANT_BOOL* pfPluginRunning/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("pluginRunning"), DISPID(10054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPluginRunning /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPDiscoExternalDispT<T>::get_pluginRunning(void)
{
  VARIANT_BOOL pfPluginRunning;
  this->get_pluginRunning((VARIANT_BOOL*)&pfPluginRunning);
  return pfPluginRunning;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_templateBeingDisplayedInLocalLibrary(VARIANT_BOOL* pfTemplateDisplayed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("templateBeingDisplayedInLocalLibrary"), DISPID(10055));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfTemplateDisplayed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPDiscoExternalDispT<T>::get_templateBeingDisplayedInLocalLibrary(void)
{
  VARIANT_BOOL pfTemplateDisplayed;
  this->get_templateBeingDisplayedInLocalLibrary((VARIANT_BOOL*)&pfTemplateDisplayed);
  return pfTemplateDisplayed;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnChangeViewError(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChangeViewError"), DISPID(10056));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnChangeViewOnlineListError(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChangeViewOnlineListError"), DISPID(10057));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_DownloadManager(Wmplib_tlb::IWMPDownloadManager** ppDownloadMgr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadManager"), DISPID(10009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Wmplib_tlb::IWMPDownloadManager**)ppDownloadMgr /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Wmplib_tlb::IWMPDownloadManagerPtr __fastcall
IWMPDiscoExternalDispT<T>::get_DownloadManager(void)
{
  Wmplib_tlb::IWMPDownloadManagerPtr ppDownloadMgr;
  this->get_DownloadManager(&ppDownloadMgr);
  return ppDownloadMgr;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::NavigateTaskPaneURL(BSTR bstrKeyName/*[in]*/, BSTR bstrTaskPane/*[in]*/, 
                                               BSTR bstrParams/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigateTaskPaneURL"), DISPID(10026));
  TAutoArgs<3> _args;
  _args[1] = bstrKeyName /*[VT_BSTR:0]*/;
  _args[2] = bstrTaskPane /*[VT_BSTR:0]*/;
  _args[3] = bstrParams /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_SelectedTaskPane(BSTR bstrTaskPane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<1> _args;
  _args[1] = bstrTaskPane /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_SelectedTaskPane(BSTR* bstrTaskPane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedTaskPane"), DISPID(10027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTaskPane /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_SelectedTaskPane(void)
{
  BSTR bstrTaskPane;
  this->get_SelectedTaskPane((BSTR*)&bstrTaskPane);
  return bstrTaskPane;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPDiscoExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPDiscoExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPCDDVDWizardExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D7EF888-1D3C-484A-A906-9F49D99BB344}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::WriteNames(BSTR bstrTOC/*[in]*/, BSTR bstrMetadata/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteNames"), DISPID(10001));
  TAutoArgs<2> _args;
  _args[1] = bstrTOC /*[VT_BSTR:0]*/;
  _args[2] = bstrMetadata /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::ReturnToMainTask()
{
  _TDispID _dispid(*this, OLETEXT("ReturnToMainTask"), DISPID(10002));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::WriteNamesEx(Wmplib_tlb::WMP_WRITENAMESEX_TYPE type/*[in]*/, 
                                              BSTR bstrTypeId/*[in]*/, BSTR bstrMetadata/*[in]*/, 
                                              VARIANT_BOOL fRenameRegroupFiles/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteNamesEx"), DISPID(10007));
  TAutoArgs<4> _args;
  _args[1] = (int)type /*[VT_USERDEFINED:0]*/;
  _args[2] = bstrTypeId /*[VT_BSTR:0]*/;
  _args[3] = bstrMetadata /*[VT_BSTR:0]*/;
  _args[4] = fRenameRegroupFiles /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::GetMDQByRequestID(BSTR bstrRequestID/*[in]*/, 
                                                   BSTR* pbstrMDQ/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMDQByRequestID"), DISPID(10008));
  TAutoArgs<1> _args;
  _args[1] = bstrRequestID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrMDQ /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::GetMDQByRequestID(BSTR bstrRequestID/*[in]*/)
{
  BSTR pbstrMDQ;
  this->GetMDQByRequestID(bstrRequestID, (BSTR*)&pbstrMDQ);
  return pbstrMDQ;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::EditMetadata()
{
  _TDispID _dispid(*this, OLETEXT("EditMetadata"), DISPID(10011));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::IsMetadataAvailableForEdit(VARIANT_BOOL* pbIsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsMetadataAvailableForEdit"), DISPID(10010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbIsAvailable /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWMPCDDVDWizardExternalDispT<T>::IsMetadataAvailableForEdit(void)
{
  VARIANT_BOOL pbIsAvailable;
  this->IsMetadataAvailableForEdit((VARIANT_BOOL*)&pbIsAvailable);
  return pbIsAvailable;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::BuyCD(BSTR bstrTitle/*[in]*/, BSTR bstrArtist/*[in]*/, 
                                       BSTR bstrAlbum/*[in]*/, BSTR bstrUFID/*[in]*/, 
                                       BSTR bstrWMID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyCD"), DISPID(10023));
  TAutoArgs<5> _args;
  _args[1] = bstrTitle /*[VT_BSTR:0]*/;
  _args[2] = bstrArtist /*[VT_BSTR:0]*/;
  _args[3] = bstrAlbum /*[VT_BSTR:0]*/;
  _args[4] = bstrUFID /*[VT_BSTR:0]*/;
  _args[5] = bstrWMID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorMedium(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorMedium"), DISPID(10013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorMedium(void)
{
  BSTR pbstrColor;
  this->get_appColorMedium((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorDark(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorDark"), DISPID(10014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorDark(void)
{
  BSTR pbstrColor;
  this->get_appColorDark((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonHighlight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHighlight"), DISPID(10015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonHighlight(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHighlight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonShadow(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonShadow"), DISPID(10016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonShadow(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonShadow((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonHoverFace(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorButtonHoverFace"), DISPID(10017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorButtonHoverFace(void)
{
  BSTR pbstrColor;
  this->get_appColorButtonHoverFace((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPCDDVDWizardExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPCDDVDWizardExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPBaseExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F81B2A59-02BC-4003-8B2F-C124AF66FC66}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPBaseExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBaseExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPBaseExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPBaseExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPBaseExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPOfflineExternal
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3148E685-B243-423D-8341-8480D6EFF674}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPOfflineExternalDispT<T>::forceOnline()
{
  _TDispID _dispid(*this, OLETEXT("forceOnline"), DISPID(10025));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPOfflineExternalDispT<T>::get_version(BSTR* pBSTR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(10005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBSTR /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPOfflineExternalDispT<T>::get_version(void)
{
  BSTR pBSTR;
  this->get_version((BSTR*)&pBSTR);
  return pBSTR;
}

template <class T> HRESULT __fastcall
IWMPOfflineExternalDispT<T>::get_appColorLight(BSTR* pbstrColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appColorLight"), DISPID(10012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPOfflineExternalDispT<T>::get_appColorLight(void)
{
  BSTR pbstrColor;
  this->get_appColorLight((BSTR*)&pbstrColor);
  return pbstrColor;
}

template <class T> HRESULT __fastcall
IWMPOfflineExternalDispT<T>::set_OnColorChange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnColorChange"), DISPID(10018));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPRemoteUPnPService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17E5DC63-E296-4EDE-B9CC-CF57D18ED10E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::RegisterEvent(BSTR bstrVariableName/*[in]*/, 
                                             LPDISPATCH pdispJScriptCode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterEvent"), DISPID(10121));
  TAutoArgs<2> _args;
  _args[1] = bstrVariableName /*[VT_BSTR:0]*/;
  _args[2] = pdispJScriptCode /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::UnregisterEvent(BSTR bstrVariableName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnregisterEvent"), DISPID(10122));
  TAutoArgs<1> _args;
  _args[1] = bstrVariableName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::ID(BSTR* pbstrID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(10123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrID /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRemoteUPnPServiceDispT<T>::ID(void)
{
  BSTR pbstrID;
  this->ID((BSTR*)&pbstrID);
  return pbstrID;
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::InvokeAction(BSTR bstrActionName/*[in]*/, 
                                            LPDISPATCH pdispInArgs/*[in]*/, 
                                            LPDISPATCH pdispOutArgs/*[in]*/, 
                                            LPDISPATCH pdispRetVals/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeAction"), DISPID(10124));
  TAutoArgs<4> _args;
  _args[1] = bstrActionName /*[VT_BSTR:0]*/;
  _args[2] = pdispInArgs /*[VT_DISPATCH:0]*/;
  _args[3] = pdispOutArgs /*[VT_DISPATCH:0]*/;
  _args[4] = pdispRetVals /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::LastTransportStatus(long* plValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTransportStatus"), DISPID(10125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plValue /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IWMPRemoteUPnPServiceDispT<T>::LastTransportStatus(void)
{
  long plValue;
  this->LastTransportStatus((long*)&plValue);
  return plValue;
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::QueryStateVariable(BSTR bstrVariableName/*[in]*/, 
                                                  VARIANT* pvarValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryStateVariable"), DISPID(10126));
  TAutoArgs<1> _args;
  _args[1] = bstrVariableName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvarValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWMPRemoteUPnPServiceDispT<T>::QueryStateVariable(BSTR bstrVariableName/*[in]*/)
{
  VARIANT pvarValue;
  this->QueryStateVariable(bstrVariableName, (VARIANT*)&pvarValue);
  return pvarValue;
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPServiceDispT<T>::ServiceTypeIdentifier(BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServiceTypeIdentifier"), DISPID(10127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRemoteUPnPServiceDispT<T>::ServiceTypeIdentifier(void)
{
  BSTR pbstrValue;
  this->ServiceTypeIdentifier((BSTR*)&pbstrValue);
  return pbstrValue;
}

// *********************************************************************//
// DispIntf:  IWMPRemoteUPnPDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76F13F00-6E17-4D98-BE2D-D2A84CFF5BFD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRemoteUPnPDeviceDispT<T>::friendlyName(BSTR* pbstrService/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("friendlyName"), DISPID(10131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrService /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IWMPRemoteUPnPDeviceDispT<T>::friendlyName(void)
{
  BSTR pbstrService;
  this->friendlyName((BSTR*)&pbstrService);
  return pbstrService;
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPDeviceDispT<T>::FindService(BSTR bstrService/*[in]*/, 
                                          LPDISPATCH* ppdispService/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindService"), DISPID(10132));
  TAutoArgs<1> _args;
  _args[1] = bstrService /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(ppdispService /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPRemoteUPnPDeviceDispT<T>::FindService(BSTR bstrService/*[in]*/)
{
  LPDISPATCH ppdispService;
  this->FindService(bstrService, (LPDISPATCH*)&ppdispService);
  return ppdispService;
}

template <class T> HRESULT __fastcall
IWMPRemoteUPnPDeviceDispT<T>::getDevice(LPUNKNOWN* ppDevice)
{
  _TDispID _dispid(*this, OLETEXT("getDevice"), DISPID(10133));
  TAutoArgs<1> _args;
  _args[1] = ppDevice /*[VT_UNKNOWN:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWMPRemoteDeviceController
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {968F36CA-CB43-4F6A-A03B-66A9C05A93EE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWMPRemoteDeviceControllerDispT<T>::RegisterDeviceSwitch(LPDISPATCH pdispJScriptFunction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterDeviceSwitch"), DISPID(10101));
  TAutoArgs<1> _args;
  _args[1] = pdispJScriptFunction /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWMPRemoteDeviceControllerDispT<T>::SyncDeviceList()
{
  _TDispID _dispid(*this, OLETEXT("SyncDeviceList"), DISPID(10102));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWMPRemoteDeviceControllerDispT<T>::get_numberDevices(long* plNumberDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("numberDevices"), DISPID(10103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plNumberDevices /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWMPRemoteDeviceControllerDispT<T>::get_numberDevices(void)
{
  long plNumberDevices;
  this->get_numberDevices((long*)&plNumberDevices);
  return plNumberDevices;
}

template <class T> HRESULT __fastcall
IWMPRemoteDeviceControllerDispT<T>::getDevice(long lIndex/*[in]*/, 
                                              LPDISPATCH* ppDevice/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDevice"), DISPID(10104));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ppDevice /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWMPRemoteDeviceControllerDispT<T>::getDevice(long lIndex/*[in]*/)
{
  LPDISPATCH ppDevice;
  this->getDevice(lIndex, (LPDISPATCH*)&ppDevice);
  return ppDevice;
}

template <class T> HRESULT __fastcall
IWMPRemoteDeviceControllerDispT<T>::SwitchUIToMatchDevice(LPDISPATCH pdispDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SwitchUIToMatchDevice"), DISPID(10106));
  TAutoArgs<1> _args;
  _args[1] = pdispDevice /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPAVTransportDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EA1DE14-E288-4958-A23C-942634A27EB5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportState(BSTR* pTransportState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportState"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pTransportState /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportState(void)
{
  BSTR pTransportState;
  this->get_TransportState((BSTR*)&pTransportState);
  return pTransportState;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportStatus(BSTR* pTransportStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportStatus"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pTransportStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportStatus(void)
{
  BSTR pTransportStatus;
  this->get_TransportStatus((BSTR*)&pTransportStatus);
  return pTransportStatus;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PlaybackStorageMedium(BSTR* pPlaybackStorageMedium/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaybackStorageMedium"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPlaybackStorageMedium /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PlaybackStorageMedium(void)
{
  BSTR pPlaybackStorageMedium;
  this->get_PlaybackStorageMedium((BSTR*)&pPlaybackStorageMedium);
  return pPlaybackStorageMedium;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RecordStorageMedium(BSTR* pRecordStorageMedium/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordStorageMedium"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRecordStorageMedium /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RecordStorageMedium(void)
{
  BSTR pRecordStorageMedium;
  this->get_RecordStorageMedium((BSTR*)&pRecordStorageMedium);
  return pRecordStorageMedium;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossiblePlaybackStorageMedia(BSTR* pPossiblePlaybackStorageMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PossiblePlaybackStorageMedia"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPossiblePlaybackStorageMedia /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossiblePlaybackStorageMedia(void)
{
  BSTR pPossiblePlaybackStorageMedia;
  this->get_PossiblePlaybackStorageMedia((BSTR*)&pPossiblePlaybackStorageMedia);
  return pPossiblePlaybackStorageMedia;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossibleRecordStorageMedia(BSTR* pPossibleRecordStorageMedia/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PossibleRecordStorageMedia"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPossibleRecordStorageMedia /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossibleRecordStorageMedia(void)
{
  BSTR pPossibleRecordStorageMedia;
  this->get_PossibleRecordStorageMedia((BSTR*)&pPossibleRecordStorageMedia);
  return pPossibleRecordStorageMedia;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentPlayMode(BSTR* pCurrentPlayMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPlayMode"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentPlayMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentPlayMode(void)
{
  BSTR pCurrentPlayMode;
  this->get_CurrentPlayMode((BSTR*)&pCurrentPlayMode);
  return pCurrentPlayMode;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportPlaySpeed(BSTR* pTransportPlaySpeed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportPlaySpeed"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pTransportPlaySpeed /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_TransportPlaySpeed(void)
{
  BSTR pTransportPlaySpeed;
  this->get_TransportPlaySpeed((BSTR*)&pTransportPlaySpeed);
  return pTransportPlaySpeed;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RecordMediumWriteStatus(BSTR* pRecordMediumWriteStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordMediumWriteStatus"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRecordMediumWriteStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RecordMediumWriteStatus(void)
{
  BSTR pRecordMediumWriteStatus;
  this->get_RecordMediumWriteStatus((BSTR*)&pRecordMediumWriteStatus);
  return pRecordMediumWriteStatus;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentRecordQualityMode(BSTR* pCurrentRecordQualityMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRecordQualityMode"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentRecordQualityMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentRecordQualityMode(void)
{
  BSTR pCurrentRecordQualityMode;
  this->get_CurrentRecordQualityMode((BSTR*)&pCurrentRecordQualityMode);
  return pCurrentRecordQualityMode;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossibleRecordQualityModes(BSTR* pPossibleRecordQualityModes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PossibleRecordQualityModes"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPossibleRecordQualityModes /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_PossibleRecordQualityModes(void)
{
  BSTR pPossibleRecordQualityModes;
  this->get_PossibleRecordQualityModes((BSTR*)&pPossibleRecordQualityModes);
  return pPossibleRecordQualityModes;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NumberOfTracks(unsigned_long* pNumberOfTracks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfTracks"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pNumberOfTracks /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NumberOfTracks(void)
{
  unsigned_long pNumberOfTracks;
  this->get_NumberOfTracks((unsigned_long*)&pNumberOfTracks);
  return pNumberOfTracks;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrack(unsigned_long* pCurrentTrack/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTrack"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentTrack /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrack(void)
{
  unsigned_long pCurrentTrack;
  this->get_CurrentTrack((unsigned_long*)&pCurrentTrack);
  return pCurrentTrack;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackDuration(BSTR* pCurrentTrackDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTrackDuration"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentTrackDuration /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackDuration(void)
{
  BSTR pCurrentTrackDuration;
  this->get_CurrentTrackDuration((BSTR*)&pCurrentTrackDuration);
  return pCurrentTrackDuration;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentMediaDuration(BSTR* pCurrentMediaDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMediaDuration"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentMediaDuration /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentMediaDuration(void)
{
  BSTR pCurrentMediaDuration;
  this->get_CurrentMediaDuration((BSTR*)&pCurrentMediaDuration);
  return pCurrentMediaDuration;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackMetaData(BSTR* pCurrentTrackMetaData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTrackMetaData"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentTrackMetaData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackMetaData(void)
{
  BSTR pCurrentTrackMetaData;
  this->get_CurrentTrackMetaData((BSTR*)&pCurrentTrackMetaData);
  return pCurrentTrackMetaData;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackURI(BSTR* pCurrentTrackURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTrackURI"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentTrackURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTrackURI(void)
{
  BSTR pCurrentTrackURI;
  this->get_CurrentTrackURI((BSTR*)&pCurrentTrackURI);
  return pCurrentTrackURI;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AVTransportURI(BSTR* pAVTransportURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AVTransportURI"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAVTransportURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AVTransportURI(void)
{
  BSTR pAVTransportURI;
  this->get_AVTransportURI((BSTR*)&pAVTransportURI);
  return pAVTransportURI;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AVTransportURIMetaData(BSTR* pAVTransportURIMetaData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AVTransportURIMetaData"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAVTransportURIMetaData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AVTransportURIMetaData(void)
{
  BSTR pAVTransportURIMetaData;
  this->get_AVTransportURIMetaData((BSTR*)&pAVTransportURIMetaData);
  return pAVTransportURIMetaData;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NextAVTransportURI(BSTR* pNextAVTransportURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextAVTransportURI"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pNextAVTransportURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NextAVTransportURI(void)
{
  BSTR pNextAVTransportURI;
  this->get_NextAVTransportURI((BSTR*)&pNextAVTransportURI);
  return pNextAVTransportURI;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NextAVTransportURIMetaData(BSTR* pNextAVTransportURIMetaData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextAVTransportURIMetaData"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pNextAVTransportURIMetaData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_NextAVTransportURIMetaData(void)
{
  BSTR pNextAVTransportURIMetaData;
  this->get_NextAVTransportURIMetaData((BSTR*)&pNextAVTransportURIMetaData);
  return pNextAVTransportURIMetaData;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RelativeTimePosition(BSTR* pRelativeTimePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeTimePosition"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRelativeTimePosition /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RelativeTimePosition(void)
{
  BSTR pRelativeTimePosition;
  this->get_RelativeTimePosition((BSTR*)&pRelativeTimePosition);
  return pRelativeTimePosition;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AbsoluteTimePosition(BSTR* pAbsoluteTimePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsoluteTimePosition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAbsoluteTimePosition /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AbsoluteTimePosition(void)
{
  BSTR pAbsoluteTimePosition;
  this->get_AbsoluteTimePosition((BSTR*)&pAbsoluteTimePosition);
  return pAbsoluteTimePosition;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RelativeCounterPosition(long* pRelativeCounterPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeCounterPosition"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRelativeCounterPosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_RelativeCounterPosition(void)
{
  long pRelativeCounterPosition;
  this->get_RelativeCounterPosition((long*)&pRelativeCounterPosition);
  return pRelativeCounterPosition;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AbsoluteCounterPosition(long* pAbsoluteCounterPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsoluteCounterPosition"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAbsoluteCounterPosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_AbsoluteCounterPosition(void)
{
  long pAbsoluteCounterPosition;
  this->get_AbsoluteCounterPosition((long*)&pAbsoluteCounterPosition);
  return pAbsoluteCounterPosition;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTransportActions(BSTR* pCurrentTransportActions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTransportActions"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentTransportActions /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_CurrentTransportActions(void)
{
  BSTR pCurrentTransportActions;
  this->get_CurrentTransportActions((BSTR*)&pCurrentTransportActions);
  return pCurrentTransportActions;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_LastChange(BSTR* pLastChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastChange"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLastChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_LastChange(void)
{
  BSTR pLastChange;
  this->get_LastChange((BSTR*)&pLastChange);
  return pLastChange;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_SeekMode(BSTR* pA_ARG_TYPE_SeekMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_SeekMode"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_SeekMode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_SeekMode(void)
{
  BSTR pA_ARG_TYPE_SeekMode;
  this->get_A_ARG_TYPE_SeekMode((BSTR*)&pA_ARG_TYPE_SeekMode);
  return pA_ARG_TYPE_SeekMode;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_SeekTarget(BSTR* pA_ARG_TYPE_SeekTarget/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_SeekTarget"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_SeekTarget /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_SeekTarget(void)
{
  BSTR pA_ARG_TYPE_SeekTarget;
  this->get_A_ARG_TYPE_SeekTarget((BSTR*)&pA_ARG_TYPE_SeekTarget);
  return pA_ARG_TYPE_SeekTarget;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_InstanceID(unsigned_long* pA_ARG_TYPE_InstanceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_InstanceID"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_InstanceID /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::get_A_ARG_TYPE_InstanceID(void)
{
  unsigned_long pA_ARG_TYPE_InstanceID;
  this->get_A_ARG_TYPE_InstanceID((unsigned_long*)&pA_ARG_TYPE_InstanceID);
  return pA_ARG_TYPE_InstanceID;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::SetAVTransportURI(unsigned_long InstanceID/*[in]*/, 
                                                                BSTR CurrentURI/*[in]*/, 
                                                                BSTR CurrentURIMetaData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAVTransportURI"), DISPID(31));
  TAutoArgs<3> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = CurrentURI /*[VT_BSTR:0]*/;
  _args[3] = CurrentURIMetaData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::SetNextAVTransportURI(unsigned_long InstanceID/*[in]*/
                                                                    , BSTR NextURI/*[in]*/, 
                                                                    BSTR NextURIMetaData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetNextAVTransportURI"), DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = NextURI /*[VT_BSTR:0]*/;
  _args[3] = NextURIMetaData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetMediaInfo(unsigned_long InstanceID/*[in]*/, 
                                                           unsigned_long* pNrTracks/*[in,out]*/, 
                                                           BSTR* pMediaDuration/*[in,out]*/, 
                                                           BSTR* pCurrentURI/*[in,out]*/, 
                                                           BSTR* pCurrentURIMetaData/*[in,out]*/, 
                                                           BSTR* pNextURI/*[in,out]*/, 
                                                           BSTR* pNextURIMetaData/*[in,out]*/, 
                                                           BSTR* pPlayMedium/*[in,out]*/, 
                                                           BSTR* pRecordMedium/*[in,out]*/, 
                                                           BSTR* pWriteStatus/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMediaInfo"), DISPID(33));
  TAutoArgs<10> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pNrTracks /*[VT_UI4:1]*/;
  _args[3] = pMediaDuration /*[VT_BSTR:1]*/;
  _args[4] = pCurrentURI /*[VT_BSTR:1]*/;
  _args[5] = pCurrentURIMetaData /*[VT_BSTR:1]*/;
  _args[6] = pNextURI /*[VT_BSTR:1]*/;
  _args[7] = pNextURIMetaData /*[VT_BSTR:1]*/;
  _args[8] = pPlayMedium /*[VT_BSTR:1]*/;
  _args[9] = pRecordMedium /*[VT_BSTR:1]*/;
  _args[10] = pWriteStatus /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetTransportInfo(unsigned_long InstanceID/*[in]*/, 
                                                               BSTR* pCurrentTransportState/*[in,out]*/
                                                               , 
                                                               BSTR* pCurrentTransportStatus/*[in,out]*/
                                                               , BSTR* pCurrentSpeed/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTransportInfo"), DISPID(34));
  TAutoArgs<4> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pCurrentTransportState /*[VT_BSTR:1]*/;
  _args[3] = pCurrentTransportStatus /*[VT_BSTR:1]*/;
  _args[4] = pCurrentSpeed /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetPositionInfo(unsigned_long InstanceID/*[in]*/, 
                                                              unsigned_long* pTrack/*[in,out]*/, 
                                                              BSTR* pTrackDuration/*[in,out]*/, 
                                                              BSTR* pTrackMetaData/*[in,out]*/, 
                                                              BSTR* pTrackURI/*[in,out]*/, 
                                                              BSTR* pRelTime/*[in,out]*/, 
                                                              BSTR* pAbsTime/*[in,out]*/, 
                                                              long* pRelCount/*[in,out]*/, 
                                                              long* pAbsCount/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPositionInfo"), DISPID(35));
  TAutoArgs<9> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pTrack /*[VT_UI4:1]*/;
  _args[3] = pTrackDuration /*[VT_BSTR:1]*/;
  _args[4] = pTrackMetaData /*[VT_BSTR:1]*/;
  _args[5] = pTrackURI /*[VT_BSTR:1]*/;
  _args[6] = pRelTime /*[VT_BSTR:1]*/;
  _args[7] = pAbsTime /*[VT_BSTR:1]*/;
  _args[8] = pRelCount /*[VT_I4:1]*/;
  _args[9] = pAbsCount /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetDeviceCapabilities(unsigned_long InstanceID/*[in]*/
                                                                    , BSTR* pPlayMedia/*[in,out]*/, 
                                                                    BSTR* pRecMedia/*[in,out]*/, 
                                                                    BSTR* pRecQualityModes/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDeviceCapabilities"), DISPID(36));
  TAutoArgs<4> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pPlayMedia /*[VT_BSTR:1]*/;
  _args[3] = pRecMedia /*[VT_BSTR:1]*/;
  _args[4] = pRecQualityModes /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetTransportSettings(unsigned_long InstanceID/*[in]*/
                                                                   , BSTR* pPlayMode/*[in,out]*/, 
                                                                   BSTR* pRecQualityMode/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTransportSettings"), DISPID(37));
  TAutoArgs<3> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pPlayMode /*[VT_BSTR:1]*/;
  _args[3] = pRecQualityMode /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::stop(unsigned_long InstanceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::play(unsigned_long InstanceID/*[in]*/, 
                                                   BSTR Speed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(39));
  TAutoArgs<2> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = Speed /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::pause(unsigned_long InstanceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::Record(unsigned_long InstanceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Record"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::Seek(unsigned_long InstanceID/*[in]*/, 
                                                   BSTR Unit/*[in]*/, BSTR Target/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seek"), DISPID(42));
  TAutoArgs<3> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = Unit /*[VT_BSTR:0]*/;
  _args[3] = Target /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::next(unsigned_long InstanceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::previous(unsigned_long InstanceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("previous"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::SetPlayMode(unsigned_long InstanceID/*[in]*/, 
                                                          BSTR NewPlayMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPlayMode"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = NewPlayMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::SetRecordQualityMode(unsigned_long InstanceID/*[in]*/
                                                                   , 
                                                                   BSTR NewRecordQualityMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRecordQualityMode"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = NewRecordQualityMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPAVTransportDualDispT<T>::GetCurrentTransportActions(unsigned_long InstanceID/*[in]*/
                                                                         , 
                                                                         BSTR* pActions/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentTransportActions"), DISPID(47));
  TAutoArgs<2> _args;
  _args[1] = InstanceID /*[VT_UI4:0]*/;
  _args[2] = pActions /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPBinaryControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7CAD1D24-EDED-47FA-A1D8-4628FBE5638C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::get_CurrentState(BSTR* pCurrentState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentState"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentState /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::get_CurrentState(void)
{
  BSTR pCurrentState;
  this->get_CurrentState((BSTR*)&pCurrentState);
  return pCurrentState;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::GetCurrentState(BSTR* pcurrState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentState"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcurrState /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::GetCurrentState(void)
{
  BSTR pcurrState;
  this->GetCurrentState((BSTR*)&pcurrState);
  return pcurrState;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::SetCurrentState(BSTR NewState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentState"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = NewState /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::SetOn()
{
  _TDispID _dispid(*this, OLETEXT("SetOn"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPBinaryControlDualDispT<T>::SetOff()
{
  _TDispID _dispid(*this, OLETEXT("SetOff"), DISPID(5));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPVariableControlDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A09862E-47B1-4D17-94EA-2BDE3014DD42}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_CurrentPercent(float* pCurrentPercent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPercent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentPercent /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_CurrentPercent(void)
{
  float pCurrentPercent;
  this->get_CurrentPercent((float*)&pCurrentPercent);
  return pCurrentPercent;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_CurrentValue(float* pCurrentValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentValue"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_CurrentValue(void)
{
  float pCurrentValue;
  this->get_CurrentValue((float*)&pCurrentValue);
  return pCurrentValue;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_UnitOfMeasure(BSTR* pUnitOfMeasure/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnitOfMeasure"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUnitOfMeasure /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_UnitOfMeasure(void)
{
  BSTR pUnitOfMeasure;
  this->get_UnitOfMeasure((BSTR*)&pUnitOfMeasure);
  return pUnitOfMeasure;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_MinValue(float* pMinValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinValue"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMinValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_MinValue(void)
{
  float pMinValue;
  this->get_MinValue((float*)&pMinValue);
  return pMinValue;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_MaxValue(float* pMaxValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxValue"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_MaxValue(void)
{
  float pMaxValue;
  this->get_MaxValue((float*)&pMaxValue);
  return pMaxValue;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_NumberOfSteps(unsigned_long* pNumberOfSteps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfSteps"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pNumberOfSteps /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::get_NumberOfSteps(void)
{
  unsigned_long pNumberOfSteps;
  this->get_NumberOfSteps((unsigned_long*)&pNumberOfSteps);
  return pNumberOfSteps;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetCurrentPercent(float* pcurPercent/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentPercent"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pcurPercent /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetCurrentValue(float* pcurValue/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentValue"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pcurValue /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetUnitOfMeasure(BSTR* pUnitOfMeasure/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetUnitOfMeasure"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pUnitOfMeasure /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetMinValue(float* pMinValue/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMinValue"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pMinValue /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetMaxValue(float* pMaxValue/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMaxValue"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pMaxValue /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::GetNumberOfSteps(unsigned_long* pNumberOfSteps/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumberOfSteps"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pNumberOfSteps /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::SetCurrentPercent(float newCurrentPercent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentPercent"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = newCurrentPercent /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPVariableControlDualDispT<T>::SetCurrentValue(float newCurrentValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentValue"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = newCurrentValue /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPConnectionManagerDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AF41667-542C-42EA-BF53-DC101168C503}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_SourceProtocolInfo(BSTR* pSourceProtocolInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceProtocolInfo"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSourceProtocolInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_SourceProtocolInfo(void)
{
  BSTR pSourceProtocolInfo;
  this->get_SourceProtocolInfo((BSTR*)&pSourceProtocolInfo);
  return pSourceProtocolInfo;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_SinkProtocolInfo(BSTR* pSinkProtocolInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SinkProtocolInfo"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSinkProtocolInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_SinkProtocolInfo(void)
{
  BSTR pSinkProtocolInfo;
  this->get_SinkProtocolInfo((BSTR*)&pSinkProtocolInfo);
  return pSinkProtocolInfo;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_CurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentConnectionIDs"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentConnectionIDs /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_CurrentConnectionIDs(void)
{
  BSTR pCurrentConnectionIDs;
  this->get_CurrentConnectionIDs((BSTR*)&pCurrentConnectionIDs);
  return pCurrentConnectionIDs;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionStatus(BSTR* pA_ARG_TYPE_ConnectionStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_ConnectionStatus"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_ConnectionStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionStatus(void)
{
  BSTR pA_ARG_TYPE_ConnectionStatus;
  this->get_A_ARG_TYPE_ConnectionStatus((BSTR*)&pA_ARG_TYPE_ConnectionStatus);
  return pA_ARG_TYPE_ConnectionStatus;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionManager(BSTR* pA_ARG_TYPE_ConnectionManager/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_ConnectionManager"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_ConnectionManager /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionManager(void)
{
  BSTR pA_ARG_TYPE_ConnectionManager;
  this->get_A_ARG_TYPE_ConnectionManager((BSTR*)&pA_ARG_TYPE_ConnectionManager);
  return pA_ARG_TYPE_ConnectionManager;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_Direction(BSTR* pA_ARG_TYPE_Direction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_Direction"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_Direction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_Direction(void)
{
  BSTR pA_ARG_TYPE_Direction;
  this->get_A_ARG_TYPE_Direction((BSTR*)&pA_ARG_TYPE_Direction);
  return pA_ARG_TYPE_Direction;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ProtocolInfo(BSTR* pA_ARG_TYPE_ProtocolInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_ProtocolInfo"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_ProtocolInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ProtocolInfo(void)
{
  BSTR pA_ARG_TYPE_ProtocolInfo;
  this->get_A_ARG_TYPE_ProtocolInfo((BSTR*)&pA_ARG_TYPE_ProtocolInfo);
  return pA_ARG_TYPE_ProtocolInfo;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionID(long* pA_ARG_TYPE_ConnectionID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_ConnectionID"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_ConnectionID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_ConnectionID(void)
{
  long pA_ARG_TYPE_ConnectionID;
  this->get_A_ARG_TYPE_ConnectionID((long*)&pA_ARG_TYPE_ConnectionID);
  return pA_ARG_TYPE_ConnectionID;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_AVTransportID(long* pA_ARG_TYPE_AVTransportID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_AVTransportID"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_AVTransportID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_AVTransportID(void)
{
  long pA_ARG_TYPE_AVTransportID;
  this->get_A_ARG_TYPE_AVTransportID((long*)&pA_ARG_TYPE_AVTransportID);
  return pA_ARG_TYPE_AVTransportID;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_RcsID(long* pA_ARG_TYPE_RcsID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("A_ARG_TYPE_RcsID"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pA_ARG_TYPE_RcsID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::get_A_ARG_TYPE_RcsID(void)
{
  long pA_ARG_TYPE_RcsID;
  this->get_A_ARG_TYPE_RcsID((long*)&pA_ARG_TYPE_RcsID);
  return pA_ARG_TYPE_RcsID;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::GetProtocolInfo(BSTR* pSourceProtocol/*[in,out]*/
                                                                    , 
                                                                    BSTR* pSinkProtocol/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProtocolInfo"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = pSourceProtocol /*[VT_BSTR:1]*/;
  _args[2] = pSinkProtocol /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::PrepareForConnection(BSTR remoteProtocolInfo/*[in]*/
                                                                         , 
                                                                         BSTR peerConnectionManager/*[in]*/
                                                                         , 
                                                                         long peerConnectionID/*[in]*/
                                                                         , BSTR direction/*[in]*/, 
                                                                         long* pConnectionID/*[in,out]*/
                                                                         , 
                                                                         long* pAVTransportID/*[in,out]*/
                                                                         , long* pResID/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrepareForConnection"), DISPID(12));
  TAutoArgs<7> _args;
  _args[1] = remoteProtocolInfo /*[VT_BSTR:0]*/;
  _args[2] = peerConnectionManager /*[VT_BSTR:0]*/;
  _args[3] = peerConnectionID /*[VT_I4:0]*/;
  _args[4] = direction /*[VT_BSTR:0]*/;
  _args[5] = pConnectionID /*[VT_I4:1]*/;
  _args[6] = pAVTransportID /*[VT_I4:1]*/;
  _args[7] = pResID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::ConnectionComplete(long connectionID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionComplete"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = connectionID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::GetCurrentConnectionIDs(BSTR* pCurrentConnectionIDs/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentConnectionIDs"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pCurrentConnectionIDs /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPConnectionManagerDualDispT<T>::GetCurrentConnectionInfo(long connectionID/*[in]*/
                                                                             , 
                                                                             long* pResID/*[in,out]*/
                                                                             , 
                                                                             long* pAVTransportID/*[in,out]*/
                                                                             , 
                                                                             BSTR* pProtocolInfo/*[in,out]*/
                                                                             , 
                                                                             BSTR* pPeerConnectionManager/*[in,out]*/
                                                                             , 
                                                                             long* pPeerConnectionID/*[in,out]*/
                                                                             , 
                                                                             BSTR* pDirection/*[in,out]*/
                                                                             , 
                                                                             BSTR* pStatus/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentConnectionInfo"), DISPID(15));
  TAutoArgs<8> _args;
  _args[1] = connectionID /*[VT_I4:0]*/;
  _args[2] = pResID /*[VT_I4:1]*/;
  _args[3] = pAVTransportID /*[VT_I4:1]*/;
  _args[4] = pProtocolInfo /*[VT_BSTR:1]*/;
  _args[5] = pPeerConnectionManager /*[VT_BSTR:1]*/;
  _args[6] = pPeerConnectionID /*[VT_I4:1]*/;
  _args[7] = pDirection /*[VT_BSTR:1]*/;
  _args[8] = pStatus /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IUPnPService_IWMPUPnPSkinRetrieverDual
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC743628-971D-4C1E-B019-50543EFE2BAD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPSkinRetrieverDualDispT<T>::get_SkinURL(BSTR* pSkinURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SkinURL"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSkinURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUPnPService_IWMPUPnPSkinRetrieverDualDispT<T>::get_SkinURL(void)
{
  BSTR pSkinURL;
  this->get_SkinURL((BSTR*)&pSkinURL);
  return pSkinURL;
}

template <class T> HRESULT __fastcall
IUPnPService_IWMPUPnPSkinRetrieverDualDispT<T>::GetSkinURL(BSTR* ppbstrSkinURL/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSkinURL"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ppbstrSkinURL /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPButtonCtrl
// Interface: TCOMIWMPButtonCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPButtonCtrl, IWMPButtonCtrl, &CLSID_WMPButtonCtrl, &IID_IWMPButtonCtrl> CoWMPButtonCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPListBoxCtrl
// Interface: TCOMIWMPListBoxCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPListBoxCtrl, IWMPListBoxCtrl, &CLSID_WMPListBoxCtrl, &IID_IWMPListBoxCtrl> CoWMPListBoxCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPSliderCtrl
// Interface: TCOMIWMPSliderCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPSliderCtrl, IWMPSliderCtrl, &CLSID_WMPSliderCtrl, &IID_IWMPSliderCtrl> CoWMPSliderCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPVideoCtrl
// Interface: TCOMIWMPVideoCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPVideoCtrl, IWMPVideoCtrl, &CLSID_WMPVideoCtrl, &IID_IWMPVideoCtrl> CoWMPVideoCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPEffects
// Interface: TCOMIWMPEffectsCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPEffectsCtrl, IWMPEffectsCtrl, &CLSID_WMPEffects, &IID_IWMPEffectsCtrl> CoWMPEffects;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPEqualizerSettingsCtrl
// Interface: TCOMIWMPEqualizerSettingsCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPEqualizerSettingsCtrl, IWMPEqualizerSettingsCtrl, &CLSID_WMPEqualizerSettingsCtrl, &IID_IWMPEqualizerSettingsCtrl> CoWMPEqualizerSettingsCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPVideoSettingsCtrl
// Interface: TCOMIWMPVideoSettingsCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPVideoSettingsCtrl, IWMPVideoSettingsCtrl, &CLSID_WMPVideoSettingsCtrl, &IID_IWMPVideoSettingsCtrl> CoWMPVideoSettingsCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPLibraryTreeCtrl
// Interface: TCOMIWMPLibraryTreeCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPLibraryTreeCtrl, IWMPLibraryTreeCtrl, &CLSID_WMPLibraryTreeCtrl, &IID_IWMPLibraryTreeCtrl> CoWMPLibraryTreeCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPEditCtrl
// Interface: TCOMIWMPEditCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPEditCtrl, IWMPEditCtrl, &CLSID_WMPEditCtrl, &IID_IWMPEditCtrl> CoWMPEditCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPMenuCtrl
// Interface: TCOMIWMPMenuCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPMenuCtrl, IWMPMenuCtrl, &CLSID_WMPMenuCtrl, &IID_IWMPMenuCtrl> CoWMPMenuCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPAutoMenuCtrl
// Interface: TCOMIWMPAutoMenuCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPAutoMenuCtrl, IWMPAutoMenuCtrl, &CLSID_WMPAutoMenuCtrl, &IID_IWMPAutoMenuCtrl> CoWMPAutoMenuCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPRegionalButtonCtrl
// Interface: TCOMIWMPRegionalButtonCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPRegionalButtonCtrl, IWMPRegionalButtonCtrl, &CLSID_WMPRegionalButtonCtrl, &IID_IWMPRegionalButtonCtrl> CoWMPRegionalButtonCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPRegionalButton
// Interface: TCOMIWMPRegionalButton
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPRegionalButton, IWMPRegionalButton, &CLSID_WMPRegionalButton, &IID_IWMPRegionalButton> CoWMPRegionalButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPCustomSliderCtrl
// Interface: TCOMIWMPCustomSlider
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPCustomSlider, IWMPCustomSlider, &CLSID_WMPCustomSliderCtrl, &IID_IWMPCustomSlider> CoWMPCustomSliderCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPTextCtrl
// Interface: TCOMIWMPTextCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPTextCtrl, IWMPTextCtrl, &CLSID_WMPTextCtrl, &IID_IWMPTextCtrl> CoWMPTextCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPPlaylistCtrl
// Interface: TCOMIWMPPlaylistCtrl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPPlaylistCtrl, IWMPPlaylistCtrl, &CLSID_WMPPlaylistCtrl, &IID_IWMPPlaylistCtrl> CoWMPPlaylistCtrl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WMPCore
// Interface: TCOMIWMPCore3
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWMPCore3, IWMPCore3, &CLSID_WMPCore, &IID_IWMPCore3> CoWMPCore;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WindowsMediaPlayer
// Event Interface : _WMPOCXEvents
// *********************************************************************//
template <class T>
class TEvents_WindowsMediaPlayer : public IConnectionPointImpl<T,
                                                 &DIID__WMPOCXEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OpenStateChange(long NewState);
  void            Fire_PlayStateChange(long NewState);
  void            Fire_AudioLanguageChange(long LangID);
  void            Fire_StatusChange(void);
  void            Fire_ScriptCommand(BSTR scType, BSTR Param);
  void            Fire_NewStream(void);
  void            Fire_Disconnect(long Result);
  void            Fire_Buffering(VARIANT_BOOL Start);
  void            Fire_Error(void);
  void            Fire_Warning(long WarningType, long Param, BSTR Description);
  void            Fire_EndOfStream(long Result);
  void            Fire_PositionChange(double oldPosition, double newPosition);
  void            Fire_MarkerHit(long MarkerNum);
  void            Fire_DurationUnitChange(long NewDurationUnit);
  void            Fire_CdromMediaChange(long CdromNum);
  void            Fire_PlaylistChange(LPDISPATCH Playlist, 
                                      Wmplib_tlb::WMPPlaylistChangeEventType change);
  void            Fire_CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change);
  void            Fire_CurrentPlaylistItemAvailable(BSTR bstrItemName);
  void            Fire_MediaChange(LPDISPATCH Item);
  void            Fire_CurrentMediaItemAvailable(BSTR bstrItemName);
  void            Fire_CurrentItemChange(LPDISPATCH pdispMedia);
  void            Fire_MediaCollectionChange(void);
  void            Fire_MediaCollectionAttributeStringAdded(BSTR bstrAttribName, BSTR bstrAttribVal);
  void            Fire_MediaCollectionAttributeStringRemoved(BSTR bstrAttribName, BSTR bstrAttribVal);
  void            Fire_MediaCollectionAttributeStringChanged(BSTR bstrAttribName, 
                                                             BSTR bstrOldAttribVal, 
                                                             BSTR bstrNewAttribVal);
  void            Fire_PlaylistCollectionChange(void);
  void            Fire_PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName);
  void            Fire_PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName);
  void            Fire_PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName, 
                                                              VARIANT_BOOL varfIsDeleted);
  void            Fire_ModeChange(BSTR ModeName, VARIANT_BOOL NewValue);
  void            Fire_MediaError(LPDISPATCH pMediaObject);
  void            Fire_OpenPlaylistSwitch(LPDISPATCH pItem);
  void            Fire_DomainChange(BSTR strDomain);
  void            Fire_SwitchedToPlayerApplication(void);
  void            Fire_SwitchedToControl(void);
  void            Fire_PlayerDockedStateChange(void);
  void            Fire_PlayerReconnect(void);
  void            Fire__Click(short nButton, short nShiftState, long fX, long fY);
  void            Fire_DoubleClick(short nButton, short nShiftState, long fX, long fY);
  void            Fire_KeyDown(short nKeyCode, short nShiftState);
  void            Fire_KeyPress(short nKeyAscii);
  void            Fire_KeyUp(short nKeyCode, short nShiftState);
  void            Fire_MouseDown(short nButton, short nShiftState, long fX, long fY);
  void            Fire_MouseMove(short nButton, short nShiftState, long fX, long fY);
  void            Fire_MouseUp(short nButton, short nShiftState, long fX, long fY);
  void            Fire_DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice);
  void            Fire_DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice);
  void            Fire_DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                          Wmplib_tlb::WMPDeviceStatus NewStatus);
  void            Fire_DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                             Wmplib_tlb::WMPSyncState NewState);
  void            Fire_DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice, LPDISPATCH pMedia);
  void            Fire_CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                                 HRESULT hrResult);
  void            Fire_CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip, 
                                           Wmplib_tlb::WMPRipState wmprs);
  void            Fire_CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip, LPDISPATCH pMedia);
  void            Fire_CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, 
                                            Wmplib_tlb::WMPBurnState wmpbs);
  void            Fire_CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, LPDISPATCH pMedia);
  void            Fire_CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, HRESULT hrError);
  void            Fire_LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary);
  void            Fire_LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary);
  void            Fire_FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss);
  void            Fire_StringCollectionChange(LPDISPATCH pdispStringCollection, 
                                              Wmplib_tlb::WMPStringCollectionChangeEventType change, 
                                              long lCollectionIndex);
  void            Fire_MediaCollectionMediaAdded(LPDISPATCH pdispMedia);
  void            Fire_MediaCollectionMediaRemoved(LPDISPATCH pdispMedia);
protected:
  _WMPOCXEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_OpenStateChange(long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OpenStateChange(NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlayStateChange(long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlayStateChange(NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_AudioLanguageChange(long LangID)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AudioLanguageChange(LangID);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_StatusChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StatusChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_ScriptCommand(BSTR scType, BSTR Param)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ScriptCommand(scType, Param);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_NewStream(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NewStream();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_Disconnect(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Disconnect(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_Buffering(VARIANT_BOOL Start)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Buffering(Start);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_Error(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_Warning(long WarningType, long Param, BSTR Description)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Warning(WarningType, Param, Description);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_EndOfStream(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndOfStream(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PositionChange(double oldPosition, double newPosition)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PositionChange(oldPosition, newPosition);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MarkerHit(long MarkerNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MarkerHit(MarkerNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DurationUnitChange(long NewDurationUnit)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DurationUnitChange(NewDurationUnit);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromMediaChange(long CdromNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromMediaChange(CdromNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlaylistChange(LPDISPATCH Playlist, 
                                                   Wmplib_tlb::WMPPlaylistChangeEventType change)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistChange(Playlist, change);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentPlaylistChange(change);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CurrentPlaylistItemAvailable(BSTR bstrItemName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentPlaylistItemAvailable(bstrItemName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaChange(LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaChange(Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CurrentMediaItemAvailable(BSTR bstrItemName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentMediaItemAvailable(bstrItemName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CurrentItemChange(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentItemChange(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionAttributeStringAdded(BSTR bstrAttribName, 
                                                                        BSTR bstrAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringAdded(bstrAttribName, bstrAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionAttributeStringRemoved(BSTR bstrAttribName, 
                                                                          BSTR bstrAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringRemoved(bstrAttribName, bstrAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionAttributeStringChanged(BSTR bstrAttribName, 
                                                                          BSTR bstrOldAttribVal, 
                                                                          BSTR bstrNewAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringChanged(bstrAttribName, bstrOldAttribVal, 
                                                           bstrNewAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlaylistCollectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistAdded(bstrPlaylistName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistRemoved(bstrPlaylistName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName, 
                                                                           VARIANT_BOOL varfIsDeleted)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistSetAsDeleted(bstrPlaylistName, varfIsDeleted);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_ModeChange(BSTR ModeName, VARIANT_BOOL NewValue)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ModeChange(ModeName, NewValue);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaError(LPDISPATCH pMediaObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaError(pMediaObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_OpenPlaylistSwitch(LPDISPATCH pItem)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OpenPlaylistSwitch(pItem);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DomainChange(BSTR strDomain)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DomainChange(strDomain);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_SwitchedToPlayerApplication(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SwitchedToPlayerApplication();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_SwitchedToControl(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SwitchedToControl();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlayerDockedStateChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlayerDockedStateChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_PlayerReconnect(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlayerReconnect();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire__Click(short nButton, short nShiftState, long fX, long fY)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj._Click(nButton, nShiftState, fX, fY);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DoubleClick(short nButton, short nShiftState, long fX, long fY)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DoubleClick(nButton, nShiftState, fX, fY);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_KeyDown(short nKeyCode, short nShiftState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(nKeyCode, nShiftState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_KeyPress(short nKeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(nKeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_KeyUp(short nKeyCode, short nShiftState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(nKeyCode, nShiftState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MouseDown(short nButton, short nShiftState, long fX, long fY)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(nButton, nShiftState, fX, fY);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MouseMove(short nButton, short nShiftState, long fX, long fY)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(nButton, nShiftState, fX, fY);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MouseUp(short nButton, short nShiftState, long fX, long fY)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(nButton, nShiftState, fX, fY);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DeviceConnect(Wmplib_tlb::IWMPSyncDevice* pDevice)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DeviceConnect(pDevice);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DeviceDisconnect(Wmplib_tlb::IWMPSyncDevice* pDevice)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DeviceDisconnect(pDevice);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DeviceStatusChange(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                                       Wmplib_tlb::WMPDeviceStatus NewStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DeviceStatusChange(pDevice, NewStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DeviceSyncStateChange(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                                          Wmplib_tlb::WMPSyncState NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DeviceSyncStateChange(pDevice, NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_DeviceSyncError(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                                    LPDISPATCH pMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DeviceSyncError(pDevice, pMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CreatePartnershipComplete(Wmplib_tlb::IWMPSyncDevice* pDevice, 
                                                              HRESULT hrResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CreatePartnershipComplete(pDevice, hrResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromRipStateChange(Wmplib_tlb::IWMPCdromRip* pCdromRip, 
                                                        Wmplib_tlb::WMPRipState wmprs)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromRipStateChange(pCdromRip, wmprs);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromRipMediaError(Wmplib_tlb::IWMPCdromRip* pCdromRip, 
                                                       LPDISPATCH pMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromRipMediaError(pCdromRip, pMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromBurnStateChange(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, 
                                                         Wmplib_tlb::WMPBurnState wmpbs)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromBurnStateChange(pCdromBurn, wmpbs);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromBurnMediaError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, 
                                                        LPDISPATCH pMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromBurnMediaError(pCdromBurn, pMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_CdromBurnError(Wmplib_tlb::IWMPCdromBurn* pCdromBurn, 
                                                   HRESULT hrError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromBurnError(pCdromBurn, hrError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_LibraryConnect(Wmplib_tlb::IWMPLibrary* pLibrary)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LibraryConnect(pLibrary);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_LibraryDisconnect(Wmplib_tlb::IWMPLibrary* pLibrary)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LibraryDisconnect(pLibrary);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_FolderScanStateChange(Wmplib_tlb::WMPFolderScanState wmpfss)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.FolderScanStateChange(wmpfss);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_StringCollectionChange(LPDISPATCH pdispStringCollection, 
                                                           Wmplib_tlb::WMPStringCollectionChangeEventType change, 
                                                           long lCollectionIndex)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StringCollectionChange(pdispStringCollection, change, lCollectionIndex);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionMediaAdded(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionMediaAdded(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WindowsMediaPlayer<T>::Fire_MediaCollectionMediaRemoved(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionMediaRemoved(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPButtonCtrl
// Event Interface : IWMPButtonCtrlEvents
// *********************************************************************//
template <class T>
class TEvents_WMPButtonCtrl : public IConnectionPointImpl<T,
                                                 &DIID_IWMPButtonCtrlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_onclick(void);
protected:
  IWMPButtonCtrlEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_WMPButtonCtrl<T>::Fire_onclick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onclick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPSliderCtrl
// Event Interface : IWMPSliderCtrlEvents
// *********************************************************************//
template <class T>
class TEvents_WMPSliderCtrl : public IConnectionPointImpl<T,
                                                 &DIID_IWMPSliderCtrlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_ondragbegin(void);
  HRESULT         Fire_ondragend(void);
  HRESULT         Fire_onpositionchange(void);
protected:
  IWMPSliderCtrlEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_WMPSliderCtrl<T>::Fire_ondragbegin(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondragbegin();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPSliderCtrl<T>::Fire_ondragend(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondragend();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPSliderCtrl<T>::Fire_onpositionchange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onpositionchange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPVideoCtrl
// Event Interface : IWMPVideoCtrlEvents
// *********************************************************************//
template <class T>
class TEvents_WMPVideoCtrl : public IConnectionPointImpl<T,
                                                 &DIID_IWMPVideoCtrlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_onvideostart(void);
  HRESULT         Fire_onvideoend(void);
protected:
  IWMPVideoCtrlEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_WMPVideoCtrl<T>::Fire_onvideostart(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onvideostart();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPVideoCtrl<T>::Fire_onvideoend(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onvideoend();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPRegionalButton
// Event Interface : IWMPRegionalButtonEvents
// *********************************************************************//
template <class T>
class TEvents_WMPRegionalButton : public IConnectionPointImpl<T,
                                                 &DIID_IWMPRegionalButtonEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_onblur(void);
  HRESULT         Fire_onfocus(void);
  HRESULT         Fire_onclick(void);
  HRESULT         Fire_ondblclick(void);
  HRESULT         Fire_onmousedown(void);
  HRESULT         Fire_onmouseup(void);
  HRESULT         Fire_onmousemove(void);
  HRESULT         Fire_onmouseover(void);
  HRESULT         Fire_onmouseout(void);
  HRESULT         Fire_onkeypress(void);
  HRESULT         Fire_onkeydown(void);
  HRESULT         Fire_onkeyup(void);
protected:
  IWMPRegionalButtonEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onblur(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onblur();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onfocus(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onfocus();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onclick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onclick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_ondblclick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondblclick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onmousedown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onmousedown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onmouseup(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onmouseup();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onmousemove(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onmousemove();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onmouseover(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onmouseover();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onmouseout(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onmouseout();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onkeypress(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onkeypress();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onkeydown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onkeydown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPRegionalButton<T>::Fire_onkeyup(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onkeyup();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPCustomSliderCtrl
// Event Interface : IWMPCustomSliderCtrlEvents
// *********************************************************************//
template <class T>
class TEvents_WMPCustomSliderCtrl : public IConnectionPointImpl<T,
                                                 &DIID_IWMPCustomSliderCtrlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_ondragbegin(void);
  HRESULT         Fire_ondragend(void);
  HRESULT         Fire_onpositionchange(void);
protected:
  IWMPCustomSliderCtrlEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_WMPCustomSliderCtrl<T>::Fire_ondragbegin(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondragbegin();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPCustomSliderCtrl<T>::Fire_ondragend(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondragend();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_WMPCustomSliderCtrl<T>::Fire_onpositionchange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onpositionchange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WMPCore
// Event Interface : _WMPCoreEvents
// *********************************************************************//
template <class T>
class TEvents_WMPCore : public IConnectionPointImpl<T,
                                                 &DIID__WMPCoreEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OpenStateChange(long NewState);
  void            Fire_PlayStateChange(long NewState);
  void            Fire_AudioLanguageChange(long LangID);
  void            Fire_StatusChange(void);
  void            Fire_ScriptCommand(BSTR scType, BSTR Param);
  void            Fire_NewStream(void);
  void            Fire_Disconnect(long Result);
  void            Fire_Buffering(VARIANT_BOOL Start);
  void            Fire_Error(void);
  void            Fire_Warning(long WarningType, long Param, BSTR Description);
  void            Fire_EndOfStream(long Result);
  void            Fire_PositionChange(double oldPosition, double newPosition);
  void            Fire_MarkerHit(long MarkerNum);
  void            Fire_DurationUnitChange(long NewDurationUnit);
  void            Fire_CdromMediaChange(long CdromNum);
  void            Fire_PlaylistChange(LPDISPATCH Playlist, 
                                      Wmplib_tlb::WMPPlaylistChangeEventType change);
  void            Fire_CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change);
  void            Fire_CurrentPlaylistItemAvailable(BSTR bstrItemName);
  void            Fire_MediaChange(LPDISPATCH Item);
  void            Fire_CurrentMediaItemAvailable(BSTR bstrItemName);
  void            Fire_CurrentItemChange(LPDISPATCH pdispMedia);
  void            Fire_MediaCollectionChange(void);
  void            Fire_MediaCollectionAttributeStringAdded(BSTR bstrAttribName, BSTR bstrAttribVal);
  void            Fire_MediaCollectionAttributeStringRemoved(BSTR bstrAttribName, BSTR bstrAttribVal);
  void            Fire_MediaCollectionAttributeStringChanged(BSTR bstrAttribName, 
                                                             BSTR bstrOldAttribVal, 
                                                             BSTR bstrNewAttribVal);
  void            Fire_PlaylistCollectionChange(void);
  void            Fire_PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName);
  void            Fire_PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName);
  void            Fire_PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName, 
                                                              VARIANT_BOOL varfIsDeleted);
  void            Fire_ModeChange(BSTR ModeName, VARIANT_BOOL NewValue);
  void            Fire_MediaError(LPDISPATCH pMediaObject);
  void            Fire_OpenPlaylistSwitch(LPDISPATCH pItem);
  void            Fire_DomainChange(BSTR strDomain);
  void            Fire_StringCollectionChange(LPDISPATCH pdispStringCollection, 
                                              Wmplib_tlb::WMPStringCollectionChangeEventType change, 
                                              long lCollectionIndex);
  void            Fire_MediaCollectionMediaAdded(LPDISPATCH pdispMedia);
  void            Fire_MediaCollectionMediaRemoved(LPDISPATCH pdispMedia);
protected:
  _WMPCoreEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_WMPCore<T>::Fire_OpenStateChange(long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OpenStateChange(NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlayStateChange(long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlayStateChange(NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_AudioLanguageChange(long LangID)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AudioLanguageChange(LangID);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_StatusChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StatusChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_ScriptCommand(BSTR scType, BSTR Param)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ScriptCommand(scType, Param);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_NewStream(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NewStream();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_Disconnect(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Disconnect(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_Buffering(VARIANT_BOOL Start)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Buffering(Start);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_Error(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_Warning(long WarningType, long Param, BSTR Description)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Warning(WarningType, Param, Description);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_EndOfStream(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndOfStream(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PositionChange(double oldPosition, double newPosition)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PositionChange(oldPosition, newPosition);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MarkerHit(long MarkerNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MarkerHit(MarkerNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_DurationUnitChange(long NewDurationUnit)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DurationUnitChange(NewDurationUnit);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_CdromMediaChange(long CdromNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CdromMediaChange(CdromNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlaylistChange(LPDISPATCH Playlist, 
                                        Wmplib_tlb::WMPPlaylistChangeEventType change)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistChange(Playlist, change);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_CurrentPlaylistChange(Wmplib_tlb::WMPPlaylistChangeEventType change)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentPlaylistChange(change);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_CurrentPlaylistItemAvailable(BSTR bstrItemName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentPlaylistItemAvailable(bstrItemName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaChange(LPDISPATCH Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaChange(Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_CurrentMediaItemAvailable(BSTR bstrItemName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentMediaItemAvailable(bstrItemName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_CurrentItemChange(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CurrentItemChange(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionAttributeStringAdded(BSTR bstrAttribName, BSTR bstrAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringAdded(bstrAttribName, bstrAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionAttributeStringRemoved(BSTR bstrAttribName, 
                                                               BSTR bstrAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringRemoved(bstrAttribName, bstrAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionAttributeStringChanged(BSTR bstrAttribName, 
                                                               BSTR bstrOldAttribVal, 
                                                               BSTR bstrNewAttribVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionAttributeStringChanged(bstrAttribName, bstrOldAttribVal, 
                                                           bstrNewAttribVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlaylistCollectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlaylistCollectionPlaylistAdded(BSTR bstrPlaylistName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistAdded(bstrPlaylistName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlaylistCollectionPlaylistRemoved(BSTR bstrPlaylistName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistRemoved(bstrPlaylistName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_PlaylistCollectionPlaylistSetAsDeleted(BSTR bstrPlaylistName, 
                                                                VARIANT_BOOL varfIsDeleted)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlaylistCollectionPlaylistSetAsDeleted(bstrPlaylistName, varfIsDeleted);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_ModeChange(BSTR ModeName, VARIANT_BOOL NewValue)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ModeChange(ModeName, NewValue);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaError(LPDISPATCH pMediaObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaError(pMediaObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_OpenPlaylistSwitch(LPDISPATCH pItem)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OpenPlaylistSwitch(pItem);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_DomainChange(BSTR strDomain)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DomainChange(strDomain);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_StringCollectionChange(LPDISPATCH pdispStringCollection, 
                                                Wmplib_tlb::WMPStringCollectionChangeEventType change, 
                                                long lCollectionIndex)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StringCollectionChange(pdispStringCollection, change, lCollectionIndex);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionMediaAdded(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionMediaAdded(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WMPCore<T>::Fire_MediaCollectionMediaRemoved(LPDISPATCH pdispMedia)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaCollectionMediaRemoved(pdispMedia);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Wmplib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Wmplib_tlb;
#endif

#pragma option pop

#endif // WMPLib_TLBH
